!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACL_TYPE_PRIVATE	security/security-common.hpp	/^  ACL_TYPE_PRIVATE$/;"	e	enum:ndn::AclType
ACL_TYPE_PUBLIC	security/security-common.hpp	/^  ACL_TYPE_PUBLIC,$/;"	e	enum:ndn::AclType
ADDR_LEN	util/ethernet.hpp	/^const size_t ADDR_LEN     = 6;      \/\/\/< Octets in one Ethernet address$/;"	m	namespace:ndn::util::ethernet
AES_KEY_SIZES	security/key-params.cpp	/^static const uint32_t AES_KEY_SIZES[] = {64, 128, 256};$/;"	m	namespace:ndn	file:
AcceptContinuation	mgmt/dispatcher.hpp	/^typedef std::function<void(const std::string& requester)> AcceptContinuation;$/;"	t	namespace:ndn::mgmt
AclType	security/security-common.hpp	/^enum AclType {$/;"	g	namespace:ndn
AdditionalDescription	encoding/tlv.hpp	/^  AdditionalDescription = 258,$/;"	e	enum:ndn::tlv::__anon5
AdditionalDescription	security/additional-description.cpp	/^AdditionalDescription::AdditionalDescription(const Block& block)$/;"	f	class:ndn::security::AdditionalDescription
AdditionalDescription	security/additional-description.hpp	/^class AdditionalDescription$/;"	c	namespace:ndn::security
Address	util/ethernet.cpp	/^Address::Address()$/;"	f	class:ndn::util::ethernet::Address
Address	util/ethernet.cpp	/^Address::Address(const uint8_t octets[ADDR_LEN])$/;"	f	class:ndn::util::ethernet::Address
Address	util/ethernet.cpp	/^Address::Address(uint8_t a1, uint8_t a2, uint8_t a3, uint8_t a4, uint8_t a5, uint8_t a6)$/;"	f	class:ndn::util::ethernet::Address
Address	util/ethernet.hpp	/^class Address : public std::array<uint8_t, ADDR_LEN>$/;"	c	namespace:ndn::util::ethernet
AddressSelector	util/dns.hpp	/^typedef function<bool (const boost::asio::ip::address& address)> AddressSelector;$/;"	t	namespace:ndn::dns
AesKeyParams	security/key-params.hpp	/^typedef SimpleSymmetricKeyParams<AesKeyParamsInfo> AesKeyParams;$/;"	t	namespace:ndn
AesKeyParamsInfo	security/key-params.hpp	/^class AesKeyParamsInfo$/;"	c	namespace:ndn
AnchorList	security/validator-config.hpp	/^  typedef std::map<Name, shared_ptr<IdentityCertificate> > AnchorList;$/;"	t	class:ndn::ValidatorConfig
Any	encoding/tlv.hpp	/^  Any           = 19,$/;"	e	enum:ndn::tlv::__anon4
AnyAddress	util/dns.hpp	/^struct AnyAddress$/;"	s	namespace:ndn::dns
AppPrivateBlock1	encoding/tlv.hpp	/^  AppPrivateBlock1 = 128,$/;"	e	enum:ndn::tlv::__anon4
AppPrivateBlock2	encoding/tlv.hpp	/^  AppPrivateBlock2 = 32767$/;"	e	enum:ndn::tlv::__anon4
ArgumentError	management/nfd-control-command.hpp	/^    ArgumentError(const std::string& what)$/;"	f	class:ndn::nfd::ControlCommand::ArgumentError
ArgumentError	management/nfd-control-command.hpp	/^  class ArgumentError : public std::invalid_argument$/;"	c	class:ndn::nfd::ControlCommand
Authorization	mgmt/dispatcher.hpp	/^                           const RejectContinuation& reject)> Authorization;$/;"	t	namespace:ndn::mgmt
AuthorizationAcceptedCallback	mgmt/dispatcher.hpp	/^                             const ControlParameters*)> AuthorizationAcceptedCallback;$/;"	t	class:ndn::mgmt::Dispatcher
AuthorizationRejectedCallback	mgmt/dispatcher.hpp	/^                             const Interest& interest)> AuthorizationRejectedCallback;$/;"	t	class:ndn::mgmt::Dispatcher
BASE_64	util/io.hpp	/^  BASE_64,$/;"	e	enum:ndn::io::IoEncoding
BERDecodeTime	encoding/cryptopp/asn_ext.cpp	/^BERDecodeTime(CryptoPP::BufferedTransformation& bt,$/;"	f	namespace:ndn
BOOST_BIND_NO_PLACEHOLDERS	common.hpp	109;"	d
BOOST_CONCEPT_USAGE	lp/field.hpp	/^  BOOST_CONCEPT_USAGE(Field)$/;"	f	struct:ndn::lp::Field
BOOST_CONCEPT_USAGE	util/concepts.hpp	/^  BOOST_CONCEPT_USAGE(Hashable)$/;"	f	class:ndn::Hashable
BOOST_CONCEPT_USAGE	util/concepts.hpp	/^  BOOST_CONCEPT_USAGE(WireDecodable)$/;"	f	class:ndn::WireDecodable
BOOST_CONCEPT_USAGE	util/concepts.hpp	/^  BOOST_CONCEPT_USAGE(WireEncodable)$/;"	f	class:ndn::WireEncodable
BOOST_CONCEPT_USAGE	util/concepts.hpp	/^  BOOST_CONCEPT_USAGE(WireEncodableWithEncodingBuffer)$/;"	f	class:ndn::WireEncodableWithEncodingBuffer
BOOST_REGEXP_MARK_COUNT_CORRECTION	util/regex/regex-component-matcher.hpp	/^static const size_t BOOST_REGEXP_MARK_COUNT_CORRECTION =$/;"	m	namespace:ndn
Base	detail/container-with-on-empty-signal.hpp	/^  typedef std::list<T> Base;$/;"	t	class:ndn::ContainerWithOnEmptySignal
Base	lp/field.hpp	/^class Base$/;"	c	namespace:ndn::lp::field_location_tags
Block	encoding/block.cpp	/^Block::Block()$/;"	f	class:ndn::Block
Block	encoding/block.cpp	/^Block::Block(const Block& block,$/;"	f	class:ndn::Block
Block	encoding/block.cpp	/^Block::Block(const ConstBufferPtr& buffer)$/;"	f	class:ndn::Block
Block	encoding/block.cpp	/^Block::Block(const ConstBufferPtr& buffer,$/;"	f	class:ndn::Block
Block	encoding/block.cpp	/^Block::Block(const ConstBufferPtr& wire,$/;"	f	class:ndn::Block
Block	encoding/block.cpp	/^Block::Block(const EncodingBuffer& buffer)$/;"	f	class:ndn::Block
Block	encoding/block.cpp	/^Block::Block(const uint8_t* buffer, size_t maxlength)$/;"	f	class:ndn::Block
Block	encoding/block.cpp	/^Block::Block(const void* bufferX, size_t maxlength)$/;"	f	class:ndn::Block
Block	encoding/block.cpp	/^Block::Block(uint32_t type)$/;"	f	class:ndn::Block
Block	encoding/block.cpp	/^Block::Block(uint32_t type, const Block& value)$/;"	f	class:ndn::Block
Block	encoding/block.cpp	/^Block::Block(uint32_t type, const ConstBufferPtr& value)$/;"	f	class:ndn::Block
Block	encoding/block.hpp	/^class Block$/;"	c	namespace:ndn
BlockSequence	transport/stream-transport.hpp	/^  typedef std::list<Block> BlockSequence;$/;"	t	class:ndn::StreamTransportImpl
BoostResolver	util/dns.cpp	/^typedef boost::asio::ip::basic_resolver<boost::asio::ip::udp> BoostResolver;$/;"	t	namespace:ndn::dns	file:
Buffer	encoding/buffer.cpp	/^Buffer::Buffer()$/;"	f	class:ndn::Buffer
Buffer	encoding/buffer.cpp	/^Buffer::Buffer(const void* buf, size_t length)$/;"	f	class:ndn::Buffer
Buffer	encoding/buffer.cpp	/^Buffer::Buffer(size_t size)$/;"	f	class:ndn::Buffer
Buffer	encoding/buffer.hpp	/^  Buffer(InputIterator first, InputIterator last)$/;"	f	class:ndn::Buffer
Buffer	encoding/buffer.hpp	/^class Buffer : public std::vector<uint8_t>$/;"	c	namespace:ndn
BufferPtr	encoding/buffer.hpp	/^typedef shared_ptr<Buffer> BufferPtr;$/;"	t	namespace:ndn
CFReleaser	security/sec-tpm-osx.cpp	/^  CFReleaser()$/;"	f	class:ndn::CFReleaser
CFReleaser	security/sec-tpm-osx.cpp	/^  CFReleaser(const CFReleaser& inReleaser)$/;"	f	class:ndn::CFReleaser
CFReleaser	security/sec-tpm-osx.cpp	/^  CFReleaser(const T& typeRef)$/;"	f	class:ndn::CFReleaser
CFReleaser	security/sec-tpm-osx.cpp	/^class CFReleaser$/;"	c	namespace:ndn	file:
CONGESTION	lp/nack-header.hpp	/^  CONGESTION = 50,$/;"	m	class:ndn::lp::NackReason
CONTROL_PARAMETER_COST	management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_COST,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_EXPIRATION_PERIOD	management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_EXPIRATION_PERIOD,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_FACE_ID	management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_FACE_ID,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_FACE_PERSISTENCY	management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_FACE_PERSISTENCY,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_FIELD	management/nfd-control-parameters.hpp	/^const std::string CONTROL_PARAMETER_FIELD[CONTROL_PARAMETER_UBOUND] = {$/;"	m	namespace:ndn::nfd
CONTROL_PARAMETER_FLAGS	management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_FLAGS,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_LOCAL_CONTROL_FEATURE	management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_LOCAL_CONTROL_FEATURE,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_NAME	management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_NAME,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_ORIGIN	management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_ORIGIN,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_STRATEGY	management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_STRATEGY,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_UBOUND	management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_UBOUND$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_URI	management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_URI,$/;"	e	enum:ndn::nfd::ControlParameterField
CRC_LEN	util/ethernet.hpp	/^const size_t CRC_LEN      = 4;      \/\/\/< Octets in Ethernet frame check sequence$/;"	m	namespace:ndn::util::ethernet
Cache	security/certificate-cache-ttl.hpp	/^  typedef std::map<Name, std::pair<shared_ptr<const IdentityCertificate>, EventId> > Cache;$/;"	t	class:ndn::CertificateCacheTtl
Cache	util/in-memory-storage.hpp	/^  > Cache;$/;"	t	class:ndn::util::InMemoryStorage
CachePolicy	lp/cache-policy.cpp	/^CachePolicy::CachePolicy()$/;"	f	class:ndn::lp::CachePolicy
CachePolicy	lp/cache-policy.cpp	/^CachePolicy::CachePolicy(const Block& block)$/;"	f	class:ndn::lp::CachePolicy
CachePolicy	lp/cache-policy.hpp	/^class CachePolicy$/;"	c	class:ndn::lp::CachePolicyType
CachePolicy	lp/tlv.hpp	/^  CachePolicy = 820,$/;"	e	enum:ndn::lp::tlv::__anon6
CachePolicyField	lp/fields.hpp	/^                          tlv::CachePolicy> CachePolicyField;$/;"	t	namespace:ndn::lp
CachePolicyType	lp/cache-policy.hpp	/^enum class CachePolicyType {$/;"	c	namespace:ndn::lp
CachePolicyType	lp/tlv.hpp	/^  CachePolicyType = 821,$/;"	e	enum:ndn::lp::tlv::__anon6
CachingPolicy	encoding/tlv-nfd.hpp	/^  CachingPolicy      = 83,$/;"	e	enum:ndn::tlv::nfd::__anon3
CanonizeFailureCallback	util/face-uri.hpp	/^  typedef function<void(const std::string& reason)> CanonizeFailureCallback;$/;"	t	class:ndn::util::FaceUri
CanonizeProvider	util/face-uri.cpp	/^class CanonizeProvider : noncopyable$/;"	c	namespace:ndn::util	file:
CanonizeProviderTable	util/face-uri.cpp	/^typedef std::map<std::string, shared_ptr<CanonizeProvider> > CanonizeProviderTable;$/;"	t	namespace:ndn::util	file:
CanonizeProviderTableInitializer	util/face-uri.cpp	/^  CanonizeProviderTableInitializer(CanonizeProviderTable& providerTable)$/;"	f	class:ndn::util::CanonizeProviderTableInitializer
CanonizeProviderTableInitializer	util/face-uri.cpp	/^class CanonizeProviderTableInitializer$/;"	c	namespace:ndn::util	file:
CanonizeProviders	util/face-uri.cpp	/^  > CanonizeProviders;$/;"	t	namespace:ndn::util	file:
CanonizeSuccessCallback	util/face-uri.hpp	/^  typedef function<void(const FaceUri&)> CanonizeSuccessCallback;$/;"	t	class:ndn::util::FaceUri
Certificate	security/certificate.cpp	/^Certificate::Certificate()$/;"	f	class:ndn::Certificate
Certificate	security/certificate.cpp	/^Certificate::Certificate(const Block& block)$/;"	f	class:ndn::Certificate
Certificate	security/certificate.cpp	/^Certificate::Certificate(const Data& data)$/;"	f	class:ndn::Certificate
Certificate	security/certificate.hpp	/^class Certificate : public Data$/;"	c	namespace:ndn
CertificateCache	security/certificate-cache.hpp	/^class CertificateCache : noncopyable$/;"	c	namespace:ndn
CertificateCacheTtl	security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::CertificateCacheTtl(boost::asio::io_service& io,$/;"	f	class:ndn::CertificateCacheTtl
CertificateCacheTtl	security/certificate-cache-ttl.hpp	/^class CertificateCacheTtl : public CertificateCache$/;"	c	namespace:ndn
CertificateContainer	security/certificate-container.cpp	/^CertificateContainer::CertificateContainer()$/;"	f	class:ndn::security::CertificateContainer
CertificateContainer	security/certificate-container.cpp	/^CertificateContainer::CertificateContainer(std::set<Name>&& certNames,$/;"	f	class:ndn::security::CertificateContainer
CertificateContainer	security/certificate-container.hpp	/^class CertificateContainer$/;"	c	namespace:ndn::security
CertificateExtension	security/certificate-extension.hpp	/^  CertificateExtension(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::CertificateExtension
CertificateExtension	security/certificate-extension.hpp	/^  CertificateExtension(const OID& oid, const bool isCritical, const Buffer& value)$/;"	f	class:ndn::CertificateExtension
CertificateExtension	security/certificate-extension.hpp	/^  CertificateExtension(const OID& oid, const bool isCritical,$/;"	f	class:ndn::CertificateExtension
CertificateExtension	security/certificate-extension.hpp	/^class CertificateExtension$/;"	c	namespace:ndn
CertificateList	security/validator-config.hpp	/^  typedef std::list<shared_ptr<IdentityCertificate> > CertificateList;$/;"	t	class:ndn::ValidatorConfig
CertificatePackage	encoding/tlv-security.hpp	/^  CertificatePackage = 130$/;"	e	enum:ndn::tlv::security::__anon1
CertificateSubjectDescription	security/certificate-subject-description.hpp	/^  CertificateSubjectDescription(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::CertificateSubjectDescription
CertificateSubjectDescription	security/certificate-subject-description.hpp	/^  CertificateSubjectDescription(const OID& oid, const std::string& value)$/;"	f	class:ndn::CertificateSubjectDescription
CertificateSubjectDescription	security/certificate-subject-description.hpp	/^class CertificateSubjectDescription$/;"	c	namespace:ndn
ChannelStatus	encoding/tlv-nfd.hpp	/^  ChannelStatus         = 130,$/;"	e	enum:ndn::tlv::nfd::__anon2
ChannelStatus	management/nfd-channel-status.cpp	/^ChannelStatus::ChannelStatus()$/;"	f	class:ndn::nfd::ChannelStatus
ChannelStatus	management/nfd-channel-status.cpp	/^ChannelStatus::ChannelStatus(const Block& payload)$/;"	f	class:ndn::nfd::ChannelStatus
ChannelStatus	management/nfd-channel-status.hpp	/^class ChannelStatus$/;"	c	namespace:ndn::nfd
Checker	security/conf/checker.hpp	/^class Checker$/;"	c	namespace:ndn::security::conf
CheckerFactory	security/conf/checker.hpp	/^class CheckerFactory$/;"	c	namespace:ndn::security::conf
CheckerList	security/conf/rule.hpp	/^  typedef std::vector<shared_ptr<Checker> > CheckerList;$/;"	t	class:ndn::security::conf::Rule
ChildSelector	encoding/tlv.hpp	/^  ChildSelector = 17,$/;"	e	enum:ndn::tlv::__anon4
CleanupEntry	util/in-memory-storage-lfu.hpp	/^  struct CleanupEntry$/;"	s	class:ndn::util::InMemoryStorageLfu
CleanupIndex	util/in-memory-storage-fifo.hpp	/^  > CleanupIndex;$/;"	t	class:ndn::util::InMemoryStorageFifo
CleanupIndex	util/in-memory-storage-lfu.hpp	/^  > CleanupIndex;$/;"	t	class:ndn::util::InMemoryStorageLfu
CleanupIndex	util/in-memory-storage-lru.hpp	/^  > CleanupIndex;$/;"	t	class:ndn::util::InMemoryStorageLru
CommandContinuation	mgmt/dispatcher.hpp	/^typedef std::function<void(const ControlResponse& resp)> CommandContinuation;$/;"	t	namespace:ndn::mgmt
CommandFailCallback	management/nfd-controller.hpp	/^  typedef function<void(uint32_t\/*code*\/,const std::string&\/*reason*\/)> CommandFailCallback;$/;"	t	class:ndn::nfd::Controller
CommandInterestGenerator	util/command-interest-generator.hpp	/^  CommandInterestGenerator()$/;"	f	class:ndn::CommandInterestGenerator
CommandInterestGenerator	util/command-interest-generator.hpp	/^class CommandInterestGenerator$/;"	c	namespace:ndn
CommandInterestValidator	util/command-interest-validator.hpp	/^  CommandInterestValidator(const time::milliseconds& graceInterval =$/;"	f	class:ndn::CommandInterestValidator
CommandInterestValidator	util/command-interest-validator.hpp	/^class CommandInterestValidator : public Validator$/;"	c	namespace:ndn
CommandOptions	management/nfd-command-options.cpp	/^CommandOptions::CommandOptions()$/;"	f	class:ndn::nfd::CommandOptions
CommandOptions	management/nfd-command-options.hpp	/^class CommandOptions$/;"	c	namespace:ndn::nfd
CommandSucceedCallback	management/nfd-controller.hpp	/^  typedef function<void(const ControlParameters&)> CommandSucceedCallback;$/;"	t	class:ndn::nfd::Controller
CompleteCallback	util/segment-fetcher.hpp	/^  typedef function<void (const ConstBufferPtr& data)> CompleteCallback;$/;"	t	class:ndn::util::SegmentFetcher
Component	name-component.cpp	/^Component::Component()$/;"	f	class:ndn::name::Component
Component	name-component.cpp	/^Component::Component(const Block& wire)$/;"	f	class:ndn::name::Component
Component	name-component.cpp	/^Component::Component(const Buffer& value)$/;"	f	class:ndn::name::Component
Component	name-component.cpp	/^Component::Component(const ConstBufferPtr& buffer)$/;"	f	class:ndn::name::Component
Component	name-component.cpp	/^Component::Component(const char* str)$/;"	f	class:ndn::name::Component
Component	name-component.cpp	/^Component::Component(const std::string& str)$/;"	f	class:ndn::name::Component
Component	name-component.cpp	/^Component::Component(const uint8_t* value, size_t valueLen)$/;"	f	class:ndn::name::Component
Component	name-component.hpp	/^Component::Component(Iterator first, Iterator last)$/;"	f	class:ndn::name::Component
Component	name-component.hpp	/^class Component : public Block$/;"	c	namespace:ndn::name
Component	name.hpp	/^  typedef name::Component Component;$/;"	t	class:ndn::Name
ComponentsSet	util/regex/regex-component-set-matcher.hpp	/^  typedef std::set<shared_ptr<RegexComponentMatcher> > ComponentsSet;$/;"	t	class:ndn::RegexComponentSetMatcher
ConfigFile	util/config-file.cpp	/^ConfigFile::ConfigFile()$/;"	f	class:ndn::ConfigFile
ConfigFile	util/config-file.hpp	/^class ConfigFile : noncopyable$/;"	c	namespace:ndn
ConfigSection	security/conf/common.hpp	/^typedef boost::property_tree::ptree ConfigSection;$/;"	t	namespace:ndn::security::conf
Connection	util/signal-connection.cpp	/^Connection::Connection()$/;"	f	class:ndn::util::signal::Connection
Connection	util/signal-connection.cpp	/^Connection::Connection(weak_ptr<function<void()>> disconnect)$/;"	f	class:ndn::util::signal::Connection
Connection	util/signal-connection.hpp	/^class Connection$/;"	c	namespace:ndn::util::signal
ConstBufferPtr	encoding/buffer.hpp	/^typedef shared_ptr<const Buffer> ConstBufferPtr;$/;"	t	namespace:ndn
ContainerWithOnEmptySignal	detail/container-with-on-empty-signal.hpp	/^class ContainerWithOnEmptySignal$/;"	c	namespace:ndn
Content	encoding/tlv.hpp	/^  Content       = 21,$/;"	e	enum:ndn::tlv::__anon4
ContentType	encoding/tlv.hpp	/^  ContentType     = 24,$/;"	e	enum:ndn::tlv::__anon4
ContentTypeValue	encoding/tlv.hpp	/^enum ContentTypeValue {$/;"	g	namespace:ndn::tlv
ContentType_Blob	encoding/tlv.hpp	/^  ContentType_Blob = 0,$/;"	e	enum:ndn::tlv::ContentTypeValue
ContentType_Key	encoding/tlv.hpp	/^  ContentType_Key = 2,$/;"	e	enum:ndn::tlv::ContentTypeValue
ContentType_Link	encoding/tlv.hpp	/^  ContentType_Link = 1,$/;"	e	enum:ndn::tlv::ContentTypeValue
ContentType_Nack	encoding/tlv.hpp	/^  ContentType_Nack = 3$/;"	e	enum:ndn::tlv::ContentTypeValue
ControlCommand	management/nfd-control-command.cpp	/^ControlCommand::ControlCommand(const std::string& module, const std::string& verb)$/;"	f	class:ndn::nfd::ControlCommand
ControlCommand	management/nfd-control-command.hpp	/^class ControlCommand : noncopyable$/;"	c	namespace:ndn::nfd
ControlCommandHandler	mgmt/dispatcher.hpp	/^                           const CommandContinuation& done)> ControlCommandHandler;$/;"	t	namespace:ndn::mgmt
ControlParameterField	management/nfd-control-parameters.hpp	/^enum ControlParameterField {$/;"	g	namespace:ndn::nfd
ControlParameters	encoding/tlv-nfd.hpp	/^  ControlParameters   = 104,$/;"	e	enum:ndn::tlv::nfd::__anon2
ControlParameters	management/nfd-control-parameters.cpp	/^ControlParameters::ControlParameters()$/;"	f	class:ndn::nfd::ControlParameters
ControlParameters	management/nfd-control-parameters.cpp	/^ControlParameters::ControlParameters(const Block& block)$/;"	f	class:ndn::nfd::ControlParameters
ControlParameters	management/nfd-control-parameters.hpp	/^class ControlParameters : public ndn::mgmt::ControlParameters$/;"	c	namespace:ndn::nfd
ControlParameters	mgmt/control-parameters.hpp	/^class ControlParameters$/;"	c	namespace:ndn::mgmt
ControlParametersParser	mgmt/dispatcher.hpp	/^  ControlParametersParser;$/;"	t	class:ndn::mgmt::Dispatcher
ControlResponse	encoding/tlv-nfd.hpp	/^  ControlResponse = 101,$/;"	e	enum:ndn::tlv::nfd::__anon2
ControlResponse	management/nfd-control-response.hpp	/^typedef ndn::mgmt::ControlResponse ControlResponse;$/;"	t	namespace:ndn::nfd
ControlResponse	mgmt/control-response.cpp	/^ControlResponse::ControlResponse()$/;"	f	class:ndn::mgmt::ControlResponse
ControlResponse	mgmt/control-response.cpp	/^ControlResponse::ControlResponse(const Block& block)$/;"	f	class:ndn::mgmt::ControlResponse
ControlResponse	mgmt/control-response.cpp	/^ControlResponse::ControlResponse(uint32_t code, const std::string& text)$/;"	f	class:ndn::mgmt::ControlResponse
ControlResponse	mgmt/control-response.hpp	/^class ControlResponse$/;"	c	namespace:ndn::mgmt
Controller	management/nfd-controller.cpp	/^Controller::Controller(Face& face, KeyChain& keyChain)$/;"	f	class:ndn::nfd::Controller
Controller	management/nfd-controller.hpp	/^class Controller : noncopyable$/;"	c	namespace:ndn::nfd
Cost	encoding/tlv-nfd.hpp	/^  Cost                = 106,$/;"	e	enum:ndn::tlv::nfd::__anon2
CryptoPP	encoding/oid.hpp	/^namespace CryptoPP {$/;"	n
CryptoPP	security/certificate-extension.hpp	/^namespace CryptoPP {$/;"	n
CryptoPP	security/certificate-subject-description.hpp	/^namespace CryptoPP {$/;"	n
CryptoPP	security/public-key.hpp	/^namespace CryptoPP {$/;"	n
CurrentTimestamp	encoding/tlv-nfd.hpp	/^  CurrentTimestamp     = 130,$/;"	e	enum:ndn::tlv::nfd::__anon2
CustomClock	util/time-custom-clock.hpp	/^class CustomClock$/;"	c	namespace:ndn::time
CustomSteadyClock	util/time-custom-clock.hpp	/^typedef CustomClock<steady_clock> CustomSteadyClock;$/;"	t	namespace:ndn::time
CustomSystemClock	util/time-custom-clock.hpp	/^typedef CustomClock<system_clock> CustomSystemClock;$/;"	t	namespace:ndn::time
CustomizedChecker	security/conf/checker.hpp	/^  CustomizedChecker(uint32_t sigType,$/;"	f	class:ndn::security::conf::CustomizedChecker
CustomizedChecker	security/conf/checker.hpp	/^class CustomizedChecker : public Checker$/;"	c	namespace:ndn::security::conf
DATA_HAS_NO_SEGMENT	util/segment-fetcher.hpp	/^    DATA_HAS_NO_SEGMENT = 2,$/;"	e	enum:ndn::util::SegmentFetcher::ErrorCode
DECLARE_SIGNAL_EMIT	util/signal-emit.hpp	59;"	d
DEFAULT_CERTIFICATE_CACHE	security/validator-config.cpp	/^const shared_ptr<CertificateCache> ValidatorConfig::DEFAULT_CERTIFICATE_CACHE;$/;"	m	class:ndn::ValidatorConfig	file:
DEFAULT_CERTIFICATE_CACHE	security/validator-config.hpp	/^  static const shared_ptr<CertificateCache> DEFAULT_CERTIFICATE_CACHE;$/;"	m	class:ndn::ValidatorConfig
DEFAULT_CERTIFICATE_CACHE	security/validator-regex.cpp	/^const shared_ptr<CertificateCache> ValidatorRegex::DEFAULT_CERTIFICATE_CACHE;$/;"	m	class:ndn::ValidatorRegex	file:
DEFAULT_CERTIFICATE_CACHE	security/validator-regex.hpp	/^  static const shared_ptr<CertificateCache> DEFAULT_CERTIFICATE_CACHE;$/;"	m	class:ndn::ValidatorRegex
DEFAULT_CERTIFICATE_NAME	util/command-interest-generator.hpp	/^  static const Name DEFAULT_CERTIFICATE_NAME;$/;"	m	class:ndn::CommandInterestGenerator
DEFAULT_GRACE_INTERVAL	security/validator-config.hpp	/^  static const time::milliseconds DEFAULT_GRACE_INTERVAL;$/;"	m	class:ndn::ValidatorConfig
DEFAULT_INTEREST_LIFETIME	interest.hpp	/^const time::milliseconds DEFAULT_INTEREST_LIFETIME = time::milliseconds(4000);$/;"	m	namespace:ndn
DEFAULT_KEY_PARAMS	security/key-chain.cpp	/^const RsaKeyParams KeyChain::DEFAULT_KEY_PARAMS;$/;"	m	class:ndn::security::KeyChain	file:
DEFAULT_KEY_PARAMS	security/key-chain.hpp	/^  static const RsaKeyParams DEFAULT_KEY_PARAMS;$/;"	m	class:ndn::security::KeyChain
DEFAULT_KEY_TIMESTAMP_TTL	security/validator-config.cpp	/^const time::system_clock::Duration ValidatorConfig::DEFAULT_KEY_TIMESTAMP_TTL = time::hours(1);$/;"	m	class:ndn::ValidatorConfig	file:
DEFAULT_KEY_TIMESTAMP_TTL	security/validator-config.hpp	/^  static const time::system_clock::Duration DEFAULT_KEY_TIMESTAMP_TTL;$/;"	m	class:ndn::ValidatorConfig
DEFAULT_OPTIONS	util/dummy-client-face.hpp	/^  static const Options DEFAULT_OPTIONS;$/;"	m	class:ndn::util::DummyClientFace
DEFAULT_PIB_SCHEME	security/key-chain.cpp	/^const std::string DEFAULT_PIB_SCHEME = "pib-sqlite3";$/;"	m	namespace:ndn::security	file:
DEFAULT_PREFIX	management/nfd-command-options.hpp	/^  static const Name DEFAULT_PREFIX;$/;"	m	class:ndn::nfd::CommandOptions
DEFAULT_PREFIX	security/key-chain.hpp	/^  static const Name DEFAULT_PREFIX;$/;"	m	class:ndn::security::KeyChain
DEFAULT_SIGNING_INFO	security/key-chain.hpp	/^  static const SigningInfo DEFAULT_SIGNING_INFO;$/;"	m	class:ndn::security::KeyChain
DEFAULT_STATUS_DATASET_FRESHNESS_PERIOD	mgmt/status-dataset-context.cpp	/^const time::milliseconds DEFAULT_STATUS_DATASET_FRESHNESS_PERIOD = time::milliseconds(1000);$/;"	m	namespace:ndn::mgmt	file:
DEFAULT_TIMEOUT	management/nfd-command-options.hpp	/^  static const time::milliseconds DEFAULT_TIMEOUT;$/;"	m	class:ndn::nfd::CommandOptions
DEFAULT_TPM_SCHEME	security/key-chain.cpp	/^const std::string DEFAULT_TPM_SCHEME = "tpm-file";$/;"	m	namespace:ndn::security	file:
DEFAULT_TPM_SCHEME	security/key-chain.cpp	/^const std::string DEFAULT_TPM_SCHEME = "tpm-osxkeychain";$/;"	m	namespace:ndn::security	file:
DEPRECATED	common.hpp	79;"	d
DEPRECATED	common.hpp	81;"	d
DEPRECATED	common.hpp	84;"	d
DEPRECATED	encoding/block.hpp	/^  DEPRECATED($/;"	f	class:ndn::Block
DEPRECATED	name-component.hpp	/^  DEPRECATED($/;"	f	class:ndn::name::Component
DEREncodeGeneralTime	encoding/cryptopp/asn_ext.cpp	/^DEREncodeGeneralTime(CryptoPP::BufferedTransformation& bt,$/;"	f	namespace:ndn
DIGEST_ALGORITHM_SHA256	security/security-common.hpp	/^  DIGEST_ALGORITHM_SHA256$/;"	e	enum:ndn::DigestAlgorithm
DIGEST_SHA256_IDENTITY	security/key-chain.hpp	/^  static const Name DIGEST_SHA256_IDENTITY;$/;"	m	class:ndn::security::KeyChain
DUPLICATE	lp/nack-header.hpp	/^  DUPLICATE = 100,$/;"	m	class:ndn::lp::NackReason
Data	data.cpp	/^Data::Data()$/;"	f	class:ndn::Data
Data	data.cpp	/^Data::Data(const Block& wire)$/;"	f	class:ndn::Data
Data	data.cpp	/^Data::Data(const Name& name)$/;"	f	class:ndn::Data
Data	data.hpp	/^class Data : public TagHost, public enable_shared_from_this<Data>$/;"	c	namespace:ndn
Data	encoding/tlv.hpp	/^  Data          = 6,$/;"	e	enum:ndn::tlv::__anon4
DataBlockFast	encoding/block-helpers.hpp	/^class DataBlockFast$/;"	c	namespace:ndn::encoding
DataBlockSlow	encoding/block-helpers.hpp	/^class DataBlockSlow$/;"	c	namespace:ndn::encoding
DataCallback	face.hpp	/^typedef function<void(const Interest&, const Data&)> DataCallback;$/;"	t	namespace:ndn
DataRule	security/validator-config.hpp	/^  typedef security::conf::Rule<Data>     DataRule;$/;"	t	class:ndn::ValidatorConfig
DataRuleList	security/validator-config.hpp	/^  typedef std::vector<shared_ptr<DataRule> >     DataRuleList;$/;"	t	class:ndn::ValidatorConfig
DataSender	mgmt/status-dataset-context.hpp	/^                             const MetaInfo& metaInfo)> DataSender;$/;"	t	class:ndn::mgmt::StatusDatasetContext
DecodeHelper	lp/detail/field-decl.hpp	/^struct DecodeHelper$/;"	s	namespace:ndn::lp::detail
DecodeHelper	lp/detail/field-decl.hpp	/^struct DecodeHelper<TlvType, std::pair<Buffer::const_iterator, Buffer::const_iterator>>$/;"	s	namespace:ndn::lp::detail
DecodeHelper	lp/detail/field-decl.hpp	/^struct DecodeHelper<TlvType, uint64_t>$/;"	s	namespace:ndn::lp::detail
DelegationSet	link.hpp	/^  typedef std::set<std::pair<uint32_t, Name>> DelegationSet;$/;"	t	class:ndn::Link
DescriptionEntry	encoding/tlv.hpp	/^  DescriptionEntry = 512,$/;"	e	enum:ndn::tlv::__anon5
DescriptionKey	encoding/tlv.hpp	/^  DescriptionKey = 513,$/;"	e	enum:ndn::tlv::__anon5
DescriptionValue	encoding/tlv.hpp	/^  DescriptionValue = 514$/;"	e	enum:ndn::tlv::__anon5
Digest	util/digest.cpp	/^Digest<Hash>::Digest()$/;"	f	class:ndn::util::Digest
Digest	util/digest.cpp	/^Digest<Hash>::Digest(std::istream& is)$/;"	f	class:ndn::util::Digest
Digest	util/digest.hpp	/^class Digest$/;"	c	namespace:ndn::util
DigestAlgorithm	security/security-common.hpp	/^enum DigestAlgorithm {$/;"	g	namespace:ndn
DigestSha256	encoding/tlv.hpp	/^  DigestSha256 = 0,$/;"	e	enum:ndn::tlv::SignatureTypeValue
DigestSha256	security/digest-sha256.cpp	/^DigestSha256::DigestSha256()$/;"	f	class:ndn::DigestSha256
DigestSha256	security/digest-sha256.cpp	/^DigestSha256::DigestSha256(const Signature& signature)$/;"	f	class:ndn::DigestSha256
DigestSha256	security/digest-sha256.hpp	/^class DigestSha256 : public Signature$/;"	c	namespace:ndn
Dispatcher	mgmt/dispatcher.cpp	/^Dispatcher::Dispatcher(Face& face, security::KeyChain& keyChain,$/;"	f	class:ndn::mgmt::Dispatcher
Dispatcher	mgmt/dispatcher.hpp	/^class Dispatcher : noncopyable$/;"	c	namespace:ndn::mgmt
DontVerifySegment	util/segment-fetcher.hpp	/^class DontVerifySegment$/;"	c	namespace:ndn::util
DummyClientFace	util/dummy-client-face.cpp	/^DummyClientFace::DummyClientFace(const Options& options, shared_ptr<Transport> transport)$/;"	f	class:ndn::util::DummyClientFace
DummyClientFace	util/dummy-client-face.cpp	/^DummyClientFace::DummyClientFace(const Options& options, shared_ptr<Transport> transport,$/;"	f	class:ndn::util::DummyClientFace
DummyClientFace	util/dummy-client-face.hpp	/^class DummyClientFace : public ndn::Face$/;"	c	namespace:ndn::util
DummyExtraArg	util/signal-emit.hpp	/^class DummyExtraArg$/;"	c	namespace:ndn::util::signal
Duration	util/time.hpp	/^  typedef duration Duration;$/;"	t	class:ndn::time::steady_clock
Duration	util/time.hpp	/^  typedef duration Duration;$/;"	t	class:ndn::time::system_clock
DynamicContainers	security/validator-config.hpp	/^  typedef std::list<DynamicTrustAnchorContainer> DynamicContainers; \/\/ sorted by m_lastRefresh$/;"	t	class:ndn::ValidatorConfig
DynamicTrustAnchorContainer	security/validator-config.hpp	/^    DynamicTrustAnchorContainer(const boost::filesystem::path& path, bool isDir,$/;"	f	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
DynamicTrustAnchorContainer	security/validator-config.hpp	/^  class DynamicTrustAnchorContainer : public TrustAnchorContainer$/;"	c	class:ndn::ValidatorConfig
EC	encoding/tlv.hpp	/^  EC = 35,$/;"	e	enum:ndn::tlv::__anon4
ECDSA_KEY_SIZES	security/key-params.cpp	/^static const uint32_t ECDSA_KEY_SIZES[] = {256, 384};$/;"	m	namespace:ndn	file:
EMPTY_KEY_ID	security/identity.cpp	/^const name::Component Identity::EMPTY_KEY_ID;$/;"	m	class:ndn::security::Identity	file:
EMPTY_KEY_ID	security/identity.hpp	/^  static const name::Component EMPTY_KEY_ID;$/;"	m	class:ndn::security::Identity
EMPTY_NAME	security/signing-info.cpp	/^const Name SigningInfo::EMPTY_NAME;$/;"	m	class:ndn::security::SigningInfo	file:
EMPTY_NAME	security/signing-info.hpp	/^  static const Name EMPTY_NAME;$/;"	m	class:ndn::security::SigningInfo
EMPTY_SIGNATURE_INFO	security/signing-info.cpp	/^const SignatureInfo SigningInfo::EMPTY_SIGNATURE_INFO;$/;"	m	class:ndn::security::SigningInfo	file:
EMPTY_SIGNATURE_INFO	security/signing-info.hpp	/^  static const SignatureInfo EMPTY_SIGNATURE_INFO;$/;"	m	class:ndn::security::SigningInfo
ENCRYPT_MODE_CFB_AES	security/security-common.hpp	/^  ENCRYPT_MODE_CFB_AES$/;"	e	enum:ndn::EncryptMode
ENCRYPT_MODE_DEFAULT	security/security-common.hpp	/^  ENCRYPT_MODE_DEFAULT,$/;"	e	enum:ndn::EncryptMode
ERROR_LBOUND	management/nfd-controller.cpp	/^const uint32_t Controller::ERROR_LBOUND = 400;$/;"	m	class:ndn::nfd::Controller	file:
ERROR_LBOUND	management/nfd-controller.hpp	/^  static const uint32_t ERROR_LBOUND;$/;"	m	class:ndn::nfd::Controller
ERROR_SERVER	management/nfd-controller.cpp	/^const uint32_t Controller::ERROR_SERVER = 500;$/;"	m	class:ndn::nfd::Controller	file:
ERROR_SERVER	management/nfd-controller.hpp	/^  static const uint32_t ERROR_SERVER;$/;"	m	class:ndn::nfd::Controller
ERROR_TIMEOUT	management/nfd-controller.cpp	/^const uint32_t Controller::ERROR_TIMEOUT = 10060;$/;"	m	class:ndn::nfd::Controller	file:
ERROR_TIMEOUT	management/nfd-controller.hpp	/^  static const uint32_t ERROR_TIMEOUT;$/;"	m	class:ndn::nfd::Controller
ETHERTYPE_NDN	util/ethernet.hpp	/^const uint16_t ETHERTYPE_NDN = 0x8624;$/;"	m	namespace:ndn::util::ethernet
EXPR_BACKREF	util/regex/regex-matcher.hpp	/^    EXPR_BACKREF,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_COMPONENT	util/regex/regex-matcher.hpp	/^    EXPR_COMPONENT,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_COMPONENT_SET	util/regex/regex-matcher.hpp	/^    EXPR_COMPONENT_SET,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_PATTERN_LIST	util/regex/regex-matcher.hpp	/^    EXPR_PATTERN_LIST,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_PSEUDO	util/regex/regex-matcher.hpp	/^    EXPR_PSEUDO$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_REPEAT_PATTERN	util/regex/regex-matcher.hpp	/^    EXPR_REPEAT_PATTERN,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_TOP	util/regex/regex-matcher.hpp	/^    EXPR_TOP,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EcdsaKeyParams	security/key-params.hpp	/^typedef SimplePublicKeyParams<EcdsaKeyParamsInfo> EcdsaKeyParams;$/;"	t	namespace:ndn
EcdsaKeyParamsInfo	security/key-params.hpp	/^class EcdsaKeyParamsInfo$/;"	c	namespace:ndn
EncodeHelper	lp/detail/field-decl.hpp	/^struct EncodeHelper$/;"	s	namespace:ndn::lp::detail
EncodeHelper	lp/detail/field-decl.hpp	/^struct EncodeHelper<TAG, TlvType, std::pair<Buffer::const_iterator, Buffer::const_iterator>>$/;"	s	namespace:ndn::lp::detail
EncodeHelper	lp/detail/field-decl.hpp	/^struct EncodeHelper<TAG, TlvType, uint64_t>$/;"	s	namespace:ndn::lp::detail
Encoder	encoding/encoder.cpp	/^Encoder::Encoder(const Block& block)$/;"	f	class:ndn::encoding::Encoder
Encoder	encoding/encoder.cpp	/^Encoder::Encoder(size_t totalReserve\/* = 8800*\/, size_t reserveFromBack\/* = 400*\/)$/;"	f	class:ndn::encoding::Encoder
Encoder	encoding/encoder.hpp	/^class Encoder$/;"	c	namespace:ndn::encoding
EncoderTag	encoding/encoding-buffer-fwd.hpp	/^static const Tag EncoderTag = true;$/;"	m	namespace:ndn::encoding
EncodingBuffer	encoding/encoding-buffer-fwd.hpp	/^typedef EncodingImpl<EncoderTag> EncodingBuffer;$/;"	t	namespace:ndn::encoding
EncodingEstimator	encoding/encoding-buffer-fwd.hpp	/^typedef EncodingImpl<EstimatorTag> EncodingEstimator;$/;"	t	namespace:ndn::encoding
EncodingImpl	encoding/encoding-buffer.hpp	/^  EncodingImpl(const Block& block)$/;"	f	class:ndn::encoding::EncodingImpl
EncodingImpl	encoding/encoding-buffer.hpp	/^  EncodingImpl(size_t totalReserve = 0, size_t totalFromBack = 0)$/;"	f	class:ndn::encoding::EncodingImpl
EncodingImpl	encoding/encoding-buffer.hpp	/^  EncodingImpl(size_t totalReserve = 8800, size_t reserveFromBack = 400)$/;"	f	class:ndn::encoding::EncodingImpl
EncodingImpl	encoding/encoding-buffer.hpp	/^class EncodingImpl<EncoderTag> : public encoding::Encoder$/;"	c	namespace:ndn::encoding
EncodingImpl	encoding/encoding-buffer.hpp	/^class EncodingImpl<EstimatorTag> : public encoding::Estimator$/;"	c	namespace:ndn::encoding
EncryptMode	security/security-common.hpp	/^enum EncryptMode {$/;"	g	namespace:ndn
EndPoint	util/dns.cpp	/^typedef boost::asio::ip::udp::endpoint EndPoint;$/;"	t	namespace:ndn::dns	file:
Error	data.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Data::Error
Error	data.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Data
Error	encoding/block.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Block::Error
Error	encoding/block.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Block
Error	encoding/tlv.hpp	/^  Error(const std::string& what)$/;"	f	class:ndn::tlv::Error
Error	encoding/tlv.hpp	/^class Error : public std::runtime_error$/;"	c	namespace:ndn::tlv
Error	exclude.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Exclude::Error
Error	exclude.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Exclude
Error	face.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Face::Error
Error	face.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::Face
Error	interest-filter.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::InterestFilter::Error
Error	interest-filter.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::InterestFilter
Error	interest.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Interest::Error
Error	interest.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Interest
Error	key-locator.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::KeyLocator::Error
Error	key-locator.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::KeyLocator
Error	link.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Link::Error
Error	link.hpp	/^  class Error : public Data::Error$/;"	c	class:ndn::Link
Error	lp/cache-policy.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::lp::CachePolicyType::CachePolicy::Error
Error	lp/cache-policy.hpp	/^  class Error : public ndn::tlv::Error$/;"	c	class:ndn::lp::CachePolicyType::CachePolicy
Error	lp/packet.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::lp::Packet::Error
Error	lp/packet.hpp	/^  class Error : public ndn::tlv::Error$/;"	c	class:ndn::lp::Packet
Error	management/nfd-channel-status.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::ChannelStatus::Error
Error	management/nfd-channel-status.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::ChannelStatus
Error	management/nfd-control-parameters.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::ControlParameters::Error
Error	management/nfd-control-parameters.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::ControlParameters
Error	management/nfd-face-query-filter.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::FaceQueryFilter::Error
Error	management/nfd-face-query-filter.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::FaceQueryFilter
Error	management/nfd-face-traits.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::FaceTraits::Error
Error	management/nfd-face-traits.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::FaceTraits
Error	management/nfd-fib-entry.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::FibEntry::Error
Error	management/nfd-fib-entry.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::NextHopRecord::Error
Error	management/nfd-fib-entry.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::FibEntry
Error	management/nfd-fib-entry.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::NextHopRecord
Error	management/nfd-forwarder-status.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::ForwarderStatus::Error
Error	management/nfd-forwarder-status.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::ForwarderStatus
Error	management/nfd-local-control-header.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::LocalControlHeader::Error
Error	management/nfd-local-control-header.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::nfd::LocalControlHeader
Error	management/nfd-rib-entry.hpp	/^    Error(const std::string& what) : tlv::Error(what)$/;"	f	class:ndn::nfd::RibEntry::Error
Error	management/nfd-rib-entry.hpp	/^    Error(const std::string& what) : tlv::Error(what)$/;"	f	class:ndn::nfd::Route::Error
Error	management/nfd-rib-entry.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::RibEntry
Error	management/nfd-rib-entry.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::Route
Error	management/nfd-strategy-choice.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::StrategyChoice::Error
Error	management/nfd-strategy-choice.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::StrategyChoice
Error	meta-info.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::MetaInfo::Error
Error	meta-info.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::MetaInfo
Error	mgmt/control-response.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::mgmt::ControlResponse::Error
Error	mgmt/control-response.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::mgmt::ControlResponse
Error	mgmt/dispatcher.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::mgmt::Dispatcher::Error
Error	mgmt/dispatcher.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::mgmt::Dispatcher
Error	name-component.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::name::Component::Error
Error	name-component.hpp	/^  class Error : public Block::Error$/;"	c	class:ndn::name::Component
Error	name.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Name::Error
Error	name.hpp	/^  class Error : public name::Component::Error$/;"	c	class:ndn::Name
Error	security/additional-description.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::AdditionalDescription::Error
Error	security/additional-description.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::security::AdditionalDescription
Error	security/certificate-extension.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::CertificateExtension::Error
Error	security/certificate-extension.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::CertificateExtension
Error	security/certificate.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Certificate::Error
Error	security/certificate.hpp	/^  class Error : public Data::Error$/;"	c	class:ndn::Certificate
Error	security/conf/common.hpp	/^  Error(const std::string& what)$/;"	f	class:ndn::security::conf::Error
Error	security/conf/common.hpp	/^class Error : public std::runtime_error$/;"	c	namespace:ndn::security::conf
Error	security/digest-sha256.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::DigestSha256::Error
Error	security/digest-sha256.hpp	/^  class Error : public Signature::Error$/;"	c	class:ndn::DigestSha256
Error	security/identity-certificate.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::IdentityCertificate::Error
Error	security/identity-certificate.hpp	/^  class Error : public Certificate::Error$/;"	c	class:ndn::IdentityCertificate
Error	security/key-chain.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::KeyChain::Error
Error	security/key-chain.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::security::KeyChain
Error	security/key-params.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::KeyParams::Error
Error	security/key-params.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::KeyParams
Error	security/pib-impl.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::PibImpl::Error
Error	security/pib-impl.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::security::PibImpl
Error	security/pib-memory.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::PibMemory::Error
Error	security/pib-memory.hpp	/^  class Error : public PibImpl::Error$/;"	c	class:ndn::security::PibMemory
Error	security/pib.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::Pib::Error
Error	security/pib.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::security::Pib
Error	security/public-key.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::PublicKey::Error
Error	security/public-key.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::PublicKey
Error	security/sec-public-info-sqlite3.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecPublicInfoSqlite3::Error
Error	security/sec-public-info-sqlite3.hpp	/^  class Error : public SecPublicInfo::Error$/;"	c	class:ndn::SecPublicInfoSqlite3
Error	security/sec-public-info.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecPublicInfo::Error
Error	security/sec-public-info.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::SecPublicInfo
Error	security/sec-rule-relative.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecRuleRelative::Error
Error	security/sec-rule-relative.hpp	/^  class Error : public SecRule::Error$/;"	c	class:ndn::SecRuleRelative
Error	security/sec-rule.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecRule::Error
Error	security/sec-rule.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::SecRule
Error	security/sec-tpm-file.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecTpmFile::Error
Error	security/sec-tpm-file.hpp	/^  class Error : public SecTpm::Error$/;"	c	class:ndn::SecTpmFile
Error	security/sec-tpm-osx.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecTpmOsx::Error
Error	security/sec-tpm-osx.hpp	/^  class Error : public SecTpm::Error$/;"	c	class:ndn::SecTpmOsx
Error	security/sec-tpm.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecTpm::Error
Error	security/sec-tpm.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::SecTpm
Error	security/secured-bag.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecuredBag::Error
Error	security/secured-bag.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::SecuredBag
Error	security/signature-sha256-with-ecdsa.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SignatureSha256WithEcdsa::Error
Error	security/signature-sha256-with-ecdsa.hpp	/^  class Error : public Signature::Error$/;"	c	class:ndn::SignatureSha256WithEcdsa
Error	security/signature-sha256-with-rsa.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SignatureSha256WithRsa::Error
Error	security/signature-sha256-with-rsa.hpp	/^  class Error : public Signature::Error$/;"	c	class:ndn::SignatureSha256WithRsa
Error	security/signing-info.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::SigningInfo::Error
Error	security/signing-info.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::security::SigningInfo
Error	security/validator-config.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::ValidatorConfig::Error
Error	security/validator-config.hpp	/^  class Error : public Validator::Error$/;"	c	class:ndn::ValidatorConfig
Error	security/validator-regex.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::ValidatorRegex::Error
Error	security/validator-regex.hpp	/^  class Error : public Validator::Error$/;"	c	class:ndn::ValidatorRegex
Error	security/validator.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Validator::Error
Error	security/validator.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::Validator
Error	security/validity-period.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::ValidityPeriod::Error
Error	security/validity-period.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::security::ValidityPeriod
Error	selectors.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Selectors::Error
Error	selectors.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Selectors
Error	signature-info.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SignatureInfo::Error
Error	signature-info.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::SignatureInfo
Error	signature.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Signature::Error
Error	signature.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Signature
Error	transport/transport.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::Transport
Error	transport/transport.hpp	/^Transport::Error::Error(const boost::system::error_code& code, const std::string& msg)$/;"	f	class:ndn::Transport::Error
Error	transport/transport.hpp	/^Transport::Error::Error(const std::string& msg)$/;"	f	class:ndn::Transport::Error
Error	util/config-file.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::ConfigFile::Error
Error	util/config-file.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::ConfigFile
Error	util/digest.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::util::Digest::Error
Error	util/digest.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::util::Digest
Error	util/dns.hpp	/^  Error(const std::string& what)$/;"	f	struct:ndn::dns::Error
Error	util/dns.hpp	/^struct Error : public std::runtime_error$/;"	s	namespace:ndn::dns
Error	util/face-uri.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::util::FaceUri::Error
Error	util/face-uri.hpp	/^  class Error : public std::invalid_argument$/;"	c	class:ndn::util::FaceUri
Error	util/in-memory-storage.hpp	/^    Error() : std::runtime_error("Cannot reduce the capacity of the in-memory storage!")$/;"	f	class:ndn::util::InMemoryStorage::Error
Error	util/in-memory-storage.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::util::InMemoryStorage
Error	util/io.hpp	/^  Error(const std::string& what)$/;"	f	class:ndn::io::Error
Error	util/io.hpp	/^class Error : public std::runtime_error$/;"	c	namespace:ndn::io
Error	util/network-monitor.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::util::NetworkMonitor::Error
Error	util/network-monitor.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::util::NetworkMonitor
Error	util/regex/regex-matcher.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::RegexMatcher::Error
Error	util/regex/regex-matcher.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::RegexMatcher
ErrorCallback	transport/transport.hpp	/^  typedef function<void ()> ErrorCallback;$/;"	t	class:ndn::Transport
ErrorCallback	util/dns.hpp	/^typedef function<void (const std::string& reason)> ErrorCallback;$/;"	t	namespace:ndn::dns
ErrorCallback	util/segment-fetcher.hpp	/^  typedef function<void (uint32_t code, const std::string& msg)> ErrorCallback;$/;"	t	class:ndn::util::SegmentFetcher
ErrorCode	util/segment-fetcher.hpp	/^  enum ErrorCode {$/;"	g	class:ndn::util::SegmentFetcher
Estimator	encoding/estimator.cpp	/^Estimator::Estimator(size_t totalReserve, size_t reserveFromBack)$/;"	f	class:ndn::encoding::Estimator
Estimator	encoding/estimator.hpp	/^class Estimator$/;"	c	namespace:ndn::encoding
EstimatorTag	encoding/encoding-buffer-fwd.hpp	/^static const Tag EstimatorTag = false;$/;"	m	namespace:ndn::encoding
EtherCanonizeProvider	util/face-uri.cpp	/^class EtherCanonizeProvider : public CanonizeProvider$/;"	c	namespace:ndn::util	file:
Event	util/scheduler.hpp	/^  typedef function<void()> Event;$/;"	t	class:ndn::util::scheduler::Scheduler
EventId	util/scheduler.hpp	/^typedef shared_ptr<EventIdImpl> EventId;$/;"	t	namespace:ndn::util::scheduler
EventIdImpl	util/scheduler.cpp	/^  EventIdImpl(const Scheduler::EventQueue::iterator& event)$/;"	f	struct:ndn::util::scheduler::EventIdImpl
EventIdImpl	util/scheduler.cpp	/^struct EventIdImpl$/;"	s	namespace:ndn::util::scheduler	file:
EventInfo	util/scheduler.cpp	/^Scheduler::EventInfo::EventInfo(const time::nanoseconds& after,$/;"	f	class:ndn::util::scheduler::Scheduler::EventInfo
EventInfo	util/scheduler.cpp	/^Scheduler::EventInfo::EventInfo(const time::steady_clock::TimePoint& when,$/;"	f	class:ndn::util::scheduler::Scheduler::EventInfo
EventInfo	util/scheduler.hpp	/^  struct EventInfo$/;"	s	class:ndn::util::scheduler::Scheduler
EventQueue	util/scheduler.hpp	/^  typedef std::multiset<EventInfo> EventQueue;$/;"	t	class:ndn::util::scheduler::Scheduler
Exclude	encoding/tlv.hpp	/^  Exclude       = 16,$/;"	e	enum:ndn::tlv::__anon4
Exclude	exclude.cpp	/^Exclude::Exclude()$/;"	f	class:ndn::Exclude
Exclude	exclude.cpp	/^Exclude::Exclude(const Block& wire)$/;"	f	class:ndn::Exclude
Exclude	exclude.hpp	/^class Exclude$/;"	c	namespace:ndn
ExpirationPeriod	encoding/tlv-nfd.hpp	/^  ExpirationPeriod    = 109,$/;"	e	enum:ndn::tlv::nfd::__anon2
ExtensionList	security/certificate.hpp	/^  typedef std::vector<CertificateExtension> ExtensionList;$/;"	t	class:ndn::Certificate
ExtractFieldInfo	lp/detail/field-info.cpp	/^struct ExtractFieldInfo$/;"	s	namespace:ndn::lp::detail	file:
FACE_EVENT_CREATED	management/nfd-face-event-notification.hpp	/^  FACE_EVENT_CREATED = 1,$/;"	e	enum:ndn::nfd::FaceEventKind
FACE_EVENT_DESTROYED	management/nfd-face-event-notification.hpp	/^  FACE_EVENT_DESTROYED = 2$/;"	e	enum:ndn::nfd::FaceEventKind
FACE_PERSISTENCY_ON_DEMAND	encoding/nfd-constants.hpp	/^  FACE_PERSISTENCY_ON_DEMAND = 1,$/;"	e	enum:ndn::nfd::FacePersistency
FACE_PERSISTENCY_PERMANENT	encoding/nfd-constants.hpp	/^  FACE_PERSISTENCY_PERMANENT = 2$/;"	e	enum:ndn::nfd::FacePersistency
FACE_PERSISTENCY_PERSISTENT	encoding/nfd-constants.hpp	/^  FACE_PERSISTENCY_PERSISTENT = 0,$/;"	e	enum:ndn::nfd::FacePersistency
FACE_SCOPE_LOCAL	encoding/nfd-constants.hpp	/^  FACE_SCOPE_LOCAL = 1$/;"	e	enum:ndn::nfd::FaceScope
FACE_SCOPE_NON_LOCAL	encoding/nfd-constants.hpp	/^  FACE_SCOPE_NON_LOCAL = 0,$/;"	e	enum:ndn::nfd::FaceScope
FC	encoding/tlv.hpp	/^  FC = 34,$/;"	e	enum:ndn::tlv::__anon4
Face	face.cpp	/^Face::Face()$/;"	f	class:ndn::Face
Face	face.cpp	/^Face::Face(boost::asio::io_service& ioService)$/;"	f	class:ndn::Face
Face	face.cpp	/^Face::Face(const shared_ptr<Transport>& transport)$/;"	f	class:ndn::Face
Face	face.cpp	/^Face::Face(const shared_ptr<Transport>& transport,$/;"	f	class:ndn::Face
Face	face.cpp	/^Face::Face(const std::string& host, const std::string& port\/* = "6363"*\/)$/;"	f	class:ndn::Face
Face	face.cpp	/^Face::Face(shared_ptr<Transport> transport,$/;"	f	class:ndn::Face
Face	face.hpp	/^class Face : noncopyable$/;"	c	namespace:ndn
FaceCreateCommand	management/nfd-control-command.cpp	/^FaceCreateCommand::FaceCreateCommand()$/;"	f	class:ndn::nfd::FaceCreateCommand
FaceCreateCommand	management/nfd-control-command.hpp	/^class FaceCreateCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
FaceDestroyCommand	management/nfd-control-command.cpp	/^FaceDestroyCommand::FaceDestroyCommand()$/;"	f	class:ndn::nfd::FaceDestroyCommand
FaceDestroyCommand	management/nfd-control-command.hpp	/^class FaceDestroyCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
FaceDisableLocalControlCommand	management/nfd-control-command.cpp	/^FaceDisableLocalControlCommand::FaceDisableLocalControlCommand()$/;"	f	class:ndn::nfd::FaceDisableLocalControlCommand
FaceDisableLocalControlCommand	management/nfd-control-command.hpp	/^class FaceDisableLocalControlCommand : public FaceLocalControlCommand$/;"	c	namespace:ndn::nfd
FaceEnableLocalControlCommand	management/nfd-control-command.cpp	/^FaceEnableLocalControlCommand::FaceEnableLocalControlCommand()$/;"	f	class:ndn::nfd::FaceEnableLocalControlCommand
FaceEnableLocalControlCommand	management/nfd-control-command.hpp	/^class FaceEnableLocalControlCommand : public FaceLocalControlCommand$/;"	c	namespace:ndn::nfd
FaceEventKind	encoding/tlv-nfd.hpp	/^  FaceEventKind         = 193,$/;"	e	enum:ndn::tlv::nfd::__anon2
FaceEventKind	management/nfd-face-event-notification.hpp	/^enum FaceEventKind {$/;"	g	namespace:ndn::nfd
FaceEventNotification	encoding/tlv-nfd.hpp	/^  FaceEventNotification = 192,$/;"	e	enum:ndn::tlv::nfd::__anon2
FaceEventNotification	management/nfd-face-event-notification.cpp	/^FaceEventNotification::FaceEventNotification()$/;"	f	class:ndn::nfd::FaceEventNotification
FaceEventNotification	management/nfd-face-event-notification.cpp	/^FaceEventNotification::FaceEventNotification(const Block& block)$/;"	f	class:ndn::nfd::FaceEventNotification
FaceEventNotification	management/nfd-face-event-notification.hpp	/^class FaceEventNotification : public FaceTraits<FaceEventNotification>$/;"	c	namespace:ndn::nfd
FaceId	encoding/tlv-nfd.hpp	/^  FaceId              = 105,$/;"	e	enum:ndn::tlv::nfd::__anon2
FaceLocalControlCommand	management/nfd-control-command.cpp	/^FaceLocalControlCommand::FaceLocalControlCommand(const std::string& verb)$/;"	f	class:ndn::nfd::FaceLocalControlCommand
FaceLocalControlCommand	management/nfd-control-command.hpp	/^class FaceLocalControlCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
FaceMonitor	management/nfd-face-monitor.hpp	/^  FaceMonitor(Face& face)$/;"	f	class:ndn::nfd::FaceMonitor
FaceMonitor	management/nfd-face-monitor.hpp	/^class FaceMonitor : public util::NotificationSubscriber<FaceEventNotification>$/;"	c	namespace:ndn::nfd
FacePersistency	encoding/nfd-constants.hpp	/^enum FacePersistency {$/;"	g	namespace:ndn::nfd
FacePersistency	encoding/tlv-nfd.hpp	/^  FacePersistency       = 133,$/;"	e	enum:ndn::tlv::nfd::__anon2
FaceQueryFilter	encoding/tlv-nfd.hpp	/^  FaceQueryFilter       = 150,$/;"	e	enum:ndn::tlv::nfd::__anon2
FaceQueryFilter	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::FaceQueryFilter()$/;"	f	class:ndn::nfd::FaceQueryFilter
FaceQueryFilter	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::FaceQueryFilter(const Block& block)$/;"	f	class:ndn::nfd::FaceQueryFilter
FaceQueryFilter	management/nfd-face-query-filter.hpp	/^class FaceQueryFilter$/;"	c	namespace:ndn::nfd
FaceScope	encoding/nfd-constants.hpp	/^enum FaceScope {$/;"	g	namespace:ndn::nfd
FaceScope	encoding/tlv-nfd.hpp	/^  FaceScope             = 132,$/;"	e	enum:ndn::tlv::nfd::__anon2
FaceStatus	encoding/tlv-nfd.hpp	/^  FaceStatus            = 128,$/;"	e	enum:ndn::tlv::nfd::__anon2
FaceStatus	management/nfd-face-status.cpp	/^FaceStatus::FaceStatus()$/;"	f	class:ndn::nfd::FaceStatus
FaceStatus	management/nfd-face-status.cpp	/^FaceStatus::FaceStatus(const Block& block)$/;"	f	class:ndn::nfd::FaceStatus
FaceStatus	management/nfd-face-status.hpp	/^class FaceStatus : public FaceTraits<FaceStatus>$/;"	c	namespace:ndn::nfd
FaceTraits	management/nfd-face-traits.hpp	/^  FaceTraits()$/;"	f	class:ndn::nfd::FaceTraits
FaceTraits	management/nfd-face-traits.hpp	/^class FaceTraits$/;"	c	namespace:ndn::nfd
FaceUri	util/face-uri.cpp	/^FaceUri::FaceUri()$/;"	f	class:ndn::util::FaceUri
FaceUri	util/face-uri.cpp	/^FaceUri::FaceUri(const boost::asio::ip::tcp::endpoint& endpoint)$/;"	f	class:ndn::util::FaceUri
FaceUri	util/face-uri.cpp	/^FaceUri::FaceUri(const boost::asio::ip::tcp::endpoint& endpoint, const std::string& scheme)$/;"	f	class:ndn::util::FaceUri
FaceUri	util/face-uri.cpp	/^FaceUri::FaceUri(const boost::asio::ip::udp::endpoint& endpoint)$/;"	f	class:ndn::util::FaceUri
FaceUri	util/face-uri.cpp	/^FaceUri::FaceUri(const boost::asio::local::stream_protocol::endpoint& endpoint)$/;"	f	class:ndn::util::FaceUri
FaceUri	util/face-uri.cpp	/^FaceUri::FaceUri(const char* uri)$/;"	f	class:ndn::util::FaceUri
FaceUri	util/face-uri.cpp	/^FaceUri::FaceUri(const ethernet::Address& address)$/;"	f	class:ndn::util::FaceUri
FaceUri	util/face-uri.cpp	/^FaceUri::FaceUri(const std::string& uri)$/;"	f	class:ndn::util::FaceUri
FaceUri	util/face-uri.hpp	/^class FaceUri$/;"	c	namespace:ndn::util
Factory	security/key-chain.cpp	/^  Factory(const std::string& canonicalName, const T& create)$/;"	f	struct:ndn::security::Factory
Factory	security/key-chain.cpp	/^struct Factory$/;"	s	namespace:ndn::security	file:
FailureCallback	detail/registered-prefix.hpp	/^  typedef function<void(uint32_t\/*code*\/,const std::string&\/*reason*\/)> FailureCallback;$/;"	t	class:ndn::RegisteredPrefix
FibAddNextHopCommand	management/nfd-control-command.cpp	/^FibAddNextHopCommand::FibAddNextHopCommand()$/;"	f	class:ndn::nfd::FibAddNextHopCommand
FibAddNextHopCommand	management/nfd-control-command.hpp	/^class FibAddNextHopCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
FibEntry	encoding/tlv-nfd.hpp	/^  FibEntry      = 128,$/;"	e	enum:ndn::tlv::nfd::__anon2
FibEntry	management/nfd-fib-entry.cpp	/^FibEntry::FibEntry()$/;"	f	class:ndn::nfd::FibEntry
FibEntry	management/nfd-fib-entry.cpp	/^FibEntry::FibEntry(const Block& block)$/;"	f	class:ndn::nfd::FibEntry
FibEntry	management/nfd-fib-entry.hpp	/^class FibEntry$/;"	c	namespace:ndn::nfd
FibRemoveNextHopCommand	management/nfd-control-command.cpp	/^FibRemoveNextHopCommand::FibRemoveNextHopCommand()$/;"	f	class:ndn::nfd::FibRemoveNextHopCommand
FibRemoveNextHopCommand	management/nfd-control-command.hpp	/^class FibRemoveNextHopCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
Field	lp/field.hpp	/^struct Field$/;"	s	namespace:ndn::lp
FieldDecl	lp/detail/field-decl.hpp	/^class FieldDecl$/;"	c	namespace:ndn::lp::detail
FieldInfo	lp/detail/field-info.cpp	/^FieldInfo::FieldInfo()$/;"	f	class:ndn::lp::detail::FieldInfo
FieldInfo	lp/detail/field-info.cpp	/^FieldInfo::FieldInfo(uint64_t tlv)$/;"	f	class:ndn::lp::detail::FieldInfo
FieldInfo	lp/detail/field-info.hpp	/^class FieldInfo$/;"	c	namespace:ndn::lp::detail
FieldLocation	lp/detail/field-decl.hpp	/^  typedef LOCATION FieldLocation;$/;"	t	class:ndn::lp::detail::FieldDecl
FieldSet	lp/fields.hpp	/^  > FieldSet;$/;"	t	namespace:ndn::lp
FieldValidator	management/nfd-control-command.cpp	/^ControlCommand::FieldValidator::FieldValidator()$/;"	f	class:ndn::nfd::ControlCommand::FieldValidator
FieldValidator	management/nfd-control-command.hpp	/^  class FieldValidator$/;"	c	class:ndn::nfd::ControlCommand
Filter	security/conf/filter.hpp	/^class Filter$/;"	c	namespace:ndn::security::conf
FilterFactory	security/conf/filter.hpp	/^class FilterFactory$/;"	c	namespace:ndn::security::conf
FilterList	security/conf/rule.hpp	/^  typedef std::vector<shared_ptr<Filter> > FilterList;$/;"	t	class:ndn::security::conf::Rule
FinalBlockId	encoding/tlv.hpp	/^  FinalBlockId  = 26,$/;"	e	enum:ndn::tlv::__anon4
FixedSignerChecker	security/conf/checker.hpp	/^  FixedSignerChecker(uint32_t sigType,$/;"	f	class:ndn::security::conf::FixedSignerChecker
FixedSignerChecker	security/conf/checker.hpp	/^class FixedSignerChecker : public Checker$/;"	c	namespace:ndn::security::conf
Flags	encoding/tlv-nfd.hpp	/^  Flags               = 108,$/;"	e	enum:ndn::tlv::nfd::__anon2
ForwarderStatus	management/nfd-forwarder-status.cpp	/^ForwarderStatus::ForwarderStatus()$/;"	f	class:ndn::nfd::ForwarderStatus
ForwarderStatus	management/nfd-forwarder-status.cpp	/^ForwarderStatus::ForwarderStatus(const Block& payload)$/;"	f	class:ndn::nfd::ForwarderStatus
ForwarderStatus	management/nfd-forwarder-status.hpp	/^class ForwarderStatus$/;"	c	namespace:ndn::nfd
FragCount	lp/tlv.hpp	/^  FragCount = 83,$/;"	e	enum:ndn::lp::tlv::__anon6
FragCountField	lp/fields.hpp	/^                          tlv::FragCount> FragCountField;$/;"	t	namespace:ndn::lp
FragIndex	lp/tlv.hpp	/^  FragIndex = 82,$/;"	e	enum:ndn::lp::tlv::__anon6
FragIndexField	lp/fields.hpp	/^                          tlv::FragIndex> FragIndexField;$/;"	t	namespace:ndn::lp
Fragment	lp/field.hpp	/^class Fragment : public Base$/;"	c	namespace:ndn::lp::field_location_tags
Fragment	lp/tlv.hpp	/^  Fragment = 80,$/;"	e	enum:ndn::lp::tlv::__anon6
FragmentField	lp/fields.hpp	/^                          tlv::Fragment> FragmentField;$/;"	t	namespace:ndn::lp
FreshnessPeriod	encoding/tlv.hpp	/^  FreshnessPeriod = 25,$/;"	e	enum:ndn::tlv::__anon4
GRACE_INTERVAL	util/command-interest-validator.hpp	/^    GRACE_INTERVAL = 3000 \/\/ ms$/;"	e	enum:ndn::CommandInterestValidator::__anon11
HDR_LEN	util/ethernet.hpp	/^const size_t HDR_LEN      = 14;     \/\/\/< Total octets in Ethernet header (without 802.1Q tag)$/;"	m	namespace:ndn::util::ethernet
HEADER1_MAX	lp/tlv.hpp	/^  HEADER1_MAX = 99,$/;"	e	enum:ndn::lp::tlv::__anon7
HEADER1_MIN	lp/tlv.hpp	/^  HEADER1_MIN = 81,$/;"	e	enum:ndn::lp::tlv::__anon7
HEADER3_MAX	lp/tlv.hpp	/^  HEADER3_MAX = 959$/;"	e	enum:ndn::lp::tlv::__anon7
HEADER3_MIN	lp/tlv.hpp	/^  HEADER3_MIN = 800,$/;"	e	enum:ndn::lp::tlv::__anon7
HEX	util/io.hpp	/^  HEX$/;"	e	enum:ndn::io::IoEncoding
Handler	util/signal-signal.hpp	/^  typedef function<void(const TArgs&...)> Handler;$/;"	t	class:ndn::util::signal::Signal
HandlerMap	mgmt/dispatcher.hpp	/^  typedef std::unordered_map<PartialName, InterestHandler> HandlerMap;$/;"	t	class:ndn::mgmt::Dispatcher
HandlerMapIt	mgmt/dispatcher.hpp	/^  typedef HandlerMap::iterator HandlerMapIt;$/;"	t	class:ndn::mgmt::Dispatcher
HashFunction	util/digest.hpp	/^  typedef Hash HashFunction;$/;"	t	class:ndn::util::Digest
Hashable	util/concepts.hpp	/^class Hashable$/;"	c	namespace:ndn
Header	lp/field.hpp	/^class Header : public Base$/;"	c	namespace:ndn::lp::field_location_tags
HierarchicalChecker	security/conf/checker.hpp	/^  HierarchicalChecker(uint32_t sigType)$/;"	f	class:ndn::security::conf::HierarchicalChecker
HierarchicalChecker	security/conf/checker.hpp	/^class HierarchicalChecker : public CustomizedChecker$/;"	c	namespace:ndn::security::conf
HyperKeyLocatorNameChecker	security/conf/key-locator-checker.hpp	/^  HyperKeyLocatorNameChecker(const std::string& pExpr, const std::string pExpand,$/;"	f	class:ndn::security::conf::HyperKeyLocatorNameChecker
HyperKeyLocatorNameChecker	security/conf/key-locator-checker.hpp	/^class HyperKeyLocatorNameChecker : public KeyLocatorChecker$/;"	c	namespace:ndn::security::conf
INFINITE_EXPIRATION_PERIOD	management/nfd-rib-entry.hpp	/^  static const time::milliseconds INFINITE_EXPIRATION_PERIOD;$/;"	m	class:ndn::nfd::Route
INITIAL	mgmt/status-dataset-context.hpp	/^    INITIAL, \/\/\/< none of .append, .end, .reject has been invoked$/;"	m	class:ndn::mgmt::StatusDatasetContext::State
INITIALIZATION	security/pib-sqlite3.cpp	/^static const string INITIALIZATION =$/;"	m	namespace:ndn::security	file:
INIT_CERT_TABLE	security/sec-public-info-sqlite3.cpp	/^static const string INIT_CERT_TABLE =$/;"	m	namespace:ndn	file:
INIT_ID_TABLE	security/sec-public-info-sqlite3.cpp	/^static const string INIT_ID_TABLE =$/;"	m	namespace:ndn	file:
INIT_KEY_TABLE	security/sec-public-info-sqlite3.cpp	/^static const string INIT_KEY_TABLE =$/;"	m	namespace:ndn	file:
INIT_TPM_INFO_TABLE	security/sec-public-info-sqlite3.cpp	/^static const string INIT_TPM_INFO_TABLE =$/;"	m	namespace:ndn	file:
INTEREST_SIG_INFO	security/conf/checker.hpp	/^    INTEREST_SIG_INFO = -2$/;"	e	enum:ndn::security::conf::Checker::__anon9
INTEREST_SIG_VALUE	security/conf/checker.hpp	/^    INTEREST_SIG_VALUE = -1,$/;"	e	enum:ndn::security::conf::Checker::__anon9
INTEREST_TIMEOUT	util/segment-fetcher.hpp	/^    INTEREST_TIMEOUT = 1,$/;"	e	enum:ndn::util::SegmentFetcher::ErrorCode
INVALID_FACE_ID	encoding/nfd-constants.hpp	/^static const uint64_t INVALID_FACE_ID = std::numeric_limits<uint64_t>::max();$/;"	m	namespace:ndn::nfd
INVALID_SELECTED_DELEGATION_INDEX	link.hpp	/^const size_t INVALID_SELECTED_DELEGATION_INDEX = std::numeric_limits<size_t>::max();$/;"	m	namespace:ndn
ISO_DATETIME_SIZE	security/validity-period.cpp	/^static const size_t ISO_DATETIME_SIZE = 15;$/;"	m	namespace:ndn::security	file:
Identity	security/identity.cpp	/^Identity::Identity()$/;"	f	class:ndn::security::Identity
Identity	security/identity.cpp	/^Identity::Identity(const Name& identityName, shared_ptr<PibImpl> impl, bool needInit)$/;"	f	class:ndn::security::Identity
Identity	security/identity.hpp	/^class Identity$/;"	c	namespace:ndn::security
IdentityCertificate	security/identity-certificate.cpp	/^IdentityCertificate::IdentityCertificate()$/;"	f	class:ndn::IdentityCertificate
IdentityCertificate	security/identity-certificate.cpp	/^IdentityCertificate::IdentityCertificate(const Block& block)$/;"	f	class:ndn::IdentityCertificate
IdentityCertificate	security/identity-certificate.cpp	/^IdentityCertificate::IdentityCertificate(const Data& data)$/;"	f	class:ndn::IdentityCertificate
IdentityCertificate	security/identity-certificate.hpp	/^class IdentityCertificate : public Certificate$/;"	c	namespace:ndn
IdentityContainer	security/identity-container.cpp	/^IdentityContainer::IdentityContainer()$/;"	f	class:ndn::security::IdentityContainer
IdentityContainer	security/identity-container.cpp	/^IdentityContainer::IdentityContainer(std::set<Name>&& identities,$/;"	f	class:ndn::security::IdentityContainer
IdentityContainer	security/identity-container.hpp	/^class IdentityContainer$/;"	c	namespace:ndn::security
IdentityPackage	encoding/tlv-security.hpp	/^  IdentityPackage    = 128,$/;"	e	enum:ndn::tlv::security::__anon1
Impl	detail/face-impl.hpp	/^  Impl(Face& face)$/;"	f	class:ndn::Face::Impl
Impl	detail/face-impl.hpp	/^class Face::Impl : noncopyable$/;"	c	class:ndn::Face
Impl	security/sec-tpm-file.cpp	/^  Impl(const string& dir)$/;"	f	class:ndn::SecTpmFile::Impl
Impl	security/sec-tpm-file.cpp	/^class SecTpmFile::Impl$/;"	c	class:ndn::SecTpmFile	file:
Impl	security/sec-tpm-osx.cpp	/^  Impl()$/;"	f	class:ndn::SecTpmOsx::Impl
Impl	security/sec-tpm-osx.cpp	/^class SecTpmOsx::Impl$/;"	c	class:ndn::SecTpmOsx	file:
Impl	transport/stream-transport.hpp	/^  typedef StreamTransportImpl<BaseTransport,Protocol> Impl;$/;"	t	class:ndn::StreamTransportImpl
Impl	transport/stream-transport.hpp	/^  typedef StreamTransportWithResolverImpl<BaseTransport,Protocol> Impl;$/;"	t	class:ndn::StreamTransportWithResolverImpl
Impl	transport/tcp-transport.hpp	/^  typedef StreamTransportWithResolverImpl<TcpTransport, boost::asio::ip::tcp> Impl;$/;"	t	class:ndn::TcpTransport
Impl	transport/unix-transport.hpp	/^  typedef StreamTransportImpl<UnixTransport, boost::asio::local::stream_protocol> Impl;$/;"	t	class:ndn::UnixTransport
Impl	util/network-monitor.cpp	/^  Impl(boost::asio::io_service& io)$/;"	f	class:ndn::util::NetworkMonitor::Impl
Impl	util/network-monitor.cpp	/^class NetworkMonitor::Impl$/;"	c	class:ndn::util::NetworkMonitor	file:
ImplicitSha256DigestComponent	encoding/tlv.hpp	/^  ImplicitSha256DigestComponent = 1,$/;"	e	enum:ndn::tlv::__anon4
InMemoryStorage	util/in-memory-storage.cpp	/^InMemoryStorage::InMemoryStorage(size_t limit)$/;"	f	class:ndn::util::InMemoryStorage
InMemoryStorage	util/in-memory-storage.hpp	/^class InMemoryStorage : noncopyable$/;"	c	namespace:ndn::util
InMemoryStorageEntry	util/in-memory-storage-entry.hpp	/^class InMemoryStorageEntry : noncopyable$/;"	c	namespace:ndn::util
InMemoryStorageFifo	util/in-memory-storage-fifo.cpp	/^InMemoryStorageFifo::InMemoryStorageFifo(size_t limit)$/;"	f	class:ndn::util::InMemoryStorageFifo
InMemoryStorageFifo	util/in-memory-storage-fifo.hpp	/^class InMemoryStorageFifo : public InMemoryStorage$/;"	c	namespace:ndn::util
InMemoryStorageLfu	util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::InMemoryStorageLfu(size_t limit)$/;"	f	class:ndn::util::InMemoryStorageLfu
InMemoryStorageLfu	util/in-memory-storage-lfu.hpp	/^class InMemoryStorageLfu : public InMemoryStorage$/;"	c	namespace:ndn::util
InMemoryStorageLru	util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::InMemoryStorageLru(size_t limit)$/;"	f	class:ndn::util::InMemoryStorageLru
InMemoryStorageLru	util/in-memory-storage-lru.hpp	/^class InMemoryStorageLru : public InMemoryStorage$/;"	c	namespace:ndn::util
InMemoryStoragePersistent	util/in-memory-storage-persistent.cpp	/^InMemoryStoragePersistent::InMemoryStoragePersistent()$/;"	f	class:ndn::util::InMemoryStoragePersistent
InMemoryStoragePersistent	util/in-memory-storage-persistent.hpp	/^class InMemoryStoragePersistent : public InMemoryStorage$/;"	c	namespace:ndn::util
IncomingFaceId	encoding/tlv-nfd.hpp	/^  IncomingFaceId     = 81,$/;"	e	enum:ndn::tlv::nfd::__anon3
IncomingFaceId	lp/tlv.hpp	/^  IncomingFaceId = 817$/;"	e	enum:ndn::lp::tlv::__anon6
IncomingFaceIdField	lp/fields.hpp	/^                          tlv::IncomingFaceId> IncomingFaceIdField;$/;"	t	namespace:ndn::lp
IndentedStream	util/indented-stream.cpp	/^IndentedStream::IndentedStream(std::ostream& os, const std::string& indent)$/;"	f	class:ndn::util::IndentedStream
IndentedStream	util/indented-stream.hpp	/^class IndentedStream : public std::ostream$/;"	c	namespace:ndn::util
Interest	encoding/tlv.hpp	/^  Interest      = 5,$/;"	e	enum:ndn::tlv::__anon4
Interest	interest.cpp	/^Interest::Interest()$/;"	f	class:ndn::Interest
Interest	interest.cpp	/^Interest::Interest(const Block& wire)$/;"	f	class:ndn::Interest
Interest	interest.cpp	/^Interest::Interest(const Name& name)$/;"	f	class:ndn::Interest
Interest	interest.cpp	/^Interest::Interest(const Name& name, const size_t FC, const size_t EC)$/;"	f	class:ndn::Interest
Interest	interest.cpp	/^Interest::Interest(const Name& name, const time::milliseconds& interestLifetime)$/;"	f	class:ndn::Interest
Interest	interest.hpp	/^class Interest : public TagHost, public enable_shared_from_this<Interest>$/;"	c	namespace:ndn
InterestCallback	detail/interest-filter-record.hpp	/^  typedef function<void (const InterestFilter&, const Interest&)> InterestCallback;$/;"	t	class:ndn::InterestFilterRecord
InterestFilter	interest-filter.cpp	/^InterestFilter::InterestFilter(const Name& prefix, const std::string& regexFilter)$/;"	f	class:ndn::InterestFilter
InterestFilter	interest-filter.hpp	/^InterestFilter::InterestFilter(const Name& prefix)$/;"	f	class:ndn::InterestFilter
InterestFilter	interest-filter.hpp	/^InterestFilter::InterestFilter(const char* prefixUri)$/;"	f	class:ndn::InterestFilter
InterestFilter	interest-filter.hpp	/^InterestFilter::InterestFilter(const std::string& prefixUri)$/;"	f	class:ndn::InterestFilter
InterestFilter	interest-filter.hpp	/^class InterestFilter$/;"	c	namespace:ndn
InterestFilterRecord	detail/interest-filter-record.hpp	/^  InterestFilterRecord(const InterestFilter& filter, const InterestCallback& afterInterest)$/;"	f	class:ndn::InterestFilterRecord
InterestFilterRecord	detail/interest-filter-record.hpp	/^class InterestFilterRecord : noncopyable$/;"	c	namespace:ndn
InterestFilterTable	detail/face-impl.hpp	/^  typedef std::list<shared_ptr<InterestFilterRecord> > InterestFilterTable;$/;"	t	class:ndn::Face::Impl
InterestHandler	mgmt/dispatcher.hpp	/^                             const Interest& interest)> InterestHandler;$/;"	t	class:ndn::mgmt::Dispatcher
InterestLifetime	encoding/tlv.hpp	/^  InterestLifetime          = 12,$/;"	e	enum:ndn::tlv::__anon4
InterestRule	security/validator-config.hpp	/^  typedef security::conf::Rule<Interest> InterestRule;$/;"	t	class:ndn::ValidatorConfig
InterestRuleList	security/validator-config.hpp	/^  typedef std::vector<shared_ptr<InterestRule> > InterestRuleList;$/;"	t	class:ndn::ValidatorConfig
IoEncoding	util/io.hpp	/^enum IoEncoding {$/;"	g	namespace:ndn::io
IpAddress	util/dns.hpp	/^typedef boost::asio::ip::address IpAddress;$/;"	t	namespace:ndn::dns
IpHostCanonizeProvider	util/face-uri.cpp	/^  IpHostCanonizeProvider(const std::string& baseScheme,$/;"	f	class:ndn::util::IpHostCanonizeProvider
IpHostCanonizeProvider	util/face-uri.cpp	/^class IpHostCanonizeProvider : public CanonizeProvider$/;"	c	namespace:ndn::util	file:
Ipv4Only	util/dns.hpp	/^struct Ipv4Only$/;"	s	namespace:ndn::dns
Ipv6Only	util/dns.hpp	/^struct Ipv6Only$/;"	s	namespace:ndn::dns
IsRepeatable	lp/detail/field-decl.hpp	/^  typedef std::integral_constant<bool, REPEATABLE> IsRepeatable;$/;"	t	class:ndn::lp::detail::FieldDecl
KEY_CLASS_PRIVATE	security/security-common.hpp	/^  KEY_CLASS_PRIVATE,$/;"	e	enum:ndn::KeyClass
KEY_CLASS_PUBLIC	security/security-common.hpp	/^  KEY_CLASS_PUBLIC,$/;"	e	enum:ndn::KeyClass
KEY_CLASS_SYMMETRIC	security/security-common.hpp	/^  KEY_CLASS_SYMMETRIC$/;"	e	enum:ndn::KeyClass
KEY_OFFSET	security/additional-description.cpp	/^static const size_t KEY_OFFSET = 0;$/;"	m	namespace:ndn::security	file:
KEY_TYPE_AES	security/security-common.hpp	/^  KEY_TYPE_AES   = 128,$/;"	e	enum:ndn::KeyType
KEY_TYPE_ECDSA	security/security-common.hpp	/^  KEY_TYPE_ECDSA = 1,$/;"	e	enum:ndn::KeyType
KEY_TYPE_NULL	security/security-common.hpp	/^  KEY_TYPE_NULL  = 255$/;"	e	enum:ndn::KeyType
KEY_TYPE_RSA	security/security-common.hpp	/^  KEY_TYPE_RSA   = 0,$/;"	e	enum:ndn::KeyType
Key	security/key.cpp	/^Key::Key()$/;"	f	class:ndn::security::Key
Key	security/key.cpp	/^Key::Key(const Name& identityName, const name::Component& keyId,$/;"	f	class:ndn::security::Key
Key	security/key.hpp	/^class Key$/;"	c	namespace:ndn::security
KeyChain	security/key-chain.cpp	/^KeyChain::KeyChain()$/;"	f	class:ndn::security::KeyChain
KeyChain	security/key-chain.cpp	/^KeyChain::KeyChain(const std::string& pibName,$/;"	f	class:ndn::security::KeyChain
KeyChain	security/key-chain.hpp	/^class KeyChain : noncopyable$/;"	c	namespace:ndn::security
KeyClass	security/security-common.hpp	/^enum KeyClass {$/;"	g	namespace:ndn
KeyContainer	security/key-container.cpp	/^KeyContainer::KeyContainer()$/;"	f	class:ndn::security::KeyContainer
KeyContainer	security/key-container.cpp	/^KeyContainer::KeyContainer(const Name& identity,$/;"	f	class:ndn::security::KeyContainer
KeyContainer	security/key-container.hpp	/^class KeyContainer$/;"	c	namespace:ndn::security
KeyDigest	encoding/tlv.hpp	/^  KeyDigest     = 29,$/;"	e	enum:ndn::tlv::__anon4
KeyLocator	encoding/tlv.hpp	/^  KeyLocator    = 28,$/;"	e	enum:ndn::tlv::__anon4
KeyLocator	key-locator.cpp	/^KeyLocator::KeyLocator()$/;"	f	class:ndn::KeyLocator
KeyLocator	key-locator.cpp	/^KeyLocator::KeyLocator(const Block& wire)$/;"	f	class:ndn::KeyLocator
KeyLocator	key-locator.cpp	/^KeyLocator::KeyLocator(const Name& name)$/;"	f	class:ndn::KeyLocator
KeyLocator	key-locator.hpp	/^class KeyLocator$/;"	c	namespace:ndn
KeyLocatorChecker	security/conf/key-locator-checker.hpp	/^class KeyLocatorChecker$/;"	c	namespace:ndn::security::conf
KeyLocatorCheckerFactory	security/conf/key-locator-checker.hpp	/^class KeyLocatorCheckerFactory$/;"	c	namespace:ndn::security::conf
KeyLocator_KeyDigest	key-locator.hpp	/^    KeyLocator_KeyDigest = 1,$/;"	e	enum:ndn::KeyLocator::Type
KeyLocator_Name	key-locator.hpp	/^    KeyLocator_Name = 0,$/;"	e	enum:ndn::KeyLocator::Type
KeyLocator_None	key-locator.hpp	/^    KeyLocator_None = 65535,$/;"	e	enum:ndn::KeyLocator::Type
KeyLocator_Unknown	key-locator.hpp	/^    KeyLocator_Unknown = 255$/;"	e	enum:ndn::KeyLocator::Type
KeyPackage	encoding/tlv-security.hpp	/^  KeyPackage         = 129,$/;"	e	enum:ndn::tlv::security::__anon1
KeyParams	security/key-params.hpp	/^  KeyParams(KeyType keyType)$/;"	f	class:ndn::KeyParams
KeyParams	security/key-params.hpp	/^class KeyParams$/;"	c	namespace:ndn
KeyType	security/security-common.hpp	/^enum KeyType {$/;"	g	namespace:ndn
LINK_TYPE_MULTI_ACCESS	encoding/nfd-constants.hpp	/^  LINK_TYPE_MULTI_ACCESS = 1$/;"	e	enum:ndn::nfd::LinkType
LINK_TYPE_POINT_TO_POINT	encoding/nfd-constants.hpp	/^  LINK_TYPE_POINT_TO_POINT = 0,$/;"	e	enum:ndn::nfd::LinkType
LOCAL_CONTROL_FEATURE_INCOMING_FACE_ID	management/nfd-control-parameters.hpp	/^  LOCAL_CONTROL_FEATURE_INCOMING_FACE_ID = 1,$/;"	e	enum:ndn::nfd::LocalControlFeature
LOCAL_CONTROL_FEATURE_NEXT_HOP_FACE_ID	management/nfd-control-parameters.hpp	/^  LOCAL_CONTROL_FEATURE_NEXT_HOP_FACE_ID = 2$/;"	e	enum:ndn::nfd::LocalControlFeature
LastTimestampMap	security/validator-config.hpp	/^  typedef std::map<Name, time::system_clock::TimePoint> LastTimestampMap;$/;"	t	class:ndn::ValidatorConfig
LastTimestampMap	util/command-interest-validator.hpp	/^  typedef std::map<Name, time::system_clock::TimePoint> LastTimestampMap;$/;"	t	class:ndn::CommandInterestValidator
Link	link.cpp	/^Link::Link(const Block& block)$/;"	f	class:ndn::Link
Link	link.cpp	/^Link::Link(const Name& name)$/;"	f	class:ndn::Link
Link	link.cpp	/^Link::Link(const Name& name, std::initializer_list<std::pair<uint32_t, Name>> links)$/;"	f	class:ndn::Link
Link	link.hpp	/^class Link : public Data$/;"	c	namespace:ndn
LinkDelegation	encoding/tlv.hpp	/^  LinkDelegation = 31,$/;"	e	enum:ndn::tlv::__anon4
LinkPreference	encoding/tlv.hpp	/^  LinkPreference = 30,$/;"	e	enum:ndn::tlv::__anon4
LinkType	encoding/nfd-constants.hpp	/^enum LinkType {$/;"	g	namespace:ndn::nfd
LinkType	encoding/tlv-nfd.hpp	/^  LinkType              = 134,$/;"	e	enum:ndn::tlv::nfd::__anon2
LocalControlFeature	encoding/tlv-nfd.hpp	/^  LocalControlFeature = 110,$/;"	e	enum:ndn::tlv::nfd::__anon2
LocalControlFeature	management/nfd-control-parameters.hpp	/^enum LocalControlFeature {$/;"	g	namespace:ndn::nfd
LocalControlHeader	encoding/tlv-nfd.hpp	/^  LocalControlHeader = 80,$/;"	e	enum:ndn::tlv::nfd::__anon3
LocalControlHeader	management/nfd-local-control-header.hpp	/^  LocalControlHeader()$/;"	f	class:ndn::nfd::LocalControlHeader
LocalControlHeader	management/nfd-local-control-header.hpp	/^  LocalControlHeader(const Block& wire, uint8_t encodeMask = ENCODE_ALL)$/;"	f	class:ndn::nfd::LocalControlHeader
LocalControlHeader	management/nfd-local-control-header.hpp	/^class LocalControlHeader$/;"	c	namespace:ndn::nfd
LocalUri	encoding/tlv-nfd.hpp	/^  LocalUri              = 129,$/;"	e	enum:ndn::tlv::nfd::__anon2
LpPacket	lp/tlv.hpp	/^  LpPacket = 100,$/;"	e	enum:ndn::lp::tlv::__anon6
MAX_DATA_LEN	util/ethernet.hpp	/^const size_t MAX_DATA_LEN = 1500;   \/\/\/< Max octets in Ethernet payload$/;"	m	namespace:ndn::util::ethernet
MAX_NDN_PACKET_SIZE	encoding/tlv.hpp	/^const size_t MAX_NDN_PACKET_SIZE = 8800;$/;"	m	namespace:ndn
MAX_SIZE_OF_BLOCK_FROM_STREAM	encoding/block.cpp	/^const size_t MAX_SIZE_OF_BLOCK_FROM_STREAM = 8800;$/;"	m	namespace:ndn	file:
MIN_DATA_LEN	util/ethernet.hpp	/^const size_t MIN_DATA_LEN = 46;     \/\/\/< Min octets in Ethernet payload (assuming no 802.1Q tag)$/;"	m	namespace:ndn::util::ethernet
MIN_LENGTH	security/security-common.hpp	/^  MIN_LENGTH = 4$/;"	e	enum:ndn::signed_interest::__anon8
MIN_LENGTH	util/command-interest-validator.hpp	/^    MIN_LENGTH = 4,$/;"	e	enum:ndn::CommandInterestValidator::__anon11
MatchInterestFilterId	detail/interest-filter-record.hpp	/^  MatchInterestFilterId(const InterestFilterId* interestFilterId)$/;"	f	class:ndn::MatchInterestFilterId
MatchInterestFilterId	detail/interest-filter-record.hpp	/^class MatchInterestFilterId$/;"	c	namespace:ndn
MatchPendingInterestId	detail/pending-interest.hpp	/^  MatchPendingInterestId(const PendingInterestId* pendingInterestId)$/;"	f	class:ndn::MatchPendingInterestId
MatchPendingInterestId	detail/pending-interest.hpp	/^class MatchPendingInterestId$/;"	c	namespace:ndn
MatchRegisteredPrefixId	detail/registered-prefix.hpp	/^  MatchRegisteredPrefixId(const RegisteredPrefixId* registeredPrefixId)$/;"	f	class:ndn::MatchRegisteredPrefixId
MatchRegisteredPrefixId	detail/registered-prefix.hpp	/^class MatchRegisteredPrefixId$/;"	c	namespace:ndn
MaxSuffixComponents	encoding/tlv.hpp	/^  MaxSuffixComponents       = 14,$/;"	e	enum:ndn::tlv::__anon4
MetaInfo	encoding/tlv.hpp	/^  MetaInfo      = 20,$/;"	e	enum:ndn::tlv::__anon4
MetaInfo	meta-info.cpp	/^MetaInfo::MetaInfo()$/;"	f	class:ndn::MetaInfo
MetaInfo	meta-info.cpp	/^MetaInfo::MetaInfo(const Block& block)$/;"	f	class:ndn::MetaInfo
MetaInfo	meta-info.hpp	/^class MetaInfo$/;"	c	namespace:ndn
MinSuffixComponents	encoding/tlv.hpp	/^  MinSuffixComponents       = 13,$/;"	e	enum:ndn::tlv::__anon4
MismatchError	security/key-chain.hpp	/^    MismatchError(const std::string& what)$/;"	f	class:ndn::security::KeyChain::MismatchError
MismatchError	security/key-chain.hpp	/^  class MismatchError : public Error$/;"	c	class:ndn::security::KeyChain
MustBeFresh	encoding/tlv.hpp	/^  MustBeFresh   = 18,$/;"	e	enum:ndn::tlv::__anon4
MyasyncExpressInterest	detail/face-impl.hpp	/^  MyasyncExpressInterest(shared_ptr<const Interest> interest,$/;"	f	class:ndn::Face::Impl
NCsEntries	encoding/tlv-nfd.hpp	/^  NCsEntries           = 135,$/;"	e	enum:ndn::tlv::nfd::__anon2
NDN_ASN_EXT_HPP	encoding/cryptopp/asn_ext.hpp	26;"	d
NDN_COMMON_HPP	common.hpp	29;"	d
NDN_COMMON_PCH_HPP	common-pch.hpp	23;"	d
NDN_CXX_DECL_FINAL	common.hpp	55;"	d
NDN_CXX_DECL_FINAL	common.hpp	58;"	d
NDN_CXX_DECL_FINAL	management/nfd-control-parameters.hpp	/^  wireDecode(const Block& wire) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::nfd::ControlParameters
NDN_CXX_DECL_FINAL	management/nfd-control-parameters.hpp	/^  wireEncode() const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::nfd::ControlParameters
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^                             const Name& certName) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  addCertificate(const IdentityCertificate& certificate) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  addIdentity(const Name& identity) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  addKey(const Name& identity, const name::Component& keyId, const PublicKey& publicKey) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  getCertificate(const Name& certName) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  getCertificatesOfKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  getDefaultCertificateOfKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  getDefaultIdentity() const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  getDefaultKeyOfIdentity(const Name& identity) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  getIdentities() const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  getKeyBits(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  getKeysOfIdentity(const Name& identity) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  getTpmLocator() const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  hasCertificate(const Name& certName) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  hasIdentity(const Name& identity) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  hasKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  removeCertificate(const Name& certName) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  removeIdentity(const Name& identity) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  removeKey(const Name& identity, const name::Component& keyId) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  setDefaultIdentity(const Name& identityName) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  setDefaultKeyOfIdentity(const Name& identity, const name::Component& keyId) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	security/pib-sqlite3.hpp	/^  setTpmLocator(const std::string& tpmLocator) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_OVERRIDE	common.hpp	54;"	d
NDN_CXX_DECL_OVERRIDE	common.hpp	57;"	d
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  addCertificate(const IdentityCertificate& certificate) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  addIdentity(const Name& identity) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  addKey(const Name& identity, const name::Component& keyId, const PublicKey& publicKey) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  getCertificate(const Name& certName) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  getCertificatesOfKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  getDefaultCertificateOfKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  getDefaultIdentity() const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  getDefaultKeyOfIdentity(const Name& identity) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  getIdentities() const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  getKeyBits(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  getKeysOfIdentity(const Name& identity) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  getTpmLocator() const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  hasCertificate(const Name& certName) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  hasIdentity(const Name& identity) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  hasKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  removeCertificate(const Name& certName) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  removeIdentity(const Name& identity) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  removeKey(const Name& identity, const name::Component& keyId) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  setDefaultCertificateOfKey(const Name& identity, const name::Component& keyId, const Name& certName) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  setDefaultIdentity(const Name& identityName) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  setDefaultKeyOfIdentity(const Name& identity, const name::Component& keyId) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	security/pib-memory.hpp	/^  setTpmLocator(const std::string& tpmLocator) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_ENABLE_DEPRECATED_BLOCK_HELPERS	encoding/block-helpers.hpp	223;"	d
NDN_CXX_KEYCHAIN_REGISTER_PIB	security/key-chain.hpp	933;"	d
NDN_CXX_KEYCHAIN_REGISTER_TPM	security/key-chain.hpp	949;"	d
NDN_CXX_LP_CACHE_POLICY_HPP	lp/cache-policy.hpp	25;"	d
NDN_CXX_LP_DETAIL_FIELD_DECL_HPP	lp/detail/field-decl.hpp	23;"	d
NDN_CXX_LP_DETAIL_FIELD_INFO_HPP	lp/detail/field-info.hpp	23;"	d
NDN_CXX_LP_FIELDS_HPP	lp/fields.hpp	23;"	d
NDN_CXX_LP_FIELD_HPP	lp/field.hpp	23;"	d
NDN_CXX_LP_NACK_HEADER_HPP	lp/nack-header.hpp	25;"	d
NDN_CXX_LP_NACK_HPP	lp/nack.hpp	25;"	d
NDN_CXX_LP_PACKET_HPP	lp/packet.hpp	23;"	d
NDN_CXX_LP_SEQUENCE_HPP	lp/sequence.hpp	25;"	d
NDN_CXX_LP_TLV_HPP	lp/tlv.hpp	23;"	d
NDN_CXX_PROTECTED_WITH_TESTS_ELSE_PRIVATE	common.hpp	39;"	d
NDN_CXX_PROTECTED_WITH_TESTS_ELSE_PRIVATE	common.hpp	44;"	d
NDN_CXX_PUBLIC_WITH_TESTS_ELSE_PRIVATE	common.hpp	38;"	d
NDN_CXX_PUBLIC_WITH_TESTS_ELSE_PRIVATE	common.hpp	43;"	d
NDN_CXX_PUBLIC_WITH_TESTS_ELSE_PROTECTED	common.hpp	37;"	d
NDN_CXX_PUBLIC_WITH_TESTS_ELSE_PROTECTED	common.hpp	42;"	d
NDN_CXX_SECURITY_SIGNING_HELPERS_HPP	security/signing-helpers.hpp	23;"	d
NDN_CXX_SIGNAL_EMIT	util/signal-emit.hpp	71;"	d
NDN_CXX_SPECIALIZE_BOOST_IS_PLACEHOLDER_FOR_STD_PLACEHOLDER	common.hpp	112;"	d
NDN_CXX_SPECIALIZE_BOOST_IS_PLACEHOLDER_FOR_STD_PLACEHOLDER	common.hpp	129;"	d
NDN_CXX_VIRTUAL_WITH_TESTS	common.hpp	36;"	d
NDN_CXX_VIRTUAL_WITH_TESTS	common.hpp	41;"	d
NDN_DATA_HPP	data.hpp	23;"	d
NDN_DETAIL_CONTAINER_WITH_ON_EMPTY_SIGNAL_HPP	detail/container-with-on-empty-signal.hpp	23;"	d
NDN_DETAIL_FACE_IMPL_HPP	detail/face-impl.hpp	23;"	d
NDN_DETAIL_INTEREST_FILTER_RECORD_HPP	detail/interest-filter-record.hpp	23;"	d
NDN_DETAIL_PENDING_INTEREST_HPP	detail/pending-interest.hpp	23;"	d
NDN_DETAIL_REGISTERED_PREFIX_HPP	detail/registered-prefix.hpp	23;"	d
NDN_ENCODING_BLOCK_HELPERS_HPP	encoding/block-helpers.hpp	23;"	d
NDN_ENCODING_BLOCK_HPP	encoding/block.hpp	25;"	d
NDN_ENCODING_BUFFER_HPP	encoding/buffer.hpp	25;"	d
NDN_ENCODING_BUFFER_STREAM_HPP	encoding/buffer-stream.hpp	25;"	d
NDN_ENCODING_ENCODER_HPP	encoding/encoder.hpp	23;"	d
NDN_ENCODING_ENCODING_BUFFER_FWD_HPP	encoding/encoding-buffer-fwd.hpp	23;"	d
NDN_ENCODING_ENCODING_BUFFER_HPP	encoding/encoding-buffer.hpp	23;"	d
NDN_ENCODING_ENDIAN_HPP	encoding/endian.hpp	25;"	d
NDN_ENCODING_ESTIMATOR_HPP	encoding/estimator.hpp	23;"	d
NDN_ENCODING_NFD_CONSTANTS_HPP	encoding/nfd-constants.hpp	23;"	d
NDN_ENCODING_OID_HPP	encoding/oid.hpp	23;"	d
NDN_ENCODING_TLV_HPP	encoding/tlv.hpp	23;"	d
NDN_ENCODING_TLV_NFD_HPP	encoding/tlv-nfd.hpp	23;"	d
NDN_ENCODING_TLV_SECURITY_HPP	encoding/tlv-security.hpp	23;"	d
NDN_EXCLUDE_H	exclude.hpp	25;"	d
NDN_FACE_HPP	face.hpp	23;"	d
NDN_FACE_KEEP_DEPRECATED_REGISTRATION_SIGNING	face.hpp	34;"	d
NDN_HELPERS_COMMAND_INTEREST_GENERATOR_HPP	util/command-interest-generator.hpp	23;"	d
NDN_INTEREST_FILTER_HPP	interest-filter.hpp	23;"	d
NDN_INTEREST_HPP	interest.hpp	23;"	d
NDN_KEY_LOCATOR_HPP	key-locator.hpp	23;"	d
NDN_LINK_HPP	link.hpp	23;"	d
NDN_MANAGEMENT_CONFIG_FILE_HPP	util/config-file.hpp	23;"	d
NDN_MANAGEMENT_CONTROL_RESPONSE_HPP	management/nfd-control-response.hpp	23;"	d
NDN_MANAGEMENT_NFD_CHANNEL_STATUS_HPP	management/nfd-channel-status.hpp	23;"	d
NDN_MANAGEMENT_NFD_COMMAND_OPTIONS_HPP	management/nfd-command-options.hpp	23;"	d
NDN_MANAGEMENT_NFD_COMMAND_OPTIONS_KEEP_DEPRECATED_SIGNING_PARAMS	management/nfd-command-options.hpp	27;"	d
NDN_MANAGEMENT_NFD_CONTROLLER_HPP	management/nfd-controller.hpp	23;"	d
NDN_MANAGEMENT_NFD_CONTROL_COMMAND_HPP	management/nfd-control-command.hpp	23;"	d
NDN_MANAGEMENT_NFD_CONTROL_PARAMETERS_HPP	management/nfd-control-parameters.hpp	23;"	d
NDN_MANAGEMENT_NFD_FACE_EVENT_NOTIFICATION_HPP	management/nfd-face-event-notification.hpp	23;"	d
NDN_MANAGEMENT_NFD_FACE_MONITOR_HPP	management/nfd-face-monitor.hpp	49;"	d
NDN_MANAGEMENT_NFD_FACE_QUERY_FILTER_HPP	management/nfd-face-query-filter.hpp	23;"	d
NDN_MANAGEMENT_NFD_FACE_STATUS_HPP	management/nfd-face-status.hpp	23;"	d
NDN_MANAGEMENT_NFD_FACE_TRAITS_HPP	management/nfd-face-traits.hpp	23;"	d
NDN_MANAGEMENT_NFD_FIB_ENTRY_HPP	management/nfd-fib-entry.hpp	23;"	d
NDN_MANAGEMENT_NFD_FORWARDER_STATUS_HPP	management/nfd-forwarder-status.hpp	23;"	d
NDN_MANAGEMENT_NFD_LOCAL_CONTROL_HEADER_HPP	management/nfd-local-control-header.hpp	23;"	d
NDN_MANAGEMENT_NFD_RIB_ENTRY_HPP	management/nfd-rib-entry.hpp	23;"	d
NDN_MANAGEMENT_NFD_RIB_FLAGS_HPP	management/nfd-rib-flags.hpp	23;"	d
NDN_MANAGEMENT_NFD_STRATEGY_CHOICE_HPP	management/nfd-strategy-choice.hpp	23;"	d
NDN_META_INFO_HPP	meta-info.hpp	23;"	d
NDN_MGMT_CONTROL_PARAMETERS_HPP	mgmt/control-parameters.hpp	23;"	d
NDN_MGMT_CONTROL_RESPONSE_HPP	mgmt/control-response.hpp	23;"	d
NDN_MGMT_DISPATCHER_HPP	mgmt/dispatcher.hpp	23;"	d
NDN_MGMT_STATUS_DATASET_CONTEXT_HPP	mgmt/status-dataset-context.hpp	23;"	d
NDN_NAME_COMPONENT_HPP	name-component.hpp	23;"	d
NDN_NAME_HPP	name.hpp	27;"	d
NDN_SECURITTY_PIB_SQLITE3_HPP	security/pib-sqlite3.hpp	23;"	d
NDN_SECURITY_ADDITIONAL_DESCRIPTION_HPP	security/additional-description.hpp	23;"	d
NDN_SECURITY_CERTIFICATE_CACHE_HPP	security/certificate-cache.hpp	25;"	d
NDN_SECURITY_CERTIFICATE_CACHE_TTL_HPP	security/certificate-cache-ttl.hpp	25;"	d
NDN_SECURITY_CERTIFICATE_CONTAINER_HPP	security/certificate-container.hpp	23;"	d
NDN_SECURITY_CERTIFICATE_EXTENSION_HPP	security/certificate-extension.hpp	27;"	d
NDN_SECURITY_CERTIFICATE_HPP	security/certificate.hpp	27;"	d
NDN_SECURITY_CERTIFICATE_SUBJECT_DESCRIPTION_HPP	security/certificate-subject-description.hpp	27;"	d
NDN_SECURITY_COMMON_HPP	security/security-common.hpp	23;"	d
NDN_SECURITY_CONF_CHECKER_HPP	security/conf/checker.hpp	25;"	d
NDN_SECURITY_CONF_COMMON_HPP	security/conf/common.hpp	25;"	d
NDN_SECURITY_CONF_FILTER_HPP	security/conf/filter.hpp	25;"	d
NDN_SECURITY_CONF_KEY_LOCATOR_CHECKER_HPP	security/conf/key-locator-checker.hpp	25;"	d
NDN_SECURITY_CONF_RULE_HPP	security/conf/rule.hpp	25;"	d
NDN_SECURITY_CRYPTOPP_HPP	security/cryptopp.hpp	23;"	d
NDN_SECURITY_DIGEST_SHA256_HPP	security/digest-sha256.hpp	23;"	d
NDN_SECURITY_IDENTITY_CERTIFICATE_HPP	security/identity-certificate.hpp	25;"	d
NDN_SECURITY_IDENTITY_CONTAINER_HPP	security/identity-container.hpp	23;"	d
NDN_SECURITY_IDENTITY_HPP	security/identity.hpp	23;"	d
NDN_SECURITY_KEY_CHAIN_HPP	security/key-chain.hpp	25;"	d
NDN_SECURITY_KEY_CONTAINER_HPP	security/key-container.hpp	23;"	d
NDN_SECURITY_KEY_HPP	security/key.hpp	23;"	d
NDN_SECURITY_KEY_PARAMS_HPP	security/key-params.hpp	23;"	d
NDN_SECURITY_OPENSSL_HPP	security/openssl.hpp	23;"	d
NDN_SECURITY_PIB_HPP	security/pib.hpp	23;"	d
NDN_SECURITY_PIB_IMPL_HPP	security/pib-impl.hpp	23;"	d
NDN_SECURITY_PIB_MEMORY_HPP	security/pib-memory.hpp	23;"	d
NDN_SECURITY_PUBLIC_KEY_HPP	security/public-key.hpp	27;"	d
NDN_SECURITY_SECURED_BAG_HPP	security/secured-bag.hpp	23;"	d
NDN_SECURITY_SEC_PUBLIC_INFO_HPP	security/sec-public-info.hpp	23;"	d
NDN_SECURITY_SEC_PUBLIC_INFO_SQLITE3_HPP	security/sec-public-info-sqlite3.hpp	26;"	d
NDN_SECURITY_SEC_RULE_HPP	security/sec-rule.hpp	25;"	d
NDN_SECURITY_SEC_RULE_RELATIVE_HPP	security/sec-rule-relative.hpp	25;"	d
NDN_SECURITY_SEC_RULE_SPECIFIC_H	security/sec-rule-specific.hpp	25;"	d
NDN_SECURITY_SEC_TPM_FILE_HPP	security/sec-tpm-file.hpp	27;"	d
NDN_SECURITY_SEC_TPM_HPP	security/sec-tpm.hpp	25;"	d
NDN_SECURITY_SEC_TPM_OSX_HPP	security/sec-tpm-osx.hpp	25;"	d
NDN_SECURITY_SIGNATURE_SHA256_WITH_ECDSA_HPP	security/signature-sha256-with-ecdsa.hpp	23;"	d
NDN_SECURITY_SIGNATURE_SHA256_WITH_RSA_HPP	security/signature-sha256-with-rsa.hpp	23;"	d
NDN_SECURITY_SIGNING_INFO_HPP	security/signing-info.hpp	23;"	d
NDN_SECURITY_VALIDATION_REQUEST_HPP	security/validation-request.hpp	25;"	d
NDN_SECURITY_VALIDATOR_CONFIG_HPP	security/validator-config.hpp	25;"	d
NDN_SECURITY_VALIDATOR_HPP	security/validator.hpp	26;"	d
NDN_SECURITY_VALIDATOR_NULL_HPP	security/validator-null.hpp	26;"	d
NDN_SECURITY_VALIDATOR_REGEX_HPP	security/validator-regex.hpp	25;"	d
NDN_SECURITY_VALIDITY_PERIOD_HPP	security/validity-period.hpp	23;"	d
NDN_SELECTORS_HPP	selectors.hpp	23;"	d
NDN_SIGNATURE_HPP	signature.hpp	23;"	d
NDN_SIGNATURE_INFO_HPP	signature-info.hpp	23;"	d
NDN_STRING_HELPER_HPP	util/string-helper.hpp	23;"	d
NDN_TAG_HOST_HPP	tag-host.hpp	23;"	d
NDN_TAG_HPP	tag.hpp	23;"	d
NDN_TIME_CUSTOM_CLOCK_HPP	util/time-custom-clock.hpp	23;"	d
NDN_TIME_HPP	util/time.hpp	23;"	d
NDN_TIME_UNIT_TEST_CLOCK_HPP	util/time-unit-test-clock.hpp	23;"	d
NDN_TRANSPORT_STREAM_TRANSPORT_HPP	transport/stream-transport.hpp	23;"	d
NDN_TRANSPORT_TCP_TRANSPORT_HPP	transport/tcp-transport.hpp	23;"	d
NDN_TRANSPORT_TRANSPORT_HPP	transport/transport.hpp	23;"	d
NDN_TRANSPORT_UNIX_TRANSPORT_HPP	transport/unix-transport.hpp	23;"	d
NDN_UTIL_BACKPORTS_HPP	util/backports.hpp	29;"	d
NDN_UTIL_COMMAND_INTEREST_VALIDATOR_HPP	util/command-interest-validator.hpp	23;"	d
NDN_UTIL_CONCEPTS_HPP	util/concepts.hpp	23;"	d
NDN_UTIL_CRYPTO_HPP	util/crypto.hpp	23;"	d
NDN_UTIL_DIGEST_HPP	util/digest.hpp	23;"	d
NDN_UTIL_DNS_H	util/dns.hpp	23;"	d
NDN_UTIL_DUMMY_CLIENT_FACE_HPP	util/dummy-client-face.hpp	23;"	d
NDN_UTIL_ETHERNET_HPP	util/ethernet.hpp	29;"	d
NDN_UTIL_FACE_URI_HPP	util/face-uri.hpp	29;"	d
NDN_UTIL_INDENTED_STREAM_HPP	util/indented-stream.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_ENTRY_HPP	util/in-memory-storage-entry.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_FIFO_HPP	util/in-memory-storage-fifo.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_HPP	util/in-memory-storage.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_LFU_HPP	util/in-memory-storage-lfu.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_LRU_HPP	util/in-memory-storage-lru.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_PERSISTENT_HPP	util/in-memory-storage-persistent.hpp	23;"	d
NDN_UTIL_IO_HPP	util/io.hpp	23;"	d
NDN_UTIL_MONOTONIC_DEADLINE_TIMER_HPP	util/monotonic_deadline_timer.hpp	27;"	d
NDN_UTIL_NETWORK_MONITOR_HPP	util/network-monitor.hpp	23;"	d
NDN_UTIL_NOTIFICATION_STREAM_HPP	util/notification-stream.hpp	49;"	d
NDN_UTIL_NOTIFICATION_SUBSCRIBER_HPP	util/notification-subscriber.hpp	49;"	d
NDN_UTIL_RANDOM_HPP	util/random.hpp	23;"	d
NDN_UTIL_REGEX_BACKREF_MANAGER_HPP	util/regex/regex-backref-manager.hpp	25;"	d
NDN_UTIL_REGEX_COMPONENT_SET_MATCHER_HPP	util/regex/regex-component-set-matcher.hpp	25;"	d
NDN_UTIL_REGEX_HPP	util/regex.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_BACKREF_MATCHER_HPP	util/regex/regex-backref-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_COMPONENT_MATCHER_HPP	util/regex/regex-component-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_MATCHER_H	util/regex/regex-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_PATTERN_LIST_MATCHER_HPP	util/regex/regex-pattern-list-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_PSEUDO_MATCHER_HPP	util/regex/regex-pseudo-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_REPEAT_MATCHER_HPP	util/regex/regex-repeat-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_TOP_MATCHER_HPP	util/regex/regex-top-matcher.hpp	25;"	d
NDN_UTIL_SCHEDULER_HPP	util/scheduler.hpp	23;"	d
NDN_UTIL_SCHEDULER_SCOPED_EVENT_ID_HPP	util/scheduler-scoped-event-id.hpp	23;"	d
NDN_UTIL_SEGMENT_FETCHER_HPP	util/segment-fetcher.hpp	23;"	d
NDN_UTIL_SIGNAL_CONNECTION_HPP	util/signal-connection.hpp	23;"	d
NDN_UTIL_SIGNAL_EMIT_HPP	util/signal-emit.hpp	34;"	d
NDN_UTIL_SIGNAL_HPP	util/signal.hpp	23;"	d
NDN_UTIL_SIGNAL_SCOPED_CONNECTION_HPP	util/signal-scoped-connection.hpp	23;"	d
NDN_UTIL_SIGNAL_SIGNAL_HPP	util/signal-signal.hpp	23;"	d
NDN_UTIL_SQLITE3_STATEMENT_HPP	util/sqlite3-statement.hpp	23;"	d
NFibEntries	encoding/tlv-nfd.hpp	/^  NFibEntries          = 132,$/;"	e	enum:ndn::tlv::nfd::__anon2
NInBytes	encoding/tlv-nfd.hpp	/^  NInBytes      = 148,$/;"	e	enum:ndn::tlv::nfd::__anon2
NInDatas	encoding/tlv-nfd.hpp	/^  NInDatas      = 145,$/;"	e	enum:ndn::tlv::nfd::__anon2
NInInterests	encoding/tlv-nfd.hpp	/^  NInInterests  = 144,$/;"	e	enum:ndn::tlv::nfd::__anon2
NInNacks	encoding/tlv-nfd.hpp	/^  NInNacks      = 151,$/;"	e	enum:ndn::tlv::nfd::__anon2
NMeasurementsEntries	encoding/tlv-nfd.hpp	/^  NMeasurementsEntries = 134,$/;"	e	enum:ndn::tlv::nfd::__anon2
NNameTreeEntries	encoding/tlv-nfd.hpp	/^  NNameTreeEntries     = 131,$/;"	e	enum:ndn::tlv::nfd::__anon2
NONE	lp/cache-policy.hpp	/^  NONE = 0,$/;"	m	class:ndn::lp::CachePolicyType
NONE	lp/nack-header.hpp	/^  NONE = 0,$/;"	m	class:ndn::lp::NackReason
NOT_AFTER_OFFSET	security/validity-period.cpp	/^static const size_t NOT_AFTER_OFFSET = 1;$/;"	m	namespace:ndn::security	file:
NOT_BEFORE_OFFSET	security/validity-period.cpp	/^static const size_t NOT_BEFORE_OFFSET = 0;$/;"	m	namespace:ndn::security	file:
NO_CACHE	lp/cache-policy.hpp	/^  NO_CACHE = 1$/;"	m	class:ndn::lp::CachePolicyType
NO_ENCODING	util/io.hpp	/^  NO_ENCODING,$/;"	e	enum:ndn::io::IoEncoding
NO_ROUTE	lp/nack-header.hpp	/^  NO_ROUTE = 150$/;"	m	class:ndn::lp::NackReason
NOutBytes	encoding/tlv-nfd.hpp	/^  NOutBytes     = 149,$/;"	e	enum:ndn::tlv::nfd::__anon2
NOutDatas	encoding/tlv-nfd.hpp	/^  NOutDatas     = 147,$/;"	e	enum:ndn::tlv::nfd::__anon2
NOutInterests	encoding/tlv-nfd.hpp	/^  NOutInterests = 146,$/;"	e	enum:ndn::tlv::nfd::__anon2
NOutNacks	encoding/tlv-nfd.hpp	/^  NOutNacks     = 152,$/;"	e	enum:ndn::tlv::nfd::__anon2
NPitEntries	encoding/tlv-nfd.hpp	/^  NPitEntries          = 133,$/;"	e	enum:ndn::tlv::nfd::__anon2
NULL_PORT	util/dns.cpp	/^  static const std::string NULL_PORT;$/;"	m	class:ndn::dns::Resolver	file:
NULL_PORT	util/dns.cpp	/^const std::string Resolver::NULL_PORT = "";$/;"	m	class:ndn::dns::Resolver	file:
Nack	lp/nack.cpp	/^Nack::Nack(Interest&& interest)$/;"	f	class:ndn::lp::Nack
Nack	lp/nack.cpp	/^Nack::Nack(const Interest& interest)$/;"	f	class:ndn::lp::Nack
Nack	lp/nack.hpp	/^class Nack : public TagHost$/;"	c	namespace:ndn::lp
Nack	lp/tlv.hpp	/^  Nack = 800,$/;"	e	enum:ndn::lp::tlv::__anon6
NackCallback	face.hpp	/^typedef function<void(const Interest&, const lp::Nack&)> NackCallback;$/;"	t	namespace:ndn
NackField	lp/fields.hpp	/^                          tlv::Nack> NackField;$/;"	t	namespace:ndn::lp
NackHeader	lp/nack-header.cpp	/^NackHeader::NackHeader()$/;"	f	class:ndn::lp::NackHeader
NackHeader	lp/nack-header.cpp	/^NackHeader::NackHeader(const Block& block)$/;"	f	class:ndn::lp::NackHeader
NackHeader	lp/nack-header.hpp	/^class NackHeader$/;"	c	class:ndn::lp::NackReason
NackReason	lp/nack-header.hpp	/^enum class NackReason {$/;"	c	namespace:ndn::lp
NackReason	lp/tlv.hpp	/^  NackReason = 801,$/;"	e	enum:ndn::lp::tlv::__anon6
Name	encoding/tlv.hpp	/^  Name          = 7,$/;"	e	enum:ndn::tlv::__anon4
Name	name.cpp	/^Name::Name()$/;"	f	class:ndn::Name
Name	name.cpp	/^Name::Name(const Block& wire)$/;"	f	class:ndn::Name
Name	name.cpp	/^Name::Name(const char* uri)$/;"	f	class:ndn::Name
Name	name.cpp	/^Name::Name(const std::string& uri)$/;"	f	class:ndn::Name
Name	name.hpp	/^class Name : public enable_shared_from_this<Name>$/;"	c	namespace:ndn
NameComponent	encoding/tlv.hpp	/^  NameComponent = 8,$/;"	e	enum:ndn::tlv::__anon4
NetworkMonitor	util/network-monitor.cpp	/^NetworkMonitor::NetworkMonitor(boost::asio::io_service& io)$/;"	f	class:ndn::util::NetworkMonitor
NetworkMonitor	util/network-monitor.hpp	/^class NetworkMonitor : boost::noncopyable$/;"	c	namespace:ndn::util
NextHopFaceId	encoding/tlv-nfd.hpp	/^  NextHopFaceId      = 82,$/;"	e	enum:ndn::tlv::nfd::__anon3
NextHopFaceId	lp/tlv.hpp	/^  NextHopFaceId = 816,$/;"	e	enum:ndn::lp::tlv::__anon6
NextHopFaceIdField	lp/fields.hpp	/^                          tlv::NextHopFaceId> NextHopFaceIdField;$/;"	t	namespace:ndn::lp
NextHopRecord	encoding/tlv-nfd.hpp	/^  NextHopRecord = 129,$/;"	e	enum:ndn::tlv::nfd::__anon2
NextHopRecord	management/nfd-fib-entry.cpp	/^NextHopRecord::NextHopRecord()$/;"	f	class:ndn::nfd::NextHopRecord
NextHopRecord	management/nfd-fib-entry.cpp	/^NextHopRecord::NextHopRecord(const Block& block)$/;"	f	class:ndn::nfd::NextHopRecord
NextHopRecord	management/nfd-fib-entry.hpp	/^class NextHopRecord$/;"	c	namespace:ndn::nfd
NfdVersion	encoding/tlv-nfd.hpp	/^  NfdVersion           = 128,$/;"	e	enum:ndn::tlv::nfd::__anon2
NoCache	encoding/tlv-nfd.hpp	/^  NoCache            = 96$/;"	e	enum:ndn::tlv::nfd::__anon3
Nonce	encoding/tlv.hpp	/^  Nonce         = 10,$/;"	e	enum:ndn::tlv::__anon4
NotAfter	encoding/tlv.hpp	/^  NotAfter = 255,$/;"	e	enum:ndn::tlv::__anon5
NotBefore	encoding/tlv.hpp	/^  NotBefore = 254,$/;"	e	enum:ndn::tlv::__anon5
NotificationStream	util/notification-stream.hpp	/^  NotificationStream(Face& face, const Name& prefix, KeyChain& keyChain)$/;"	f	class:ndn::util::NotificationStream
NotificationStream	util/notification-stream.hpp	/^class NotificationStream : noncopyable$/;"	c	namespace:ndn::util
NotificationSubscriber	util/notification-subscriber.hpp	/^  NotificationSubscriber(Face& face, const Name& prefix,$/;"	f	class:ndn::util::NotificationSubscriber
NotificationSubscriber	util/notification-subscriber.hpp	/^class NotificationSubscriber : noncopyable$/;"	c	namespace:ndn::util
OBufferStream	encoding/buffer-stream.hpp	/^  OBufferStream()$/;"	f	class:ndn::OBufferStream
OBufferStream	encoding/buffer-stream.hpp	/^class OBufferStream : public boost::iostreams::stream<iostreams::buffer_append_device>$/;"	c	namespace:ndn
OID	encoding/oid.cpp	/^OID::OID(const char* oid)$/;"	f	class:ndn::OID
OID	encoding/oid.cpp	/^OID::OID(const string& oid)$/;"	f	class:ndn::OID
OID	encoding/oid.hpp	/^  OID()$/;"	f	class:ndn::OID
OID	encoding/oid.hpp	/^  OID(const std::vector<int>& oid)$/;"	f	class:ndn::OID
OID	encoding/oid.hpp	/^class OID$/;"	c	namespace:ndn
OID_MAGIC_NUMBER	encoding/oid.cpp	/^static const int OID_MAGIC_NUMBER = 40;$/;"	m	namespace:ndn	file:
OnData	face.hpp	/^typedef function<void(const Interest&, Data&)> OnData;$/;"	t	namespace:ndn
OnDataCheckFailed	security/conf/checker.hpp	/^  typedef function<void(const shared_ptr<const Data>&, const std::string&)> OnDataCheckFailed;$/;"	t	class:ndn::security::conf::Checker
OnDataChecked	security/conf/checker.hpp	/^  typedef function<void(const shared_ptr<const Data>&)> OnDataChecked;$/;"	t	class:ndn::security::conf::Checker
OnDataValidated	security/validation-request.hpp	/^typedef function<void(const shared_ptr<const Data>&)> OnDataValidated;$/;"	t	namespace:ndn
OnDataValidationFailed	security/validation-request.hpp	/^                      const std::string&)> OnDataValidationFailed;$/;"	t	namespace:ndn
OnFailure	security/validator.hpp	/^  typedef function<void(const std::string&)> OnFailure;$/;"	t	class:ndn::Validator
OnInterest	face.hpp	/^typedef function<void (const InterestFilter&, const Interest&)> OnInterest;$/;"	t	namespace:ndn
OnInterestCheckFailed	security/conf/checker.hpp	/^                        const std::string&)> OnInterestCheckFailed;$/;"	t	class:ndn::security::conf::Checker
OnInterestChecked	security/conf/checker.hpp	/^  typedef function<void(const shared_ptr<const Interest>&)> OnInterestChecked;$/;"	t	class:ndn::security::conf::Checker
OnInterestValidated	security/validation-request.hpp	/^typedef function<void(const shared_ptr<const Interest>&)> OnInterestValidated;$/;"	t	namespace:ndn
OnInterestValidationFailed	security/validation-request.hpp	/^                      const std::string&)> OnInterestValidationFailed;$/;"	t	namespace:ndn
OnTimeout	face.hpp	/^typedef function<void(const Interest&)> OnTimeout;$/;"	t	namespace:ndn
Options	util/dummy-client-face.hpp	/^  struct Options$/;"	s	class:ndn::util::DummyClientFace
Origin	encoding/tlv-nfd.hpp	/^  Origin              = 111,$/;"	e	enum:ndn::tlv::nfd::__anon2
POS_RANDOM_VAL	security/security-common.hpp	/^  POS_RANDOM_VAL = -3,$/;"	e	enum:ndn::signed_interest::__anon8
POS_RANDOM_VAL	util/command-interest-validator.hpp	/^    POS_RANDOM_VAL = -3,$/;"	e	enum:ndn::CommandInterestValidator::__anon11
POS_SIG_INFO	security/security-common.hpp	/^  POS_SIG_INFO = -2,$/;"	e	enum:ndn::signed_interest::__anon8
POS_SIG_INFO	util/command-interest-validator.hpp	/^    POS_SIG_INFO = -2,$/;"	e	enum:ndn::CommandInterestValidator::__anon11
POS_SIG_VALUE	security/security-common.hpp	/^  POS_SIG_VALUE = -1,$/;"	e	enum:ndn::signed_interest::__anon8
POS_SIG_VALUE	util/command-interest-validator.hpp	/^    POS_SIG_VALUE = -1,$/;"	e	enum:ndn::CommandInterestValidator::__anon11
POS_TIMESTAMP	security/security-common.hpp	/^  POS_TIMESTAMP = -4,$/;"	e	enum:ndn::signed_interest::__anon8
POS_TIMESTAMP	util/command-interest-validator.hpp	/^    POS_TIMESTAMP = -4,$/;"	e	enum:ndn::CommandInterestValidator::__anon11
Packet	lp/packet.cpp	/^Packet::Packet()$/;"	f	class:ndn::lp::Packet
Packet	lp/packet.cpp	/^Packet::Packet(const Block& wire)$/;"	f	class:ndn::lp::Packet
Packet	lp/packet.hpp	/^class Packet$/;"	c	namespace:ndn::lp
Parsed	util/config-file.hpp	/^  typedef boost::property_tree::ptree Parsed;$/;"	t	class:ndn::ConfigFile
PartialName	name.hpp	/^typedef Name PartialName;$/;"	t	namespace:ndn
PendingInterest	detail/pending-interest.hpp	/^  PendingInterest(shared_ptr<const Interest> interest,$/;"	f	class:ndn::PendingInterest
PendingInterest	detail/pending-interest.hpp	/^class PendingInterest : noncopyable$/;"	c	namespace:ndn
PendingInterestTable	detail/face-impl.hpp	/^  typedef ContainerWithOnEmptySignal<shared_ptr<PendingInterest>> PendingInterestTable;$/;"	t	class:ndn::Face::Impl
Pib	security/pib.cpp	/^Pib::Pib(const std::string scheme, const std::string& location, shared_ptr<PibImpl> impl)$/;"	f	class:ndn::security::Pib
Pib	security/pib.hpp	/^class Pib : noncopyable$/;"	c	namespace:ndn::security
PibCreateFunc	security/key-chain.hpp	/^  typedef function<unique_ptr<SecPublicInfo> (const std::string&)> PibCreateFunc;$/;"	t	class:ndn::security::KeyChain
PibFactory	security/key-chain.cpp	/^typedef Factory<KeyChain::PibCreateFunc> PibFactory;$/;"	t	namespace:ndn::security	file:
PibImpl	security/pib-impl.hpp	/^class PibImpl$/;"	c	namespace:ndn::security
PibMemory	security/pib-memory.cpp	/^PibMemory::PibMemory()$/;"	f	class:ndn::security::PibMemory
PibMemory	security/pib-memory.hpp	/^class PibMemory : public PibImpl$/;"	c	namespace:ndn::security
PibSqlite3	security/pib-sqlite3.cpp	/^PibSqlite3::PibSqlite3(const string& dir)$/;"	f	class:ndn::security::PibSqlite3
PibSqlite3	security/pib-sqlite3.hpp	/^class PibSqlite3 : public PibImpl$/;"	c	namespace:ndn::security
PostNotification	mgmt/dispatcher.hpp	/^typedef std::function<void(const Block& notification)> PostNotification;$/;"	t	namespace:ndn::mgmt
PublicKey	security/public-key.cpp	/^PublicKey::PublicKey()$/;"	f	class:ndn::PublicKey
PublicKey	security/public-key.cpp	/^PublicKey::PublicKey(const uint8_t* keyDerBuf, size_t keyDerSize)$/;"	f	class:ndn::PublicKey
PublicKey	security/public-key.hpp	/^class PublicKey$/;"	c	namespace:ndn
PublisherPublicKeyLocator	encoding/tlv.hpp	/^  PublisherPublicKeyLocator = 15,$/;"	e	enum:ndn::tlv::__anon4
RELATION_EQUAL	security/conf/filter.hpp	/^      RELATION_EQUAL,$/;"	e	enum:ndn::security::conf::RelationNameFilter::Relation
RELATION_EQUAL	security/conf/key-locator-checker.hpp	/^    RELATION_EQUAL,$/;"	e	enum:ndn::security::conf::KeyLocatorChecker::Relation
RELATION_IS_PREFIX_OF	security/conf/filter.hpp	/^      RELATION_IS_PREFIX_OF,$/;"	e	enum:ndn::security::conf::RelationNameFilter::Relation
RELATION_IS_PREFIX_OF	security/conf/key-locator-checker.hpp	/^    RELATION_IS_PREFIX_OF,$/;"	e	enum:ndn::security::conf::KeyLocatorChecker::Relation
RELATION_IS_STRICT_PREFIX_OF	security/conf/filter.hpp	/^      RELATION_IS_STRICT_PREFIX_OF$/;"	e	enum:ndn::security::conf::RelationNameFilter::Relation
RELATION_IS_STRICT_PREFIX_OF	security/conf/key-locator-checker.hpp	/^    RELATION_IS_STRICT_PREFIX_OF$/;"	e	enum:ndn::security::conf::KeyLocatorChecker::Relation
RESPONDED	mgmt/status-dataset-context.hpp	/^    RESPONDED, \/\/\/< .append has been invoked$/;"	m	class:ndn::mgmt::StatusDatasetContext::State
ROUTE_FLAG_CAPTURE	encoding/nfd-constants.hpp	/^  ROUTE_FLAG_CAPTURE       = 2$/;"	e	enum:ndn::nfd::RouteFlags
ROUTE_FLAG_CHILD_INHERIT	encoding/nfd-constants.hpp	/^  ROUTE_FLAG_CHILD_INHERIT = 1,$/;"	e	enum:ndn::nfd::RouteFlags
ROUTE_ORIGIN_APP	encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_APP      = 0,$/;"	e	enum:ndn::nfd::RouteOrigin
ROUTE_ORIGIN_AUTOCONF	encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_AUTOCONF = 66,$/;"	e	enum:ndn::nfd::RouteOrigin
ROUTE_ORIGIN_AUTOREG	encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_AUTOREG  = 64,$/;"	e	enum:ndn::nfd::RouteOrigin
ROUTE_ORIGIN_CLIENT	encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_CLIENT   = 65,$/;"	e	enum:ndn::nfd::RouteOrigin
ROUTE_ORIGIN_NLSR	encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_NLSR     = 128,$/;"	e	enum:ndn::nfd::RouteOrigin
ROUTE_ORIGIN_STATIC	encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_STATIC   = 255$/;"	e	enum:ndn::nfd::RouteOrigin
RSA_KEY_SIZES	security/key-params.cpp	/^static const uint32_t RSA_KEY_SIZES[] = {2048, 1024};$/;"	m	namespace:ndn	file:
ReceiveCallback	transport/transport.hpp	/^  typedef function<void (const Block& wire)> ReceiveCallback;$/;"	t	class:ndn::Transport
Regex	util/regex.hpp	/^typedef RegexTopMatcher Regex;$/;"	t	namespace:ndn
RegexBackrefManager	util/regex/regex-backref-manager.hpp	/^  RegexBackrefManager()$/;"	f	class:ndn::RegexBackrefManager
RegexBackrefManager	util/regex/regex-backref-manager.hpp	/^class RegexBackrefManager$/;"	c	namespace:ndn
RegexBackrefMatcher	util/regex/regex-backref-matcher.hpp	/^RegexBackrefMatcher::RegexBackrefMatcher(const std::string& expr,$/;"	f	class:ndn::RegexBackrefMatcher
RegexBackrefMatcher	util/regex/regex-backref-matcher.hpp	/^class RegexBackrefMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexComponentMatcher	util/regex/regex-component-matcher.hpp	/^RegexComponentMatcher::RegexComponentMatcher(const std::string& expr,$/;"	f	class:ndn::RegexComponentMatcher
RegexComponentMatcher	util/regex/regex-component-matcher.hpp	/^class RegexComponentMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexComponentSetMatcher	util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::RegexComponentSetMatcher(const std::string& expr,$/;"	f	class:ndn::RegexComponentSetMatcher
RegexComponentSetMatcher	util/regex/regex-component-set-matcher.hpp	/^class RegexComponentSetMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexExprType	util/regex/regex-matcher.hpp	/^  enum RegexExprType {$/;"	g	class:ndn::RegexMatcher
RegexKeyLocatorNameChecker	security/conf/key-locator-checker.hpp	/^  RegexKeyLocatorNameChecker(const Regex& regex)$/;"	f	class:ndn::security::conf::RegexKeyLocatorNameChecker
RegexKeyLocatorNameChecker	security/conf/key-locator-checker.hpp	/^class RegexKeyLocatorNameChecker : public KeyLocatorChecker$/;"	c	namespace:ndn::security::conf
RegexList	security/validator-regex.hpp	/^  typedef std::vector< shared_ptr<Regex> > RegexList;$/;"	t	class:ndn::ValidatorRegex
RegexMatcher	util/regex/regex-matcher.hpp	/^RegexMatcher::RegexMatcher(const std::string& expr,$/;"	f	class:ndn::RegexMatcher
RegexMatcher	util/regex/regex-matcher.hpp	/^class RegexMatcher$/;"	c	namespace:ndn
RegexNameFilter	security/conf/filter.hpp	/^  RegexNameFilter(const Regex& regex)$/;"	f	class:ndn::security::conf::RegexNameFilter
RegexNameFilter	security/conf/filter.hpp	/^class RegexNameFilter : public Filter$/;"	c	namespace:ndn::security::conf
RegexPatternListMatcher	util/regex/regex-pattern-list-matcher.hpp	/^RegexPatternListMatcher::RegexPatternListMatcher(const std::string& expr,$/;"	f	class:ndn::RegexPatternListMatcher
RegexPatternListMatcher	util/regex/regex-pattern-list-matcher.hpp	/^class RegexPatternListMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexPseudoMatcher	util/regex/regex-pseudo-matcher.hpp	/^RegexPseudoMatcher::RegexPseudoMatcher()$/;"	f	class:ndn::RegexPseudoMatcher
RegexPseudoMatcher	util/regex/regex-pseudo-matcher.hpp	/^class RegexPseudoMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexRepeatMatcher	util/regex/regex-repeat-matcher.hpp	/^RegexRepeatMatcher::RegexRepeatMatcher(const std::string& expr,$/;"	f	class:ndn::RegexRepeatMatcher
RegexRepeatMatcher	util/regex/regex-repeat-matcher.hpp	/^class RegexRepeatMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexTopMatcher	util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::RegexTopMatcher(const std::string& expr, const std::string& expand)$/;"	f	class:ndn::RegexTopMatcher
RegexTopMatcher	util/regex/regex-top-matcher.hpp	/^class RegexTopMatcher: public RegexMatcher$/;"	c	namespace:ndn
RegisterPrefixFailureCallback	face.hpp	/^typedef function<void(const Name&, const std::string&)> RegisterPrefixFailureCallback;$/;"	t	namespace:ndn
RegisterPrefixSuccessCallback	face.hpp	/^typedef function<void(const Name&)> RegisterPrefixSuccessCallback;$/;"	t	namespace:ndn
RegisteredPrefix	detail/registered-prefix.hpp	/^  RegisteredPrefix(const Name& prefix,$/;"	f	class:ndn::RegisteredPrefix
RegisteredPrefix	detail/registered-prefix.hpp	/^class RegisteredPrefix : noncopyable$/;"	c	namespace:ndn
RegisteredPrefixTable	detail/face-impl.hpp	/^  typedef ContainerWithOnEmptySignal<shared_ptr<RegisteredPrefix>> RegisteredPrefixTable;$/;"	t	class:ndn::Face::Impl
RejectContinuation	mgmt/dispatcher.hpp	/^typedef std::function<void(RejectReply act)> RejectContinuation;$/;"	t	namespace:ndn::mgmt
RejectReply	mgmt/dispatcher.hpp	/^enum class RejectReply {$/;"	c	namespace:ndn::mgmt
Relation	security/conf/filter.hpp	/^  enum Relation$/;"	g	class:ndn::security::conf::RelationNameFilter
Relation	security/conf/key-locator-checker.hpp	/^  enum Relation {$/;"	g	class:ndn::security::conf::KeyLocatorChecker
RelationKeyLocatorNameChecker	security/conf/key-locator-checker.hpp	/^  RelationKeyLocatorNameChecker(const Name& name,$/;"	f	class:ndn::security::conf::RelationKeyLocatorNameChecker
RelationKeyLocatorNameChecker	security/conf/key-locator-checker.hpp	/^class RelationKeyLocatorNameChecker : public KeyLocatorChecker$/;"	c	namespace:ndn::security::conf
RelationNameFilter	security/conf/filter.hpp	/^  RelationNameFilter(const Name& name, Relation relation)$/;"	f	class:ndn::security::conf::RelationNameFilter
RelationNameFilter	security/conf/filter.hpp	/^class RelationNameFilter : public Filter$/;"	c	namespace:ndn::security::conf
Resolver	util/dns.cpp	/^  Resolver(const SuccessCallback& onSuccess,$/;"	f	class:ndn::dns::Resolver
Resolver	util/dns.cpp	/^class Resolver : noncopyable$/;"	c	namespace:ndn::dns	file:
RibEntry	encoding/tlv-nfd.hpp	/^  RibEntry = 128,$/;"	e	enum:ndn::tlv::nfd::__anon2
RibEntry	management/nfd-rib-entry.cpp	/^RibEntry::RibEntry()$/;"	f	class:ndn::nfd::RibEntry
RibEntry	management/nfd-rib-entry.cpp	/^RibEntry::RibEntry(const Block& block)$/;"	f	class:ndn::nfd::RibEntry
RibEntry	management/nfd-rib-entry.hpp	/^class RibEntry$/;"	c	namespace:ndn::nfd
RibFlagsTraits	management/nfd-rib-flags.hpp	/^class RibFlagsTraits$/;"	c	namespace:ndn::nfd
RibRegisterCommand	management/nfd-control-command.cpp	/^RibRegisterCommand::RibRegisterCommand()$/;"	f	class:ndn::nfd::RibRegisterCommand
RibRegisterCommand	management/nfd-control-command.hpp	/^class RibRegisterCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
RibUnregisterCommand	management/nfd-control-command.cpp	/^RibUnregisterCommand::RibUnregisterCommand()$/;"	f	class:ndn::nfd::RibUnregisterCommand
RibUnregisterCommand	management/nfd-control-command.hpp	/^class RibUnregisterCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
Route	encoding/tlv-nfd.hpp	/^  Route    = 129$/;"	e	enum:ndn::tlv::nfd::__anon2
Route	management/nfd-rib-entry.cpp	/^Route::Route()$/;"	f	class:ndn::nfd::Route
Route	management/nfd-rib-entry.cpp	/^Route::Route(const Block& block)$/;"	f	class:ndn::nfd::Route
Route	management/nfd-rib-entry.hpp	/^class Route : public RibFlagsTraits<Route>$/;"	c	namespace:ndn::nfd
RouteFlags	encoding/nfd-constants.hpp	/^enum RouteFlags {$/;"	g	namespace:ndn::nfd
RouteList	management/nfd-rib-entry.hpp	/^  typedef std::list<Route> RouteList;$/;"	t	class:ndn::nfd::RibEntry
RouteOrigin	encoding/nfd-constants.hpp	/^enum RouteOrigin {$/;"	g	namespace:ndn::nfd
RsaKeyParams	security/key-params.hpp	/^typedef SimplePublicKeyParams<RsaKeyParamsInfo> RsaKeyParams;$/;"	t	namespace:ndn
RsaKeyParamsInfo	security/key-params.hpp	/^class RsaKeyParamsInfo$/;"	c	namespace:ndn
Rule	security/conf/rule.hpp	/^  Rule(const std::string& id)$/;"	f	class:ndn::security::conf::Rule
Rule	security/conf/rule.hpp	/^class Rule$/;"	c	namespace:ndn::security::conf
RuleList	security/validator-regex.hpp	/^  typedef std::vector< shared_ptr<SecRuleRelative> > RuleList;$/;"	t	class:ndn::ValidatorRegex
SCHEME	security/sec-public-info-sqlite3.hpp	/^  static const std::string SCHEME;$/;"	m	class:ndn::SecPublicInfoSqlite3
SCHEME	security/sec-tpm-file.hpp	/^  static const std::string SCHEME;$/;"	m	class:ndn::SecTpmFile
SCHEME	security/sec-tpm-osx.hpp	/^  static const std::string SCHEME;$/;"	m	class:ndn::SecTpmOsx
SEGMENT_MARKER	name-component.hpp	/^static const uint8_t SEGMENT_MARKER = 0x00;$/;"	m	namespace:ndn::name
SEGMENT_OFFSET_MARKER	name-component.hpp	/^static const uint8_t SEGMENT_OFFSET_MARKER = 0xFB;$/;"	m	namespace:ndn::name
SEGMENT_VERIFICATION_FAIL	util/segment-fetcher.hpp	/^    SEGMENT_VERIFICATION_FAIL = 3$/;"	e	enum:ndn::util::SegmentFetcher::ErrorCode
SEQUENCE_NUMBER_MARKER	name-component.hpp	/^static const uint8_t SEQUENCE_NUMBER_MARKER = 0xFE;$/;"	m	namespace:ndn::name
SHA256_DIGEST_SIZE	util/crypto.hpp	/^static const size_t SHA256_DIGEST_SIZE = 32;$/;"	m	namespace:ndn::crypto
SIGNER_TYPE_CERT	security/signing-info.hpp	/^    SIGNER_TYPE_CERT = 3,$/;"	e	enum:ndn::security::SigningInfo::SignerType
SIGNER_TYPE_ID	security/signing-info.hpp	/^    SIGNER_TYPE_ID = 1,$/;"	e	enum:ndn::security::SigningInfo::SignerType
SIGNER_TYPE_KEY	security/signing-info.hpp	/^    SIGNER_TYPE_KEY = 2,$/;"	e	enum:ndn::security::SigningInfo::SignerType
SIGNER_TYPE_NULL	security/signing-info.hpp	/^    SIGNER_TYPE_NULL = 0,$/;"	e	enum:ndn::security::SigningInfo::SignerType
SIGNER_TYPE_SHA256	security/signing-info.hpp	/^    SIGNER_TYPE_SHA256 = 4$/;"	e	enum:ndn::security::SigningInfo::SignerType
SIGNING_PARAMS_CERTIFICATE	management/nfd-command-options.hpp	/^    SIGNING_PARAMS_CERTIFICATE$/;"	e	enum:ndn::nfd::CommandOptions::SigningParamsKind
SIGNING_PARAMS_DEFAULT	management/nfd-command-options.hpp	/^    SIGNING_PARAMS_DEFAULT,$/;"	e	enum:ndn::nfd::CommandOptions::SigningParamsKind
SIGNING_PARAMS_IDENTITY	management/nfd-command-options.hpp	/^    SIGNING_PARAMS_IDENTITY,$/;"	e	enum:ndn::nfd::CommandOptions::SigningParamsKind
SILENT	mgmt/dispatcher.hpp	/^  SILENT,$/;"	m	class:ndn::mgmt::RejectReply
Scheduler	util/scheduler.cpp	/^Scheduler::Scheduler(boost::asio::io_service& ioService)$/;"	f	class:ndn::util::scheduler::Scheduler
Scheduler	util/scheduler.hpp	/^class Scheduler$/;"	c	namespace:ndn::util::scheduler
ScopedConnection	util/signal-scoped-connection.cpp	/^ScopedConnection::ScopedConnection()$/;"	f	class:ndn::util::signal::ScopedConnection
ScopedConnection	util/signal-scoped-connection.cpp	/^ScopedConnection::ScopedConnection(const Connection& connection)$/;"	f	class:ndn::util::signal::ScopedConnection
ScopedConnection	util/signal-scoped-connection.hpp	/^class ScopedConnection : noncopyable$/;"	c	namespace:ndn::util::signal
ScopedEventId	util/scheduler-scoped-event-id.cpp	/^ScopedEventId::ScopedEventId(Scheduler& scheduler)$/;"	f	class:ndn::util::scheduler::ScopedEventId
ScopedEventId	util/scheduler-scoped-event-id.hpp	/^class ScopedEventId : noncopyable$/;"	c	namespace:ndn::util::scheduler
SecPublicInfo	security/sec-public-info.cpp	/^SecPublicInfo::SecPublicInfo(const std::string& location)$/;"	f	class:ndn::SecPublicInfo
SecPublicInfo	security/sec-public-info.hpp	/^class SecPublicInfo : noncopyable$/;"	c	namespace:ndn
SecPublicInfoSqlite3	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::SecPublicInfoSqlite3(const std::string& dir)$/;"	f	class:ndn::SecPublicInfoSqlite3
SecPublicInfoSqlite3	security/sec-public-info-sqlite3.hpp	/^class SecPublicInfoSqlite3 : public SecPublicInfo$/;"	c	namespace:ndn
SecRule	security/sec-rule.hpp	/^  SecRule(bool isPositive)$/;"	f	class:ndn::SecRule
SecRule	security/sec-rule.hpp	/^class SecRule$/;"	c	namespace:ndn
SecRuleRelative	security/sec-rule-relative.cpp	/^SecRuleRelative::SecRuleRelative(const string& dataRegex, const string& signerRegex,$/;"	f	class:ndn::SecRuleRelative
SecRuleRelative	security/sec-rule-relative.hpp	/^class SecRuleRelative : public SecRule$/;"	c	namespace:ndn
SecRuleSpecific	security/sec-rule-specific.cpp	/^SecRuleSpecific::SecRuleSpecific(const SecRuleSpecific& rule)$/;"	f	class:ndn::SecRuleSpecific
SecRuleSpecific	security/sec-rule-specific.cpp	/^SecRuleSpecific::SecRuleSpecific(shared_ptr<Regex> dataRegex)$/;"	f	class:ndn::SecRuleSpecific
SecRuleSpecific	security/sec-rule-specific.cpp	/^SecRuleSpecific::SecRuleSpecific(shared_ptr<Regex> dataRegex,$/;"	f	class:ndn::SecRuleSpecific
SecRuleSpecific	security/sec-rule-specific.hpp	/^class SecRuleSpecific : public SecRule$/;"	c	namespace:ndn
SecTpm	security/sec-tpm.cpp	/^SecTpm::SecTpm(const string& location)$/;"	f	class:ndn::SecTpm
SecTpm	security/sec-tpm.hpp	/^class SecTpm : noncopyable$/;"	c	namespace:ndn
SecTpmFile	security/sec-tpm-file.cpp	/^SecTpmFile::SecTpmFile(const string& location)$/;"	f	class:ndn::SecTpmFile
SecTpmFile	security/sec-tpm-file.hpp	/^class SecTpmFile : public SecTpm$/;"	c	namespace:ndn
SecTpmOsx	security/sec-tpm-osx.cpp	/^SecTpmOsx::SecTpmOsx(const std::string& location)$/;"	f	class:ndn::SecTpmOsx
SecTpmOsx	security/sec-tpm-osx.hpp	/^class SecTpmOsx : public SecTpm$/;"	c	namespace:ndn
SecuredBag	security/secured-bag.cpp	/^SecuredBag::SecuredBag()$/;"	f	class:ndn::SecuredBag
SecuredBag	security/secured-bag.cpp	/^SecuredBag::SecuredBag(const Block& wire)$/;"	f	class:ndn::SecuredBag
SecuredBag	security/secured-bag.cpp	/^SecuredBag::SecuredBag(const IdentityCertificate& cert, ConstBufferPtr key)$/;"	f	class:ndn::SecuredBag
SecuredBag	security/secured-bag.hpp	/^class SecuredBag$/;"	c	namespace:ndn
SegmentFetcher	util/segment-fetcher.cpp	/^SegmentFetcher::SegmentFetcher(Face& face,$/;"	f	class:ndn::util::SegmentFetcher
SegmentFetcher	util/segment-fetcher.hpp	/^class SegmentFetcher : noncopyable$/;"	c	namespace:ndn::util
SelectedDelegation	encoding/tlv.hpp	/^  SelectedDelegation = 32,$/;"	e	enum:ndn::tlv::__anon4
Selectors	encoding/tlv.hpp	/^  Selectors     = 9,$/;"	e	enum:ndn::tlv::__anon4
Selectors	selectors.cpp	/^Selectors::Selectors()$/;"	f	class:ndn::Selectors
Selectors	selectors.cpp	/^Selectors::Selectors(const Block& wire)$/;"	f	class:ndn::Selectors
Selectors	selectors.hpp	/^class Selectors$/;"	c	namespace:ndn
Self	util/signal-signal.hpp	/^  typedef Signal<Owner, TArgs...> Self;$/;"	t	class:ndn::util::signal::Signal
Sequence	lp/sequence.hpp	/^typedef uint64_t Sequence;$/;"	t	namespace:ndn::lp
Sequence	lp/tlv.hpp	/^  Sequence = 81,$/;"	e	enum:ndn::lp::tlv::__anon6
SequenceField	lp/fields.hpp	/^                          tlv::Sequence> SequenceField;$/;"	t	namespace:ndn::lp
Sha256	signature.hpp	/^    Sha256 = tlv::DigestSha256,$/;"	e	enum:ndn::Signature::__anon10
Sha256	util/digest.hpp	/^typedef Digest<CryptoPP::SHA256> Sha256;$/;"	t	namespace:ndn::util
Sha256WithEcdsa	signature.hpp	/^    Sha256WithEcdsa = tlv::SignatureSha256WithEcdsa$/;"	e	enum:ndn::Signature::__anon10
Sha256WithRsa	signature.hpp	/^    Sha256WithRsa = tlv::SignatureSha256WithRsa,$/;"	e	enum:ndn::Signature::__anon10
SignParams	security/key-chain.hpp	/^  typedef std::map<std::string, Block> SignParams;$/;"	t	class:ndn::security::KeyChain
Signal	util/signal-signal.hpp	/^Signal<Owner, TArgs...>::Signal()$/;"	f	class:ndn::util::signal::Signal
Signal	util/signal-signal.hpp	/^class Signal : noncopyable$/;"	c	namespace:ndn::util::signal
Signature	signature.cpp	/^Signature::Signature(const Block& info, const Block& value)$/;"	f	class:ndn::Signature
Signature	signature.cpp	/^Signature::Signature(const SignatureInfo& info, const Block& value)$/;"	f	class:ndn::Signature
Signature	signature.hpp	/^class Signature$/;"	c	namespace:ndn
SignatureInfo	encoding/tlv.hpp	/^  SignatureInfo = 22,$/;"	e	enum:ndn::tlv::__anon4
SignatureInfo	signature-info.cpp	/^SignatureInfo::SignatureInfo()$/;"	f	class:ndn::SignatureInfo
SignatureInfo	signature-info.cpp	/^SignatureInfo::SignatureInfo(const Block& block)$/;"	f	class:ndn::SignatureInfo
SignatureInfo	signature-info.cpp	/^SignatureInfo::SignatureInfo(tlv::SignatureTypeValue type)$/;"	f	class:ndn::SignatureInfo
SignatureInfo	signature-info.cpp	/^SignatureInfo::SignatureInfo(tlv::SignatureTypeValue type, const KeyLocator& keyLocator)$/;"	f	class:ndn::SignatureInfo
SignatureInfo	signature-info.hpp	/^class SignatureInfo$/;"	c	namespace:ndn
SignatureSha256WithEcdsa	encoding/tlv.hpp	/^  SignatureSha256WithEcdsa = 3$/;"	e	enum:ndn::tlv::SignatureTypeValue
SignatureSha256WithEcdsa	security/signature-sha256-with-ecdsa.cpp	/^SignatureSha256WithEcdsa::SignatureSha256WithEcdsa(const KeyLocator& keyLocator)$/;"	f	class:ndn::SignatureSha256WithEcdsa
SignatureSha256WithEcdsa	security/signature-sha256-with-ecdsa.cpp	/^SignatureSha256WithEcdsa::SignatureSha256WithEcdsa(const Signature& signature)$/;"	f	class:ndn::SignatureSha256WithEcdsa
SignatureSha256WithEcdsa	security/signature-sha256-with-ecdsa.hpp	/^class SignatureSha256WithEcdsa : public Signature$/;"	c	namespace:ndn
SignatureSha256WithRsa	encoding/tlv.hpp	/^  SignatureSha256WithRsa = 1,$/;"	e	enum:ndn::tlv::SignatureTypeValue
SignatureSha256WithRsa	security/signature-sha256-with-rsa.cpp	/^SignatureSha256WithRsa::SignatureSha256WithRsa(const KeyLocator& keyLocator)$/;"	f	class:ndn::SignatureSha256WithRsa
SignatureSha256WithRsa	security/signature-sha256-with-rsa.cpp	/^SignatureSha256WithRsa::SignatureSha256WithRsa(const Signature& signature)$/;"	f	class:ndn::SignatureSha256WithRsa
SignatureSha256WithRsa	security/signature-sha256-with-rsa.hpp	/^class SignatureSha256WithRsa : public Signature$/;"	c	namespace:ndn
SignatureType	encoding/tlv.hpp	/^  SignatureType = 27,$/;"	e	enum:ndn::tlv::__anon4
SignatureTypeValue	encoding/tlv.hpp	/^enum SignatureTypeValue {$/;"	g	namespace:ndn::tlv
SignatureValue	encoding/tlv.hpp	/^  SignatureValue  = 23,$/;"	e	enum:ndn::tlv::__anon4
SignerList	security/conf/checker.hpp	/^  typedef std::map<Name, shared_ptr<IdentityCertificate> > SignerList;$/;"	t	class:ndn::security::conf::FixedSignerChecker
SignerType	security/signing-info.hpp	/^  enum SignerType {$/;"	g	class:ndn::security::SigningInfo
SigningInfo	security/signing-info.cpp	/^SigningInfo::SigningInfo(SignerType signerType,$/;"	f	class:ndn::security::SigningInfo
SigningInfo	security/signing-info.hpp	/^class SigningInfo$/;"	c	namespace:ndn::security
SigningParamsKind	management/nfd-command-options.hpp	/^  enum SigningParamsKind {$/;"	g	class:ndn::nfd::CommandOptions
SimplePublicKeyParams	security/key-params.hpp	/^  SimplePublicKeyParams(const KeyParams& params)$/;"	f	class:ndn::SimplePublicKeyParams
SimplePublicKeyParams	security/key-params.hpp	/^  SimplePublicKeyParams(const SimplePublicKeyParams& params)$/;"	f	class:ndn::SimplePublicKeyParams
SimplePublicKeyParams	security/key-params.hpp	/^  SimplePublicKeyParams(uint32_t size = KeyParamsInfo::getDefaultSize())$/;"	f	class:ndn::SimplePublicKeyParams
SimplePublicKeyParams	security/key-params.hpp	/^class SimplePublicKeyParams : public KeyParams$/;"	c	namespace:ndn
SimpleSymmetricKeyParams	security/key-params.hpp	/^  SimpleSymmetricKeyParams(const KeyParams& params)$/;"	f	class:ndn::SimpleSymmetricKeyParams
SimpleSymmetricKeyParams	security/key-params.hpp	/^  SimpleSymmetricKeyParams(const SimpleSymmetricKeyParams& params)$/;"	f	class:ndn::SimpleSymmetricKeyParams
SimpleSymmetricKeyParams	security/key-params.hpp	/^  SimpleSymmetricKeyParams(uint32_t size = KeyParamsInfo::getDefaultSize())$/;"	f	class:ndn::SimpleSymmetricKeyParams
SimpleSymmetricKeyParams	security/key-params.hpp	/^class SimpleSymmetricKeyParams : public KeyParams$/;"	c	namespace:ndn
Slot	util/signal-signal.hpp	/^  struct Slot$/;"	s	class:ndn::util::signal::Signal
SlotList	util/signal-signal.hpp	/^  typedef std::list<Slot> SlotList;$/;"	t	class:ndn::util::signal::Signal
Sqlite3Statement	util/sqlite3-statement.cpp	/^Sqlite3Statement::Sqlite3Statement(sqlite3* database, const std::string& statement)$/;"	f	class:ndn::util::Sqlite3Statement
Sqlite3Statement	util/sqlite3-statement.hpp	/^class Sqlite3Statement : noncopyable$/;"	c	namespace:ndn::util
StartTimestamp	encoding/tlv-nfd.hpp	/^  StartTimestamp       = 129,$/;"	e	enum:ndn::tlv::nfd::__anon2
State	mgmt/status-dataset-context.hpp	/^  enum class State {$/;"	c	class:ndn::mgmt::StatusDatasetContext
StatusCode	encoding/tlv-nfd.hpp	/^  StatusCode      = 102,$/;"	e	enum:ndn::tlv::nfd::__anon2
StatusDatasetContext	mgmt/status-dataset-context.cpp	/^StatusDatasetContext::StatusDatasetContext(const Interest& interest,$/;"	f	class:ndn::mgmt::StatusDatasetContext
StatusDatasetContext	mgmt/status-dataset-context.hpp	/^class StatusDatasetContext : noncopyable$/;"	c	namespace:ndn::mgmt
StatusDatasetHandler	mgmt/dispatcher.hpp	/^                           StatusDatasetContext& context)> StatusDatasetHandler;$/;"	t	namespace:ndn::mgmt
StatusText	encoding/tlv-nfd.hpp	/^  StatusText      = 103,$/;"	e	enum:ndn::tlv::nfd::__anon2
Strategy	encoding/tlv-nfd.hpp	/^  Strategy            = 107,$/;"	e	enum:ndn::tlv::nfd::__anon2
StrategyChoice	encoding/tlv-nfd.hpp	/^  StrategyChoice = 128,$/;"	e	enum:ndn::tlv::nfd::__anon2
StrategyChoice	management/nfd-strategy-choice.cpp	/^StrategyChoice::StrategyChoice()$/;"	f	class:ndn::nfd::StrategyChoice
StrategyChoice	management/nfd-strategy-choice.cpp	/^StrategyChoice::StrategyChoice(const Block& payload)$/;"	f	class:ndn::nfd::StrategyChoice
StrategyChoice	management/nfd-strategy-choice.hpp	/^class StrategyChoice$/;"	c	namespace:ndn::nfd
StrategyChoiceSetCommand	management/nfd-control-command.cpp	/^StrategyChoiceSetCommand::StrategyChoiceSetCommand()$/;"	f	class:ndn::nfd::StrategyChoiceSetCommand
StrategyChoiceSetCommand	management/nfd-control-command.hpp	/^class StrategyChoiceSetCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
StrategyChoiceUnsetCommand	management/nfd-control-command.cpp	/^StrategyChoiceUnsetCommand::StrategyChoiceUnsetCommand()$/;"	f	class:ndn::nfd::StrategyChoiceUnsetCommand
StrategyChoiceUnsetCommand	management/nfd-control-command.hpp	/^class StrategyChoiceUnsetCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
StreamBuf	util/indented-stream.cpp	/^IndentedStream::StreamBuf::StreamBuf(std::ostream& os, const std::string& indent)$/;"	f	class:ndn::util::IndentedStream::StreamBuf
StreamBuf	util/indented-stream.hpp	/^  class StreamBuf : public std::stringbuf$/;"	c	class:ndn::util::IndentedStream
StreamTransportImpl	transport/stream-transport.hpp	/^  StreamTransportImpl(BaseTransport& transport, boost::asio::io_service& ioService)$/;"	f	class:ndn::StreamTransportImpl
StreamTransportImpl	transport/stream-transport.hpp	/^class StreamTransportImpl$/;"	c	namespace:ndn
StreamTransportWithResolverImpl	transport/stream-transport.hpp	/^  StreamTransportWithResolverImpl(BaseTransport& transport, boost::asio::io_service& ioService)$/;"	f	class:ndn::StreamTransportWithResolverImpl
StreamTransportWithResolverImpl	transport/stream-transport.hpp	/^class StreamTransportWithResolverImpl : public StreamTransportImpl<BaseTransport, Protocol>$/;"	c	namespace:ndn
StringHelperError	util/string-helper.hpp	/^  StringHelperError(const std::string& what)$/;"	f	class:ndn::StringHelperError
StringHelperError	util/string-helper.hpp	/^class StringHelperError : public std::invalid_argument$/;"	c	namespace:ndn
SubjectDescriptionList	security/certificate.hpp	/^  typedef std::vector<CertificateSubjectDescription> SubjectDescriptionList;$/;"	t	class:ndn::Certificate
SuccessCallback	detail/registered-prefix.hpp	/^  typedef function<void(const nfd::ControlParameters&)> SuccessCallback;$/;"	t	class:ndn::RegisteredPrefix
SuccessCallback	util/dns.hpp	/^typedef function<void (const IpAddress& address)> SuccessCallback;$/;"	t	namespace:ndn::dns
TAG_LEN	util/ethernet.hpp	/^const size_t TAG_LEN      = 4;      \/\/\/< Octets in 802.1Q tag (TPID + priority + VLAN)$/;"	m	namespace:ndn::util::ethernet
TIMESTAMP_MARKER	name-component.hpp	/^static const uint8_t TIMESTAMP_MARKER = 0xFC;$/;"	m	namespace:ndn::name
TYPE_LEN	util/ethernet.hpp	/^const size_t TYPE_LEN     = 2;      \/\/\/< Octets in Ethertype field$/;"	m	namespace:ndn::util::ethernet
Tag	encoding/encoding-buffer-fwd.hpp	/^typedef bool Tag;$/;"	t	namespace:ndn::encoding
Tag	tag.hpp	/^class Tag$/;"	c	namespace:ndn
TagHost	tag-host.hpp	/^class TagHost$/;"	c	namespace:ndn
TcpCanonizeProvider	util/face-uri.cpp	/^  TcpCanonizeProvider()$/;"	f	class:ndn::util::TcpCanonizeProvider
TcpCanonizeProvider	util/face-uri.cpp	/^class TcpCanonizeProvider : public IpHostCanonizeProvider<boost::asio::ip::tcp>$/;"	c	namespace:ndn::util	file:
TcpTransport	transport/tcp-transport.cpp	/^TcpTransport::TcpTransport(const std::string& host, const std::string& port\/* = "6363"*\/)$/;"	f	class:ndn::TcpTransport
TcpTransport	transport/tcp-transport.hpp	/^class TcpTransport : public Transport$/;"	c	namespace:ndn
TimePoint	security/validity-period.hpp	/^  typedef boost::chrono::time_point<time::system_clock, time::seconds> TimePoint;$/;"	t	class:ndn::security::ValidityPeriod
TimePoint	util/time.hpp	/^  typedef time_point TimePoint;$/;"	t	class:ndn::time::steady_clock
TimePoint	util/time.hpp	/^  typedef time_point TimePoint;$/;"	t	class:ndn::time::system_clock
TimeoutCallback	face.hpp	/^typedef function<void(const Interest&)> TimeoutCallback;$/;"	t	namespace:ndn
TlvType	lp/detail/field-decl.hpp	/^  typedef std::integral_constant<uint64_t, TYPE> TlvType;$/;"	t	class:ndn::lp::detail::FieldDecl
TopPrefixEntry	mgmt/dispatcher.hpp	/^  struct TopPrefixEntry$/;"	s	class:ndn::mgmt::Dispatcher
TpmCreateFunc	security/key-chain.hpp	/^  typedef function<unique_ptr<SecTpm>(const std::string&)> TpmCreateFunc;$/;"	t	class:ndn::security::KeyChain
TpmFactory	security/key-chain.cpp	/^typedef Factory<KeyChain::TpmCreateFunc> TpmFactory;$/;"	t	namespace:ndn::security	file:
TransmissionQueue	transport/stream-transport.hpp	/^  typedef std::list<BlockSequence> TransmissionQueue;$/;"	t	class:ndn::StreamTransportImpl
Transport	transport/transport.hpp	/^Transport::Transport()$/;"	f	class:ndn::Transport
Transport	transport/transport.hpp	/^class Transport : noncopyable$/;"	c	namespace:ndn
Transport	util/dummy-client-face.cpp	/^class DummyClientFace::Transport : public ndn::Transport$/;"	c	class:ndn::util::DummyClientFace	file:
TrustAnchorContainer	security/validator-config.hpp	/^    TrustAnchorContainer()$/;"	f	class:ndn::ValidatorConfig::TrustAnchorContainer
TrustAnchorContainer	security/validator-config.hpp	/^  class TrustAnchorContainer$/;"	c	class:ndn::ValidatorConfig
Type	key-locator.hpp	/^  enum Type {$/;"	g	class:ndn::KeyLocator
Type	util/signal-signal.hpp	/^    typedef T Type;$/;"	t	struct:ndn::util::signal::Signal::TypeWrapper
TypeWrapper	util/signal-signal.hpp	/^  struct TypeWrapper$/;"	s	class:ndn::util::signal::Signal
UdpCanonizeProvider	util/face-uri.cpp	/^  UdpCanonizeProvider()$/;"	f	class:ndn::util::UdpCanonizeProvider
UdpCanonizeProvider	util/face-uri.cpp	/^class UdpCanonizeProvider : public IpHostCanonizeProvider<boost::asio::ip::udp>$/;"	c	namespace:ndn::util	file:
UnitTestClock	util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::UnitTestClock(const nanoseconds& startTime)$/;"	f	class:ndn::time::UnitTestClock
UnitTestClock	util/time-unit-test-clock.hpp	/^class UnitTestClock : public CustomClock<BaseClock>$/;"	c	namespace:ndn::time
UnitTestClockTraits	util/time-unit-test-clock.hpp	/^class UnitTestClockTraits$/;"	c	namespace:ndn::time
UnitTestClockTraits	util/time-unit-test-clock.hpp	/^class UnitTestClockTraits<system_clock>$/;"	c	namespace:ndn::time
UnitTestSteadyClock	util/time-unit-test-clock.hpp	/^typedef UnitTestClock<steady_clock> UnitTestSteadyClock;$/;"	t	namespace:ndn::time
UnitTestSystemClock	util/time-unit-test-clock.hpp	/^typedef UnitTestClock<system_clock> UnitTestSystemClock;$/;"	t	namespace:ndn::time
UnixTransport	transport/unix-transport.cpp	/^UnixTransport::UnixTransport(const std::string& unixSocket)$/;"	f	class:ndn::UnixTransport
UnixTransport	transport/unix-transport.hpp	/^class UnixTransport : public Transport$/;"	c	namespace:ndn
UnregisterPrefixFailureCallback	face.hpp	/^typedef function<void(const std::string&)> UnregisterPrefixFailureCallback;$/;"	t	namespace:ndn
UnregisterPrefixSuccessCallback	face.hpp	/^typedef function<void()> UnregisterPrefixSuccessCallback;$/;"	t	namespace:ndn
Uri	encoding/tlv-nfd.hpp	/^  Uri                 = 114,$/;"	e	enum:ndn::tlv::nfd::__anon2
UriScheme	encoding/tlv-nfd.hpp	/^  UriScheme             = 131,$/;"	e	enum:ndn::tlv::nfd::__anon2
VALUE_OFFSET	security/additional-description.cpp	/^static const size_t VALUE_OFFSET = 1;$/;"	m	namespace:ndn::security	file:
VERSION_MARKER	name-component.hpp	/^static const uint8_t VERSION_MARKER = 0xFD;$/;"	m	namespace:ndn::name
ValidateParameters	mgmt/dispatcher.hpp	/^typedef std::function<bool(const ControlParameters& params)> ValidateParameters;$/;"	t	namespace:ndn::mgmt
ValidationRequest	security/validation-request.hpp	/^  ValidationRequest(const Interest& interest,$/;"	f	class:ndn::ValidationRequest
ValidationRequest	security/validation-request.hpp	/^class ValidationRequest$/;"	c	namespace:ndn
Validator	security/validator.cpp	/^Validator::Validator(Face& face)$/;"	f	class:ndn::Validator
Validator	security/validator.cpp	/^Validator::Validator(Face* face)$/;"	f	class:ndn::Validator
Validator	security/validator.hpp	/^class Validator$/;"	c	namespace:ndn
ValidatorConfig	security/validator-config.cpp	/^ValidatorConfig::ValidatorConfig(Face& face,$/;"	f	class:ndn::ValidatorConfig
ValidatorConfig	security/validator-config.cpp	/^ValidatorConfig::ValidatorConfig(Face* face,$/;"	f	class:ndn::ValidatorConfig
ValidatorConfig	security/validator-config.hpp	/^class ValidatorConfig : public Validator$/;"	c	namespace:ndn
ValidatorNull	security/validator-null.hpp	/^class ValidatorNull : public Validator$/;"	c	namespace:ndn
ValidatorRegex	security/validator-regex.cpp	/^ValidatorRegex::ValidatorRegex(Face& face,$/;"	f	class:ndn::ValidatorRegex
ValidatorRegex	security/validator-regex.cpp	/^ValidatorRegex::ValidatorRegex(Face* face,$/;"	f	class:ndn::ValidatorRegex
ValidatorRegex	security/validator-regex.hpp	/^class ValidatorRegex : public Validator$/;"	c	namespace:ndn
ValidityPeriod	encoding/tlv.hpp	/^  ValidityPeriod = 253,$/;"	e	enum:ndn::tlv::__anon5
ValidityPeriod	security/validity-period.cpp	/^ValidityPeriod::ValidityPeriod(const Block& block)$/;"	f	class:ndn::security::ValidityPeriod
ValidityPeriod	security/validity-period.cpp	/^ValidityPeriod::ValidityPeriod(const time::system_clock::TimePoint& notBefore,$/;"	f	class:ndn::security::ValidityPeriod
ValidityPeriod	security/validity-period.hpp	/^class ValidityPeriod$/;"	c	namespace:ndn::security
ValueType	lp/detail/field-decl.hpp	/^  typedef VALUE ValueType;$/;"	t	class:ndn::lp::detail::FieldDecl
VerifySegment	util/segment-fetcher.hpp	/^  typedef function<bool (const Data& data)> VerifySegment;$/;"	t	class:ndn::util::SegmentFetcher
WireDecodable	util/concepts.hpp	/^class WireDecodable$/;"	c	namespace:ndn
WireEncodable	util/concepts.hpp	/^class WireEncodable$/;"	c	namespace:ndn
WireEncodableWithEncodingBuffer	util/concepts.hpp	/^class WireEncodableWithEncodingBuffer$/;"	c	namespace:ndn
add	lp/packet.hpp	/^  add(const typename FIELD::ValueType& value)$/;"	f	class:ndn::lp::Packet
add	security/validator-config.hpp	/^    add(shared_ptr<IdentityCertificate> certificate)$/;"	f	class:ndn::ValidatorConfig::TrustAnchorContainer
add	util/monotonic_deadline_timer.hpp	/^  add(const time_type& time, const duration_type& duration)$/;"	f	struct:boost::asio::time_traits
addAppMetaInfo	meta-info.cpp	/^MetaInfo::addAppMetaInfo(const Block& block)$/;"	f	class:ndn::MetaInfo
addAppToAcl	security/key-chain.hpp	/^  addAppToAcl(const Name& keyName, KeyClass keyClass, const std::string& appPath, AclType acl)$/;"	f	class:ndn::security::KeyChain
addAppToAcl	security/sec-tpm-file.hpp	/^  addAppToAcl(const Name& keyName, KeyClass keyClass, const std::string& appPath, AclType acl)$/;"	f	class:ndn::SecTpmFile
addAppToAcl	security/sec-tpm-osx.cpp	/^SecTpmOsx::addAppToAcl(const Name& keyName, KeyClass keyClass, const string& appPath, AclType acl)$/;"	f	class:ndn::SecTpmOsx
addCertificate	security/key-chain.hpp	/^  addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::KeyChain
addCertificate	security/key.cpp	/^Key::addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::Key
addCertificate	security/pib-memory.cpp	/^PibMemory::addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::PibMemory
addCertificate	security/pib-sqlite3.cpp	/^PibSqlite3::addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::PibSqlite3
addCertificate	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::SecPublicInfoSqlite3
addCertificateAsIdentityDefault	security/key-chain.hpp	/^  addCertificateAsIdentityDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::KeyChain
addCertificateAsIdentityDefault	security/sec-public-info.cpp	/^SecPublicInfo::addCertificateAsIdentityDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::SecPublicInfo
addCertificateAsKeyDefault	security/key-chain.hpp	/^  addCertificateAsKeyDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::KeyChain
addCertificateAsKeyDefault	security/sec-public-info.cpp	/^SecPublicInfo::addCertificateAsKeyDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::SecPublicInfo
addCertificateAsSystemDefault	security/key-chain.hpp	/^  addCertificateAsSystemDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::KeyChain
addCertificateAsSystemDefault	security/sec-public-info.cpp	/^SecPublicInfo::addCertificateAsSystemDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::SecPublicInfo
addChecker	security/conf/rule.hpp	/^  addChecker(const shared_ptr<Checker>& checker)$/;"	f	class:ndn::security::conf::Rule
addControlCommand	mgmt/dispatcher.hpp	/^Dispatcher::addControlCommand(const PartialName& relPrefix,$/;"	f	class:ndn::mgmt::Dispatcher
addDataVerificationRule	security/validator-regex.cpp	/^ValidatorRegex::addDataVerificationRule(shared_ptr<SecRuleRelative> rule)$/;"	f	class:ndn::ValidatorRegex
addDelegation	link.cpp	/^Link::addDelegation(uint32_t preference, const Name& name)$/;"	f	class:ndn::Link
addExtension	security/certificate.hpp	/^  addExtension(const CertificateExtension& extension)$/;"	f	class:ndn::Certificate
addFilter	security/conf/rule.hpp	/^  addFilter(const shared_ptr<Filter>& filter)$/;"	f	class:ndn::security::conf::Rule
addIdentity	security/key-chain.hpp	/^  addIdentity(const Name& identityName)$/;"	f	class:ndn::security::KeyChain
addIdentity	security/pib-memory.cpp	/^PibMemory::addIdentity(const Name& identity)$/;"	f	class:ndn::security::PibMemory
addIdentity	security/pib-sqlite3.cpp	/^PibSqlite3::addIdentity(const Name& identity)$/;"	f	class:ndn::security::PibSqlite3
addIdentity	security/pib.cpp	/^Pib::addIdentity(const Name& identity)$/;"	f	class:ndn::security::Pib
addIdentity	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::addIdentity(const Name& identityName)$/;"	f	class:ndn::SecPublicInfoSqlite3
addInterestBypassRule	util/command-interest-validator.hpp	/^CommandInterestValidator::addInterestBypassRule(const std::string& regex)$/;"	f	class:ndn::CommandInterestValidator
addInterestRule	util/command-interest-validator.hpp	/^CommandInterestValidator::addInterestRule(const std::string& regex,$/;"	f	class:ndn::CommandInterestValidator
addKey	security/identity.cpp	/^Identity::addKey(const PublicKey& publicKey, const name::Component& keyId)$/;"	f	class:ndn::security::Identity
addKey	security/key-chain.hpp	/^  addKey(const Name& keyName, const PublicKey& publicKeyDer)$/;"	f	class:ndn::security::KeyChain
addKey	security/pib-memory.cpp	/^PibMemory::addKey(const Name& identity, const name::Component& keyId, const PublicKey& publicKey)$/;"	f	class:ndn::security::PibMemory
addKey	security/pib-sqlite3.cpp	/^PibSqlite3::addKey(const Name& identity, const name::Component& keyId, const PublicKey& publicKey)$/;"	f	class:ndn::security::PibSqlite3
addKey	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::addKey(const Name& keyName,$/;"	f	class:ndn::SecPublicInfoSqlite3
addNextHopRecord	management/nfd-fib-entry.cpp	/^FibEntry::addNextHopRecord(const NextHopRecord& nextHopRecord)$/;"	f	class:ndn::nfd::FibEntry
addNotificationStream	mgmt/dispatcher.cpp	/^Dispatcher::addNotificationStream(const PartialName& relPrefix)$/;"	f	class:ndn::mgmt::Dispatcher
addPublicKey	security/key-chain.hpp	/^  addPublicKey(const Name& keyName, KeyType keyType, const PublicKey& publicKeyDer)$/;"	f	class:ndn::security::KeyChain
addPublicKey	security/sec-public-info.cpp	/^SecPublicInfo::addPublicKey(const Name& keyName, KeyType keyType, const PublicKey& publicKey)$/;"	f	class:ndn::SecPublicInfo
addRoute	management/nfd-rib-entry.hpp	/^  addRoute(const Route& route)$/;"	f	class:ndn::nfd::RibEntry
addStatusDataset	mgmt/dispatcher.cpp	/^Dispatcher::addStatusDataset(const PartialName& relPrefix,$/;"	f	class:ndn::mgmt::Dispatcher
addSubjectDescription	security/certificate.hpp	/^  addSubjectDescription(const CertificateSubjectDescription& description)$/;"	f	class:ndn::Certificate
addTopPrefix	mgmt/dispatcher.cpp	/^Dispatcher::addTopPrefix(const Name& prefix,$/;"	f	class:ndn::mgmt::Dispatcher
addTrustAnchor	security/validator-regex.cpp	/^ValidatorRegex::addTrustAnchor(shared_ptr<IdentityCertificate> certificate)$/;"	f	class:ndn::ValidatorRegex
advance	util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::advance(const nanoseconds& duration)$/;"	f	class:ndn::time::UnitTestClock
afterAccess	util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::afterAccess(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLfu
afterAccess	util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::afterAccess(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLru
afterAccess	util/in-memory-storage.cpp	/^InMemoryStorage::afterAccess(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorage
afterAuthorizationRejected	mgmt/dispatcher.cpp	/^Dispatcher::afterAuthorizationRejected(RejectReply act, const Interest& interest)$/;"	f	class:ndn::mgmt::Dispatcher
afterCheckPolicy	security/validator.cpp	/^Validator::afterCheckPolicy(const std::vector<shared_ptr<ValidationRequest> >& nextSteps,$/;"	f	class:ndn::Validator
afterInsert	util/in-memory-storage-fifo.cpp	/^InMemoryStorageFifo::afterInsert(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageFifo
afterInsert	util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::afterInsert(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLfu
afterInsert	util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::afterInsert(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLru
afterInsert	util/in-memory-storage.cpp	/^InMemoryStorage::afterInsert(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorage
afterNotificationCenterEvent	util/network-monitor.cpp	/^  afterNotificationCenterEvent(CFNotificationCenterRef center, void *observer, CFStringRef name,$/;"	f	class:ndn::util::NetworkMonitor::Impl
afterPrefixRegistered	detail/face-impl.hpp	/^  afterPrefixRegistered(const shared_ptr<RegisteredPrefix>& registeredPrefix,$/;"	f	class:ndn::Face::Impl
afterReceiveData	util/notification-subscriber.hpp	/^  afterReceiveData(const Data& data)$/;"	f	class:ndn::util::NotificationSubscriber
afterTimeout	util/notification-subscriber.hpp	/^  afterTimeout()$/;"	f	class:ndn::util::NotificationSubscriber
allocator_type	name.hpp	/^  typedef void                    allocator_type;$/;"	t	class:ndn::Name
append	mgmt/status-dataset-context.cpp	/^StatusDatasetContext::append(const Block& block)$/;"	f	class:ndn::mgmt::StatusDatasetContext
append	name.cpp	/^Name::append(const PartialName& name)$/;"	f	class:ndn::Name
append	name.hpp	/^  append(Iterator first, Iterator last)$/;"	f	class:ndn::Name
append	name.hpp	/^  append(const Block& value)$/;"	f	class:ndn::Name
append	name.hpp	/^  append(const Component& value)$/;"	f	class:ndn::Name
append	name.hpp	/^  append(const char* value)$/;"	f	class:ndn::Name
append	name.hpp	/^  append(const uint8_t* value, size_t valueLength)$/;"	f	class:ndn::Name
appendBlock	encoding/encoder.cpp	/^Encoder::appendBlock(const Block& block)$/;"	f	class:ndn::encoding::Encoder
appendBlock	encoding/estimator.cpp	/^Estimator::appendBlock(const Block& block)$/;"	f	class:ndn::encoding::Estimator
appendByte	encoding/encoder.cpp	/^Encoder::appendByte(uint8_t value)$/;"	f	class:ndn::encoding::Encoder
appendByte	encoding/estimator.cpp	/^Estimator::appendByte(uint8_t value)$/;"	f	class:ndn::encoding::Estimator
appendByteArray	encoding/encoder.cpp	/^Encoder::appendByteArray(const uint8_t* array, size_t length)$/;"	f	class:ndn::encoding::Encoder
appendByteArray	encoding/estimator.cpp	/^Estimator::appendByteArray(const uint8_t* array, size_t length)$/;"	f	class:ndn::encoding::Estimator
appendByteArrayBlock	encoding/encoder.cpp	/^Encoder::appendByteArrayBlock(uint32_t type, const uint8_t* array, size_t arraySize)$/;"	f	class:ndn::encoding::Encoder
appendByteArrayBlock	encoding/estimator.cpp	/^Estimator::appendByteArrayBlock(uint32_t type, const uint8_t* array, size_t arraySize)$/;"	f	class:ndn::encoding::Estimator
appendExclude	exclude.hpp	/^Exclude::appendExclude(const name::Component& name, bool any)$/;"	f	class:ndn::Exclude
appendImplicitSha256Digest	name.cpp	/^Name::appendImplicitSha256Digest(const ConstBufferPtr& digest)$/;"	f	class:ndn::Name
appendImplicitSha256Digest	name.cpp	/^Name::appendImplicitSha256Digest(const uint8_t* digest, size_t digestSize)$/;"	f	class:ndn::Name
appendNonNegativeInteger	encoding/encoder.cpp	/^Encoder::appendNonNegativeInteger(uint64_t varNumber)$/;"	f	class:ndn::encoding::Encoder
appendNonNegativeInteger	encoding/estimator.cpp	/^Estimator::appendNonNegativeInteger(uint64_t varNumber)$/;"	f	class:ndn::encoding::Estimator
appendNumber	name.cpp	/^Name::appendNumber(uint64_t number)$/;"	f	class:ndn::Name
appendNumberWithMarker	name.cpp	/^Name::appendNumberWithMarker(uint8_t marker, uint64_t number)$/;"	f	class:ndn::Name
appendRange	encoding/encoder.hpp	/^Encoder::appendRange(Iterator first, Iterator last)$/;"	f	class:ndn::encoding::Encoder
appendRange	encoding/estimator.hpp	/^Estimator::appendRange(Iterator first, Iterator last)$/;"	f	class:ndn::encoding::Estimator
appendSegment	name.cpp	/^Name::appendSegment(uint64_t segmentNo)$/;"	f	class:ndn::Name
appendSegmentOffset	name.cpp	/^Name::appendSegmentOffset(uint64_t offset)$/;"	f	class:ndn::Name
appendSequenceNumber	name.cpp	/^Name::appendSequenceNumber(uint64_t seqNo)$/;"	f	class:ndn::Name
appendTimestamp	name.cpp	/^Name::appendTimestamp(const time::system_clock::TimePoint& timePoint)$/;"	f	class:ndn::Name
appendTypeSpecificTlv	signature-info.cpp	/^SignatureInfo::appendTypeSpecificTlv(const Block& block)$/;"	f	class:ndn::SignatureInfo
appendVarNumber	encoding/encoder.cpp	/^Encoder::appendVarNumber(uint64_t varNumber)$/;"	f	class:ndn::encoding::Encoder
appendVarNumber	encoding/estimator.cpp	/^Estimator::appendVarNumber(uint64_t varNumber)$/;"	f	class:ndn::encoding::Estimator
appendVersion	name.cpp	/^Name::appendVersion()$/;"	f	class:ndn::Name
appendVersion	name.cpp	/^Name::appendVersion(uint64_t version)$/;"	f	class:ndn::Name
applyDefaultsToRequest	management/nfd-control-command.cpp	/^ControlCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::ControlCommand
applyDefaultsToRequest	management/nfd-control-command.cpp	/^FaceCreateCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceCreateCommand
applyDefaultsToRequest	management/nfd-control-command.cpp	/^FibAddNextHopCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FibAddNextHopCommand
applyDefaultsToRequest	management/nfd-control-command.cpp	/^FibRemoveNextHopCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FibRemoveNextHopCommand
applyDefaultsToRequest	management/nfd-control-command.cpp	/^RibRegisterCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::RibRegisterCommand
applyDefaultsToRequest	management/nfd-control-command.cpp	/^RibUnregisterCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::RibUnregisterCommand
applyDefaultsToResponse	management/nfd-control-command.cpp	/^ControlCommand::applyDefaultsToResponse(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::ControlCommand
asio	encoding/block.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	face.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	transport/tcp-transport.hpp	/^namespace boost { namespace asio { namespace ip { class tcp; } } }$/;"	n	namespace:boost
asio	transport/unix-transport.hpp	/^namespace boost { namespace asio { namespace local { class stream_protocol; } } }$/;"	n	namespace:boost
asio	util/monotonic_deadline_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
asyncExpressInterest	detail/face-impl.hpp	/^  asyncExpressInterest(shared_ptr<const Interest> interest,$/;"	f	class:ndn::Face::Impl
asyncPutData	detail/face-impl.hpp	/^  asyncPutData(const shared_ptr<const Data>& data)$/;"	f	class:ndn::Face::Impl
asyncPutNack	detail/face-impl.hpp	/^  asyncPutNack(shared_ptr<const lp::Nack> nack)$/;"	f	class:ndn::Face::Impl
asyncRemovePendingInterest	detail/face-impl.hpp	/^  asyncRemovePendingInterest(const PendingInterestId* pendingInterestId)$/;"	f	class:ndn::Face::Impl
asyncResolve	util/dns.cpp	/^  asyncResolve(const std::string& host,$/;"	f	class:ndn::dns::Resolver
asyncResolve	util/dns.cpp	/^asyncResolve(const std::string& host,$/;"	f	namespace:ndn::dns
asyncSetInterestFilter	detail/face-impl.hpp	/^  asyncSetInterestFilter(const shared_ptr<InterestFilterRecord>& interestFilterRecord)$/;"	f	class:ndn::Face::Impl
asyncShutdown	face.cpp	/^Face::asyncShutdown()$/;"	f	class:ndn::Face
asyncUnregisterPrefix	detail/face-impl.hpp	/^  asyncUnregisterPrefix(const RegisteredPrefixId* registeredPrefixId,$/;"	f	class:ndn::Face::Impl
asyncUnsetInterestFilter	detail/face-impl.hpp	/^  asyncUnsetInterestFilter(const InterestFilterId* interestFilterId)$/;"	f	class:ndn::Face::Impl
at	name.hpp	/^  at(ssize_t i) const$/;"	f	class:ndn::Name
base_steady_clock	util/time.cpp	/^  typedef boost::chrono::steady_clock base_steady_clock;$/;"	t	namespace:ndn::time	file:
base_steady_clock	util/time.cpp	/^  typedef boost::chrono::system_clock base_steady_clock;$/;"	t	namespace:ndn::time	file:
be16toh	encoding/endian.hpp	44;"	d
be32toh	encoding/endian.hpp	48;"	d
be64toh	encoding/endian.hpp	52;"	d
beforeErase	util/in-memory-storage-fifo.cpp	/^InMemoryStorageFifo::beforeErase(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageFifo
beforeErase	util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::beforeErase(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLfu
beforeErase	util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::beforeErase(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLru
beforeErase	util/in-memory-storage.cpp	/^InMemoryStorage::beforeErase(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorage
begin	detail/container-with-on-empty-signal.hpp	/^  begin()$/;"	f	class:ndn::ContainerWithOnEmptySignal
begin	encoding/block.cpp	/^Block::begin() const$/;"	f	class:ndn::Block
begin	encoding/encoder.hpp	/^Encoder::begin() const$/;"	f	class:ndn::encoding::Encoder
begin	encoding/encoder.hpp	/^Encoder::begin()$/;"	f	class:ndn::encoding::Encoder
begin	exclude.hpp	/^Exclude::begin() const$/;"	f	class:ndn::Exclude
begin	management/nfd-rib-entry.hpp	/^RibEntry::begin() const$/;"	f	class:ndn::nfd::RibEntry
begin	name.hpp	/^  begin() const$/;"	f	class:ndn::Name
begin	security/additional-description.cpp	/^AdditionalDescription::begin() const$/;"	f	class:ndn::security::AdditionalDescription
begin	security/additional-description.cpp	/^AdditionalDescription::begin()$/;"	f	class:ndn::security::AdditionalDescription
begin	security/certificate-container.cpp	/^CertificateContainer::begin() const$/;"	f	class:ndn::security::CertificateContainer
begin	security/identity-container.cpp	/^IdentityContainer::begin() const$/;"	f	class:ndn::security::IdentityContainer
begin	security/key-container.cpp	/^KeyContainer::begin() const$/;"	f	class:ndn::security::KeyContainer
begin	util/in-memory-storage.cpp	/^InMemoryStorage::begin() const$/;"	f	class:ndn::util::InMemoryStorage
bind	util/sqlite3-statement.cpp	/^Sqlite3Statement::bind(int index, const Block& block, void(*destructor)(void*))$/;"	f	class:ndn::util::Sqlite3Statement
bind	util/sqlite3-statement.cpp	/^Sqlite3Statement::bind(int index, const char* value, size_t size, void(*destructor)(void*))$/;"	f	class:ndn::util::Sqlite3Statement
bind	util/sqlite3-statement.cpp	/^Sqlite3Statement::bind(int index, const std::string& value, void(*destructor)(void*))$/;"	f	class:ndn::util::Sqlite3Statement
bind	util/sqlite3-statement.cpp	/^Sqlite3Statement::bind(int index, const void* buf, size_t size, void(*destructor)(void*))$/;"	f	class:ndn::util::Sqlite3Statement
bind	util/sqlite3-statement.cpp	/^Sqlite3Statement::bind(int index, int number)$/;"	f	class:ndn::util::Sqlite3Statement
block	encoding/encoder.cpp	/^Encoder::block(bool verifyLength\/* = true*\/) const$/;"	f	class:ndn::encoding::Encoder
blockFromValue	encoding/block.cpp	/^Block::blockFromValue() const$/;"	f	class:ndn::Block
booleanBlock	encoding/block-helpers.hpp	/^booleanBlock(uint32_t type)$/;"	f	namespace:ndn::encoding
boost	common.hpp	/^namespace boost {$/;"	n
boost	encoding/block.hpp	/^namespace boost {$/;"	n
boost	face.hpp	/^namespace boost {$/;"	n
boost	transport/tcp-transport.hpp	/^namespace boost { namespace asio { namespace ip { class tcp; } } }$/;"	n
boost	transport/unix-transport.hpp	/^namespace boost { namespace asio { namespace local { class stream_protocol; } } }$/;"	n
boost	util/monotonic_deadline_timer.hpp	/^namespace boost {$/;"	n
boost	util/time.cpp	/^namespace boost {$/;"	n	file:
boost	util/time.hpp	/^namespace boost {$/;"	n
buf	encoding/buffer-stream.hpp	/^  buf()$/;"	f	class:ndn::OBufferStream
buf	encoding/buffer.hpp	/^  buf() const$/;"	f	class:ndn::Buffer
buf	encoding/buffer.hpp	/^  buf()$/;"	f	class:ndn::Buffer
buf	encoding/encoder.hpp	/^Encoder::buf() const$/;"	f	class:ndn::encoding::Encoder
buf	encoding/encoder.hpp	/^Encoder::buf()$/;"	f	class:ndn::encoding::Encoder
buffer_append_device	encoding/buffer-stream.hpp	/^  buffer_append_device(Buffer& container)$/;"	f	class:ndn::iostreams::buffer_append_device
buffer_append_device	encoding/buffer-stream.hpp	/^class buffer_append_device$/;"	c	namespace:ndn::iostreams
canCanonize	util/face-uri.cpp	/^FaceUri::canCanonize(const std::string& scheme)$/;"	f	class:ndn::util::FaceUri
canIgnore	lp/detail/field-info.hpp	/^  bool canIgnore;$/;"	m	class:ndn::lp::detail::FieldInfo
cancel	util/scheduler-scoped-event-id.cpp	/^ScopedEventId::cancel()$/;"	f	class:ndn::util::scheduler::ScopedEventId
cancelAllEvents	util/scheduler.cpp	/^Scheduler::cancelAllEvents()$/;"	f	class:ndn::util::scheduler::Scheduler
cancelEvent	util/scheduler.cpp	/^Scheduler::cancelEvent(const EventId& eventId)$/;"	f	class:ndn::util::scheduler::Scheduler
canonicalName	security/key-chain.cpp	/^  std::string canonicalName;$/;"	m	struct:ndn::security::Factory	file:
canonize	util/face-uri.cpp	/^  canonize(const FaceUri& faceUri,$/;"	f	class:ndn::util::EtherCanonizeProvider
canonize	util/face-uri.cpp	/^  canonize(const FaceUri& faceUri,$/;"	f	class:ndn::util::IpHostCanonizeProvider
canonize	util/face-uri.cpp	/^FaceUri::canonize(const CanonizeSuccessCallback& onSuccess,$/;"	f	class:ndn::util::FaceUri
capacity	encoding/encoder.hpp	/^Encoder::capacity() const$/;"	f	class:ndn::encoding::Encoder
category	encoding/buffer-stream.hpp	/^  typedef boost::iostreams::sink_tag category;$/;"	t	class:ndn::iostreams::buffer_append_device
certificateNameToPublicKeyName	security/identity-certificate.cpp	/^IdentityCertificate::certificateNameToPublicKeyName(const Name& certificateName)$/;"	f	class:ndn::IdentityCertificate
cfLoopEvent	util/network-monitor.cpp	/^  scheduler::ScopedEventId cfLoopEvent;$/;"	m	class:ndn::util::NetworkMonitor::Impl	file:
char_type	encoding/buffer-stream.hpp	/^  typedef char char_type;$/;"	t	class:ndn::iostreams::buffer_append_device
check	security/conf/checker.hpp	/^  check(const Data& data,$/;"	f	class:ndn::security::conf::CustomizedChecker
check	security/conf/checker.hpp	/^  check(const Data& data,$/;"	f	class:ndn::security::conf::FixedSignerChecker
check	security/conf/checker.hpp	/^  check(const Interest& interest,$/;"	f	class:ndn::security::conf::CustomizedChecker
check	security/conf/checker.hpp	/^  check(const Interest& interest,$/;"	f	class:ndn::security::conf::FixedSignerChecker
check	security/conf/checker.hpp	/^  check(const Packet& packet, const Signature& signature,$/;"	f	class:ndn::security::conf::CustomizedChecker
check	security/conf/checker.hpp	/^  check(const Packet& packet, const Signature& signature,$/;"	f	class:ndn::security::conf::FixedSignerChecker
check	security/conf/key-locator-checker.hpp	/^  check(const Data& data,$/;"	f	class:ndn::security::conf::KeyLocatorChecker
check	security/conf/key-locator-checker.hpp	/^  check(const Interest& interest,$/;"	f	class:ndn::security::conf::KeyLocatorChecker
check	security/conf/key-locator-checker.hpp	/^  check(const Name& packetName,$/;"	f	class:ndn::security::conf::HyperKeyLocatorNameChecker
check	security/conf/key-locator-checker.hpp	/^  check(const Name& packetName,$/;"	f	class:ndn::security::conf::RegexKeyLocatorNameChecker
check	security/conf/key-locator-checker.hpp	/^  check(const Name& packetName,$/;"	f	class:ndn::security::conf::RelationKeyLocatorNameChecker
check	security/conf/rule.hpp	/^  check(const Packet& packet,$/;"	f	class:ndn::security::conf::Rule
checkAddress	util/face-uri.cpp	/^  checkAddress(const dns::IpAddress& ipAddress) const$/;"	f	class:ndn::util::IpHostCanonizeProvider	file:
checkAddress	util/face-uri.cpp	/^  checkAddress(const dns::IpAddress& ipAddress) const$/;"	f	class:ndn::util::TcpCanonizeProvider
checkKeySize	security/key-params.cpp	/^AesKeyParamsInfo::checkKeySize(uint32_t size)$/;"	f	class:ndn::AesKeyParamsInfo
checkKeySize	security/key-params.cpp	/^EcdsaKeyParamsInfo::checkKeySize(uint32_t size)$/;"	f	class:ndn::EcdsaKeyParamsInfo
checkKeySize	security/key-params.cpp	/^RsaKeyParamsInfo::checkKeySize(uint32_t size)$/;"	f	class:ndn::RsaKeyParamsInfo
checkPolicy	security/validator-config.cpp	/^ValidatorConfig::checkPolicy(const Data& data,$/;"	f	class:ndn::ValidatorConfig
checkPolicy	security/validator-config.cpp	/^ValidatorConfig::checkPolicy(const Interest& interest,$/;"	f	class:ndn::ValidatorConfig
checkPolicy	security/validator-null.hpp	/^  checkPolicy(const Data& data,$/;"	f	class:ndn::ValidatorNull
checkPolicy	security/validator-null.hpp	/^  checkPolicy(const Interest& interest,$/;"	f	class:ndn::ValidatorNull
checkPolicy	security/validator-regex.cpp	/^ValidatorRegex::checkPolicy(const Data& data,$/;"	f	class:ndn::ValidatorRegex
checkPolicy	security/validator-regex.hpp	/^  checkPolicy(const Interest& interest,$/;"	f	class:ndn::ValidatorRegex
checkPolicy	util/command-interest-validator.hpp	/^  checkPolicy(const Data& data,$/;"	f	class:ndn::CommandInterestValidator
checkPolicy	util/command-interest-validator.hpp	/^CommandInterestValidator::checkPolicy(const Interest& interest,$/;"	f	class:ndn::CommandInterestValidator
checkRelation	security/conf/key-locator-checker.hpp	/^  checkRelation(const Relation& relation, const Name& name1, const Name& name2)$/;"	f	class:ndn::security::conf::KeyLocatorChecker
checkSignature	security/validator-config.cpp	/^ValidatorConfig::checkSignature(const Packet& packet,$/;"	f	class:ndn::ValidatorConfig
checkTimestamp	security/validator-config.cpp	/^ValidatorConfig::checkTimestamp(const shared_ptr<const Interest>& interest,$/;"	f	class:ndn::ValidatorConfig
chrono	util/time.cpp	/^namespace chrono {$/;"	n	namespace:boost	file:
chrono	util/time.hpp	/^namespace chrono {$/;"	n	namespace:boost
cleanOldKeys	security/validator-config.cpp	/^ValidatorConfig::cleanOldKeys()$/;"	f	class:ndn::ValidatorConfig
clear	detail/container-with-on-empty-signal.hpp	/^  clear()$/;"	f	class:ndn::ContainerWithOnEmptySignal
clear	exclude.hpp	/^Exclude::clear()$/;"	f	class:ndn::Exclude
clear	key-locator.cpp	/^KeyLocator::clear()$/;"	f	class:ndn::KeyLocator
clear	lp/packet.hpp	/^  clear()$/;"	f	class:ndn::lp::Packet
clear	name.hpp	/^  clear()$/;"	f	class:ndn::Name
clearRoutes	management/nfd-rib-entry.hpp	/^  clearRoutes()$/;"	f	class:ndn::nfd::RibEntry
clock_string	util/time.hpp	/^struct clock_string<ndn::time::steady_clock, CharT>$/;"	s	namespace:boost::chrono
clock_string	util/time.hpp	/^struct clock_string<ndn::time::system_clock, CharT>$/;"	s	namespace:boost::chrono
close	transport/stream-transport.hpp	/^  close()$/;"	f	class:ndn::StreamTransportImpl
close	transport/tcp-transport.cpp	/^TcpTransport::close()$/;"	f	class:ndn::TcpTransport
close	transport/unix-transport.cpp	/^UnixTransport::close()$/;"	f	class:ndn::UnixTransport
close	util/config-file.cpp	/^ConfigFile::close()$/;"	f	class:ndn::ConfigFile
close	util/dummy-client-face.cpp	/^  close()$/;"	f	class:ndn::util::DummyClientFace::Transport
compare	name-component.cpp	/^Component::compare(const Component& other) const$/;"	f	class:ndn::name::Component
compare	name.cpp	/^Name::compare(size_t pos1, size_t count1, const Name& other, size_t pos2, size_t count2) const$/;"	f	class:ndn::Name
compare	name.hpp	/^  compare(const Name& other) const$/;"	f	class:ndn::Name
compare	security/sec-rule-relative.cpp	/^SecRuleRelative::compare(const Name& dataName, const Name& signerName)$/;"	f	class:ndn::SecRuleRelative
compareDynamicContainer	security/validator-config.hpp	/^  compareDynamicContainer(const DynamicTrustAnchorContainer& containerA,$/;"	f	class:ndn::ValidatorConfig
compareFieldSortOrder	lp/detail/field-info.hpp	/^compareFieldSortOrder(const FieldInfo& first, const FieldInfo& second)$/;"	f	namespace:ndn::lp::detail
comparePos	lp/packet.cpp	/^Packet::comparePos(const Block& first, const uint64_t second)$/;"	f	class:ndn::lp::Packet
compile	util/regex/regex-backref-matcher.hpp	/^RegexBackrefMatcher::compile()$/;"	f	class:ndn::RegexBackrefMatcher
compile	util/regex/regex-component-matcher.hpp	/^RegexComponentMatcher::compile()$/;"	f	class:ndn::RegexComponentMatcher
compile	util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::compile()$/;"	f	class:ndn::RegexComponentSetMatcher
compile	util/regex/regex-pattern-list-matcher.hpp	/^RegexPatternListMatcher::compile()$/;"	f	class:ndn::RegexPatternListMatcher
compile	util/regex/regex-pseudo-matcher.hpp	/^  compile()$/;"	f	class:ndn::RegexPseudoMatcher
compile	util/regex/regex-repeat-matcher.hpp	/^RegexRepeatMatcher::compile()$/;"	f	class:ndn::RegexRepeatMatcher
compile	util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::compile()$/;"	f	class:ndn::RegexTopMatcher
compileMultipleComponents	util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::compileMultipleComponents(size_t start, size_t lastIndex)$/;"	f	class:ndn::RegexComponentSetMatcher
compileSingleComponent	util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::compileSingleComponent()$/;"	f	class:ndn::RegexComponentSetMatcher
component_container	name.hpp	/^  typedef std::vector<Component>  component_container;$/;"	t	class:ndn::Name
computeDigest	security/public-key.cpp	/^PublicKey::computeDigest() const$/;"	f	class:ndn::PublicKey
computeDigest	util/digest.cpp	/^Digest<Hash>::computeDigest()$/;"	f	class:ndn::util::Digest
computeDigest	util/digest.cpp	/^Digest<Hash>::computeDigest(const uint8_t* buffer, size_t size)$/;"	f	class:ndn::util::Digest
conf	security/conf/checker.hpp	/^namespace conf {$/;"	n	namespace:ndn::security
conf	security/conf/common.hpp	/^namespace conf {$/;"	n	namespace:ndn::security
conf	security/conf/filter.hpp	/^namespace conf {$/;"	n	namespace:ndn::security
conf	security/conf/key-locator-checker.hpp	/^namespace conf {$/;"	n	namespace:ndn::security
conf	security/conf/rule.hpp	/^namespace conf {$/;"	n	namespace:ndn::security
connect	transport/stream-transport.hpp	/^  connect(const typename Protocol::endpoint& endpoint)$/;"	f	class:ndn::StreamTransportImpl
connect	transport/stream-transport.hpp	/^  connect(const typename Protocol::resolver::query& query)$/;"	f	class:ndn::StreamTransportWithResolverImpl
connect	transport/tcp-transport.cpp	/^TcpTransport::connect(boost::asio::io_service& ioService,$/;"	f	class:ndn::TcpTransport
connect	transport/transport.hpp	/^Transport::connect(boost::asio::io_service& ioService,$/;"	f	class:ndn::Transport
connect	transport/unix-transport.cpp	/^UnixTransport::connect(boost::asio::io_service& ioService,$/;"	f	class:ndn::UnixTransport
connect	util/signal-signal.hpp	/^Signal<Owner, TArgs...>::connect(const Handler& handler)$/;"	f	class:ndn::util::signal::Signal
connectHandler	transport/stream-transport.hpp	/^  connectHandler(const boost::system::error_code& error)$/;"	f	class:ndn::StreamTransportImpl
connectSingleShot	util/signal-signal.hpp	/^Signal<Owner, TArgs...>::connectSingleShot(const Handler& handler)$/;"	f	class:ndn::util::signal::Signal
connectTimeoutHandler	transport/stream-transport.hpp	/^  connectTimeoutHandler(const boost::system::error_code& error)$/;"	f	class:ndn::StreamTransportImpl
const_iterator	encoding/encoder.hpp	/^  typedef Buffer::const_iterator const_iterator;$/;"	t	class:ndn::encoding::Encoder
const_iterator	exclude.hpp	/^  typedef exclude_type::const_iterator const_iterator;$/;"	t	class:ndn::Exclude
const_iterator	name.hpp	/^  typedef const Component*        const_iterator;$/;"	t	class:ndn::Name
const_iterator	security/additional-description.hpp	/^  typedef std::map<std::string, std::string>::const_iterator const_iterator;$/;"	t	class:ndn::security::AdditionalDescription
const_iterator	security/certificate-container.cpp	/^CertificateContainer::const_iterator::const_iterator(std::set<Name>::const_iterator it,$/;"	f	class:ndn::security::CertificateContainer::const_iterator
const_iterator	security/certificate-container.hpp	/^  class const_iterator$/;"	c	class:ndn::security::CertificateContainer
const_iterator	security/identity-container.cpp	/^IdentityContainer::const_iterator::const_iterator(std::set<Name>::const_iterator it,$/;"	f	class:ndn::security::IdentityContainer::const_iterator
const_iterator	security/identity-container.hpp	/^  class const_iterator$/;"	c	class:ndn::security::IdentityContainer
const_iterator	security/key-container.cpp	/^KeyContainer::const_iterator::const_iterator(const Name& identity,$/;"	f	class:ndn::security::KeyContainer::const_iterator
const_iterator	security/key-container.hpp	/^  class const_iterator$/;"	c	class:ndn::security::KeyContainer
const_iterator	util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::const_iterator(const Data* ptr, const Cache* cache,$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
const_iterator	util/in-memory-storage.hpp	/^  class const_iterator : public std::iterator<std::input_iterator_tag, const Data>$/;"	c	class:ndn::util::InMemoryStorage
const_pointer	name.hpp	/^  typedef const Component*        const_pointer;$/;"	t	class:ndn::Name
const_reference	name.hpp	/^  typedef const Component         const_reference;$/;"	t	class:ndn::Name
const_reverse_iterator	exclude.hpp	/^  typedef exclude_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:ndn::Exclude
const_reverse_iterator	name.hpp	/^  typedef boost::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:ndn::Name
construct	encoding/oid.cpp	/^OID::construct(const std::string& oid)$/;"	f	class:ndn::OID
construct	face.cpp	/^Face::construct(KeyChain& keyChain)$/;"	f	class:ndn::Face
construct	face.cpp	/^Face::construct(shared_ptr<Transport> transport, KeyChain& keyChain)$/;"	f	class:ndn::Face
construct	name.cpp	/^Name::construct(const char* uriOrig)$/;"	f	class:ndn::Name
construct	util/dummy-client-face.cpp	/^DummyClientFace::construct(const Options& options)$/;"	f	class:ndn::util::DummyClientFace
convertSpecialChar	util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::convertSpecialChar(const std::string& str)$/;"	f	class:ndn::RegexTopMatcher
count	lp/packet.hpp	/^  count() const$/;"	f	class:ndn::lp::Packet
countDelegationsFromWire	link.cpp	/^Link::countDelegationsFromWire(const Block& block)$/;"	f	class:ndn::Link
create	security/conf/checker.hpp	/^  create(const ConfigSection& configSection, const std::string& configFilename)$/;"	f	class:ndn::security::conf::CheckerFactory
create	security/conf/filter.hpp	/^  create(const ConfigSection& configSection)$/;"	f	class:ndn::security::conf::FilterFactory
create	security/conf/key-locator-checker.hpp	/^  create(const ConfigSection& configSection, const std::string& filename)$/;"	f	class:ndn::security::conf::KeyLocatorCheckerFactory
create	security/key-chain.cpp	/^  T create;$/;"	m	struct:ndn::security::Factory	file:
create	transport/tcp-transport.cpp	/^TcpTransport::create(const ConfigFile& config)$/;"	f	class:ndn::TcpTransport
create	transport/unix-transport.cpp	/^UnixTransport::create(const ConfigFile& config)$/;"	f	class:ndn::UnixTransport
createCustomizedChecker	security/conf/checker.hpp	/^  createCustomizedChecker(const ConfigSection& configSection,$/;"	f	class:ndn::security::conf::CheckerFactory
createFixedSignerChecker	security/conf/checker.hpp	/^  createFixedSignerChecker(const ConfigSection& configSection,$/;"	f	class:ndn::security::conf::CheckerFactory
createHierarchicalChecker	security/conf/checker.hpp	/^  createHierarchicalChecker(const ConfigSection& configSection,$/;"	f	class:ndn::security::conf::CheckerFactory
createIdentity	security/key-chain.cpp	/^KeyChain::createIdentity(const Name& identityName, const KeyParams& params)$/;"	f	class:ndn::security::KeyChain
createKeyLocatorNameChecker	security/conf/key-locator-checker.hpp	/^  createKeyLocatorNameChecker(const ConfigSection& configSection,$/;"	f	class:ndn::security::conf::KeyLocatorCheckerFactory
createNameFilter	security/conf/filter.hpp	/^  createNameFilter(const ConfigSection& configSection)$/;"	f	class:ndn::security::conf::FilterFactory
createPib	security/key-chain.cpp	/^KeyChain::createPib(const std::string& pibLocator)$/;"	f	class:ndn::security::KeyChain
createTpm	security/key-chain.cpp	/^KeyChain::createTpm(const std::string& tpmLocator)$/;"	f	class:ndn::security::KeyChain
crypto	util/crypto.cpp	/^namespace crypto {$/;"	n	namespace:ndn	file:
crypto	util/crypto.hpp	/^namespace crypto {$/;"	n	namespace:ndn
dataBlock	encoding/block-helpers.hpp	/^dataBlock(uint32_t type, Iterator first, Iterator last)$/;"	f	namespace:ndn::encoding
dataBlock	encoding/block-helpers.hpp	/^dataBlock(uint32_t type, const char* data, size_t dataSize)$/;"	f	namespace:ndn::encoding
dataBlock	encoding/block-helpers.hpp	/^dataBlock(uint32_t type, const uint8_t* data, size_t dataSize)$/;"	f	namespace:ndn::encoding
days	util/time.hpp	/^typedef duration<boost::int_least32_t, boost::ratio<86400> > days;$/;"	t	namespace:ndn::time
decode	encoding/oid.cpp	/^OID::decode(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::OID
decode	lp/detail/field-decl.hpp	/^  decode(const Block& wire)$/;"	f	class:ndn::lp::detail::FieldDecl
decode	lp/detail/field-decl.hpp	/^  decode(const Block& wire)$/;"	f	struct:ndn::lp::detail::DecodeHelper
decode	security/certificate-extension.cpp	/^CertificateExtension::decode(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::CertificateExtension
decode	security/certificate-subject-description.cpp	/^CertificateSubjectDescription::decode(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::CertificateSubjectDescription
decode	security/certificate.cpp	/^Certificate::decode()$/;"	f	class:ndn::Certificate
decode	security/public-key.cpp	/^PublicKey::decode(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::PublicKey
decodeContent	link.cpp	/^Link::decodeContent()$/;"	f	class:ndn::Link
decodeValue	encoding/oid.cpp	/^decodeValue(CryptoPP::BufferedTransformation& bt, CryptoPP::word32& v)$/;"	f	namespace:ndn
decryptInTpm	security/key-chain.hpp	/^  decryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName, bool isSymmetric)$/;"	f	class:ndn::security::KeyChain
decryptInTpm	security/sec-tpm-file.cpp	/^SecTpmFile::decryptInTpm(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::SecTpmFile
decryptInTpm	security/sec-tpm-osx.cpp	/^SecTpmOsx::decryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName, bool sym)$/;"	f	class:ndn::SecTpmOsx
defaultCertificate	security/sec-public-info.cpp	/^SecPublicInfo::defaultCertificate()$/;"	f	class:ndn::SecPublicInfo
deleteCertificate	security/key-chain.cpp	/^KeyChain::deleteCertificate(const Name& certificateName)$/;"	f	class:ndn::security::KeyChain
deleteCertificateInfo	security/key-chain.hpp	/^  deleteCertificateInfo(const Name& certificateName)$/;"	f	class:ndn::security::KeyChain
deleteCertificateInfo	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::deleteCertificateInfo(const Name& certName)$/;"	f	class:ndn::SecPublicInfoSqlite3
deleteIdentity	security/key-chain.cpp	/^KeyChain::deleteIdentity(const Name& identity)$/;"	f	class:ndn::security::KeyChain
deleteIdentityInfo	security/key-chain.hpp	/^  deleteIdentityInfo(const Name& identity)$/;"	f	class:ndn::security::KeyChain
deleteIdentityInfo	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::deleteIdentityInfo(const Name& identityName)$/;"	f	class:ndn::SecPublicInfoSqlite3
deleteKey	security/key-chain.cpp	/^KeyChain::deleteKey(const Name& keyName)$/;"	f	class:ndn::security::KeyChain
deleteKeyPairInTpm	security/key-chain.hpp	/^  deleteKeyPairInTpm(const Name& keyName)$/;"	f	class:ndn::security::KeyChain
deleteKeyPairInTpm	security/sec-tpm-file.cpp	/^SecTpmFile::deleteKeyPairInTpm(const Name& keyName)$/;"	f	class:ndn::SecTpmFile
deleteKeyPairInTpm	security/sec-tpm-osx.hpp	/^  deleteKeyPairInTpm(const Name& keyName)$/;"	f	class:ndn::SecTpmOsx
deleteKeyPairInTpmInternal	security/sec-tpm-osx.cpp	/^SecTpmOsx::deleteKeyPairInTpmInternal(const Name& keyName, bool needRetry)$/;"	f	class:ndn::SecTpmOsx
deletePublicKeyInfo	security/key-chain.hpp	/^  deletePublicKeyInfo(const Name& keyName)$/;"	f	class:ndn::security::KeyChain
deletePublicKeyInfo	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::deletePublicKeyInfo(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
deleteTable	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::deleteTable(const string& tableName)$/;"	f	class:ndn::SecPublicInfoSqlite3
detail	lp/detail/field-decl.hpp	/^namespace detail {$/;"	n	namespace:ndn::lp
detail	lp/detail/field-info.cpp	/^namespace detail {$/;"	n	namespace:ndn::lp	file:
detail	lp/detail/field-info.hpp	/^namespace detail {$/;"	n	namespace:ndn::lp
difference_type	name.hpp	/^  typedef component_container::difference_type difference_type;$/;"	t	class:ndn::Name
disconnect	util/signal-connection.cpp	/^Connection::disconnect()$/;"	f	class:ndn::util::signal::Connection
disconnect	util/signal-scoped-connection.cpp	/^ScopedConnection::disconnect()$/;"	f	class:ndn::util::signal::ScopedConnection
disconnect	util/signal-signal.hpp	/^    shared_ptr<function<void()>> disconnect;$/;"	m	struct:ndn::util::signal::Signal::Slot
disconnect	util/signal-signal.hpp	/^Signal<Owner, TArgs...>::disconnect(typename SlotList::iterator it)$/;"	f	class:ndn::util::signal::Signal
dns	util/dns.cpp	/^namespace dns {$/;"	n	namespace:ndn	file:
dns	util/dns.hpp	/^namespace dns {$/;"	n	namespace:ndn
doesCertificateExist	security/key-chain.hpp	/^  doesCertificateExist(const Name& certificateName) const$/;"	f	class:ndn::security::KeyChain
doesCertificateExist	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::doesCertificateExist(const Name& certificateName)$/;"	f	class:ndn::SecPublicInfoSqlite3
doesIdentityExist	security/key-chain.hpp	/^  doesIdentityExist(const Name& identityName) const$/;"	f	class:ndn::security::KeyChain
doesIdentityExist	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::doesIdentityExist(const Name& identityName)$/;"	f	class:ndn::SecPublicInfoSqlite3
doesKeyExistInTpm	security/key-chain.hpp	/^  doesKeyExistInTpm(const Name& keyName, KeyClass keyClass) const$/;"	f	class:ndn::security::KeyChain
doesKeyExistInTpm	security/sec-tpm-file.cpp	/^SecTpmFile::doesKeyExistInTpm(const Name& keyName, KeyClass keyClass)$/;"	f	class:ndn::SecTpmFile
doesKeyExistInTpm	security/sec-tpm-osx.cpp	/^SecTpmOsx::doesKeyExistInTpm(const Name& keyName, KeyClass keyClass)$/;"	f	class:ndn::SecTpmOsx
doesMatch	detail/interest-filter-record.hpp	/^  doesMatch(const Name& name) const$/;"	f	class:ndn::InterestFilterRecord
doesMatch	interest-filter.cpp	/^InterestFilter::doesMatch(const Name& name) const$/;"	f	class:ndn::InterestFilter
doesPublicKeyExist	security/key-chain.hpp	/^  doesPublicKeyExist(const Name& keyName) const$/;"	f	class:ndn::security::KeyChain
doesPublicKeyExist	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::doesPublicKeyExist(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
doesTableExist	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::doesTableExist(const string& tableName)$/;"	f	class:ndn::SecPublicInfoSqlite3
duration	util/time.hpp	/^  typedef BOOST_SYSTEM_CLOCK_DURATION      duration;$/;"	t	class:ndn::time::system_clock
duration	util/time.hpp	/^  typedef nanoseconds      duration;$/;"	t	class:ndn::time::steady_clock
duration_type	util/monotonic_deadline_timer.hpp	/^  typedef ndn::time::steady_clock::Duration  duration_type;$/;"	t	struct:boost::asio::time_traits
element_const_iterator	encoding/block.hpp	/^  typedef element_container::const_iterator  element_const_iterator;$/;"	t	class:ndn::Block
element_container	encoding/block.hpp	/^  typedef std::vector<Block>                 element_container;$/;"	t	class:ndn::Block
element_iterator	encoding/block.hpp	/^  typedef element_container::iterator        element_iterator;$/;"	t	class:ndn::Block
elements	encoding/block.hpp	/^Block::elements() const$/;"	f	class:ndn::Block
elements_begin	encoding/block.cpp	/^Block::elements_begin() const$/;"	f	class:ndn::Block
elements_end	encoding/block.cpp	/^Block::elements_end() const$/;"	f	class:ndn::Block
elements_size	encoding/block.cpp	/^Block::elements_size() const$/;"	f	class:ndn::Block
emitSignal	util/signal-emit.hpp	76;"	d
empty	detail/container-with-on-empty-signal.hpp	/^  empty()$/;"	f	class:ndn::ContainerWithOnEmptySignal
empty	encoding/block.cpp	/^Block::empty() const$/;"	f	class:ndn::Block
empty	exclude.hpp	/^Exclude::empty() const$/;"	f	class:ndn::Exclude
empty	key-locator.hpp	/^  empty() const$/;"	f	class:ndn::KeyLocator
empty	management/nfd-local-control-header.hpp	/^  empty(uint8_t encodeMask) const$/;"	f	class:ndn::nfd::LocalControlHeader
empty	name-component.hpp	/^  empty() const$/;"	f	class:ndn::name::Component
empty	name.hpp	/^  empty() const$/;"	f	class:ndn::Name
empty	selectors.cpp	/^Selectors::empty() const$/;"	f	class:ndn::Selectors
empty	util/digest.hpp	/^  empty() const$/;"	f	class:ndn::util::Digest
enablePacketLogging	util/dummy-client-face.cpp	/^DummyClientFace::enablePacketLogging()$/;"	f	class:ndn::util::DummyClientFace
enablePacketLogging	util/dummy-client-face.hpp	/^    bool enablePacketLogging;$/;"	m	struct:ndn::util::DummyClientFace::Options
enableRegistrationReply	util/dummy-client-face.cpp	/^DummyClientFace::enableRegistrationReply()$/;"	f	class:ndn::util::DummyClientFace
enableRegistrationReply	util/dummy-client-face.hpp	/^    bool enableRegistrationReply;$/;"	m	struct:ndn::util::DummyClientFace::Options
encode	encoding/block.cpp	/^Block::encode()$/;"	f	class:ndn::Block
encode	encoding/oid.cpp	/^OID::encode(CryptoPP::BufferedTransformation& out) const$/;"	f	class:ndn::OID
encode	lp/detail/field-decl.hpp	/^  encode(EncodingImpl<TAG>& encoder, const T& value)$/;"	f	class:ndn::lp::detail::FieldDecl
encode	lp/detail/field-decl.hpp	/^  encode(EncodingImpl<TAG>& encoder, const T& value)$/;"	f	struct:ndn::lp::detail::EncodeHelper
encode	lp/detail/field-decl.hpp	/^  encode(EncodingImpl<TAG>& encoder, const std::pair<Buffer::const_iterator, Buffer::const_iterator>& value)$/;"	f	struct:ndn::lp::detail::EncodeHelper
encode	lp/detail/field-decl.hpp	/^  encode(EncodingImpl<TAG>& encoder, const uint64_t value)$/;"	f	struct:ndn::lp::detail::EncodeHelper
encode	security/certificate-extension.cpp	/^CertificateExtension::encode(CryptoPP::BufferedTransformation& out) const$/;"	f	class:ndn::CertificateExtension
encode	security/certificate-subject-description.cpp	/^CertificateSubjectDescription::encode(CryptoPP::BufferedTransformation& out) const$/;"	f	class:ndn::CertificateSubjectDescription
encode	security/certificate.cpp	/^Certificate::encode()$/;"	f	class:ndn::Certificate
encode	security/public-key.cpp	/^PublicKey::encode(CryptoPP::BufferedTransformation& out) const$/;"	f	class:ndn::PublicKey
encodeContent	link.cpp	/^Link::encodeContent()$/;"	f	class:ndn::Link
encodeContent	link.cpp	/^Link::encodeContent(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::Link
encodeValue	encoding/oid.cpp	/^encodeValue(CryptoPP::BufferedTransformation& bt, CryptoPP::word32 v)$/;"	f	namespace:ndn
encoding	encoding/block-helpers.cpp	/^namespace encoding {$/;"	n	namespace:ndn	file:
encoding	encoding/block-helpers.hpp	/^namespace encoding {$/;"	n	namespace:ndn
encoding	encoding/encoder.cpp	/^namespace encoding {$/;"	n	namespace:ndn	file:
encoding	encoding/encoder.hpp	/^namespace encoding {$/;"	n	namespace:ndn
encoding	encoding/encoding-buffer-fwd.hpp	/^namespace encoding {$/;"	n	namespace:ndn
encoding	encoding/encoding-buffer.hpp	/^namespace encoding {$/;"	n	namespace:ndn
encoding	encoding/estimator.cpp	/^namespace encoding {$/;"	n	namespace:ndn	file:
encoding	encoding/estimator.hpp	/^namespace encoding {$/;"	n	namespace:ndn
encryptInTpm	security/key-chain.hpp	/^  encryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName, bool isSymmetric)$/;"	f	class:ndn::security::KeyChain
encryptInTpm	security/sec-tpm-file.cpp	/^SecTpmFile::encryptInTpm(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::SecTpmFile
encryptInTpm	security/sec-tpm-osx.cpp	/^SecTpmOsx::encryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName, bool sym)$/;"	f	class:ndn::SecTpmOsx
end	detail/container-with-on-empty-signal.hpp	/^  end()$/;"	f	class:ndn::ContainerWithOnEmptySignal
end	encoding/block.cpp	/^Block::end() const$/;"	f	class:ndn::Block
end	encoding/encoder.hpp	/^Encoder::end() const$/;"	f	class:ndn::encoding::Encoder
end	encoding/encoder.hpp	/^Encoder::end()$/;"	f	class:ndn::encoding::Encoder
end	exclude.hpp	/^Exclude::end() const$/;"	f	class:ndn::Exclude
end	management/nfd-rib-entry.hpp	/^RibEntry::end() const$/;"	f	class:ndn::nfd::RibEntry
end	mgmt/status-dataset-context.cpp	/^StatusDatasetContext::end()$/;"	f	class:ndn::mgmt::StatusDatasetContext
end	name.hpp	/^  end() const$/;"	f	class:ndn::Name
end	security/additional-description.cpp	/^AdditionalDescription::end() const$/;"	f	class:ndn::security::AdditionalDescription
end	security/additional-description.cpp	/^AdditionalDescription::end()$/;"	f	class:ndn::security::AdditionalDescription
end	security/certificate-container.cpp	/^CertificateContainer::end() const$/;"	f	class:ndn::security::CertificateContainer
end	security/identity-container.cpp	/^IdentityContainer::end() const$/;"	f	class:ndn::security::IdentityContainer
end	security/key-container.cpp	/^KeyContainer::end() const$/;"	f	class:ndn::security::KeyContainer
end	util/in-memory-storage.cpp	/^InMemoryStorage::end() const$/;"	f	class:ndn::util::InMemoryStorage
ensureConnected	detail/face-impl.hpp	/^  ensureConnected(bool wantResume)$/;"	f	class:ndn::Face::Impl
entry	util/in-memory-storage-lfu.hpp	/^    InMemoryStorageEntry* entry;$/;"	m	struct:ndn::util::InMemoryStorageLfu::CleanupEntry
equal	encoding/oid.cpp	/^OID::equal(const OID& oid) const$/;"	f	class:ndn::OID
equals	name-component.hpp	/^  equals(const Component& other) const$/;"	f	class:ndn::name::Component
equals	name.cpp	/^Name::equals(const Name& name) const$/;"	f	class:ndn::Name
erase	detail/container-with-on-empty-signal.hpp	/^  erase(iterator item)$/;"	f	class:ndn::ContainerWithOnEmptySignal
erase	encoding/block.cpp	/^Block::erase(Block::element_const_iterator first, Block::element_const_iterator last)$/;"	f	class:ndn::Block
erase	encoding/block.cpp	/^Block::erase(Block::element_const_iterator position)$/;"	f	class:ndn::Block
erase	util/in-memory-storage.cpp	/^InMemoryStorage::erase(const Name& prefix, const bool isPrefix)$/;"	f	class:ndn::util::InMemoryStorage
eraseImpl	util/in-memory-storage.cpp	/^InMemoryStorage::eraseImpl(const Name& name)$/;"	f	class:ndn::util::InMemoryStorage
ethernet	util/ethernet.cpp	/^namespace ethernet {$/;"	n	namespace:ndn::util	file:
ethernet	util/ethernet.hpp	/^namespace ethernet {$/;"	n	namespace:ndn::util
evictItem	util/in-memory-storage-fifo.cpp	/^InMemoryStorageFifo::evictItem()$/;"	f	class:ndn::util::InMemoryStorageFifo
evictItem	util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::evictItem()$/;"	f	class:ndn::util::InMemoryStorageLfu
evictItem	util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::evictItem()$/;"	f	class:ndn::util::InMemoryStorageLru
evictItem	util/in-memory-storage-persistent.cpp	/^InMemoryStoragePersistent::evictItem()$/;"	f	class:ndn::util::InMemoryStoragePersistent
excludeAfter	exclude.cpp	/^Exclude::excludeAfter(const name::Component& from)$/;"	f	class:ndn::Exclude
excludeBefore	exclude.hpp	/^Exclude::excludeBefore(const name::Component& to)$/;"	f	class:ndn::Exclude
excludeOne	exclude.cpp	/^Exclude::excludeOne(const name::Component& comp)$/;"	f	class:ndn::Exclude
excludeRange	exclude.cpp	/^Exclude::excludeRange(const name::Component& from, const name::Component& to)$/;"	f	class:ndn::Exclude
exclude_type	exclude.hpp	/^  typedef std::map< name::Component, bool \/*any*\/, std::greater<name::Component> > exclude_type;$/;"	t	class:ndn::Exclude
expand	util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::expand(const std::string& expandStr)$/;"	f	class:ndn::RegexTopMatcher
expiresFromNow	util/scheduler.cpp	/^Scheduler::EventInfo::expiresFromNow() const$/;"	f	class:ndn::util::scheduler::Scheduler::EventInfo
exportIdentity	security/key-chain.cpp	/^KeyChain::exportIdentity(const Name& identity, const std::string& passwordStr)$/;"	f	class:ndn::security::KeyChain
exportPrivateKeyPkcs5FromTpm	security/key-chain.hpp	/^  exportPrivateKeyPkcs5FromTpm(const Name& keyName, const std::string& password)$/;"	f	class:ndn::security::KeyChain
exportPrivateKeyPkcs5FromTpm	security/sec-tpm.cpp	/^SecTpm::exportPrivateKeyPkcs5FromTpm(const Name& keyName, const string& passwordStr)$/;"	f	class:ndn::SecTpm
exportPrivateKeyPkcs8FromTpm	security/sec-tpm-file.cpp	/^SecTpmFile::exportPrivateKeyPkcs8FromTpm(const Name& keyName)$/;"	f	class:ndn::SecTpmFile
exportPrivateKeyPkcs8FromTpm	security/sec-tpm-osx.hpp	/^  exportPrivateKeyPkcs8FromTpm(const Name& keyName)$/;"	f	class:ndn::SecTpmOsx
exportPrivateKeyPkcs8FromTpmInternal	security/sec-tpm-osx.cpp	/^SecTpmOsx::exportPrivateKeyPkcs8FromTpmInternal(const Name& keyName, bool needRetry)$/;"	f	class:ndn::SecTpmOsx
expressInterest	face.cpp	/^Face::expressInterest(const Interest& interest,$/;"	f	class:ndn::Face
expressInterest	face.cpp	/^Face::expressInterest(const Name& name,$/;"	f	class:ndn::Face
extractComponent	util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::extractComponent(size_t index)$/;"	f	class:ndn::RegexComponentSetMatcher
extractLpLocalFields	face.cpp	/^extractLpLocalFields(NETPKT& netPacket, const lp::Packet& lpPacket)$/;"	f	namespace:ndn
extractPattern	util/regex/regex-pattern-list-matcher.hpp	/^RegexPatternListMatcher::extractPattern(size_t index, size_t* next)$/;"	f	class:ndn::RegexPatternListMatcher
extractRepetition	util/regex/regex-pattern-list-matcher.hpp	/^RegexPatternListMatcher::extractRepetition(size_t index)$/;"	f	class:ndn::RegexPatternListMatcher
extractSubPattern	util/regex/regex-pattern-list-matcher.hpp	/^RegexPatternListMatcher::extractSubPattern(const char left, const char right, size_t index)$/;"	f	class:ndn::RegexPatternListMatcher
f_field	encoding/tlv.hpp	/^  f_field = 33,$/;"	e	enum:ndn::tlv::__anon4
fetch	util/segment-fetcher.cpp	/^SegmentFetcher::fetch(Face& face,$/;"	f	class:ndn::util::SegmentFetcher
fetchFirstSegment	util/segment-fetcher.cpp	/^SegmentFetcher::fetchFirstSegment(const Interest& baseInterest,$/;"	f	class:ndn::util::SegmentFetcher
fetchNextSegment	util/segment-fetcher.cpp	/^SegmentFetcher::fetchNextSegment(const Interest& origInterest, const Name& dataName,$/;"	f	class:ndn::util::SegmentFetcher
field_location_tags	lp/field.hpp	/^namespace field_location_tags {$/;"	n	namespace:ndn::lp
finalize	util/digest.cpp	/^Digest<Hash>::finalize()$/;"	f	class:ndn::util::Digest
finalizeUnregisterPrefix	detail/face-impl.hpp	/^  finalizeUnregisterPrefix(RegisteredPrefixTable::iterator item,$/;"	f	class:ndn::Face::Impl
find	encoding/block.cpp	/^Block::find(uint32_t type) const$/;"	f	class:ndn::Block
find	security/certificate-container.cpp	/^CertificateContainer::find(const Name& certName) const$/;"	f	class:ndn::security::CertificateContainer
find	security/identity-container.cpp	/^IdentityContainer::find(const Name& identity) const$/;"	f	class:ndn::security::IdentityContainer
find	security/key-container.cpp	/^KeyContainer::find(const name::Component& keyId) const$/;"	f	class:ndn::security::KeyContainer
find	util/in-memory-storage.cpp	/^InMemoryStorage::find(const Interest& interest)$/;"	f	class:ndn::util::InMemoryStorage
find	util/in-memory-storage.cpp	/^InMemoryStorage::find(const Name& name)$/;"	f	class:ndn::util::InMemoryStorage
findAppMetaInfo	meta-info.cpp	/^MetaInfo::findAppMetaInfo(uint32_t tlvType) const$/;"	f	class:ndn::MetaInfo
findConfigFile	util/config-file.cpp	/^ConfigFile::findConfigFile()$/;"	f	class:ndn::ConfigFile
findDelegationFromWire	link.cpp	/^Link::findDelegationFromWire(const Block& block, const Name& delegationName)$/;"	f	class:ndn::Link
freeEntry	util/in-memory-storage.cpp	/^InMemoryStorage::freeEntry(Cache::iterator it)$/;"	f	class:ndn::util::InMemoryStorage
frequency	util/in-memory-storage-lfu.hpp	/^    uint64_t frequency;\/\/could potentially be overflowed$/;"	m	struct:ndn::util::InMemoryStorageLfu::CleanupEntry
fromBuffer	encoding/block.cpp	/^Block::fromBuffer(ConstBufferPtr buffer, size_t offset)$/;"	f	class:ndn::Block
fromBuffer	encoding/block.cpp	/^Block::fromBuffer(const uint8_t* buffer, size_t maxSize)$/;"	f	class:ndn::Block
fromDev	util/face-uri.cpp	/^FaceUri::fromDev(const std::string& ifname)$/;"	f	class:ndn::util::FaceUri
fromEscapedString	name-component.cpp	/^Component::fromEscapedString(const char* escapedString, size_t beginOffset, size_t endOffset)$/;"	f	class:ndn::name::Component
fromEscapedString	name-component.hpp	/^  fromEscapedString(const char* escapedString)$/;"	f	class:ndn::name::Component
fromEscapedString	name-component.hpp	/^  fromEscapedString(const std::string& escapedString)$/;"	f	class:ndn::name::Component
fromFd	util/face-uri.cpp	/^FaceUri::fromFd(int fd)$/;"	f	class:ndn::util::FaceUri
fromHex	util/string-helper.cpp	/^fromHex(const std::string& hexString)$/;"	f	namespace:ndn
fromHexChar	util/string-helper.cpp	/^fromHexChar(uint8_t c)$/;"	f	namespace:ndn
fromImplicitSha256Digest	name-component.cpp	/^Component::fromImplicitSha256Digest(const ConstBufferPtr& digest)$/;"	f	class:ndn::name::Component
fromImplicitSha256Digest	name-component.cpp	/^Component::fromImplicitSha256Digest(const uint8_t* digest, size_t digestSize)$/;"	f	class:ndn::name::Component
fromIsoString	util/time.cpp	/^fromIsoString(const std::string& isoString)$/;"	f	namespace:ndn::time
fromName	util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::fromName(const Name& name, bool hasAnchor)$/;"	f	class:ndn::RegexTopMatcher
fromNumber	name-component.cpp	/^Component::fromNumber(uint64_t number)$/;"	f	class:ndn::name::Component
fromNumberWithMarker	name-component.cpp	/^Component::fromNumberWithMarker(uint8_t marker, uint64_t number)$/;"	f	class:ndn::name::Component
fromSegment	name-component.cpp	/^Component::fromSegment(uint64_t segmentNo)$/;"	f	class:ndn::name::Component
fromSegmentOffset	name-component.cpp	/^Component::fromSegmentOffset(uint64_t offset)$/;"	f	class:ndn::name::Component
fromSequenceNumber	name-component.cpp	/^Component::fromSequenceNumber(uint64_t seqNo)$/;"	f	class:ndn::name::Component
fromStream	encoding/block.cpp	/^Block::fromStream(std::istream& is)$/;"	f	class:ndn::Block
fromString	util/ethernet.cpp	/^Address::fromString(const std::string& str)$/;"	f	class:ndn::util::ethernet::Address
fromString	util/time.cpp	/^fromString(const std::string& formattedTimePoint,$/;"	f	namespace:ndn::time
fromTimestamp	name-component.cpp	/^Component::fromTimestamp(const time::system_clock::TimePoint& timePoint)$/;"	f	class:ndn::name::Component
fromUnixTimestamp	util/time.cpp	/^fromUnixTimestamp(const milliseconds& duration)$/;"	f	namespace:ndn::time
fromVersion	name-component.cpp	/^Component::fromVersion(uint64_t version)$/;"	f	class:ndn::name::Component
g_steadyClock	util/time.cpp	/^static shared_ptr<CustomSteadyClock> g_steadyClock;$/;"	m	namespace:ndn::time	file:
g_systemClock	util/time.cpp	/^static shared_ptr<CustomSystemClock> g_systemClock;$/;"	m	namespace:ndn::time	file:
generate	util/command-interest-generator.hpp	/^CommandInterestGenerator::generate(Interest& interest,$/;"	f	class:ndn::CommandInterestGenerator
generateEcdsaKeyPair	security/key-chain.cpp	/^KeyChain::generateEcdsaKeyPair(const Name& identityName, bool isKsk, uint32_t keySize)$/;"	f	class:ndn::security::KeyChain
generateEcdsaKeyPairAsDefault	security/key-chain.cpp	/^KeyChain::generateEcdsaKeyPairAsDefault(const Name& identityName, bool isKsk, uint32_t keySize)$/;"	f	class:ndn::security::KeyChain
generateKeyPair	security/key-chain.cpp	/^KeyChain::generateKeyPair(const Name& identityName, bool isKsk, const KeyParams& params)$/;"	f	class:ndn::security::KeyChain
generateKeyPairInTpm	security/key-chain.hpp	/^  generateKeyPairInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::security::KeyChain
generateKeyPairInTpm	security/sec-tpm-file.cpp	/^SecTpmFile::generateKeyPairInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::SecTpmFile
generateKeyPairInTpm	security/sec-tpm-osx.hpp	/^  generateKeyPairInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::SecTpmOsx
generateKeyPairInTpmInternal	security/sec-tpm-osx.cpp	/^SecTpmOsx::generateKeyPairInTpmInternal(const Name& keyName,$/;"	f	class:ndn::SecTpmOsx
generateRandomBlock	security/key-chain.hpp	/^  generateRandomBlock(uint8_t* res, size_t size) const$/;"	f	class:ndn::security::KeyChain
generateRandomBlock	security/sec-tpm-file.cpp	/^SecTpmFile::generateRandomBlock(uint8_t* res, size_t size)$/;"	f	class:ndn::SecTpmFile
generateRandomBlock	security/sec-tpm-osx.cpp	/^SecTpmOsx::generateRandomBlock(uint8_t* res, size_t size)$/;"	f	class:ndn::SecTpmOsx
generateRsaKeyPair	security/key-chain.cpp	/^KeyChain::generateRsaKeyPair(const Name& identityName, bool isKsk, uint32_t keySize)$/;"	f	class:ndn::security::KeyChain
generateRsaKeyPairAsDefault	security/key-chain.cpp	/^KeyChain::generateRsaKeyPairAsDefault(const Name& identityName, bool isKsk, uint32_t keySize)$/;"	f	class:ndn::security::KeyChain
generateSecureWord32	util/random.cpp	/^generateSecureWord32()$/;"	f	namespace:ndn::random
generateSecureWord64	util/random.cpp	/^generateSecureWord64()$/;"	f	namespace:ndn::random
generateSymmetricKeyInTpm	security/key-chain.hpp	/^  generateSymmetricKeyInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::security::KeyChain
generateSymmetricKeyInTpm	security/sec-tpm-file.cpp	/^SecTpmFile::generateSymmetricKeyInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::SecTpmFile
generateSymmetricKeyInTpm	security/sec-tpm-osx.cpp	/^SecTpmOsx::generateSymmetricKeyInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::SecTpmOsx
generateWithIdentity	util/command-interest-generator.hpp	/^CommandInterestGenerator::generateWithIdentity(Interest& interest, const Name& identity)$/;"	f	class:ndn::CommandInterestGenerator
generateWord32	util/random.cpp	/^generateWord32()$/;"	f	namespace:ndn::random
generateWord64	util/random.cpp	/^generateWord64()$/;"	f	namespace:ndn::random
get	encoding/block.cpp	/^Block::get(uint32_t type) const$/;"	f	class:ndn::Block
get	encoding/buffer.hpp	/^  get() const$/;"	f	class:ndn::Buffer
get	encoding/buffer.hpp	/^  get()$/;"	f	class:ndn::Buffer
get	lp/packet.hpp	/^  get(size_t index = 0) const$/;"	f	class:ndn::lp::Packet
get	name.hpp	/^  get(ssize_t i) const$/;"	f	class:ndn::Name
get	security/additional-description.cpp	/^AdditionalDescription::get(const std::string& key) const$/;"	f	class:ndn::security::AdditionalDescription
get	security/public-key.hpp	/^  get() const$/;"	f	class:ndn::PublicKey
get	security/sec-tpm-osx.cpp	/^  get() const$/;"	f	class:ndn::CFReleaser
get	security/sec-tpm-osx.cpp	/^  get()$/;"	f	class:ndn::CFReleaser
getAll	security/validator-config.hpp	/^    getAll() const$/;"	f	class:ndn::ValidatorConfig::TrustAnchorContainer
getAllCertificateNames	security/key-chain.hpp	/^  getAllCertificateNames(std::vector<Name>& nameList, bool isDefault) const$/;"	f	class:ndn::security::KeyChain
getAllCertificateNames	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getAllCertificateNames(vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::SecPublicInfoSqlite3
getAllCertificateNamesOfKey	security/key-chain.hpp	/^  getAllCertificateNamesOfKey(const Name& keyName,$/;"	f	class:ndn::security::KeyChain
getAllCertificateNamesOfKey	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getAllCertificateNamesOfKey(const Name& keyName,$/;"	f	class:ndn::SecPublicInfoSqlite3
getAllIdentities	security/key-chain.hpp	/^  getAllIdentities(std::vector<Name>& nameList, bool isDefault) const$/;"	f	class:ndn::security::KeyChain
getAllIdentities	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getAllIdentities(vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::SecPublicInfoSqlite3
getAllKeyNames	security/key-chain.hpp	/^  getAllKeyNames(std::vector<Name>& nameList, bool isDefault) const$/;"	f	class:ndn::security::KeyChain
getAllKeyNames	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getAllKeyNames(vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::SecPublicInfoSqlite3
getAllKeyNamesOfIdentity	security/key-chain.hpp	/^  getAllKeyNamesOfIdentity(const Name& identity, std::vector<Name>& nameList, bool isDefault) const$/;"	f	class:ndn::security::KeyChain
getAllKeyNamesOfIdentity	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getAllKeyNamesOfIdentity(const Name& identity,$/;"	f	class:ndn::SecPublicInfoSqlite3
getAppMetaInfo	meta-info.cpp	/^MetaInfo::getAppMetaInfo() const$/;"	f	class:ndn::MetaInfo
getAsymKeyType	security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getAsymKeyType(KeyType keyType)$/;"	f	class:ndn::SecTpmOsx::Impl
getBackref	util/regex/regex-backref-manager.hpp	/^RegexBackrefManager::getBackref(size_t backrefNo)$/;"	f	class:ndn::RegexBackrefManager
getBlob	util/sqlite3-statement.cpp	/^Sqlite3Statement::getBlob(int column)$/;"	f	class:ndn::util::Sqlite3Statement
getBlock	util/sqlite3-statement.cpp	/^Sqlite3Statement::getBlock(int column)$/;"	f	class:ndn::util::Sqlite3Statement
getBody	mgmt/control-response.hpp	/^ControlResponse::getBody() const$/;"	f	class:ndn::mgmt::ControlResponse
getBroadcastAddress	util/ethernet.cpp	/^getBroadcastAddress()$/;"	f	namespace:ndn::util::ethernet
getBuffer	encoding/block.hpp	/^Block::getBuffer() const$/;"	f	class:ndn::Block
getBuffer	encoding/encoder.hpp	/^Encoder::getBuffer()$/;"	f	class:ndn::encoding::Encoder
getCachingPolicy	data.hpp	/^Data::getCachingPolicy() const$/;"	f	class:ndn::Data
getCachingPolicy	management/nfd-local-control-header.hpp	/^  getCachingPolicy() const$/;"	f	class:ndn::nfd::LocalControlHeader
getCanonicalPibLocator	security/key-chain.cpp	/^getCanonicalPibLocator(const std::string& pibLocator)$/;"	f	namespace:ndn::security
getCanonicalTpmLocator	security/key-chain.cpp	/^getCanonicalTpmLocator(const std::string& tpmLocator)$/;"	f	namespace:ndn::security
getCanonizeProvider	util/face-uri.cpp	/^getCanonizeProvider(const std::string& scheme)$/;"	f	namespace:ndn::util
getCapacity	util/in-memory-storage.hpp	/^  getCapacity() const$/;"	f	class:ndn::util::InMemoryStorage
getCertificate	security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::getCertificate(const Name& certificateName)$/;"	f	class:ndn::CertificateCacheTtl
getCertificate	security/key-chain.hpp	/^  getCertificate(const Name& certificateName) const$/;"	f	class:ndn::security::KeyChain
getCertificate	security/key.cpp	/^Key::getCertificate(const Name& certName) const$/;"	f	class:ndn::security::Key
getCertificate	security/pib-memory.cpp	/^PibMemory::getCertificate(const Name& certName) const$/;"	f	class:ndn::security::PibMemory
getCertificate	security/pib-sqlite3.cpp	/^PibSqlite3::getCertificate(const Name& certName) const$/;"	f	class:ndn::security::PibSqlite3
getCertificate	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getCertificate(const Name& certificateName)$/;"	f	class:ndn::SecPublicInfoSqlite3
getCertificate	security/secured-bag.hpp	/^  getCertificate() const$/;"	f	class:ndn::SecuredBag
getCertificates	security/key.cpp	/^Key::getCertificates() const$/;"	f	class:ndn::security::Key
getCertificatesOfKey	security/pib-memory.cpp	/^PibMemory::getCertificatesOfKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibMemory
getCertificatesOfKey	security/pib-sqlite3.cpp	/^PibSqlite3::getCertificatesOfKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibSqlite3
getChildSelector	interest.hpp	/^  getChildSelector() const$/;"	f	class:ndn::Interest
getChildSelector	selectors.hpp	/^  getChildSelector() const$/;"	f	class:ndn::Selectors
getCode	mgmt/control-response.hpp	/^ControlResponse::getCode() const$/;"	f	class:ndn::mgmt::ControlResponse
getCommandOptions	detail/registered-prefix.hpp	/^  getCommandOptions() const$/;"	f	class:ndn::RegisteredPrefix
getContent	data.cpp	/^Data::getContent() const$/;"	f	class:ndn::Data
getContentType	data.hpp	/^Data::getContentType() const$/;"	f	class:ndn::Data
getCost	management/nfd-control-parameters.hpp	/^  getCost() const$/;"	f	class:ndn::nfd::ControlParameters
getCost	management/nfd-fib-entry.hpp	/^  getCost() const$/;"	f	class:ndn::nfd::NextHopRecord
getCost	management/nfd-rib-entry.hpp	/^  getCost() const$/;"	f	class:ndn::nfd::Route
getCurrentTimestamp	management/nfd-forwarder-status.hpp	/^  getCurrentTimestamp() const$/;"	f	class:ndn::nfd::ForwarderStatus
getData	util/in-memory-storage-entry.hpp	/^  getData() const$/;"	f	class:ndn::util::InMemoryStorageEntry
getDefaultCertificate	security/key-chain.hpp	/^  getDefaultCertificate() const$/;"	f	class:ndn::security::KeyChain
getDefaultCertificate	security/key.cpp	/^Key::getDefaultCertificate() const$/;"	f	class:ndn::security::Key
getDefaultCertificate	security/sec-public-info.cpp	/^SecPublicInfo::getDefaultCertificate()$/;"	f	class:ndn::SecPublicInfo
getDefaultCertificateName	security/key-chain.hpp	/^  getDefaultCertificateName() const$/;"	f	class:ndn::security::KeyChain
getDefaultCertificateName	security/sec-public-info.cpp	/^SecPublicInfo::getDefaultCertificateName()$/;"	f	class:ndn::SecPublicInfo
getDefaultCertificateNameForIdentity	security/key-chain.hpp	/^  getDefaultCertificateNameForIdentity(const Name& identityName) const$/;"	f	class:ndn::security::KeyChain
getDefaultCertificateNameForIdentity	security/sec-public-info.cpp	/^SecPublicInfo::getDefaultCertificateNameForIdentity(const Name& identityName)$/;"	f	class:ndn::SecPublicInfo
getDefaultCertificateNameForKey	security/key-chain.hpp	/^  getDefaultCertificateNameForKey(const Name& keyName) const$/;"	f	class:ndn::security::KeyChain
getDefaultCertificateNameForKey	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getDefaultCertificateNameForKey(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
getDefaultCertificateOfKey	security/pib-memory.cpp	/^PibMemory::getDefaultCertificateOfKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibMemory
getDefaultCertificateOfKey	security/pib-sqlite3.cpp	/^PibSqlite3::getDefaultCertificateOfKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibSqlite3
getDefaultIdentity	security/key-chain.hpp	/^  getDefaultIdentity() const$/;"	f	class:ndn::security::KeyChain
getDefaultIdentity	security/pib-memory.cpp	/^PibMemory::getDefaultIdentity() const$/;"	f	class:ndn::security::PibMemory
getDefaultIdentity	security/pib-sqlite3.cpp	/^PibSqlite3::getDefaultIdentity() const$/;"	f	class:ndn::security::PibSqlite3
getDefaultIdentity	security/pib.cpp	/^Pib::getDefaultIdentity() const$/;"	f	class:ndn::security::Pib
getDefaultIdentity	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getDefaultIdentity()$/;"	f	class:ndn::SecPublicInfoSqlite3
getDefaultKey	security/identity.cpp	/^Identity::getDefaultKey() const$/;"	f	class:ndn::security::Identity
getDefaultKeyNameForIdentity	security/key-chain.hpp	/^  getDefaultKeyNameForIdentity(const Name& identityName) const$/;"	f	class:ndn::security::KeyChain
getDefaultKeyNameForIdentity	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getDefaultKeyNameForIdentity(const Name& identityName)$/;"	f	class:ndn::SecPublicInfoSqlite3
getDefaultKeyOfIdentity	security/pib-memory.cpp	/^PibMemory::getDefaultKeyOfIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibMemory
getDefaultKeyOfIdentity	security/pib-sqlite3.cpp	/^PibSqlite3::getDefaultKeyOfIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibSqlite3
getDefaultKeySize	security/key-params.hpp	/^  getDefaultKeySize() const$/;"	f	class:ndn::SimplePublicKeyParams
getDefaultKeySize	security/key-params.hpp	/^  getDefaultKeySize() const$/;"	f	class:ndn::SimpleSymmetricKeyParams
getDefaultMulticastAddress	util/ethernet.cpp	/^getDefaultMulticastAddress()$/;"	f	namespace:ndn::util::ethernet
getDefaultPibLocator	security/key-chain.cpp	/^KeyChain::getDefaultPibLocator()$/;"	f	class:ndn::security::KeyChain
getDefaultRefreshPeriod	security/validator-config.cpp	/^ValidatorConfig::getDefaultRefreshPeriod()$/;"	f	class:ndn::ValidatorConfig
getDefaultSize	security/key-params.cpp	/^AesKeyParamsInfo::getDefaultSize()$/;"	f	class:ndn::AesKeyParamsInfo
getDefaultSize	security/key-params.cpp	/^EcdsaKeyParamsInfo::getDefaultSize()$/;"	f	class:ndn::EcdsaKeyParamsInfo
getDefaultSize	security/key-params.cpp	/^RsaKeyParamsInfo::getDefaultSize()$/;"	f	class:ndn::RsaKeyParamsInfo
getDefaultSocketHostAndPort	transport/tcp-transport.cpp	/^TcpTransport::getDefaultSocketHostAndPort(const ConfigFile& config)$/;"	f	class:ndn::TcpTransport
getDefaultSocketName	transport/unix-transport.cpp	/^UnixTransport::getDefaultSocketName(const ConfigFile& config)$/;"	f	class:ndn::UnixTransport
getDefaultStartTime	util/time-unit-test-clock.hpp	/^  getDefaultStartTime()$/;"	f	class:ndn::time::UnitTestClockTraits
getDefaultTpmLocator	security/key-chain.cpp	/^KeyChain::getDefaultTpmLocator()$/;"	f	class:ndn::security::KeyChain
getDelegationFromWire	link.cpp	/^Link::getDelegationFromWire(const Block& block, size_t index)$/;"	f	class:ndn::Link
getDelegations	link.cpp	/^Link::getDelegations() const$/;"	f	class:ndn::Link
getDigestAlgorithm	security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getDigestAlgorithm(DigestAlgorithm digestAlgo)$/;"	f	class:ndn::SecTpmOsx::Impl
getDigestAlgorithm	security/signing-info.hpp	/^  getDigestAlgorithm() const$/;"	f	class:ndn::security::SigningInfo
getDigestSize	security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getDigestSize(DigestAlgorithm digestAlgo)$/;"	f	class:ndn::SecTpmOsx::Impl
getEC	interest.hpp	/^  getEC() const$/;"	f	class:ndn::Interest
getExclude	interest.hpp	/^  getExclude() const$/;"	f	class:ndn::Interest
getExclude	selectors.hpp	/^  getExclude() const$/;"	f	class:ndn::Selectors
getExpirationPeriod	management/nfd-control-parameters.hpp	/^  getExpirationPeriod() const$/;"	f	class:ndn::nfd::ControlParameters
getExpirationPeriod	management/nfd-face-status.hpp	/^  getExpirationPeriod() const$/;"	f	class:ndn::nfd::FaceStatus
getExpirationPeriod	management/nfd-rib-entry.hpp	/^  getExpirationPeriod() const$/;"	f	class:ndn::nfd::Route
getExpiry	mgmt/status-dataset-context.cpp	/^StatusDatasetContext::getExpiry() const$/;"	f	class:ndn::mgmt::StatusDatasetContext
getExpr	util/regex/regex-matcher.hpp	/^  getExpr() const$/;"	f	class:ndn::RegexMatcher
getExtensionList	security/certificate.hpp	/^  getExtensionList() const$/;"	f	class:ndn::Certificate
getExtensionList	security/certificate.hpp	/^  getExtensionList()$/;"	f	class:ndn::Certificate
getFC	interest.hpp	/^  getFC() const$/;"	f	class:ndn::Interest
getFaceId	management/nfd-control-parameters.hpp	/^  getFaceId() const$/;"	f	class:ndn::nfd::ControlParameters
getFaceId	management/nfd-face-query-filter.hpp	/^  getFaceId() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getFaceId	management/nfd-face-traits.hpp	/^  getFaceId() const$/;"	f	class:ndn::nfd::FaceTraits
getFaceId	management/nfd-fib-entry.hpp	/^  getFaceId() const$/;"	f	class:ndn::nfd::NextHopRecord
getFaceId	management/nfd-rib-entry.hpp	/^  getFaceId() const$/;"	f	class:ndn::nfd::Route
getFacePersistency	management/nfd-control-parameters.hpp	/^  getFacePersistency() const$/;"	f	class:ndn::nfd::ControlParameters
getFacePersistency	management/nfd-face-query-filter.hpp	/^  getFacePersistency() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getFacePersistency	management/nfd-face-traits.hpp	/^  getFacePersistency() const$/;"	f	class:ndn::nfd::FaceTraits
getFaceScope	management/nfd-face-query-filter.hpp	/^  getFaceScope() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getFaceScope	management/nfd-face-traits.hpp	/^  getFaceScope() const$/;"	f	class:ndn::nfd::FaceTraits
getFilter	detail/interest-filter-record.hpp	/^  getFilter() const$/;"	f	class:ndn::InterestFilterRecord
getFilter	detail/registered-prefix.hpp	/^  getFilter() const$/;"	f	class:ndn::RegisteredPrefix
getFinalBlockId	data.hpp	/^Data::getFinalBlockId() const$/;"	f	class:ndn::Data
getFinalBlockId	meta-info.hpp	/^MetaInfo::getFinalBlockId() const$/;"	f	class:ndn::MetaInfo
getFlags	management/nfd-control-parameters.hpp	/^  getFlags() const$/;"	f	class:ndn::nfd::ControlParameters
getFlags	management/nfd-rib-entry.hpp	/^  getFlags() const$/;"	f	class:ndn::nfd::Route
getFreshnessPeriod	data.hpp	/^Data::getFreshnessPeriod() const$/;"	f	class:ndn::Data
getFreshnessPeriod	meta-info.hpp	/^MetaInfo::getFreshnessPeriod() const$/;"	f	class:ndn::MetaInfo
getFullName	data.cpp	/^Data::getFullName() const$/;"	f	class:ndn::Data
getFullName	util/in-memory-storage-entry.hpp	/^  getFullName() const$/;"	f	class:ndn::util::InMemoryStorageEntry
getHeader	lp/nack.hpp	/^  getHeader() const$/;"	f	class:ndn::lp::Nack
getHeader	lp/nack.hpp	/^  getHeader()$/;"	f	class:ndn::lp::Nack
getHost	util/face-uri.hpp	/^  getHost() const$/;"	f	class:ndn::util::FaceUri
getId	security/conf/rule.hpp	/^  getId()$/;"	f	class:ndn::security::conf::Rule
getIdentities	security/pib-memory.cpp	/^PibMemory::getIdentities() const$/;"	f	class:ndn::security::PibMemory
getIdentities	security/pib-sqlite3.cpp	/^PibSqlite3::getIdentities() const$/;"	f	class:ndn::security::PibSqlite3
getIdentities	security/pib.cpp	/^Pib::getIdentities() const$/;"	f	class:ndn::security::Pib
getIdentity	security/key.cpp	/^Key::getIdentity() const$/;"	f	class:ndn::security::Key
getIdentity	security/pib.cpp	/^Pib::getIdentity(const Name& identity) const$/;"	f	class:ndn::security::Pib
getImpExpPassWord	security/sec-tpm.cpp	/^SecTpm::getImpExpPassWord(std::string& password, const std::string& prompt)$/;"	f	class:ndn::SecTpm
getImpl	security/pib.hpp	/^  getImpl()$/;"	f	class:ndn::security::Pib
getInTerminal	security/key-chain.hpp	/^  getInTerminal() const$/;"	f	class:ndn::security::KeyChain
getInTerminal	security/sec-tpm-file.hpp	/^  getInTerminal() const$/;"	f	class:ndn::SecTpmFile
getInTerminal	security/sec-tpm-osx.cpp	/^SecTpmOsx::getInTerminal() const$/;"	f	class:ndn::SecTpmOsx
getIncomingFaceId	data.hpp	/^Data::getIncomingFaceId() const$/;"	f	class:ndn::Data
getIncomingFaceId	interest.hpp	/^  getIncomingFaceId() const$/;"	f	class:ndn::Interest
getIncomingFaceId	management/nfd-local-control-header.hpp	/^  getIncomingFaceId() const$/;"	f	class:ndn::nfd::LocalControlHeader
getInfo	signature.hpp	/^  getInfo() const$/;"	f	class:ndn::Signature
getInt	util/sqlite3-statement.cpp	/^Sqlite3Statement::getInt(int column)$/;"	f	class:ndn::util::Sqlite3Statement
getIntegerList	encoding/oid.hpp	/^  getIntegerList() const$/;"	f	class:ndn::OID
getInterest	detail/pending-interest.hpp	/^  getInterest() const$/;"	f	class:ndn::PendingInterest
getInterest	lp/nack.hpp	/^  getInterest() const$/;"	f	class:ndn::lp::Nack
getInterest	lp/nack.hpp	/^  getInterest()$/;"	f	class:ndn::lp::Nack
getInterestLifetime	interest.hpp	/^  getInterestLifetime() const$/;"	f	class:ndn::Interest
getInterestLifetime	util/notification-subscriber.hpp	/^  getInterestLifetime() const$/;"	f	class:ndn::util::NotificationSubscriber
getIoService	face.hpp	/^  getIoService()$/;"	f	class:ndn::Face
getIoService	util/dummy-client-face.cpp	/^  getIoService()$/;"	f	class:ndn::util::DummyClientFace::Transport
getIsCritical	security/certificate-extension.hpp	/^  getIsCritical() const$/;"	f	class:ndn::CertificateExtension
getItemFromExpand	util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::getItemFromExpand(const std::string& expand, size_t& offset)$/;"	f	class:ndn::RegexTopMatcher
getKey	security/identity.cpp	/^Identity::getKey(const name::Component& keyId) const$/;"	f	class:ndn::security::Identity
getKey	security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getKey(const Name& keyName, KeyClass keyClass)$/;"	f	class:ndn::SecTpmOsx::Impl
getKey	security/secured-bag.hpp	/^  getKey() const$/;"	f	class:ndn::SecuredBag
getKeyBits	security/pib-memory.cpp	/^PibMemory::getKeyBits(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibMemory
getKeyBits	security/pib-sqlite3.cpp	/^PibSqlite3::getKeyBits(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibSqlite3
getKeyClass	security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getKeyClass(KeyClass keyClass)$/;"	f	class:ndn::SecTpmOsx::Impl
getKeyDigest	key-locator.cpp	/^KeyLocator::getKeyDigest() const$/;"	f	class:ndn::KeyLocator
getKeyId	security/key.cpp	/^Key::getKeyId() const$/;"	f	class:ndn::security::Key
getKeyLocator	signature-info.cpp	/^SignatureInfo::getKeyLocator() const$/;"	f	class:ndn::SignatureInfo
getKeyLocator	signature.hpp	/^  getKeyLocator() const$/;"	f	class:ndn::Signature
getKeyName	security/pib-memory.cpp	/^PibMemory::getKeyName(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibMemory
getKeyName	security/pib-sqlite3.cpp	/^getKeyName(const Name& identity, const name::Component& keyId)$/;"	f	namespace:ndn::security
getKeySize	security/key-params.hpp	/^  getKeySize() const$/;"	f	class:ndn::SimplePublicKeyParams
getKeySize	security/key-params.hpp	/^  getKeySize() const$/;"	f	class:ndn::SimpleSymmetricKeyParams
getKeyType	security/key-params.hpp	/^  getKeyType() const$/;"	f	class:ndn::KeyParams
getKeyType	security/public-key.hpp	/^  getKeyType() const$/;"	f	class:ndn::PublicKey
getKeys	security/identity.cpp	/^Identity::getKeys() const$/;"	f	class:ndn::security::Identity
getKeysOfIdentity	security/pib-memory.cpp	/^PibMemory::getKeysOfIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibMemory
getKeysOfIdentity	security/pib-sqlite3.cpp	/^PibSqlite3::getKeysOfIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibSqlite3
getKind	management/nfd-face-event-notification.hpp	/^  getKind() const$/;"	f	class:ndn::nfd::FaceEventNotification
getLastRefresh	security/validator-config.hpp	/^    getLastRefresh() const$/;"	f	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
getLimit	util/in-memory-storage.hpp	/^  getLimit() const$/;"	f	class:ndn::util::InMemoryStorage
getLink	interest.cpp	/^Interest::getLink() const$/;"	f	class:ndn::Interest
getLinkType	management/nfd-face-query-filter.hpp	/^  getLinkType() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getLinkType	management/nfd-face-traits.hpp	/^  getLinkType() const$/;"	f	class:ndn::nfd::FaceTraits
getLocalControlFeature	management/nfd-control-parameters.hpp	/^  getLocalControlFeature() const$/;"	f	class:ndn::nfd::ControlParameters
getLocalControlHeader	data.hpp	/^Data::getLocalControlHeader() const$/;"	f	class:ndn::Data
getLocalControlHeader	data.hpp	/^Data::getLocalControlHeader()$/;"	f	class:ndn::Data
getLocalControlHeader	interest.hpp	/^  getLocalControlHeader() const$/;"	f	class:ndn::Interest
getLocalControlHeader	interest.hpp	/^  getLocalControlHeader()$/;"	f	class:ndn::Interest
getLocalControlHeader	lp/nack.hpp	/^  getLocalControlHeader() const$/;"	f	class:ndn::lp::Nack
getLocalControlHeader	lp/nack.hpp	/^  getLocalControlHeader()$/;"	f	class:ndn::lp::Nack
getLocalUri	management/nfd-channel-status.hpp	/^  getLocalUri() const$/;"	f	class:ndn::nfd::ChannelStatus
getLocalUri	management/nfd-face-query-filter.hpp	/^  getLocalUri() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getLocalUri	management/nfd-face-traits.hpp	/^  getLocalUri() const$/;"	f	class:ndn::nfd::FaceTraits
getLocationSortOrder	lp/detail/field-info.hpp	/^getLocationSortOrder<field_location_tags::Fragment>()$/;"	f	namespace:ndn::lp::detail
getLocationSortOrder	lp/detail/field-info.hpp	/^getLocationSortOrder<field_location_tags::Header>()$/;"	f	namespace:ndn::lp::detail
getMatchResult	util/regex/regex-matcher.hpp	/^  getMatchResult() const$/;"	f	class:ndn::RegexMatcher
getMaxSuffixComponents	interest.hpp	/^  getMaxSuffixComponents() const$/;"	f	class:ndn::Interest
getMaxSuffixComponents	selectors.hpp	/^  getMaxSuffixComponents() const$/;"	f	class:ndn::Selectors
getMetaInfo	data.hpp	/^Data::getMetaInfo() const$/;"	f	class:ndn::Data
getMinSuffixComponents	interest.hpp	/^  getMinSuffixComponents() const$/;"	f	class:ndn::Interest
getMinSuffixComponents	selectors.hpp	/^  getMinSuffixComponents() const$/;"	f	class:ndn::Selectors
getMustBeFresh	interest.hpp	/^  getMustBeFresh() const$/;"	f	class:ndn::Interest
getMustBeFresh	selectors.hpp	/^  getMustBeFresh() const$/;"	f	class:ndn::Selectors
getNCsEntries	management/nfd-forwarder-status.hpp	/^  getNCsEntries() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNFibEntries	management/nfd-forwarder-status.hpp	/^  getNFibEntries() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNInBytes	management/nfd-face-status.hpp	/^  getNInBytes() const$/;"	f	class:ndn::nfd::FaceStatus
getNInDatas	management/nfd-face-status.hpp	/^  getNInDatas() const$/;"	f	class:ndn::nfd::FaceStatus
getNInDatas	management/nfd-forwarder-status.hpp	/^  getNInDatas() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNInInterests	management/nfd-face-status.hpp	/^  getNInInterests() const$/;"	f	class:ndn::nfd::FaceStatus
getNInInterests	management/nfd-forwarder-status.hpp	/^  getNInInterests() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNInNacks	management/nfd-face-status.hpp	/^  getNInNacks() const$/;"	f	class:ndn::nfd::FaceStatus
getNInNacks	management/nfd-forwarder-status.hpp	/^  getNInNacks() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNMeasurementsEntries	management/nfd-forwarder-status.hpp	/^  getNMeasurementsEntries() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNNameTreeEntries	management/nfd-forwarder-status.hpp	/^  getNNameTreeEntries() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNOutBytes	management/nfd-face-status.hpp	/^  getNOutBytes() const$/;"	f	class:ndn::nfd::FaceStatus
getNOutDatas	management/nfd-face-status.hpp	/^  getNOutDatas() const$/;"	f	class:ndn::nfd::FaceStatus
getNOutDatas	management/nfd-forwarder-status.hpp	/^  getNOutDatas() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNOutInterests	management/nfd-face-status.hpp	/^  getNOutInterests() const$/;"	f	class:ndn::nfd::FaceStatus
getNOutInterests	management/nfd-forwarder-status.hpp	/^  getNOutInterests() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNOutNacks	management/nfd-face-status.hpp	/^  getNOutNacks() const$/;"	f	class:ndn::nfd::FaceStatus
getNOutNacks	management/nfd-forwarder-status.hpp	/^  getNOutNacks() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNPendingInterests	face.cpp	/^Face::getNPendingInterests() const$/;"	f	class:ndn::Face
getNPitEntries	management/nfd-forwarder-status.hpp	/^  getNPitEntries() const$/;"	f	class:ndn::nfd::ForwarderStatus
getName	data.hpp	/^Data::getName() const$/;"	f	class:ndn::Data
getName	interest.hpp	/^  getName() const$/;"	f	class:ndn::Interest
getName	key-locator.cpp	/^KeyLocator::getName() const$/;"	f	class:ndn::KeyLocator
getName	management/nfd-control-parameters.hpp	/^  getName() const$/;"	f	class:ndn::nfd::ControlParameters
getName	management/nfd-rib-entry.hpp	/^  getName() const$/;"	f	class:ndn::nfd::RibEntry
getName	management/nfd-strategy-choice.hpp	/^  getName() const$/;"	f	class:ndn::nfd::StrategyChoice
getName	security/identity.cpp	/^Identity::getName() const$/;"	f	class:ndn::security::Identity
getName	security/key.cpp	/^Key::getName() const$/;"	f	class:ndn::security::Key
getName	util/in-memory-storage-entry.hpp	/^  getName() const$/;"	f	class:ndn::util::InMemoryStorageEntry
getNewKeyName	security/key-chain.hpp	/^  getNewKeyName(const Name& identityName, bool useKsk)$/;"	f	class:ndn::security::KeyChain
getNewKeyName	security/sec-public-info.cpp	/^SecPublicInfo::getNewKeyName(const Name& identityName, bool useKsk)$/;"	f	class:ndn::SecPublicInfo
getNextHopFaceId	interest.hpp	/^  getNextHopFaceId() const$/;"	f	class:ndn::Interest
getNextHopFaceId	management/nfd-local-control-header.hpp	/^  getNextHopFaceId() const$/;"	f	class:ndn::nfd::LocalControlHeader
getNextHopRecords	management/nfd-fib-entry.hpp	/^  getNextHopRecords() const$/;"	f	class:ndn::nfd::FibEntry
getNfdVersion	management/nfd-forwarder-status.hpp	/^  getNfdVersion() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNonce	interest.cpp	/^Interest::getNonce() const$/;"	f	class:ndn::Interest
getNotAfter	security/certificate.hpp	/^  getNotAfter() const$/;"	f	class:ndn::Certificate
getNotAfter	security/certificate.hpp	/^  getNotAfter()$/;"	f	class:ndn::Certificate
getNotBefore	security/certificate.hpp	/^  getNotBefore() const$/;"	f	class:ndn::Certificate
getNotBefore	security/certificate.hpp	/^  getNotBefore()$/;"	f	class:ndn::Certificate
getNow	util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::getNow() const$/;"	f	class:ndn::time::UnitTestClock
getOid	security/certificate-extension.hpp	/^  getOid() const$/;"	f	class:ndn::CertificateExtension
getOidString	security/certificate-subject-description.hpp	/^  getOidString() const$/;"	f	class:ndn::CertificateSubjectDescription
getOrigin	management/nfd-control-parameters.hpp	/^  getOrigin() const$/;"	f	class:ndn::nfd::ControlParameters
getOrigin	management/nfd-rib-entry.hpp	/^  getOrigin() const$/;"	f	class:ndn::nfd::Route
getParsedConfiguration	util/config-file.hpp	/^ConfigFile::getParsedConfiguration() const$/;"	f	class:ndn::ConfigFile
getPath	util/config-file.hpp	/^ConfigFile::getPath() const$/;"	f	class:ndn::ConfigFile
getPath	util/face-uri.hpp	/^  getPath() const$/;"	f	class:ndn::util::FaceUri
getPayload	management/nfd-local-control-header.hpp	/^LocalControlHeader::getPayload(const Block& wire)$/;"	f	class:ndn::nfd::LocalControlHeader
getPeriod	security/validity-period.cpp	/^ValidityPeriod::getPeriod() const$/;"	f	class:ndn::security::ValidityPeriod
getPib	security/key-chain.hpp	/^  getPib() const$/;"	f	class:ndn::security::KeyChain
getPib	security/key-chain.hpp	/^  getPib()$/;"	f	class:ndn::security::KeyChain
getPibFactories	security/key-chain.cpp	/^getPibFactories()$/;"	f	namespace:ndn::security
getPibLocator	security/pib.cpp	/^Pib::getPibLocator() const$/;"	f	class:ndn::security::Pib
getPibLocator	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getPibLocator()$/;"	f	class:ndn::SecPublicInfoSqlite3
getPibLocator	security/sec-public-info.cpp	/^SecPublicInfo::getPibLocator()$/;"	f	class:ndn::SecPublicInfo
getPolicy	lp/cache-policy.cpp	/^CachePolicy::getPolicy() const$/;"	f	class:ndn::lp::CachePolicy
getPort	util/face-uri.hpp	/^  getPort() const$/;"	f	class:ndn::util::FaceUri
getPrefix	detail/registered-prefix.hpp	/^  getPrefix() const$/;"	f	class:ndn::RegisteredPrefix
getPrefix	interest-filter.hpp	/^  getPrefix() const$/;"	f	class:ndn::InterestFilter
getPrefix	management/nfd-command-options.hpp	/^  getPrefix() const$/;"	f	class:ndn::nfd::CommandOptions
getPrefix	management/nfd-fib-entry.hpp	/^  getPrefix() const$/;"	f	class:ndn::nfd::FibEntry
getPrefix	mgmt/status-dataset-context.cpp	/^StatusDatasetContext::getPrefix() const$/;"	f	class:ndn::mgmt::StatusDatasetContext
getPrefix	name.hpp	/^  getPrefix(ssize_t nComponents) const$/;"	f	class:ndn::Name
getPresentFields	management/nfd-control-parameters.hpp	/^  getPresentFields() const$/;"	f	class:ndn::nfd::ControlParameters
getPublicKey	security/key-chain.hpp	/^  getPublicKey(const Name& keyName) const$/;"	f	class:ndn::security::KeyChain
getPublicKey	security/key.cpp	/^Key::getPublicKey() const$/;"	f	class:ndn::security::Key
getPublicKey	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getPublicKey(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
getPublicKeyFromTpm	security/key-chain.hpp	/^  getPublicKeyFromTpm(const Name& keyName) const$/;"	f	class:ndn::security::KeyChain
getPublicKeyFromTpm	security/sec-tpm-file.cpp	/^SecTpmFile::getPublicKeyFromTpm(const Name&  keyName)$/;"	f	class:ndn::SecTpmFile
getPublicKeyFromTpm	security/sec-tpm-osx.cpp	/^SecTpmOsx::getPublicKeyFromTpm(const Name& keyName)$/;"	f	class:ndn::SecTpmOsx
getPublicKeyInfo	security/certificate.hpp	/^  getPublicKeyInfo() const$/;"	f	class:ndn::Certificate
getPublicKeyInfo	security/certificate.hpp	/^  getPublicKeyInfo()$/;"	f	class:ndn::Certificate
getPublicKeyName	security/identity-certificate.hpp	/^  getPublicKeyName() const$/;"	f	class:ndn::IdentityCertificate
getPublicKeyType	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getPublicKeyType(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
getPublisherPublicKeyLocator	interest.hpp	/^  getPublisherPublicKeyLocator() const$/;"	f	class:ndn::Interest
getPublisherPublicKeyLocator	selectors.hpp	/^  getPublisherPublicKeyLocator() const$/;"	f	class:ndn::Selectors
getRandomGenerator	util/random.cpp	/^getRandomGenerator()$/;"	f	namespace:ndn::random
getReason	lp/nack-header.cpp	/^NackHeader::getReason() const$/;"	f	class:ndn::lp::NackHeader
getReason	lp/nack.hpp	/^  getReason() const$/;"	f	class:ndn::lp::Nack
getRefreshPeriod	security/validator-config.cpp	/^ValidatorConfig::getRefreshPeriod(std::string inputString)$/;"	f	class:ndn::ValidatorConfig
getRefreshPeriod	security/validator-config.hpp	/^    getRefreshPeriod() const$/;"	f	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
getRegexFilter	interest-filter.hpp	/^  getRegexFilter() const$/;"	f	class:ndn::InterestFilter
getRemoteUri	management/nfd-face-query-filter.hpp	/^  getRemoteUri() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getRemoteUri	management/nfd-face-traits.hpp	/^  getRemoteUri() const$/;"	f	class:ndn::nfd::FaceTraits
getRequestName	management/nfd-control-command.cpp	/^ControlCommand::getRequestName(const Name& commandPrefix,$/;"	f	class:ndn::nfd::ControlCommand
getRoutes	management/nfd-rib-entry.hpp	/^  getRoutes() const$/;"	f	class:ndn::nfd::RibEntry
getScheme	security/pib.hpp	/^  getScheme() const$/;"	f	class:ndn::security::Pib
getScheme	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getScheme()$/;"	f	class:ndn::SecPublicInfoSqlite3
getScheme	security/sec-tpm-file.cpp	/^SecTpmFile::getScheme()$/;"	f	class:ndn::SecTpmFile
getScheme	security/sec-tpm-osx.cpp	/^SecTpmOsx::getScheme()$/;"	f	class:ndn::SecTpmOsx
getScheme	util/face-uri.hpp	/^  getScheme() const$/;"	f	class:ndn::util::FaceUri
getSchemes	util/face-uri.cpp	/^  getSchemes() const$/;"	f	class:ndn::util::EtherCanonizeProvider
getSchemes	util/face-uri.cpp	/^  getSchemes() const$/;"	f	class:ndn::util::IpHostCanonizeProvider
getSecureRandomGenerator	util/random.cpp	/^getSecureRandomGenerator()$/;"	f	namespace:ndn::random
getSelectedDelegation	interest.cpp	/^Interest::getSelectedDelegation() const$/;"	f	class:ndn::Interest
getSelectors	interest.hpp	/^  getSelectors() const$/;"	f	class:ndn::Interest
getSha256DigestUriPrefix	name-component.cpp	/^getSha256DigestUriPrefix()$/;"	f	namespace:ndn::name
getSigType	security/conf/checker.hpp	/^  getSigType(const std::string& sigType)$/;"	f	class:ndn::security::conf::CheckerFactory
getSignature	data.hpp	/^Data::getSignature() const$/;"	f	class:ndn::Data
getSignatureInfo	security/signing-info.hpp	/^  getSignatureInfo() const$/;"	f	class:ndn::security::SigningInfo
getSignatureType	security/key-chain.cpp	/^KeyChain::getSignatureType(KeyType keyType, DigestAlgorithm digestAlgorithm)$/;"	f	class:ndn::security::KeyChain
getSignatureType	signature-info.hpp	/^  getSignatureType() const$/;"	f	class:ndn::SignatureInfo
getSigner	security/conf/checker.hpp	/^  getSigner(const ConfigSection& configSection, const std::string& configFilename)$/;"	f	class:ndn::security::conf::CheckerFactory
getSignerName	security/signing-info.hpp	/^  getSignerName() const$/;"	f	class:ndn::security::SigningInfo
getSignerType	security/signing-info.hpp	/^  getSignerType() const$/;"	f	class:ndn::security::SigningInfo
getSigningCertificate	management/nfd-command-options.cpp	/^CommandOptions::getSigningCertificate() const$/;"	f	class:ndn::nfd::CommandOptions
getSigningIdentity	management/nfd-command-options.cpp	/^CommandOptions::getSigningIdentity() const$/;"	f	class:ndn::nfd::CommandOptions
getSigningInfo	management/nfd-command-options.hpp	/^  getSigningInfo() const$/;"	f	class:ndn::nfd::CommandOptions
getSigningParamsKind	management/nfd-command-options.cpp	/^CommandOptions::getSigningParamsKind() const$/;"	f	class:ndn::nfd::CommandOptions
getSince	util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::getSince() const$/;"	f	class:ndn::time::UnitTestClock
getSize	security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::getSize()$/;"	f	class:ndn::CertificateCacheTtl
getSize	util/sqlite3-statement.cpp	/^Sqlite3Statement::getSize(int column)$/;"	f	class:ndn::util::Sqlite3Statement
getStartTimestamp	management/nfd-forwarder-status.hpp	/^  getStartTimestamp() const$/;"	f	class:ndn::nfd::ForwarderStatus
getStrategy	management/nfd-control-parameters.hpp	/^  getStrategy() const$/;"	f	class:ndn::nfd::ControlParameters
getStrategy	management/nfd-strategy-choice.hpp	/^  getStrategy() const$/;"	f	class:ndn::nfd::StrategyChoice
getString	util/sqlite3-statement.cpp	/^Sqlite3Statement::getString(int column)$/;"	f	class:ndn::util::Sqlite3Statement
getSubName	name.cpp	/^Name::getSubName(ssize_t iStartComponent, size_t nComponents) const$/;"	f	class:ndn::Name
getSubjectDescriptionList	security/certificate.hpp	/^  getSubjectDescriptionList() const$/;"	f	class:ndn::Certificate
getSubjectDescriptionList	security/certificate.hpp	/^  getSubjectDescriptionList()$/;"	f	class:ndn::Certificate
getSuccessor	name-component.cpp	/^Component::getSuccessor() const$/;"	f	class:ndn::name::Component
getSuccessor	name.cpp	/^Name::getSuccessor() const$/;"	f	class:ndn::Name
getSymKeyType	security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getSymKeyType(KeyType keyType)$/;"	f	class:ndn::SecTpmOsx::Impl
getTag	tag-host.hpp	/^TagHost::getTag() const$/;"	f	class:ndn::TagHost
getText	mgmt/control-response.hpp	/^ControlResponse::getText() const$/;"	f	class:ndn::mgmt::ControlResponse
getTimeout	management/nfd-command-options.hpp	/^  getTimeout() const$/;"	f	class:ndn::nfd::CommandOptions
getTimestampMapSize	security/validator-config.hpp	/^  getTimestampMapSize()$/;"	f	class:ndn::ValidatorConfig
getTpm	security/key-chain.hpp	/^  getTpm() const$/;"	f	class:ndn::security::KeyChain
getTpm	security/key-chain.hpp	/^  getTpm()$/;"	f	class:ndn::security::KeyChain
getTpmFactories	security/key-chain.cpp	/^getTpmFactories()$/;"	f	namespace:ndn::security
getTpmLocator	security/pib-memory.cpp	/^PibMemory::getTpmLocator() const$/;"	f	class:ndn::security::PibMemory
getTpmLocator	security/pib-sqlite3.cpp	/^PibSqlite3::getTpmLocator() const$/;"	f	class:ndn::security::PibSqlite3
getTpmLocator	security/pib.cpp	/^Pib::getTpmLocator() const$/;"	f	class:ndn::security::Pib
getTpmLocator	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getTpmLocator()$/;"	f	class:ndn::SecPublicInfoSqlite3
getTpmLocator	security/sec-tpm.cpp	/^SecTpm::getTpmLocator()$/;"	f	class:ndn::SecTpm
getType	key-locator.hpp	/^  getType() const$/;"	f	class:ndn::KeyLocator
getType	meta-info.hpp	/^MetaInfo::getType() const$/;"	f	class:ndn::MetaInfo
getType	security/key-params.hpp	/^  getType()$/;"	f	class:ndn::AesKeyParamsInfo
getType	security/key-params.hpp	/^  getType()$/;"	f	class:ndn::EcdsaKeyParamsInfo
getType	security/key-params.hpp	/^  getType()$/;"	f	class:ndn::RsaKeyParamsInfo
getType	signature.hpp	/^  getType() const$/;"	f	class:ndn::Signature
getTypeId	tag.hpp	/^  getTypeId()$/;"	f	class:ndn::Tag
getTypeSpecificTlv	signature-info.cpp	/^SignatureInfo::getTypeSpecificTlv(uint32_t type) const$/;"	f	class:ndn::SignatureInfo
getUnixEpoch	util/time.cpp	/^getUnixEpoch()$/;"	f	namespace:ndn::time
getUri	management/nfd-control-parameters.hpp	/^  getUri() const$/;"	f	class:ndn::nfd::ControlParameters
getUriScheme	management/nfd-face-query-filter.hpp	/^  getUriScheme() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getValidityPeriod	signature-info.cpp	/^SignatureInfo::getValidityPeriod() const$/;"	f	class:ndn::SignatureInfo
getValue	security/certificate-extension.hpp	/^  getValue() const$/;"	f	class:ndn::CertificateExtension
getValue	security/certificate-subject-description.hpp	/^  getValue() const$/;"	f	class:ndn::CertificateSubjectDescription
getValue	signature.hpp	/^  getValue() const$/;"	f	class:ndn::Signature
handleAsyncReceive	transport/stream-transport.hpp	/^  handleAsyncReceive(const boost::system::error_code& error, std::size_t nBytesRecvd)$/;"	f	class:ndn::StreamTransportImpl
handleAsyncWrite	transport/stream-transport.hpp	/^  handleAsyncWrite(const boost::system::error_code& error,$/;"	f	class:ndn::StreamTransportImpl
handler	util/signal-signal.hpp	/^    Handler handler;$/;"	m	struct:ndn::util::signal::Signal::Slot
has	lp/packet.hpp	/^  has() const$/;"	f	class:ndn::lp::Packet
has	security/additional-description.cpp	/^AdditionalDescription::has(const std::string& key) const$/;"	f	class:ndn::security::AdditionalDescription
hasCachingPolicy	management/nfd-local-control-header.hpp	/^  hasCachingPolicy() const$/;"	f	class:ndn::nfd::LocalControlHeader
hasCertificate	security/pib-memory.cpp	/^PibMemory::hasCertificate(const Name& certName) const$/;"	f	class:ndn::security::PibMemory
hasCertificate	security/pib-sqlite3.cpp	/^PibSqlite3::hasCertificate(const Name& certName) const$/;"	f	class:ndn::security::PibSqlite3
hasCost	management/nfd-control-parameters.hpp	/^  hasCost() const$/;"	f	class:ndn::nfd::ControlParameters
hasExpirationPeriod	management/nfd-control-parameters.hpp	/^  hasExpirationPeriod() const$/;"	f	class:ndn::nfd::ControlParameters
hasExpirationPeriod	management/nfd-face-status.hpp	/^  hasExpirationPeriod() const$/;"	f	class:ndn::nfd::FaceStatus
hasFaceId	management/nfd-control-parameters.hpp	/^  hasFaceId() const$/;"	f	class:ndn::nfd::ControlParameters
hasFaceId	management/nfd-face-query-filter.hpp	/^  hasFaceId() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasFacePersistency	management/nfd-control-parameters.hpp	/^  hasFacePersistency() const$/;"	f	class:ndn::nfd::ControlParameters
hasFacePersistency	management/nfd-face-query-filter.hpp	/^  hasFacePersistency() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasFaceScope	management/nfd-face-query-filter.hpp	/^  hasFaceScope() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasFlags	management/nfd-control-parameters.hpp	/^  hasFlags() const$/;"	f	class:ndn::nfd::ControlParameters
hasIdentity	security/pib-memory.cpp	/^PibMemory::hasIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibMemory
hasIdentity	security/pib-sqlite3.cpp	/^PibSqlite3::hasIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibSqlite3
hasIncomingFaceId	management/nfd-local-control-header.hpp	/^  hasIncomingFaceId() const$/;"	f	class:ndn::nfd::LocalControlHeader
hasInfiniteExpirationPeriod	management/nfd-rib-entry.hpp	/^  hasInfiniteExpirationPeriod() const$/;"	f	class:ndn::nfd::Route
hasKey	security/pib-memory.cpp	/^PibMemory::hasKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibMemory
hasKey	security/pib-sqlite3.cpp	/^PibSqlite3::hasKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibSqlite3
hasKeyLocator	signature-info.hpp	/^  hasKeyLocator() const$/;"	f	class:ndn::SignatureInfo
hasKeyLocator	signature.hpp	/^  hasKeyLocator() const$/;"	f	class:ndn::Signature
hasLink	interest.cpp	/^Interest::hasLink() const$/;"	f	class:ndn::Interest
hasLinkType	management/nfd-face-query-filter.hpp	/^  hasLinkType() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasLocalControlFeature	management/nfd-control-parameters.hpp	/^  hasLocalControlFeature() const$/;"	f	class:ndn::nfd::ControlParameters
hasLocalUri	management/nfd-face-query-filter.hpp	/^  hasLocalUri() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasName	management/nfd-control-parameters.hpp	/^  hasName() const$/;"	f	class:ndn::nfd::ControlParameters
hasNextHopFaceId	management/nfd-local-control-header.hpp	/^  hasNextHopFaceId() const$/;"	f	class:ndn::nfd::LocalControlHeader
hasNonce	interest.hpp	/^  hasNonce() const$/;"	f	class:ndn::Interest
hasOrigin	management/nfd-control-parameters.hpp	/^  hasOrigin() const$/;"	f	class:ndn::nfd::ControlParameters
hasRegexFilter	interest-filter.hpp	/^  hasRegexFilter() const$/;"	f	class:ndn::InterestFilter
hasRemoteUri	management/nfd-face-query-filter.hpp	/^  hasRemoteUri() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasSelectedDelegation	interest.cpp	/^Interest::hasSelectedDelegation() const$/;"	f	class:ndn::Interest
hasSelectors	interest.hpp	/^  hasSelectors() const$/;"	f	class:ndn::Interest
hasStrategy	management/nfd-control-parameters.hpp	/^  hasStrategy() const$/;"	f	class:ndn::nfd::ControlParameters
hasUri	management/nfd-control-parameters.hpp	/^  hasUri() const$/;"	f	class:ndn::nfd::ControlParameters
hasUriScheme	management/nfd-face-query-filter.hpp	/^  hasUriScheme() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasValue	encoding/block.cpp	/^Block::hasValue() const$/;"	f	class:ndn::Block
hasWire	data.hpp	/^Data::hasWire() const$/;"	f	class:ndn::Data
hasWire	encoding/block.cpp	/^Block::hasWire() const$/;"	f	class:ndn::Block
hasWire	interest.hpp	/^  hasWire() const$/;"	f	class:ndn::Interest
hasWire	name.hpp	/^Name::hasWire() const$/;"	f	class:ndn::Name
hash	name.hpp	/^struct hash<ndn::Name>$/;"	s	namespace:std
hash	util/ethernet.hpp	/^struct hash<ndn::util::ethernet::Address>$/;"	s	namespace:std
htobe16	encoding/endian.hpp	42;"	d
htobe32	encoding/endian.hpp	46;"	d
htobe64	encoding/endian.hpp	50;"	d
htole16	encoding/endian.hpp	43;"	d
htole32	encoding/endian.hpp	47;"	d
htole64	encoding/endian.hpp	51;"	d
importIdentity	security/key-chain.cpp	/^KeyChain::importIdentity(const SecuredBag& securedBag, const std::string& passwordStr)$/;"	f	class:ndn::security::KeyChain
importPrivateKeyPkcs5IntoTpm	security/key-chain.hpp	/^  importPrivateKeyPkcs5IntoTpm(const Name& keyName,$/;"	f	class:ndn::security::KeyChain
importPrivateKeyPkcs5IntoTpm	security/sec-tpm.cpp	/^SecTpm::importPrivateKeyPkcs5IntoTpm(const Name& keyName,$/;"	f	class:ndn::SecTpm
importPrivateKeyPkcs8IntoTpm	security/sec-tpm-file.cpp	/^SecTpmFile::importPrivateKeyPkcs8IntoTpm(const Name& keyName, const uint8_t* buf, size_t size)$/;"	f	class:ndn::SecTpmFile
importPrivateKeyPkcs8IntoTpm	security/sec-tpm-osx.hpp	/^  importPrivateKeyPkcs8IntoTpm(const Name& keyName, const uint8_t* buf, size_t size)$/;"	f	class:ndn::SecTpmOsx
importPrivateKeyPkcs8IntoTpmInternal	security/sec-tpm-osx.cpp	/^SecTpmOsx::importPrivateKeyPkcs8IntoTpmInternal(const Name& keyName,$/;"	f	class:ndn::SecTpmOsx
importPublicKeyPkcs1IntoTpm	security/sec-tpm-file.cpp	/^SecTpmFile::importPublicKeyPkcs1IntoTpm(const Name& keyName, const uint8_t* buf, size_t size)$/;"	f	class:ndn::SecTpmFile
importPublicKeyPkcs1IntoTpm	security/sec-tpm-osx.cpp	/^SecTpmOsx::importPublicKeyPkcs1IntoTpm(const Name& keyName, const uint8_t* buf, size_t size)$/;"	f	class:ndn::SecTpmOsx
incrementFrequency	util/in-memory-storage-lfu.hpp	/^  incrementFrequency(CleanupEntry& cleanupEntry)$/;"	f	class:ndn::util::InMemoryStorageLfu
initialize	security/key-chain.cpp	/^KeyChain::initialize(const std::string& pibLocator,$/;"	f	class:ndn::security::KeyChain
initializeTable	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::initializeTable(const string& tableName, const string& initCommand)$/;"	f	class:ndn::SecPublicInfoSqlite3
insert	detail/container-with-on-empty-signal.hpp	/^  insert(const value_type& value)$/;"	f	class:ndn::ContainerWithOnEmptySignal
insert	encoding/block.cpp	/^Block::insert(Block::element_const_iterator pos, const Block& element)$/;"	f	class:ndn::Block
insert	security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::insert(shared_ptr<const IdentityCertificate> certificate)$/;"	f	class:ndn::CertificateCacheTtl
insert	util/in-memory-storage.cpp	/^InMemoryStorage::insert(const Data& data)$/;"	f	class:ndn::util::InMemoryStorage
insertCertificate	security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::insertCertificate(shared_ptr<const IdentityCertificate> certificate)$/;"	f	class:ndn::CertificateCacheTtl
interestFilters	mgmt/dispatcher.hpp	/^    std::vector<const ndn::InterestFilterId*> interestFilters;$/;"	m	struct:ndn::mgmt::Dispatcher::TopPrefixEntry
invalidate	util/scheduler.cpp	/^  invalidate()$/;"	f	struct:ndn::util::scheduler::EventIdImpl
invokeDataCallback	detail/pending-interest.hpp	/^  invokeDataCallback(const Data& data)$/;"	f	class:ndn::PendingInterest
invokeInterestCallback	detail/interest-filter-record.hpp	/^  invokeInterestCallback(const Interest& interest) const$/;"	f	class:ndn::InterestFilterRecord
invokeNackCallback	detail/pending-interest.hpp	/^  invokeNackCallback(const lp::Nack& nack)$/;"	f	class:ndn::PendingInterest
invokeTimeoutCallback	detail/pending-interest.hpp	/^  invokeTimeoutCallback()$/;"	f	class:ndn::PendingInterest
io	util/io.hpp	/^namespace io {$/;"	n	namespace:ndn
iostreams	encoding/buffer-stream.hpp	/^namespace iostreams$/;"	n	namespace:ndn
ip	transport/tcp-transport.hpp	/^namespace boost { namespace asio { namespace ip { class tcp; } } }$/;"	n	namespace:boost::asio
isBroadcast	util/ethernet.cpp	/^Address::isBroadcast() const$/;"	f	class:ndn::util::ethernet::Address
isCanonical	util/face-uri.cpp	/^  isCanonical(const FaceUri& faceUri) const$/;"	f	class:ndn::util::EtherCanonizeProvider
isCanonical	util/face-uri.cpp	/^  isCanonical(const FaceUri& faceUri) const$/;"	f	class:ndn::util::IpHostCanonizeProvider
isCanonical	util/face-uri.cpp	/^FaceUri::isCanonical() const$/;"	f	class:ndn::util::FaceUri
isChildInherit	management/nfd-rib-flags.hpp	/^  isChildInherit() const$/;"	f	class:ndn::nfd::RibFlagsTraits
isConnected	transport/transport.hpp	/^Transport::isConnected()$/;"	f	class:ndn::Transport
isConnected	util/signal-connection.cpp	/^Connection::isConnected() const$/;"	f	class:ndn::util::signal::Connection
isConnected	util/signal-scoped-connection.cpp	/^ScopedConnection::isConnected() const$/;"	f	class:ndn::util::signal::ScopedConnection
isCorrectName	security/identity-certificate.cpp	/^IdentityCertificate::isCorrectName(const Name& name)$/;"	f	class:ndn::IdentityCertificate
isEmpty	security/certificate-cache.hpp	/^  isEmpty()$/;"	f	class:ndn::CertificateCache
isEmpty	security/validator-config.cpp	/^ValidatorConfig::isEmpty()$/;"	f	class:ndn::ValidatorConfig
isEmpty	util/signal-signal.hpp	/^Signal<Owner, TArgs...>::isEmpty() const$/;"	f	class:ndn::util::signal::Signal
isExcluded	exclude.cpp	/^Exclude::isExcluded(const name::Component& comp) const$/;"	f	class:ndn::Exclude
isExempted	security/sec-rule-specific.hpp	/^  isExempted() const$/;"	f	class:ndn::SecRuleSpecific
isExpectingData	transport/transport.hpp	/^Transport::isExpectingData()$/;"	f	class:ndn::Transport
isFull	util/in-memory-storage.hpp	/^  isFull() const$/;"	f	class:ndn::util::InMemoryStorage
isGeneric	name-component.cpp	/^Component::isGeneric() const$/;"	f	class:ndn::name::Component
isIdentityCertificate	security/identity-certificate.cpp	/^IdentityCertificate::isIdentityCertificate(const Certificate& certificate)$/;"	f	class:ndn::IdentityCertificate
isImplicitSha256Digest	name-component.cpp	/^Component::isImplicitSha256Digest() const$/;"	f	class:ndn::name::Component
isLocked	security/key-chain.hpp	/^  isLocked() const$/;"	f	class:ndn::security::KeyChain
isLocked	security/sec-tpm-file.hpp	/^  isLocked()$/;"	f	class:ndn::SecTpmFile
isLocked	security/sec-tpm-osx.cpp	/^SecTpmOsx::isLocked()$/;"	f	class:ndn::SecTpmOsx
isMulticast	util/ethernet.cpp	/^Address::isMulticast() const$/;"	f	class:ndn::util::ethernet::Address
isNull	util/ethernet.cpp	/^Address::isNull() const$/;"	f	class:ndn::util::ethernet::Address
isNumber	name-component.cpp	/^Component::isNumber() const$/;"	f	class:ndn::name::Component
isNumberWithMarker	name-component.cpp	/^Component::isNumberWithMarker(uint8_t marker) const$/;"	f	class:ndn::name::Component
isOverlappedWithOthers	mgmt/dispatcher.cpp	/^Dispatcher::isOverlappedWithOthers(const PartialName& relPrefix)$/;"	f	class:ndn::mgmt::Dispatcher
isPositive	security/sec-rule.hpp	/^SecRule::isPositive()$/;"	f	class:ndn::SecRule
isPrefixOf	name.cpp	/^Name::isPrefixOf(const Name& name) const$/;"	f	class:ndn::Name
isRecognized	lp/detail/field-info.hpp	/^  bool isRecognized;$/;"	m	class:ndn::lp::detail::FieldInfo
isRepeatable	lp/detail/field-info.hpp	/^  bool isRepeatable;$/;"	m	class:ndn::lp::detail::FieldInfo
isRibCapture	management/nfd-rib-flags.hpp	/^  isRibCapture() const$/;"	f	class:ndn::nfd::RibFlagsTraits
isRunning	util/notification-subscriber.hpp	/^  isRunning() const$/;"	f	class:ndn::util::NotificationSubscriber
isSegment	name-component.cpp	/^Component::isSegment() const$/;"	f	class:ndn::name::Component
isSegmentOffset	name-component.cpp	/^Component::isSegmentOffset() const$/;"	f	class:ndn::name::Component
isSequenceNumber	name-component.cpp	/^Component::isSequenceNumber() const$/;"	f	class:ndn::name::Component
isTimestamp	name-component.cpp	/^Component::isTimestamp() const$/;"	f	class:ndn::name::Component
isTooEarly	security/certificate.cpp	/^Certificate::isTooEarly()$/;"	f	class:ndn::Certificate
isTooLate	security/certificate.cpp	/^Certificate::isTooLate()$/;"	f	class:ndn::Certificate
isValid	security/validity-period.cpp	/^ValidityPeriod::isValid(const time::system_clock::TimePoint& now) const$/;"	f	class:ndn::security::ValidityPeriod
isValid	util/scheduler.cpp	/^  isValid() const$/;"	f	struct:ndn::util::scheduler::EventIdImpl
isVersion	name-component.cpp	/^Component::isVersion() const$/;"	f	class:ndn::name::Component
is_steady	util/time.hpp	/^  static constexpr bool is_steady = false;$/;"	m	class:ndn::time::system_clock
is_steady	util/time.hpp	/^  static constexpr bool is_steady = true;$/;"	m	class:ndn::time::steady_clock
iterator	detail/container-with-on-empty-signal.hpp	/^  typedef typename Base::iterator iterator;$/;"	t	class:ndn::ContainerWithOnEmptySignal
iterator	encoding/encoder.hpp	/^  typedef Buffer::iterator iterator;$/;"	t	class:ndn::encoding::Encoder
iterator	exclude.hpp	/^  typedef exclude_type::iterator iterator;$/;"	t	class:ndn::Exclude
iterator	management/nfd-rib-entry.hpp	/^  typedef RouteList::const_iterator iterator;$/;"	t	class:ndn::nfd::RibEntry
iterator	name.hpp	/^  typedef Component*              iterator;$/;"	t	class:ndn::Name
iterator	security/additional-description.hpp	/^  typedef std::map<std::string, std::string>::iterator iterator;$/;"	t	class:ndn::security::AdditionalDescription
iterator	security/certificate-container.hpp	/^  typedef const_iterator iterator;$/;"	t	class:ndn::security::CertificateContainer
iterator	security/identity-container.hpp	/^  typedef const_iterator iterator;$/;"	t	class:ndn::security::IdentityContainer
iterator	security/key-container.hpp	/^  typedef const_iterator iterator;$/;"	t	class:ndn::security::KeyContainer
j	util/concepts.hpp	/^  X j;$/;"	m	class:ndn::WireEncodable
j	util/concepts.hpp	/^  X j;$/;"	m	class:ndn::WireEncodableWithEncodingBuffer
lateCompile	util/regex/regex-backref-matcher.hpp	/^  lateCompile()$/;"	f	class:ndn::RegexBackrefMatcher
le16toh	encoding/endian.hpp	45;"	d
le32toh	encoding/endian.hpp	49;"	d
le64toh	encoding/endian.hpp	53;"	d
less_than	util/monotonic_deadline_timer.hpp	/^  less_than(const time_type& timeLhs, const time_type& timeRhs)$/;"	f	struct:boost::asio::time_traits
list	lp/packet.hpp	/^  list() const$/;"	f	class:ndn::lp::Packet
load	security/validator-config.cpp	/^ValidatorConfig::load(const security::conf::ConfigSection& configSection,$/;"	f	class:ndn::ValidatorConfig
load	security/validator-config.cpp	/^ValidatorConfig::load(const std::string& filename)$/;"	f	class:ndn::ValidatorConfig
load	security/validator-config.cpp	/^ValidatorConfig::load(const std::string& input, const std::string& filename)$/;"	f	class:ndn::ValidatorConfig
load	security/validator-config.cpp	/^ValidatorConfig::load(std::istream& input, const std::string& filename)$/;"	f	class:ndn::ValidatorConfig
load	util/io.hpp	/^load(const std::string& file, IoEncoding encoding = BASE_64)$/;"	f	namespace:ndn::io
load	util/io.hpp	/^load(std::istream& is, IoEncoding encoding = BASE_64)$/;"	f	namespace:ndn::io
local	transport/unix-transport.hpp	/^namespace boost { namespace asio { namespace local { class stream_protocol; } } }$/;"	n	namespace:boost::asio
locationSortOrder	lp/detail/field-info.hpp	/^  int locationSortOrder;$/;"	m	class:ndn::lp::detail::FieldInfo
lp	lp/cache-policy.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	lp/cache-policy.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	lp/detail/field-decl.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	lp/detail/field-info.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	lp/detail/field-info.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	lp/field.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	lp/fields.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	lp/nack-header.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	lp/nack-header.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	lp/nack.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	lp/nack.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	lp/packet.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	lp/packet.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	lp/sequence.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	lp/tlv.hpp	/^namespace lp {$/;"	n	namespace:ndn
m_EC	interest.hpp	/^  size_t m_EC;$/;"	m	class:ndn::Interest
m_FC	interest.hpp	/^  size_t m_FC;$/;"	m	class:ndn::Interest
m_addressSelector	util/dns.cpp	/^  ndn::dns::AddressSelector m_addressSelector;$/;"	m	class:ndn::dns::Resolver	file:
m_afterInterest	detail/interest-filter-record.hpp	/^  InterestCallback m_afterInterest;$/;"	m	class:ndn::InterestFilterRecord
m_anchors	security/validator-config.hpp	/^  AnchorList m_anchors;$/;"	m	class:ndn::ValidatorConfig
m_appMetaInfo	meta-info.hpp	/^  std::list<Block> m_appMetaInfo;$/;"	m	class:ndn::MetaInfo
m_backrefManager	util/regex/regex-matcher.hpp	/^  shared_ptr<RegexBackrefManager> m_backrefManager;$/;"	m	class:ndn::RegexMatcher
m_backrefs	util/regex/regex-backref-manager.hpp	/^  std::vector<shared_ptr<RegexMatcher> > m_backrefs;$/;"	m	class:ndn::RegexBackrefManager
m_baseScheme	util/face-uri.cpp	/^  std::string m_baseScheme;$/;"	m	class:ndn::util::IpHostCanonizeProvider	file:
m_begin	encoding/block.hpp	/^  Buffer::const_iterator m_begin;$/;"	m	class:ndn::Block
m_begin	encoding/encoder.hpp	/^  iterator m_begin;$/;"	m	class:ndn::encoding::Encoder
m_body	mgmt/control-response.hpp	/^  Block m_body;$/;"	m	class:ndn::mgmt::ControlResponse
m_buffer	encoding/block.hpp	/^  shared_ptr<const Buffer> m_buffer;$/;"	m	class:ndn::Block
m_buffer	encoding/buffer-stream.hpp	/^  BufferPtr m_buffer;$/;"	m	class:ndn::OBufferStream
m_buffer	encoding/encoder.hpp	/^  shared_ptr<Buffer> m_buffer;$/;"	m	class:ndn::encoding::Encoder
m_buffer	mgmt/status-dataset-context.hpp	/^  shared_ptr<EncodingBuffer> m_buffer;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_buffer	util/digest.hpp	/^  BufferPtr m_buffer;$/;"	m	class:ndn::util::Digest
m_buffer	util/indented-stream.hpp	/^  StreamBuf m_buffer;$/;"	m	class:ndn::util::IndentedStream
m_buffer	util/segment-fetcher.hpp	/^  shared_ptr<OBufferStream> m_buffer;$/;"	m	class:ndn::util::SegmentFetcher
m_cache	security/certificate-cache-ttl.hpp	/^  Cache m_cache;$/;"	m	class:ndn::CertificateCacheTtl
m_cache	util/in-memory-storage.hpp	/^    const Cache* m_cache;$/;"	m	class:ndn::util::InMemoryStorage::const_iterator
m_cache	util/in-memory-storage.hpp	/^  Cache m_cache;$/;"	m	class:ndn::util::InMemoryStorage
m_cachingPolicy	management/nfd-local-control-header.hpp	/^  CachingPolicy m_cachingPolicy;$/;"	m	class:ndn::nfd::LocalControlHeader
m_capacity	util/in-memory-storage.hpp	/^  size_t m_capacity;$/;"	m	class:ndn::util::InMemoryStorage
m_cert	security/secured-bag.hpp	/^  IdentityCertificate m_cert;$/;"	m	class:ndn::SecuredBag
m_certNames	security/certificate-container.hpp	/^  std::set<Name> m_certNames;$/;"	m	class:ndn::security::CertificateContainer
m_certificateCache	security/validator-config.hpp	/^  shared_ptr<CertificateCache> m_certificateCache;$/;"	m	class:ndn::ValidatorConfig
m_certificateCache	security/validator-regex.hpp	/^  shared_ptr<CertificateCache> m_certificateCache;$/;"	m	class:ndn::ValidatorRegex
m_certificates	security/key.hpp	/^  mutable CertificateContainer m_certificates;$/;"	m	class:ndn::security::Key
m_certificates	security/validator-config.hpp	/^    std::list<shared_ptr<IdentityCertificate> > m_certificates;$/;"	m	class:ndn::ValidatorConfig::TrustAnchorContainer
m_certs	security/pib-memory.hpp	/^  std::map<Name, IdentityCertificate> m_certs;$/;"	m	class:ndn::security::PibMemory
m_checkers	security/conf/rule.hpp	/^  CheckerList m_checkers;$/;"	m	class:ndn::security::conf::Rule
m_childSelector	selectors.hpp	/^  int m_childSelector;$/;"	m	class:ndn::Selectors
m_cleanupIndex	util/in-memory-storage-fifo.hpp	/^  CleanupIndex m_cleanupIndex;$/;"	m	class:ndn::util::InMemoryStorageFifo
m_cleanupIndex	util/in-memory-storage-lfu.hpp	/^  CleanupIndex m_cleanupIndex;$/;"	m	class:ndn::util::InMemoryStorageLfu
m_cleanupIndex	util/in-memory-storage-lru.hpp	/^  CleanupIndex m_cleanupIndex;$/;"	m	class:ndn::util::InMemoryStorageLru
m_code	mgmt/control-response.hpp	/^  uint32_t m_code;$/;"	m	class:ndn::mgmt::ControlResponse
m_completeCallback	util/segment-fetcher.hpp	/^  CompleteCallback m_completeCallback;$/;"	m	class:ndn::util::SegmentFetcher
m_componentRegex	util/regex/regex-component-matcher.hpp	/^  boost::regex m_componentRegex;$/;"	m	class:ndn::RegexComponentMatcher
m_components	util/regex/regex-component-set-matcher.hpp	/^  ComponentsSet m_components;$/;"	m	class:ndn::RegexComponentSetMatcher
m_config	util/config-file.hpp	/^  Parsed m_config;$/;"	m	class:ndn::ConfigFile
m_connectTimer	transport/stream-transport.hpp	/^  boost::asio::deadline_timer m_connectTimer;$/;"	m	class:ndn::StreamTransportImpl
m_connection	util/signal-scoped-connection.cpp	/^  : m_connection(other.m_connection)$/;"	f	namespace:ndn::util::signal
m_connection	util/signal-scoped-connection.hpp	/^  Connection m_connection;$/;"	m	class:ndn::util::signal::ScopedConnection
m_connectionInProgress	transport/stream-transport.hpp	/^  bool m_connectionInProgress;$/;"	m	class:ndn::StreamTransportImpl
m_container	detail/container-with-on-empty-signal.hpp	/^  Base m_container;$/;"	m	class:ndn::ContainerWithOnEmptySignal
m_container	encoding/buffer-stream.hpp	/^  Buffer& m_container;$/;"	m	class:ndn::iostreams::buffer_append_device
m_content	data.hpp	/^  mutable Block m_content;$/;"	m	class:ndn::Data
m_cost	management/nfd-control-parameters.hpp	/^  uint64_t            m_cost;$/;"	m	class:ndn::nfd::ControlParameters
m_cost	management/nfd-fib-entry.hpp	/^  uint64_t m_cost;$/;"	m	class:ndn::nfd::NextHopRecord
m_cost	management/nfd-rib-entry.hpp	/^  uint64_t m_cost;$/;"	m	class:ndn::nfd::Route
m_currentSlot	util/signal-signal.hpp	/^  typename SlotList::iterator m_currentSlot;$/;"	m	class:ndn::util::signal::Signal
m_currentTime	util/time-unit-test-clock.hpp	/^  nanoseconds m_currentTime;$/;"	m	class:ndn::time::UnitTestClock
m_currentTimestamp	management/nfd-forwarder-status.hpp	/^  time::system_clock::TimePoint m_currentTimestamp;$/;"	m	class:ndn::nfd::ForwarderStatus
m_dataCallback	detail/pending-interest.hpp	/^  DataCallback m_dataCallback;$/;"	m	class:ndn::PendingInterest
m_dataExpand	security/sec-rule-relative.hpp	/^  const std::string m_dataExpand;$/;"	m	class:ndn::SecRuleRelative
m_dataNameRegex	security/sec-rule-relative.hpp	/^  Regex m_dataNameRegex;$/;"	m	class:ndn::SecRuleRelative
m_dataPacket	util/in-memory-storage-entry.hpp	/^  shared_ptr<const Data> m_dataPacket;$/;"	m	class:ndn::util::InMemoryStorageEntry
m_dataRegex	security/sec-rule-relative.hpp	/^  const std::string m_dataRegex;$/;"	m	class:ndn::SecRuleRelative
m_dataRegex	security/sec-rule-specific.hpp	/^  shared_ptr<Regex> m_dataRegex;$/;"	m	class:ndn::SecRuleSpecific
m_dataRules	security/validator-config.hpp	/^  DataRuleList m_dataRules;$/;"	m	class:ndn::ValidatorConfig
m_dataSender	mgmt/status-dataset-context.hpp	/^  DataSender m_dataSender;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_database	security/pib-sqlite3.hpp	/^  sqlite3* m_database;$/;"	m	class:ndn::security::PibSqlite3
m_database	security/sec-public-info-sqlite3.hpp	/^  sqlite3* m_database;$/;"	m	class:ndn::SecPublicInfoSqlite3
m_deadlineTimer	util/scheduler.hpp	/^  monotonic_deadline_timer m_deadlineTimer;$/;"	m	class:ndn::util::scheduler::Scheduler
m_defaultCert	security/pib-memory.hpp	/^  std::map<Name, Name> m_defaultCert;$/;"	m	class:ndn::security::PibMemory
m_defaultCertificate	security/key.hpp	/^  mutable IdentityCertificate m_defaultCertificate;$/;"	m	class:ndn::security::Key
m_defaultCertificate	security/sec-public-info.hpp	/^  shared_ptr<IdentityCertificate> m_defaultCertificate;$/;"	m	class:ndn::SecPublicInfo
m_defaultIdentity	security/pib-memory.hpp	/^  Name m_defaultIdentity;$/;"	m	class:ndn::security::PibMemory
m_defaultIdentity	security/pib.hpp	/^  mutable Identity m_defaultIdentity;$/;"	m	class:ndn::security::Pib
m_defaultKey	security/identity.hpp	/^  mutable Key m_defaultKey;$/;"	m	class:ndn::security::Identity
m_defaultKey	security/pib-memory.hpp	/^  std::map<Name, Name> m_defaultKey;$/;"	m	class:ndn::security::PibMemory
m_defaultMulticastPort	util/face-uri.cpp	/^  uint32_t m_defaultMulticastPort;$/;"	m	class:ndn::util::IpHostCanonizeProvider	file:
m_defaultTtl	security/certificate-cache-ttl.hpp	/^  time::seconds m_defaultTtl;$/;"	m	class:ndn::CertificateCacheTtl
m_defaultUnicastPort	util/face-uri.cpp	/^  uint32_t m_defaultUnicastPort;$/;"	m	class:ndn::util::IpHostCanonizeProvider	file:
m_delegations	link.hpp	/^  DelegationSet m_delegations;$/;"	m	class:ndn::Link
m_deleter	detail/pending-interest.hpp	/^  std::function<void()> m_deleter;$/;"	m	class:ndn::PendingInterest
m_device	encoding/buffer-stream.hpp	/^  iostreams::buffer_append_device m_device;$/;"	m	class:ndn::OBufferStream
m_digest	security/public-key.hpp	/^  mutable Block m_digest;$/;"	m	class:ndn::PublicKey
m_digestAlgorithm	security/signing-info.hpp	/^  DigestAlgorithm m_digestAlgorithm;$/;"	m	class:ndn::security::SigningInfo
m_disconnect	util/signal-connection.hpp	/^  weak_ptr<function<void()>> m_disconnect;$/;"	m	class:ndn::util::signal::Connection
m_dynamicContainers	security/validator-config.hpp	/^  DynamicContainers m_dynamicContainers;$/;"	m	class:ndn::ValidatorConfig
m_end	encoding/block.hpp	/^  Buffer::const_iterator m_end;$/;"	m	class:ndn::Block
m_end	encoding/encoder.hpp	/^  iterator m_end;$/;"	m	class:ndn::encoding::Encoder
m_errorCallback	util/segment-fetcher.hpp	/^  ErrorCallback m_errorCallback;$/;"	m	class:ndn::util::SegmentFetcher
m_event	util/scheduler-scoped-event-id.cpp	/^  , m_event(other.m_event)$/;"	f	namespace:ndn::util::scheduler
m_event	util/scheduler-scoped-event-id.hpp	/^  EventId m_event;$/;"	m	class:ndn::util::scheduler::ScopedEventId
m_event	util/scheduler.cpp	/^  Scheduler::EventQueue::iterator m_event;$/;"	m	struct:ndn::util::scheduler::EventIdImpl	file:
m_event	util/scheduler.hpp	/^    Event m_event;$/;"	m	struct:ndn::util::scheduler::Scheduler::EventInfo
m_eventId	util/scheduler.hpp	/^    mutable EventId m_eventId;$/;"	m	struct:ndn::util::scheduler::Scheduler::EventInfo
m_events	util/scheduler.hpp	/^  EventQueue m_events;$/;"	m	class:ndn::util::scheduler::Scheduler
m_exclude	exclude.hpp	/^  exclude_type m_exclude;$/;"	m	class:ndn::Exclude
m_exclude	selectors.hpp	/^  Exclude m_exclude;$/;"	m	class:ndn::Selectors
m_expand	util/regex/regex-top-matcher.hpp	/^  const std::string m_expand;$/;"	m	class:ndn::RegexTopMatcher
m_expirationPeriod	management/nfd-control-parameters.hpp	/^  time::milliseconds  m_expirationPeriod;$/;"	m	class:ndn::nfd::ControlParameters
m_expirationPeriod	management/nfd-face-status.hpp	/^  time::milliseconds m_expirationPeriod;$/;"	m	class:ndn::nfd::FaceStatus
m_expirationPeriod	management/nfd-rib-entry.hpp	/^  time::milliseconds m_expirationPeriod;$/;"	m	class:ndn::nfd::Route
m_expiry	mgmt/status-dataset-context.hpp	/^  time::milliseconds m_expiry;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_expr	util/regex/regex-matcher.hpp	/^  const std::string m_expr;$/;"	m	class:ndn::RegexMatcher
m_extensionId	security/certificate-extension.hpp	/^  OID m_extensionId;$/;"	m	class:ndn::CertificateExtension
m_extensionList	security/certificate.hpp	/^  ExtensionList m_extensionList;$/;"	m	class:ndn::Certificate
m_extensionValue	security/certificate-extension.hpp	/^  Buffer m_extensionValue;$/;"	m	class:ndn::CertificateExtension
m_f_field	interest.hpp	/^  size_t m_f_field;$/;"	m	class:ndn::Interest
m_face	detail/face-impl.hpp	/^  Face& m_face;$/;"	m	class:ndn::Face::Impl
m_face	management/nfd-controller.hpp	/^  Face& m_face;$/;"	m	class:ndn::nfd::Controller
m_face	mgmt/dispatcher.hpp	/^  Face& m_face;$/;"	m	class:ndn::mgmt::Dispatcher
m_face	security/validator.hpp	/^  Face* m_face;$/;"	m	class:ndn::Validator
m_face	util/notification-stream.hpp	/^  Face& m_face;$/;"	m	class:ndn::util::NotificationStream
m_face	util/notification-subscriber.hpp	/^  Face& m_face;$/;"	m	class:ndn::util::NotificationSubscriber
m_face	util/segment-fetcher.hpp	/^  Face& m_face;$/;"	m	class:ndn::util::SegmentFetcher
m_faceId	management/nfd-control-parameters.hpp	/^  uint64_t            m_faceId;$/;"	m	class:ndn::nfd::ControlParameters
m_faceId	management/nfd-face-query-filter.hpp	/^  uint64_t m_faceId;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_faceId	management/nfd-face-traits.hpp	/^  uint64_t m_faceId;$/;"	m	class:ndn::nfd::FaceTraits
m_faceId	management/nfd-fib-entry.hpp	/^  uint64_t m_faceId;$/;"	m	class:ndn::nfd::NextHopRecord
m_faceId	management/nfd-rib-entry.hpp	/^  uint64_t m_faceId;$/;"	m	class:ndn::nfd::Route
m_facePersistency	management/nfd-control-parameters.hpp	/^  FacePersistency     m_facePersistency;$/;"	m	class:ndn::nfd::ControlParameters
m_facePersistency	management/nfd-face-query-filter.hpp	/^  FacePersistency m_facePersistency;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_facePersistency	management/nfd-face-traits.hpp	/^  FacePersistency  m_facePersistency;$/;"	m	class:ndn::nfd::FaceTraits
m_faceScope	management/nfd-face-query-filter.hpp	/^  FaceScope m_faceScope;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_faceScope	management/nfd-face-traits.hpp	/^  FaceScope m_faceScope;$/;"	m	class:ndn::nfd::FaceTraits
m_filter	detail/interest-filter-record.hpp	/^  InterestFilter m_filter;$/;"	m	class:ndn::InterestFilterRecord
m_filter	detail/registered-prefix.hpp	/^  shared_ptr<InterestFilterRecord> m_filter;$/;"	m	class:ndn::RegisteredPrefix
m_filters	security/conf/rule.hpp	/^  FilterList m_filters;$/;"	m	class:ndn::security::conf::Rule
m_finalBlockId	meta-info.hpp	/^  name::Component m_finalBlockId;$/;"	m	class:ndn::MetaInfo
m_flags	management/nfd-control-parameters.hpp	/^  uint64_t            m_flags;$/;"	m	class:ndn::nfd::ControlParameters
m_flags	management/nfd-rib-entry.hpp	/^  uint64_t m_flags;$/;"	m	class:ndn::nfd::Route
m_freeEntries	util/in-memory-storage.hpp	/^  std::stack<InMemoryStorageEntry*> m_freeEntries;$/;"	m	class:ndn::util::InMemoryStorage
m_freshnessPeriod	meta-info.hpp	/^  time::milliseconds m_freshnessPeriod;$/;"	m	class:ndn::MetaInfo
m_fullName	data.hpp	/^  mutable Name m_fullName;$/;"	m	class:ndn::Data
m_graceInterval	security/validator-config.hpp	/^  time::milliseconds m_graceInterval;$/;"	m	class:ndn::ValidatorConfig
m_graceInterval	util/command-interest-validator.hpp	/^  time::milliseconds m_graceInterval; \/\/ms$/;"	m	class:ndn::CommandInterestValidator
m_handlers	mgmt/dispatcher.hpp	/^  HandlerMap m_handlers;$/;"	m	class:ndn::mgmt::Dispatcher
m_hasDefaultCertificate	security/key.hpp	/^  mutable bool m_hasDefaultCertificate;$/;"	m	class:ndn::security::Key
m_hasDefaultIdentity	security/pib-memory.hpp	/^  bool m_hasDefaultIdentity;$/;"	m	class:ndn::security::PibMemory
m_hasDefaultIdentity	security/pib.hpp	/^  mutable bool m_hasDefaultIdentity;$/;"	m	class:ndn::security::Pib
m_hasDefaultKey	security/identity.hpp	/^  mutable bool m_hasDefaultKey;$/;"	m	class:ndn::security::Identity
m_hasExpirationPeriod	management/nfd-face-status.hpp	/^  bool m_hasExpirationPeriod;$/;"	m	class:ndn::nfd::FaceStatus
m_hasFaceId	management/nfd-face-query-filter.hpp	/^  bool m_hasFaceId;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasFacePersistency	management/nfd-face-query-filter.hpp	/^  bool m_hasFacePersistency;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasFaceScope	management/nfd-face-query-filter.hpp	/^  bool m_hasFaceScope;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasFields	management/nfd-control-parameters.hpp	/^  std::vector<bool>   m_hasFields;$/;"	m	class:ndn::nfd::ControlParameters
m_hasInfiniteExpirationPeriod	management/nfd-rib-entry.hpp	/^  bool m_hasInfiniteExpirationPeriod;$/;"	m	class:ndn::nfd::Route
m_hasKeyLocator	signature-info.hpp	/^  bool m_hasKeyLocator;$/;"	m	class:ndn::SignatureInfo
m_hasLinkType	management/nfd-face-query-filter.hpp	/^  bool m_hasLinkType;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasLocalUri	management/nfd-face-query-filter.hpp	/^  bool m_hasLocalUri;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasRemoteUri	management/nfd-face-query-filter.hpp	/^  bool m_hasRemoteUri;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasUriScheme	management/nfd-face-query-filter.hpp	/^  bool m_hasUriScheme;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hash	util/digest.hpp	/^  Hash m_hash;$/;"	m	class:ndn::util::Digest
m_header	lp/nack.hpp	/^  NackHeader m_header;$/;"	m	class:ndn::lp::Nack
m_host	transport/tcp-transport.hpp	/^  std::string m_host;$/;"	m	class:ndn::TcpTransport
m_host	util/face-uri.hpp	/^  std::string m_host;$/;"	m	class:ndn::util::FaceUri
m_hyperKRegex	security/conf/key-locator-checker.hpp	/^  shared_ptr<Regex> m_hyperKRegex;$/;"	m	class:ndn::security::conf::HyperKeyLocatorNameChecker
m_hyperPRegex	security/conf/key-locator-checker.hpp	/^  shared_ptr<Regex> m_hyperPRegex;$/;"	m	class:ndn::security::conf::HyperKeyLocatorNameChecker
m_hyperRelation	security/conf/key-locator-checker.hpp	/^  Relation m_hyperRelation;$/;"	m	class:ndn::security::conf::HyperKeyLocatorNameChecker
m_id	detail/interest-filter-record.hpp	/^  const InterestFilterId* m_id;$/;"	m	class:ndn::MatchInterestFilterId
m_id	detail/pending-interest.hpp	/^  const PendingInterestId* m_id;$/;"	m	class:ndn::MatchPendingInterestId
m_id	detail/registered-prefix.hpp	/^  const RegisteredPrefixId* m_id;$/;"	m	class:ndn::MatchRegisteredPrefixId
m_id	security/conf/rule.hpp	/^  std::string m_id;$/;"	m	class:ndn::security::conf::Rule
m_id	security/key.hpp	/^  Name m_id;$/;"	m	class:ndn::security::Key
m_identities	security/identity-container.hpp	/^  std::set<Name> m_identities;$/;"	m	class:ndn::security::IdentityContainer
m_identities	security/pib-memory.hpp	/^  std::set<Name> m_identities;$/;"	m	class:ndn::security::PibMemory
m_identities	security/pib.hpp	/^  mutable IdentityContainer m_identities;$/;"	m	class:ndn::security::Pib
m_identity	security/identity-container.hpp	/^    Name m_identity;$/;"	m	class:ndn::security::IdentityContainer::const_iterator
m_identity	security/key-container.hpp	/^    Name m_identity;$/;"	m	class:ndn::security::KeyContainer::const_iterator
m_identity	security/key-container.hpp	/^  Name m_identity;$/;"	m	class:ndn::security::KeyContainer
m_impl	face.hpp	/^  unique_ptr<Impl> m_impl;$/;"	m	class:ndn::Face
m_impl	security/certificate-container.hpp	/^    shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::CertificateContainer::const_iterator
m_impl	security/certificate-container.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::CertificateContainer
m_impl	security/identity-container.hpp	/^    shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::IdentityContainer::const_iterator
m_impl	security/identity-container.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::IdentityContainer
m_impl	security/identity.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::Identity
m_impl	security/key-container.hpp	/^    shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::KeyContainer::const_iterator
m_impl	security/key-container.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::KeyContainer
m_impl	security/key.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::Key
m_impl	security/pib.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::Pib
m_impl	security/sec-tpm-file.hpp	/^  unique_ptr<Impl> m_impl;$/;"	m	class:ndn::SecTpmFile
m_impl	security/sec-tpm-osx.hpp	/^  shared_ptr<Impl> m_impl;$/;"	m	class:ndn::SecTpmOsx
m_impl	transport/tcp-transport.hpp	/^  shared_ptr< Impl > m_impl;$/;"	m	class:ndn::TcpTransport
m_impl	transport/unix-transport.hpp	/^  shared_ptr< Impl > m_impl;$/;"	m	class:ndn::UnixTransport
m_impl	util/network-monitor.hpp	/^  std::unique_ptr<Impl> m_impl;$/;"	m	class:ndn::util::NetworkMonitor
m_inTerminal	security/sec-tpm-file.hpp	/^  bool m_inTerminal;$/;"	m	class:ndn::SecTpmFile
m_inTerminal	security/sec-tpm-osx.cpp	/^  bool m_inTerminal;$/;"	m	class:ndn::SecTpmOsx::Impl	file:
m_incomingFaceId	management/nfd-local-control-header.hpp	/^  uint64_t m_incomingFaceId;$/;"	m	class:ndn::nfd::LocalControlHeader
m_indent	util/indented-stream.hpp	/^    std::string m_indent;$/;"	m	class:ndn::util::IndentedStream::StreamBuf
m_indicator	util/regex/regex-repeat-matcher.hpp	/^  size_t m_indicator;$/;"	m	class:ndn::RegexRepeatMatcher
m_info	security/additional-description.hpp	/^  std::map<std::string, std::string> m_info;$/;"	m	class:ndn::security::AdditionalDescription
m_info	security/signing-info.hpp	/^  SignatureInfo m_info;$/;"	m	class:ndn::security::SigningInfo
m_info	signature.hpp	/^  SignatureInfo m_info;$/;"	m	class:ndn::Signature
m_input	util/config-file.hpp	/^  std::ifstream m_input;$/;"	m	class:ndn::ConfigFile
m_inputBuffer	transport/stream-transport.hpp	/^  uint8_t m_inputBuffer[MAX_NDN_PACKET_SIZE];$/;"	m	class:ndn::StreamTransportImpl
m_inputBufferSize	transport/stream-transport.hpp	/^  size_t m_inputBufferSize;$/;"	m	class:ndn::StreamTransportImpl
m_interest	detail/pending-interest.hpp	/^  shared_ptr<const Interest> m_interest;$/;"	m	class:ndn::PendingInterest
m_interest	lp/nack.hpp	/^  Interest m_interest;$/;"	m	class:ndn::lp::Nack
m_interest	mgmt/status-dataset-context.hpp	/^  const Interest& m_interest;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_interest	security/validation-request.hpp	/^  Interest m_interest;$/;"	m	class:ndn::ValidationRequest
m_interestFilterTable	detail/face-impl.hpp	/^  InterestFilterTable m_interestFilterTable;$/;"	m	class:ndn::Face::Impl
m_interestLifetime	interest.hpp	/^  time::milliseconds m_interestLifetime;$/;"	m	class:ndn::Interest
m_interestLifetime	util/notification-subscriber.hpp	/^  time::milliseconds m_interestLifetime;$/;"	m	class:ndn::util::NotificationSubscriber
m_interestRules	security/validator-config.hpp	/^  InterestRuleList m_interestRules;$/;"	m	class:ndn::ValidatorConfig
m_internalIoService	face.hpp	/^  unique_ptr<boost::asio::io_service> m_internalIoService;$/;"	m	class:ndn::Face
m_internalKeyChain	face.hpp	/^  unique_ptr<KeyChain> m_internalKeyChain;$/;"	m	class:ndn::Face
m_io	security/certificate-cache-ttl.hpp	/^  boost::asio::io_service& m_io;$/;"	m	class:ndn::CertificateCacheTtl
m_ioService	face.hpp	/^  boost::asio::io_service& m_ioService;$/;"	m	class:ndn::Face
m_ioService	transport/transport.hpp	/^  boost::asio::io_service* m_ioService;$/;"	m	class:ndn::Transport
m_ioServiceWork	detail/face-impl.hpp	/^  unique_ptr<boost::asio::io_service::work> m_ioServiceWork; \/\/ if thread needs to be preserved$/;"	m	class:ndn::Face::Impl
m_isConnected	transport/transport.hpp	/^  bool m_isConnected;$/;"	m	class:ndn::Transport
m_isCritical	security/certificate-extension.hpp	/^  bool m_isCritical;$/;"	m	class:ndn::CertificateExtension
m_isDir	security/validator-config.hpp	/^    bool m_isDir;$/;"	m	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
m_isEventExecuting	util/scheduler.hpp	/^  bool m_isEventExecuting;$/;"	m	class:ndn::util::scheduler::Scheduler
m_isExactMatch	util/regex/regex-component-matcher.hpp	/^  bool m_isExactMatch;$/;"	m	class:ndn::RegexComponentMatcher
m_isExecuting	util/signal-signal.hpp	/^  bool m_isExecuting;$/;"	m	class:ndn::util::signal::Signal
m_isExempted	security/sec-rule-specific.hpp	/^  bool m_isExempted;$/;"	m	class:ndn::SecRuleSpecific
m_isExpectingData	transport/transport.hpp	/^  bool m_isExpectingData;$/;"	m	class:ndn::Transport
m_isFinalized	util/digest.hpp	/^  bool m_isFinalized;$/;"	m	class:ndn::util::Digest
m_isInProcess	util/digest.hpp	/^  bool m_isInProcess;$/;"	m	class:ndn::util::Digest
m_isInclusion	util/regex/regex-component-set-matcher.hpp	/^  bool m_isInclusion;$/;"	m	class:ndn::RegexComponentSetMatcher
m_isPositive	security/sec-rule.hpp	/^  bool m_isPositive;$/;"	m	class:ndn::SecRule
m_isRunning	util/notification-subscriber.hpp	/^  bool m_isRunning;$/;"	m	class:ndn::util::NotificationSubscriber
m_isSecondaryUsed	util/regex/regex-top-matcher.hpp	/^  bool m_isSecondaryUsed;$/;"	m	class:ndn::RegexTopMatcher
m_isV6	util/face-uri.hpp	/^  bool m_isV6;$/;"	m	class:ndn::util::FaceUri
m_isValid	util/scheduler.cpp	/^  bool m_isValid;$/;"	m	struct:ndn::util::scheduler::EventIdImpl	file:
m_it	security/certificate-container.hpp	/^    std::set<Name>::const_iterator m_it;$/;"	m	class:ndn::security::CertificateContainer::const_iterator
m_it	security/identity-container.hpp	/^    std::set<Name>::const_iterator m_it;$/;"	m	class:ndn::security::IdentityContainer::const_iterator
m_it	security/key-container.hpp	/^    std::set<name::Component>::const_iterator m_it;$/;"	m	class:ndn::security::KeyContainer::const_iterator
m_it	util/in-memory-storage.hpp	/^    Cache::index<byFullName>::type::iterator m_it;$/;"	m	class:ndn::util::InMemoryStorage::const_iterator
m_key	security/certificate.hpp	/^  PublicKey m_key;$/;"	m	class:ndn::Certificate
m_key	security/key.hpp	/^  PublicKey m_key;$/;"	m	class:ndn::security::Key
m_key	security/public-key.hpp	/^  Buffer m_key;$/;"	m	class:ndn::PublicKey
m_key	security/secured-bag.hpp	/^  ConstBufferPtr m_key;$/;"	m	class:ndn::SecuredBag
m_keyChain	management/nfd-controller.hpp	/^  KeyChain& m_keyChain;$/;"	m	class:ndn::nfd::Controller
m_keyChain	mgmt/dispatcher.hpp	/^  security::KeyChain& m_keyChain;$/;"	m	class:ndn::mgmt::Dispatcher
m_keyChain	util/command-interest-generator.hpp	/^  KeyChain m_keyChain;$/;"	m	class:ndn::CommandInterestGenerator
m_keyChain	util/notification-stream.hpp	/^  KeyChain& m_keyChain;$/;"	m	class:ndn::util::NotificationStream
m_keyChainRef	security/sec-tpm-osx.cpp	/^  SecKeychainRef m_keyChainRef;$/;"	m	class:ndn::SecTpmOsx::Impl	file:
m_keyDigest	key-locator.hpp	/^  Block m_keyDigest;$/;"	m	class:ndn::KeyLocator
m_keyId	security/key.hpp	/^  name::Component m_keyId;$/;"	m	class:ndn::security::Key
m_keyIds	security/key-container.hpp	/^  std::set<name::Component> m_keyIds;$/;"	m	class:ndn::security::KeyContainer
m_keyLocator	signature-info.hpp	/^  KeyLocator m_keyLocator;$/;"	m	class:ndn::SignatureInfo
m_keyLocatorChecker	security/conf/checker.hpp	/^  shared_ptr<KeyLocatorChecker> m_keyLocatorChecker;$/;"	m	class:ndn::security::conf::CustomizedChecker
m_keyName	security/key.hpp	/^  Name m_keyName;$/;"	m	class:ndn::security::Key
m_keyTimestampTtl	security/validator-config.hpp	/^  const time::system_clock::Duration& m_keyTimestampTtl;$/;"	m	class:ndn::ValidatorConfig
m_keyType	security/key-params.hpp	/^  KeyType m_keyType;$/;"	m	class:ndn::KeyParams
m_keys	security/identity.hpp	/^  mutable KeyContainer m_keys;$/;"	m	class:ndn::security::Identity
m_keys	security/pib-memory.hpp	/^  std::map<Name, PublicKey> m_keys;$/;"	m	class:ndn::security::PibMemory
m_keystorePath	security/sec-tpm-file.cpp	/^  boost::filesystem::path m_keystorePath;$/;"	m	class:ndn::SecTpmFile::Impl	file:
m_kind	management/nfd-face-event-notification.hpp	/^  FaceEventKind m_kind;$/;"	m	class:ndn::nfd::FaceEventNotification
m_lastInterestId	util/notification-subscriber.hpp	/^  const PendingInterestId* m_lastInterestId;$/;"	m	class:ndn::util::NotificationSubscriber
m_lastRefresh	security/validator-config.hpp	/^    time::system_clock::TimePoint m_lastRefresh;$/;"	m	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
m_lastSequenceNo	util/notification-subscriber.hpp	/^  uint64_t m_lastSequenceNo;$/;"	m	class:ndn::util::NotificationSubscriber
m_lastTimestamp	security/key-chain.hpp	/^  time::milliseconds m_lastTimestamp;$/;"	m	class:ndn::security::KeyChain
m_lastTimestamp	security/validator-config.hpp	/^  LastTimestampMap m_lastTimestamp;$/;"	m	class:ndn::ValidatorConfig
m_lastTimestamp	util/command-interest-generator.hpp	/^  time::milliseconds m_lastTimestamp;$/;"	m	class:ndn::CommandInterestGenerator
m_lastTimestamp	util/command-interest-validator.hpp	/^  LastTimestampMap m_lastTimestamp;$/;"	m	class:ndn::CommandInterestValidator
m_limit	util/in-memory-storage.hpp	/^  size_t m_limit;$/;"	m	class:ndn::util::InMemoryStorage
m_link	interest.hpp	/^  mutable Block m_link;$/;"	m	class:ndn::Interest
m_linkCached	interest.hpp	/^  mutable shared_ptr<Link> m_linkCached;$/;"	m	class:ndn::Interest
m_linkType	management/nfd-face-query-filter.hpp	/^  LinkType m_linkType;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_linkType	management/nfd-face-traits.hpp	/^  LinkType m_linkType;$/;"	m	class:ndn::nfd::FaceTraits
m_localControlFeature	management/nfd-control-parameters.hpp	/^  LocalControlFeature m_localControlFeature;$/;"	m	class:ndn::nfd::ControlParameters
m_localControlHeader	data.hpp	/^  nfd::LocalControlHeader m_localControlHeader;$/;"	m	class:ndn::Data
m_localControlHeader	interest.hpp	/^  nfd::LocalControlHeader m_localControlHeader;$/;"	m	class:ndn::Interest
m_localUri	management/nfd-channel-status.hpp	/^  std::string m_localUri;$/;"	m	class:ndn::nfd::ChannelStatus
m_localUri	management/nfd-face-query-filter.hpp	/^  std::string m_localUri;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_localUri	management/nfd-face-traits.hpp	/^  std::string m_localUri;$/;"	m	class:ndn::nfd::FaceTraits
m_location	security/pib.hpp	/^  std::string m_location;$/;"	m	class:ndn::security::Pib
m_location	security/sec-public-info.hpp	/^  std::string m_location;$/;"	m	class:ndn::SecPublicInfo
m_location	security/sec-tpm.hpp	/^  std::string m_location;$/;"	m	class:ndn::SecTpm
m_matchResult	util/regex/regex-matcher.hpp	/^  std::vector<name::Component> m_matchResult;$/;"	m	class:ndn::RegexMatcher
m_matchers	util/regex/regex-matcher.hpp	/^  std::vector<shared_ptr<RegexMatcher> > m_matchers;$/;"	m	class:ndn::RegexMatcher
m_maxSuffixComponents	selectors.hpp	/^  int m_maxSuffixComponents;$/;"	m	class:ndn::Selectors
m_maxTrackedKeys	security/validator-config.hpp	/^  size_t m_maxTrackedKeys;$/;"	m	class:ndn::ValidatorConfig
m_metaInfo	data.hpp	/^  MetaInfo m_metaInfo;$/;"	m	class:ndn::Data
m_minSuffixComponents	selectors.hpp	/^  int m_minSuffixComponents;$/;"	m	class:ndn::Selectors
m_module	management/nfd-control-command.hpp	/^  name::Component m_module;$/;"	m	class:ndn::nfd::ControlCommand
m_mustBeFresh	selectors.hpp	/^  bool m_mustBeFresh;$/;"	m	class:ndn::Selectors
m_mustFailVerify	security/validator-regex.hpp	/^  RuleList m_mustFailVerify;$/;"	m	class:ndn::ValidatorRegex
m_nCsEntries	management/nfd-forwarder-status.hpp	/^  size_t m_nCsEntries;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nFibEntries	management/nfd-forwarder-status.hpp	/^  size_t m_nFibEntries;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nInBytes	management/nfd-face-status.hpp	/^  uint64_t m_nInBytes;$/;"	m	class:ndn::nfd::FaceStatus
m_nInDatas	management/nfd-face-status.hpp	/^  uint64_t m_nInDatas;$/;"	m	class:ndn::nfd::FaceStatus
m_nInDatas	management/nfd-forwarder-status.hpp	/^  uint64_t m_nInDatas;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nInInterests	management/nfd-face-status.hpp	/^  uint64_t m_nInInterests;$/;"	m	class:ndn::nfd::FaceStatus
m_nInInterests	management/nfd-forwarder-status.hpp	/^  uint64_t m_nInInterests;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nInNacks	management/nfd-face-status.hpp	/^  uint64_t m_nInNacks;$/;"	m	class:ndn::nfd::FaceStatus
m_nInNacks	management/nfd-forwarder-status.hpp	/^  uint64_t m_nInNacks;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nMeasurementsEntries	management/nfd-forwarder-status.hpp	/^  size_t m_nMeasurementsEntries;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nNameTreeEntries	management/nfd-forwarder-status.hpp	/^  size_t m_nNameTreeEntries;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nOutBytes	management/nfd-face-status.hpp	/^  uint64_t m_nOutBytes;$/;"	m	class:ndn::nfd::FaceStatus
m_nOutDatas	management/nfd-face-status.hpp	/^  uint64_t m_nOutDatas;$/;"	m	class:ndn::nfd::FaceStatus
m_nOutDatas	management/nfd-forwarder-status.hpp	/^  uint64_t m_nOutDatas;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nOutInterests	management/nfd-face-status.hpp	/^  uint64_t m_nOutInterests;$/;"	m	class:ndn::nfd::FaceStatus
m_nOutInterests	management/nfd-forwarder-status.hpp	/^  uint64_t m_nOutInterests;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nOutNacks	management/nfd-face-status.hpp	/^  uint64_t m_nOutNacks;$/;"	m	class:ndn::nfd::FaceStatus
m_nOutNacks	management/nfd-forwarder-status.hpp	/^  uint64_t m_nOutNacks;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nPackets	util/in-memory-storage.hpp	/^  size_t m_nPackets;$/;"	m	class:ndn::util::InMemoryStorage
m_nPitEntries	management/nfd-forwarder-status.hpp	/^  size_t m_nPitEntries;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nRetries	security/validation-request.hpp	/^  int m_nRetries;$/;"	m	class:ndn::ValidationRequest
m_nSteps	security/validation-request.hpp	/^  int m_nSteps;$/;"	m	class:ndn::ValidationRequest
m_nackCallback	detail/pending-interest.hpp	/^  NackCallback m_nackCallback;$/;"	m	class:ndn::PendingInterest
m_name	data.hpp	/^  Name m_name;$/;"	m	class:ndn::Data
m_name	interest.hpp	/^  Name m_name;$/;"	m	class:ndn::Interest
m_name	key-locator.hpp	/^  Name m_name;$/;"	m	class:ndn::KeyLocator
m_name	management/nfd-control-parameters.hpp	/^  Name                m_name;$/;"	m	class:ndn::nfd::ControlParameters
m_name	management/nfd-strategy-choice.hpp	/^  Name m_name; \/\/ namespace$/;"	m	class:ndn::nfd::StrategyChoice
m_name	security/conf/filter.hpp	/^  Name m_name;$/;"	m	class:ndn::security::conf::RelationNameFilter
m_name	security/conf/key-locator-checker.hpp	/^  Name m_name;$/;"	m	class:ndn::security::conf::RelationKeyLocatorNameChecker
m_name	security/identity.hpp	/^  Name m_name;$/;"	m	class:ndn::security::Identity
m_name	security/signing-info.hpp	/^  Name m_name;$/;"	m	class:ndn::security::SigningInfo
m_nameBlock	name.hpp	/^  mutable Block m_nameBlock;$/;"	m	class:ndn::Name
m_needRefreshCerts	security/key.hpp	/^  mutable bool m_needRefreshCerts;$/;"	m	class:ndn::security::Key
m_needRefreshIdentities	security/pib.hpp	/^  mutable bool m_needRefreshIdentities;$/;"	m	class:ndn::security::Pib
m_needRefreshKeys	security/identity.hpp	/^  mutable bool m_needRefreshKeys;$/;"	m	class:ndn::security::Identity
m_nextHopFaceId	management/nfd-local-control-header.hpp	/^  uint64_t m_nextHopFaceId;$/;"	m	class:ndn::nfd::LocalControlHeader
m_nextHopRecords	management/nfd-fib-entry.hpp	/^  std::list<NextHopRecord> m_nextHopRecords;$/;"	m	class:ndn::nfd::FibEntry
m_nfdController	face.hpp	/^  unique_ptr<nfd::Controller> m_nfdController;$/;"	m	class:ndn::Face
m_nfdVersion	management/nfd-forwarder-status.hpp	/^  std::string m_nfdVersion;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nonce	interest.hpp	/^  mutable Block m_nonce;$/;"	m	class:ndn::Interest
m_notAfter	security/certificate.hpp	/^  time::system_clock::TimePoint m_notAfter;$/;"	m	class:ndn::Certificate
m_notAfter	security/validity-period.hpp	/^  TimePoint m_notAfter;$/;"	m	class:ndn::security::ValidityPeriod
m_notBefore	security/certificate.hpp	/^  time::system_clock::TimePoint m_notBefore;$/;"	m	class:ndn::Certificate
m_notBefore	security/validity-period.hpp	/^  TimePoint m_notBefore;$/;"	m	class:ndn::security::ValidityPeriod
m_oid	encoding/oid.hpp	/^  std::vector<int> m_oid;$/;"	m	class:ndn::OID
m_oid	security/certificate-subject-description.hpp	/^  OID m_oid;$/;"	m	class:ndn::CertificateSubjectDescription
m_onDataValidated	security/validation-request.hpp	/^  OnDataValidated m_onDataValidated;$/;"	m	class:ndn::ValidationRequest
m_onDataValidationFailed	security/validation-request.hpp	/^  OnDataValidationFailed m_onDataValidationFailed;$/;"	m	class:ndn::ValidationRequest
m_onError	util/dns.cpp	/^  ErrorCallback m_onError;$/;"	m	class:ndn::dns::Resolver	file:
m_onSuccess	util/dns.cpp	/^  SuccessCallback m_onSuccess;$/;"	m	class:ndn::dns::Resolver	file:
m_op	security/sec-rule-relative.hpp	/^  const std::string m_op;$/;"	m	class:ndn::SecRuleRelative
m_optional	management/nfd-control-command.hpp	/^    std::vector<bool> m_optional;$/;"	m	class:ndn::nfd::ControlCommand::FieldValidator
m_options	detail/registered-prefix.hpp	/^  nfd::CommandOptions m_options;$/;"	m	class:ndn::RegisteredPrefix
m_origin	management/nfd-control-parameters.hpp	/^  uint64_t            m_origin;$/;"	m	class:ndn::nfd::ControlParameters
m_origin	management/nfd-rib-entry.hpp	/^  uint64_t m_origin;$/;"	m	class:ndn::nfd::Route
m_otherTlvs	signature-info.hpp	/^  std::list<Block> m_otherTlvs;$/;"	m	class:ndn::SignatureInfo
m_output	util/indented-stream.hpp	/^    std::ostream& m_output;$/;"	m	class:ndn::util::IndentedStream::StreamBuf
m_password	security/sec-tpm-osx.cpp	/^  string m_password;$/;"	m	class:ndn::SecTpmOsx::Impl	file:
m_passwordSet	security/sec-tpm-osx.cpp	/^  bool m_passwordSet;$/;"	m	class:ndn::SecTpmOsx::Impl	file:
m_path	security/validator-config.hpp	/^    boost::filesystem::path m_path;$/;"	m	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
m_path	util/config-file.hpp	/^  boost::filesystem::path m_path; \/\/ absolute path to active configuration file (if any)$/;"	m	class:ndn::ConfigFile
m_path	util/face-uri.hpp	/^  std::string m_path;$/;"	m	class:ndn::util::FaceUri
m_pendingInterestTable	detail/face-impl.hpp	/^  PendingInterestTable m_pendingInterestTable;$/;"	m	class:ndn::Face::Impl
m_pib	security/key-chain.hpp	/^  std::unique_ptr<SecPublicInfo> m_pib;$/;"	m	class:ndn::security::KeyChain
m_policy	lp/cache-policy.hpp	/^  CachePolicyType m_policy;$/;"	m	class:ndn::lp::CachePolicyType::CachePolicy
m_port	transport/tcp-transport.hpp	/^  std::string m_port;$/;"	m	class:ndn::TcpTransport
m_port	util/face-uri.hpp	/^  std::string m_port;$/;"	m	class:ndn::util::FaceUri
m_prefix	detail/registered-prefix.hpp	/^  Name m_prefix;$/;"	m	class:ndn::RegisteredPrefix
m_prefix	interest-filter.hpp	/^  Name m_prefix;$/;"	m	class:ndn::InterestFilter
m_prefix	management/nfd-command-options.hpp	/^  Name m_prefix;$/;"	m	class:ndn::nfd::CommandOptions
m_prefix	management/nfd-fib-entry.hpp	/^  Name m_prefix;$/;"	m	class:ndn::nfd::FibEntry
m_prefix	management/nfd-rib-entry.hpp	/^  Name m_prefix;$/;"	m	class:ndn::nfd::RibEntry
m_prefix	mgmt/status-dataset-context.hpp	/^  Name m_prefix;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_prefix	util/notification-stream.hpp	/^  const Name m_prefix;$/;"	m	class:ndn::util::NotificationStream
m_prefix	util/notification-subscriber.hpp	/^  Name m_prefix;$/;"	m	class:ndn::util::NotificationSubscriber
m_primaryBackrefManager	util/regex/regex-top-matcher.hpp	/^  shared_ptr<RegexBackrefManager> m_primaryBackrefManager;$/;"	m	class:ndn::RegexTopMatcher
m_primaryMatcher	util/regex/regex-top-matcher.hpp	/^  shared_ptr<RegexPatternListMatcher> m_primaryMatcher;$/;"	m	class:ndn::RegexTopMatcher
m_processEventsTimeoutEvent	detail/face-impl.hpp	/^  util::scheduler::ScopedEventId m_processEventsTimeoutEvent;$/;"	m	class:ndn::Face::Impl
m_providerTable	util/face-uri.cpp	/^  CanonizeProviderTable& m_providerTable;$/;"	m	class:ndn::util::CanonizeProviderTableInitializer	file:
m_pseudoMatchers	util/regex/regex-component-matcher.hpp	/^  std::vector<shared_ptr<RegexPseudoMatcher> > m_pseudoMatchers;$/;"	m	class:ndn::RegexComponentMatcher
m_ptr	util/in-memory-storage.hpp	/^    const Data* m_ptr;$/;"	m	class:ndn::util::InMemoryStorage::const_iterator
m_publicKeyName	security/identity-certificate.hpp	/^  Name m_publicKeyName;$/;"	m	class:ndn::IdentityCertificate
m_publisherPublicKeyLocator	selectors.hpp	/^  KeyLocator m_publisherPublicKeyLocator;$/;"	m	class:ndn::Selectors
m_reason	lp/nack-header.hpp	/^  NackReason m_reason;$/;"	m	class:ndn::lp::NackReason::NackHeader
m_receiveCallback	transport/transport.hpp	/^  ReceiveCallback m_receiveCallback;$/;"	m	class:ndn::Transport
m_refreshPeriod	security/validator-config.hpp	/^    time::nanoseconds m_refreshPeriod;$/;"	m	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
m_regex	security/conf/filter.hpp	/^  Regex m_regex;$/;"	m	class:ndn::security::conf::RegexNameFilter
m_regex	security/conf/key-locator-checker.hpp	/^  Regex m_regex;$/;"	m	class:ndn::security::conf::RegexKeyLocatorNameChecker
m_regexFilter	interest-filter.hpp	/^  shared_ptr<RegexPatternListMatcher> m_regexFilter;$/;"	m	class:ndn::InterestFilter
m_registeredPrefixTable	detail/face-impl.hpp	/^  RegisteredPrefixTable m_registeredPrefixTable;$/;"	m	class:ndn::Face::Impl
m_relation	security/conf/filter.hpp	/^  Relation m_relation;$/;"	m	class:ndn::security::conf::RelationNameFilter
m_relation	security/conf/key-locator-checker.hpp	/^  KeyLocatorChecker::Relation m_relation;$/;"	m	class:ndn::security::conf::RelationKeyLocatorNameChecker
m_remoteUri	management/nfd-face-query-filter.hpp	/^  std::string m_remoteUri;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_remoteUri	management/nfd-face-traits.hpp	/^  std::string m_remoteUri;$/;"	m	class:ndn::nfd::FaceTraits
m_repeatMax	util/regex/regex-repeat-matcher.hpp	/^  size_t m_repeatMax;$/;"	m	class:ndn::RegexRepeatMatcher
m_repeatMin	util/regex/regex-repeat-matcher.hpp	/^  size_t m_repeatMin;$/;"	m	class:ndn::RegexRepeatMatcher
m_requestValidator	management/nfd-control-command.hpp	/^  FieldValidator m_requestValidator;$/;"	m	class:ndn::nfd::ControlCommand
m_required	management/nfd-control-command.hpp	/^    std::vector<bool> m_required;$/;"	m	class:ndn::nfd::ControlCommand::FieldValidator
m_resolveTimeout	util/dns.cpp	/^  EventId m_resolveTimeout;$/;"	m	class:ndn::dns::Resolver	file:
m_resolver	util/dns.cpp	/^  BoostResolver m_resolver;$/;"	m	class:ndn::dns::Resolver	file:
m_responseValidator	management/nfd-control-command.hpp	/^  FieldValidator m_responseValidator;$/;"	m	class:ndn::nfd::ControlCommand
m_routes	management/nfd-rib-entry.hpp	/^  RouteList m_routes;$/;"	m	class:ndn::nfd::RibEntry
m_scheduledEvent	util/scheduler.hpp	/^  EventQueue::iterator m_scheduledEvent;$/;"	m	class:ndn::util::scheduler::Scheduler
m_scheduledTime	util/scheduler.hpp	/^    time::steady_clock::TimePoint m_scheduledTime;$/;"	m	struct:ndn::util::scheduler::Scheduler::EventInfo
m_scheduler	detail/face-impl.hpp	/^  util::Scheduler m_scheduler;$/;"	m	class:ndn::Face::Impl
m_scheduler	security/certificate-cache-ttl.hpp	/^  Scheduler m_scheduler;$/;"	m	class:ndn::CertificateCacheTtl
m_scheduler	util/dns.cpp	/^  Scheduler m_scheduler;$/;"	m	class:ndn::dns::Resolver	file:
m_scheduler	util/scheduler-scoped-event-id.hpp	/^  Scheduler* m_scheduler; \/\/ pointer to allow move semantics$/;"	m	class:ndn::util::scheduler::ScopedEventId
m_scheme	security/pib.hpp	/^  std::string m_scheme;$/;"	m	class:ndn::security::Pib
m_scheme	util/face-uri.hpp	/^  std::string m_scheme;$/;"	m	class:ndn::util::FaceUri
m_secondaryBackrefManager	util/regex/regex-top-matcher.hpp	/^  shared_ptr<RegexBackrefManager> m_secondaryBackrefManager;$/;"	m	class:ndn::RegexTopMatcher
m_secondaryMatcher	util/regex/regex-top-matcher.hpp	/^  shared_ptr<RegexPatternListMatcher> m_secondaryMatcher;$/;"	m	class:ndn::RegexTopMatcher
m_segmentNo	mgmt/status-dataset-context.hpp	/^  uint64_t m_segmentNo;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_selectedDelegationIndex	interest.hpp	/^  size_t m_selectedDelegationIndex;$/;"	m	class:ndn::Interest
m_selectors	interest.hpp	/^  Selectors m_selectors;$/;"	m	class:ndn::Interest
m_sequenceNo	util/notification-stream.hpp	/^  uint64_t m_sequenceNo;$/;"	m	class:ndn::util::NotificationStream
m_shouldValidate	security/validator-config.hpp	/^  bool m_shouldValidate;$/;"	m	class:ndn::ValidatorConfig
m_sigType	security/conf/checker.hpp	/^  uint32_t m_sigType;$/;"	m	class:ndn::security::conf::CustomizedChecker
m_sigType	security/conf/checker.hpp	/^  uint32_t m_sigType;$/;"	m	class:ndn::security::conf::FixedSignerChecker
m_signature	data.hpp	/^  Signature m_signature;$/;"	m	class:ndn::Data
m_signerExpand	security/sec-rule-relative.hpp	/^  const std::string m_signerExpand;$/;"	m	class:ndn::SecRuleRelative
m_signerNameRegex	security/sec-rule-relative.hpp	/^  Regex m_signerNameRegex;$/;"	m	class:ndn::SecRuleRelative
m_signerRegex	security/sec-rule-relative.hpp	/^  const std::string m_signerRegex;$/;"	m	class:ndn::SecRuleRelative
m_signerRegex	security/sec-rule-specific.hpp	/^  shared_ptr<Regex> m_signerRegex;$/;"	m	class:ndn::SecRuleSpecific
m_signers	security/conf/checker.hpp	/^  SignerList m_signers;$/;"	m	class:ndn::security::conf::FixedSignerChecker
m_signingInfo	management/nfd-command-options.hpp	/^  security::SigningInfo m_signingInfo;$/;"	m	class:ndn::nfd::CommandOptions
m_signingInfo	mgmt/dispatcher.hpp	/^  security::SigningInfo m_signingInfo;$/;"	m	class:ndn::mgmt::Dispatcher
m_size	encoding/block.hpp	/^  uint32_t m_size;$/;"	m	class:ndn::Block
m_size	security/key-params.hpp	/^  uint32_t m_size;$/;"	m	class:ndn::SimplePublicKeyParams
m_size	security/key-params.hpp	/^  uint32_t m_size;$/;"	m	class:ndn::SimpleSymmetricKeyParams
m_slots	util/signal-signal.hpp	/^  SlotList m_slots;$/;"	m	class:ndn::util::signal::Signal
m_socket	transport/stream-transport.hpp	/^  typename Protocol::socket m_socket;$/;"	m	class:ndn::StreamTransportImpl
m_startTimestamp	management/nfd-forwarder-status.hpp	/^  time::system_clock::TimePoint m_startTimestamp;$/;"	m	class:ndn::nfd::ForwarderStatus
m_state	mgmt/status-dataset-context.hpp	/^  State m_state;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_staticContainer	security/validator-config.hpp	/^  TrustAnchorContainer m_staticContainer;$/;"	m	class:ndn::ValidatorConfig
m_stepLimit	security/validator-config.hpp	/^  size_t m_stepLimit;$/;"	m	class:ndn::ValidatorConfig
m_stepLimit	security/validator-regex.hpp	/^  int m_stepLimit;$/;"	m	class:ndn::ValidatorRegex
m_stmt	util/sqlite3-statement.hpp	/^  sqlite3_stmt* m_stmt;$/;"	m	class:ndn::util::Sqlite3Statement
m_strategy	management/nfd-control-parameters.hpp	/^  Name                m_strategy;$/;"	m	class:ndn::nfd::ControlParameters
m_strategy	management/nfd-strategy-choice.hpp	/^  Name m_strategy; \/\/ strategy for the namespace$/;"	m	class:ndn::nfd::StrategyChoice
m_streams	mgmt/dispatcher.hpp	/^  std::unordered_map<Name, uint64_t> m_streams;$/;"	m	class:ndn::mgmt::Dispatcher
m_subBlocks	encoding/block.hpp	/^  mutable element_container m_subBlocks;$/;"	m	class:ndn::Block
m_subjectDescriptionList	security/certificate.hpp	/^  SubjectDescriptionList m_subjectDescriptionList;$/;"	m	class:ndn::Certificate
m_tags	tag-host.hpp	/^  mutable std::map<size_t, shared_ptr<Tag>> m_tags;$/;"	m	class:ndn::TagHost
m_text	mgmt/control-response.hpp	/^  std::string m_text;$/;"	m	class:ndn::mgmt::ControlResponse
m_timeout	management/nfd-command-options.hpp	/^  time::milliseconds m_timeout;$/;"	m	class:ndn::nfd::CommandOptions
m_timeoutCallback	detail/pending-interest.hpp	/^  TimeoutCallback m_timeoutCallback;$/;"	m	class:ndn::PendingInterest
m_timeoutEvent	detail/pending-interest.hpp	/^  util::scheduler::ScopedEventId m_timeoutEvent;$/;"	m	class:ndn::PendingInterest
m_topLevelPrefixes	mgmt/dispatcher.hpp	/^  std::unordered_map<Name, TopPrefixEntry> m_topLevelPrefixes;$/;"	m	class:ndn::mgmt::Dispatcher
m_tpm	security/key-chain.hpp	/^  std::unique_ptr<SecTpm> m_tpm;$/;"	m	class:ndn::security::KeyChain
m_transmissionQueue	transport/stream-transport.hpp	/^  TransmissionQueue m_transmissionQueue;$/;"	m	class:ndn::StreamTransportImpl
m_transport	face.hpp	/^  shared_ptr<Transport> m_transport;$/;"	m	class:ndn::Face
m_transport	transport/stream-transport.hpp	/^  BaseTransport& m_transport;$/;"	m	class:ndn::StreamTransportImpl
m_transport	util/dummy-client-face.hpp	/^  shared_ptr<Transport> m_transport;$/;"	m	class:ndn::util::DummyClientFace
m_trustAnchors	security/validator-regex.hpp	/^  std::map<Name, shared_ptr<IdentityCertificate> > m_trustAnchors;$/;"	m	class:ndn::ValidatorRegex
m_trustAnchorsForInterest	util/command-interest-validator.hpp	/^  std::map<Name, PublicKey> m_trustAnchorsForInterest;$/;"	m	class:ndn::CommandInterestValidator
m_trustScopeForInterest	util/command-interest-validator.hpp	/^  std::list<SecRuleSpecific> m_trustScopeForInterest;$/;"	m	class:ndn::CommandInterestValidator
m_type	encoding/block.hpp	/^  uint32_t m_type;$/;"	m	class:ndn::Block
m_type	key-locator.hpp	/^  Type m_type;$/;"	m	class:ndn::KeyLocator
m_type	meta-info.hpp	/^  uint32_t m_type;$/;"	m	class:ndn::MetaInfo
m_type	security/public-key.hpp	/^  KeyType m_type;$/;"	m	class:ndn::PublicKey
m_type	security/signing-info.hpp	/^  SignerType m_type;$/;"	m	class:ndn::security::SigningInfo
m_type	signature-info.hpp	/^  int32_t m_type;$/;"	m	class:ndn::SignatureInfo
m_type	util/regex/regex-matcher.hpp	/^  const RegexExprType m_type;$/;"	m	class:ndn::RegexMatcher
m_typeRef	security/sec-tpm-osx.cpp	/^  T m_typeRef;$/;"	m	class:ndn::CFReleaser	file:
m_unixSocket	transport/unix-transport.hpp	/^  std::string m_unixSocket;$/;"	m	class:ndn::UnixTransport
m_uri	management/nfd-control-parameters.hpp	/^  std::string         m_uri;$/;"	m	class:ndn::nfd::ControlParameters
m_uriScheme	management/nfd-face-query-filter.hpp	/^  std::string m_uriScheme;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_v4Scheme	util/face-uri.cpp	/^  std::string m_v4Scheme;$/;"	m	class:ndn::util::IpHostCanonizeProvider	file:
m_v6Scheme	util/face-uri.cpp	/^  std::string m_v6Scheme;$/;"	m	class:ndn::util::IpHostCanonizeProvider	file:
m_value	security/certificate-subject-description.hpp	/^  std::string m_value;$/;"	m	class:ndn::CertificateSubjectDescription
m_value	signature.hpp	/^  mutable Block m_value;$/;"	m	class:ndn::Signature
m_value_begin	encoding/block.hpp	/^  Buffer::const_iterator m_value_begin;$/;"	m	class:ndn::Block
m_value_end	encoding/block.hpp	/^  Buffer::const_iterator m_value_end;$/;"	m	class:ndn::Block
m_verb	management/nfd-control-command.hpp	/^  name::Component m_verb;$/;"	m	class:ndn::nfd::ControlCommand
m_verifyPolicies	security/validator-regex.hpp	/^  RuleList m_verifyPolicies;$/;"	m	class:ndn::ValidatorRegex
m_verifySegment	util/segment-fetcher.hpp	/^  VerifySegment m_verifySegment;$/;"	m	class:ndn::util::SegmentFetcher
m_wire	data.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::Data
m_wire	exclude.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::Exclude
m_wire	interest.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::Interest
m_wire	key-locator.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::KeyLocator
m_wire	lp/cache-policy.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::lp::CachePolicyType::CachePolicy
m_wire	lp/nack-header.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::lp::NackReason::NackHeader
m_wire	lp/packet.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::lp::Packet
m_wire	management/nfd-channel-status.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::ChannelStatus
m_wire	management/nfd-control-parameters.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::ControlParameters
m_wire	management/nfd-face-event-notification.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::FaceEventNotification
m_wire	management/nfd-face-query-filter.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_wire	management/nfd-face-status.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::FaceStatus
m_wire	management/nfd-fib-entry.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::FibEntry
m_wire	management/nfd-fib-entry.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::NextHopRecord
m_wire	management/nfd-forwarder-status.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::ForwarderStatus
m_wire	management/nfd-rib-entry.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::RibEntry
m_wire	management/nfd-rib-entry.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::Route
m_wire	management/nfd-strategy-choice.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::StrategyChoice
m_wire	meta-info.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::MetaInfo
m_wire	mgmt/control-response.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::mgmt::ControlResponse
m_wire	security/additional-description.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::security::AdditionalDescription
m_wire	security/secured-bag.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::SecuredBag
m_wire	security/validity-period.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::security::ValidityPeriod
m_wire	selectors.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::Selectors
m_wire	signature-info.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::SignatureInfo
maintainMapping	security/sec-tpm-file.cpp	/^  maintainMapping(const string& keyName)$/;"	f	class:ndn::SecTpmFile::Impl
makeAcceptAllAuthorization	mgmt/dispatcher.cpp	/^makeAcceptAllAuthorization()$/;"	f	namespace:ndn::mgmt
makeBinaryBlock	encoding/block-helpers.cpp	/^makeBinaryBlock(uint32_t type, const char* value, size_t length)$/;"	f	namespace:ndn::encoding
makeBinaryBlock	encoding/block-helpers.cpp	/^makeBinaryBlock(uint32_t type, const uint8_t* value, size_t length)$/;"	f	namespace:ndn::encoding
makeBinaryBlock	encoding/block-helpers.hpp	/^makeBinaryBlock(uint32_t type, Iterator first, Iterator last)$/;"	f	namespace:ndn::encoding
makeBlock	encoding/block-helpers.hpp	/^  makeBlock(uint32_t type, Iterator first, Iterator last)$/;"	f	class:ndn::encoding::DataBlockFast
makeBlock	encoding/block-helpers.hpp	/^  makeBlock(uint32_t type, Iterator first, Iterator last)$/;"	f	class:ndn::encoding::DataBlockSlow
makeDummyClientFace	util/dummy-client-face.cpp	/^makeDummyClientFace(boost::asio::io_service& ioService,$/;"	f	namespace:ndn::util
makeDummyClientFace	util/dummy-client-face.cpp	/^makeDummyClientFace(const DummyClientFace::Options& options)$/;"	f	namespace:ndn::util
makeEmptyBlock	encoding/block-helpers.cpp	/^makeEmptyBlock(uint32_t type)$/;"	f	namespace:ndn::encoding
makeNestedBlock	encoding/block-helpers.hpp	/^makeNestedBlock(uint32_t type, const U& value)$/;"	f	namespace:ndn::encoding
makeNonNegativeIntegerBlock	encoding/block-helpers.cpp	/^makeNonNegativeIntegerBlock(uint32_t type, uint64_t value)$/;"	f	namespace:ndn::encoding
makeSigningInfoFromIdentityCertificate	management/nfd-command-options.cpp	/^makeSigningInfoFromIdentityCertificate(const Name& certificateName)$/;"	f	namespace:ndn::nfd
makeStringBlock	encoding/block-helpers.cpp	/^makeStringBlock(uint32_t type, const std::string& value)$/;"	f	namespace:ndn::encoding
match	security/conf/filter.hpp	/^  match(const Data& data)$/;"	f	class:ndn::security::conf::Filter
match	security/conf/filter.hpp	/^  match(const Interest& interest)$/;"	f	class:ndn::security::conf::Filter
match	security/conf/rule.hpp	/^  match(const Packet& packet)$/;"	f	class:ndn::security::conf::Rule
match	util/regex/regex-component-matcher.hpp	/^RegexComponentMatcher::match(const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexComponentMatcher
match	util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::match(const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexComponentSetMatcher
match	util/regex/regex-matcher.hpp	/^RegexMatcher::match(const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexMatcher
match	util/regex/regex-repeat-matcher.hpp	/^RegexRepeatMatcher::match(const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexRepeatMatcher
match	util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::match(const Name& name)$/;"	f	class:ndn::RegexTopMatcher
match	util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::match(const Name& name, size_t, size_t)$/;"	f	class:ndn::RegexTopMatcher
matchDataName	security/sec-rule-relative.cpp	/^SecRuleRelative::matchDataName(const Data& data)$/;"	f	class:ndn::SecRuleRelative
matchDataName	security/sec-rule-specific.cpp	/^SecRuleSpecific::matchDataName(const Data& data)$/;"	f	class:ndn::SecRuleSpecific
matchName	security/conf/filter.hpp	/^  matchName(const Name& name)$/;"	f	class:ndn::security::conf::RegexNameFilter
matchName	security/conf/filter.hpp	/^  matchName(const Name& name)$/;"	f	class:ndn::security::conf::RelationNameFilter
matchSignerName	security/sec-rule-relative.cpp	/^SecRuleRelative::matchSignerName(const Data& data)$/;"	f	class:ndn::SecRuleRelative
matchSignerName	security/sec-rule-specific.cpp	/^SecRuleSpecific::matchSignerName(const Data& data)$/;"	f	class:ndn::SecRuleSpecific
matchesData	interest.cpp	/^Interest::matchesData(const Data& data) const$/;"	f	class:ndn::Interest
matchesName	interest.cpp	/^Interest::matchesName(const Name& name) const$/;"	f	class:ndn::Interest
mgmt	mgmt/control-parameters.hpp	/^namespace mgmt {$/;"	n	namespace:ndn
mgmt	mgmt/control-response.cpp	/^namespace mgmt {$/;"	n	namespace:ndn	file:
mgmt	mgmt/control-response.hpp	/^namespace mgmt {$/;"	n	namespace:ndn
mgmt	mgmt/dispatcher.cpp	/^namespace mgmt {$/;"	n	namespace:ndn	file:
mgmt	mgmt/dispatcher.hpp	/^namespace mgmt {$/;"	n	namespace:ndn
mgmt	mgmt/status-dataset-context.cpp	/^namespace mgmt {$/;"	n	namespace:ndn	file:
mgmt	mgmt/status-dataset-context.hpp	/^namespace mgmt {$/;"	n	namespace:ndn
monotonic_deadline_timer	util/monotonic_deadline_timer.hpp	/^typedef boost::asio::basic_deadline_timer<time::steady_clock> monotonic_deadline_timer;$/;"	t	namespace:ndn
nackPendingInterests	detail/face-impl.hpp	/^  nackPendingInterests(const lp::Nack& nack)$/;"	f	class:ndn::Face::Impl
name	name-component.cpp	/^namespace name {$/;"	n	namespace:ndn	file:
name	name-component.hpp	/^namespace name {$/;"	n	namespace:ndn
ndn	common.hpp	/^namespace ndn {$/;"	n
ndn	data.cpp	/^namespace ndn {$/;"	n	file:
ndn	data.hpp	/^namespace ndn {$/;"	n
ndn	detail/container-with-on-empty-signal.hpp	/^namespace ndn {$/;"	n
ndn	detail/face-impl.hpp	/^namespace ndn {$/;"	n
ndn	detail/interest-filter-record.hpp	/^namespace ndn {$/;"	n
ndn	detail/pending-interest.hpp	/^namespace ndn {$/;"	n
ndn	detail/registered-prefix.hpp	/^namespace ndn {$/;"	n
ndn	encoding/block-helpers.cpp	/^namespace ndn {$/;"	n	file:
ndn	encoding/block-helpers.hpp	/^namespace ndn {$/;"	n
ndn	encoding/block.cpp	/^namespace ndn {$/;"	n	file:
ndn	encoding/block.hpp	/^namespace ndn {$/;"	n
ndn	encoding/buffer-stream.hpp	/^namespace ndn {$/;"	n
ndn	encoding/buffer.cpp	/^namespace ndn {$/;"	n	file:
ndn	encoding/buffer.hpp	/^namespace ndn {$/;"	n
ndn	encoding/cryptopp/asn_ext.cpp	/^namespace ndn {$/;"	n	file:
ndn	encoding/cryptopp/asn_ext.hpp	/^namespace ndn {$/;"	n
ndn	encoding/encoder.cpp	/^namespace ndn {$/;"	n	file:
ndn	encoding/encoder.hpp	/^namespace ndn {$/;"	n
ndn	encoding/encoding-buffer-fwd.hpp	/^namespace ndn {$/;"	n
ndn	encoding/encoding-buffer.hpp	/^namespace ndn {$/;"	n
ndn	encoding/estimator.cpp	/^namespace ndn {$/;"	n	file:
ndn	encoding/estimator.hpp	/^namespace ndn {$/;"	n
ndn	encoding/nfd-constants.cpp	/^namespace ndn {$/;"	n	file:
ndn	encoding/nfd-constants.hpp	/^namespace ndn {$/;"	n
ndn	encoding/oid.cpp	/^namespace ndn {$/;"	n	file:
ndn	encoding/oid.hpp	/^namespace ndn {$/;"	n
ndn	encoding/tlv-nfd.hpp	/^namespace ndn {$/;"	n
ndn	encoding/tlv-security.hpp	/^namespace ndn {$/;"	n
ndn	encoding/tlv.hpp	/^namespace ndn {$/;"	n
ndn	exclude.cpp	/^namespace ndn {$/;"	n	file:
ndn	exclude.hpp	/^namespace ndn {$/;"	n
ndn	face.cpp	/^namespace ndn {$/;"	n	file:
ndn	face.hpp	/^namespace ndn {$/;"	n
ndn	interest-filter.cpp	/^namespace ndn {$/;"	n	file:
ndn	interest-filter.hpp	/^namespace ndn {$/;"	n
ndn	interest.cpp	/^namespace ndn {$/;"	n	file:
ndn	interest.hpp	/^namespace ndn {$/;"	n
ndn	key-locator.cpp	/^namespace ndn {$/;"	n	file:
ndn	key-locator.hpp	/^namespace ndn {$/;"	n
ndn	link.cpp	/^namespace ndn {$/;"	n	file:
ndn	link.hpp	/^namespace ndn {$/;"	n
ndn	lp/cache-policy.cpp	/^namespace ndn {$/;"	n	file:
ndn	lp/cache-policy.hpp	/^namespace ndn {$/;"	n
ndn	lp/detail/field-decl.hpp	/^namespace ndn {$/;"	n
ndn	lp/detail/field-info.cpp	/^namespace ndn {$/;"	n	file:
ndn	lp/detail/field-info.hpp	/^namespace ndn {$/;"	n
ndn	lp/field.hpp	/^namespace ndn {$/;"	n
ndn	lp/fields.hpp	/^namespace ndn {$/;"	n
ndn	lp/nack-header.cpp	/^namespace ndn {$/;"	n	file:
ndn	lp/nack-header.hpp	/^namespace ndn {$/;"	n
ndn	lp/nack.cpp	/^namespace ndn {$/;"	n	file:
ndn	lp/nack.hpp	/^namespace ndn {$/;"	n
ndn	lp/packet.cpp	/^namespace ndn {$/;"	n	file:
ndn	lp/packet.hpp	/^namespace ndn {$/;"	n
ndn	lp/sequence.hpp	/^namespace ndn {$/;"	n
ndn	lp/tlv.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-channel-status.cpp	/^namespace ndn {$/;"	n	file:
ndn	management/nfd-channel-status.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-command-options.cpp	/^namespace ndn {$/;"	n	file:
ndn	management/nfd-command-options.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-control-command.cpp	/^namespace ndn {$/;"	n	file:
ndn	management/nfd-control-command.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-control-parameters.cpp	/^namespace ndn {$/;"	n	file:
ndn	management/nfd-control-parameters.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-control-response.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-controller.cpp	/^namespace ndn {$/;"	n	file:
ndn	management/nfd-controller.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-face-event-notification.cpp	/^namespace ndn {$/;"	n	file:
ndn	management/nfd-face-event-notification.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-face-monitor.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-face-query-filter.cpp	/^namespace ndn {$/;"	n	file:
ndn	management/nfd-face-query-filter.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-face-status.cpp	/^namespace ndn {$/;"	n	file:
ndn	management/nfd-face-status.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-face-traits.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-fib-entry.cpp	/^namespace ndn {$/;"	n	file:
ndn	management/nfd-fib-entry.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-forwarder-status.cpp	/^namespace ndn {$/;"	n	file:
ndn	management/nfd-forwarder-status.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-local-control-header.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-rib-entry.cpp	/^namespace ndn {$/;"	n	file:
ndn	management/nfd-rib-entry.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-rib-flags.hpp	/^namespace ndn {$/;"	n
ndn	management/nfd-strategy-choice.cpp	/^namespace ndn {$/;"	n	file:
ndn	management/nfd-strategy-choice.hpp	/^namespace ndn {$/;"	n
ndn	meta-info.cpp	/^namespace ndn {$/;"	n	file:
ndn	meta-info.hpp	/^namespace ndn {$/;"	n
ndn	mgmt/control-parameters.hpp	/^namespace ndn {$/;"	n
ndn	mgmt/control-response.cpp	/^namespace ndn {$/;"	n	file:
ndn	mgmt/control-response.hpp	/^namespace ndn {$/;"	n
ndn	mgmt/dispatcher.cpp	/^namespace ndn {$/;"	n	file:
ndn	mgmt/dispatcher.hpp	/^namespace ndn {$/;"	n
ndn	mgmt/status-dataset-context.cpp	/^namespace ndn {$/;"	n	file:
ndn	mgmt/status-dataset-context.hpp	/^namespace ndn {$/;"	n
ndn	name-component.cpp	/^namespace ndn {$/;"	n	file:
ndn	name-component.hpp	/^namespace ndn {$/;"	n
ndn	name.cpp	/^namespace ndn {$/;"	n	file:
ndn	name.hpp	/^namespace ndn {$/;"	n
ndn	security/additional-description.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/additional-description.hpp	/^namespace ndn {$/;"	n
ndn	security/certificate-cache-ttl.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/certificate-cache-ttl.hpp	/^namespace ndn {$/;"	n
ndn	security/certificate-cache.hpp	/^namespace ndn {$/;"	n
ndn	security/certificate-container.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/certificate-container.hpp	/^namespace ndn {$/;"	n
ndn	security/certificate-extension.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/certificate-extension.hpp	/^namespace ndn {$/;"	n
ndn	security/certificate-subject-description.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/certificate-subject-description.hpp	/^namespace ndn {$/;"	n
ndn	security/certificate.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/certificate.hpp	/^namespace ndn {$/;"	n
ndn	security/conf/checker.hpp	/^namespace ndn {$/;"	n
ndn	security/conf/common.hpp	/^namespace ndn {$/;"	n
ndn	security/conf/filter.hpp	/^namespace ndn {$/;"	n
ndn	security/conf/key-locator-checker.hpp	/^namespace ndn {$/;"	n
ndn	security/conf/rule.hpp	/^namespace ndn {$/;"	n
ndn	security/digest-sha256.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/digest-sha256.hpp	/^namespace ndn {$/;"	n
ndn	security/identity-certificate.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/identity-certificate.hpp	/^namespace ndn {$/;"	n
ndn	security/identity-container.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/identity-container.hpp	/^namespace ndn {$/;"	n
ndn	security/identity.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/identity.hpp	/^namespace ndn {$/;"	n
ndn	security/key-chain.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/key-chain.hpp	/^namespace ndn {$/;"	n
ndn	security/key-container.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/key-container.hpp	/^namespace ndn {$/;"	n
ndn	security/key-params.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/key-params.hpp	/^namespace ndn {$/;"	n
ndn	security/key.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/key.hpp	/^namespace ndn {$/;"	n
ndn	security/pib-impl.hpp	/^namespace ndn {$/;"	n
ndn	security/pib-memory.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/pib-memory.hpp	/^namespace ndn {$/;"	n
ndn	security/pib-sqlite3.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/pib-sqlite3.hpp	/^namespace ndn {$/;"	n
ndn	security/pib.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/pib.hpp	/^namespace ndn {$/;"	n
ndn	security/public-key.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/public-key.hpp	/^namespace ndn {$/;"	n
ndn	security/sec-public-info-sqlite3.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/sec-public-info-sqlite3.hpp	/^namespace ndn {$/;"	n
ndn	security/sec-public-info.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/sec-public-info.hpp	/^namespace ndn {$/;"	n
ndn	security/sec-rule-relative.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/sec-rule-relative.hpp	/^namespace ndn {$/;"	n
ndn	security/sec-rule-specific.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/sec-rule-specific.hpp	/^namespace ndn {$/;"	n
ndn	security/sec-rule.hpp	/^namespace ndn {$/;"	n
ndn	security/sec-tpm-file.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/sec-tpm-file.hpp	/^namespace ndn {$/;"	n
ndn	security/sec-tpm-osx.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/sec-tpm-osx.hpp	/^namespace ndn {$/;"	n
ndn	security/sec-tpm.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/sec-tpm.hpp	/^namespace ndn {$/;"	n
ndn	security/secured-bag.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/secured-bag.hpp	/^namespace ndn {$/;"	n
ndn	security/security-common.hpp	/^namespace ndn {$/;"	n
ndn	security/signature-sha256-with-ecdsa.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/signature-sha256-with-ecdsa.hpp	/^namespace ndn {$/;"	n
ndn	security/signature-sha256-with-rsa.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/signature-sha256-with-rsa.hpp	/^namespace ndn {$/;"	n
ndn	security/signing-helpers.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/signing-helpers.hpp	/^namespace ndn {$/;"	n
ndn	security/signing-info.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/signing-info.hpp	/^namespace ndn {$/;"	n
ndn	security/validation-request.hpp	/^namespace ndn {$/;"	n
ndn	security/validator-config.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/validator-config.hpp	/^namespace ndn {$/;"	n
ndn	security/validator-null.hpp	/^namespace ndn {$/;"	n
ndn	security/validator-regex.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/validator-regex.hpp	/^namespace ndn {$/;"	n
ndn	security/validator.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/validator.hpp	/^namespace ndn {$/;"	n
ndn	security/validity-period.cpp	/^namespace ndn {$/;"	n	file:
ndn	security/validity-period.hpp	/^namespace ndn {$/;"	n
ndn	selectors.cpp	/^namespace ndn {$/;"	n	file:
ndn	selectors.hpp	/^namespace ndn {$/;"	n
ndn	signature-info.cpp	/^namespace ndn {$/;"	n	file:
ndn	signature-info.hpp	/^namespace ndn {$/;"	n
ndn	signature.cpp	/^namespace ndn {$/;"	n	file:
ndn	signature.hpp	/^namespace ndn {$/;"	n
ndn	tag-host.hpp	/^namespace ndn {$/;"	n
ndn	tag.hpp	/^namespace ndn {$/;"	n
ndn	transport/stream-transport.hpp	/^namespace ndn {$/;"	n
ndn	transport/tcp-transport.cpp	/^namespace ndn {$/;"	n	file:
ndn	transport/tcp-transport.hpp	/^namespace ndn {$/;"	n
ndn	transport/transport.hpp	/^namespace ndn {$/;"	n
ndn	transport/unix-transport.cpp	/^namespace ndn {$/;"	n	file:
ndn	transport/unix-transport.hpp	/^namespace ndn {$/;"	n
ndn	util/backports.hpp	/^namespace ndn {$/;"	n
ndn	util/command-interest-generator.hpp	/^namespace ndn {$/;"	n
ndn	util/command-interest-validator.hpp	/^namespace ndn {$/;"	n
ndn	util/concepts.hpp	/^namespace ndn {$/;"	n
ndn	util/config-file.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/config-file.hpp	/^namespace ndn {$/;"	n
ndn	util/crypto.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/crypto.hpp	/^namespace ndn {$/;"	n
ndn	util/digest.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/digest.hpp	/^namespace ndn {$/;"	n
ndn	util/dns.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/dns.hpp	/^namespace ndn {$/;"	n
ndn	util/dummy-client-face.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/dummy-client-face.hpp	/^namespace ndn {$/;"	n
ndn	util/ethernet.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/ethernet.hpp	/^namespace ndn {$/;"	n
ndn	util/face-uri.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/face-uri.hpp	/^namespace ndn {$/;"	n
ndn	util/in-memory-storage-entry.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/in-memory-storage-entry.hpp	/^namespace ndn {$/;"	n
ndn	util/in-memory-storage-fifo.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/in-memory-storage-fifo.hpp	/^namespace ndn {$/;"	n
ndn	util/in-memory-storage-lfu.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/in-memory-storage-lfu.hpp	/^namespace ndn {$/;"	n
ndn	util/in-memory-storage-lru.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/in-memory-storage-lru.hpp	/^namespace ndn {$/;"	n
ndn	util/in-memory-storage-persistent.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/in-memory-storage-persistent.hpp	/^namespace ndn {$/;"	n
ndn	util/in-memory-storage.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/in-memory-storage.hpp	/^namespace ndn {$/;"	n
ndn	util/indented-stream.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/indented-stream.hpp	/^namespace ndn {$/;"	n
ndn	util/io.hpp	/^namespace ndn {$/;"	n
ndn	util/monotonic_deadline_timer.hpp	/^namespace ndn {$/;"	n
ndn	util/network-monitor.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/network-monitor.hpp	/^namespace ndn {$/;"	n
ndn	util/notification-stream.hpp	/^namespace ndn {$/;"	n
ndn	util/notification-subscriber.hpp	/^namespace ndn {$/;"	n
ndn	util/random.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/random.hpp	/^namespace ndn {$/;"	n
ndn	util/regex.hpp	/^namespace ndn {$/;"	n
ndn	util/regex/regex-backref-manager.hpp	/^namespace ndn {$/;"	n
ndn	util/regex/regex-backref-matcher.hpp	/^namespace ndn {$/;"	n
ndn	util/regex/regex-component-matcher.hpp	/^namespace ndn {$/;"	n
ndn	util/regex/regex-component-set-matcher.hpp	/^namespace ndn {$/;"	n
ndn	util/regex/regex-matcher.hpp	/^namespace ndn {$/;"	n
ndn	util/regex/regex-pattern-list-matcher.hpp	/^namespace ndn {$/;"	n
ndn	util/regex/regex-pseudo-matcher.hpp	/^namespace ndn {$/;"	n
ndn	util/regex/regex-repeat-matcher.hpp	/^namespace ndn {$/;"	n
ndn	util/regex/regex-top-matcher.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/regex/regex-top-matcher.hpp	/^namespace ndn {$/;"	n
ndn	util/scheduler-scoped-event-id.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/scheduler-scoped-event-id.hpp	/^namespace ndn {$/;"	n
ndn	util/scheduler.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/scheduler.hpp	/^namespace ndn {$/;"	n
ndn	util/segment-fetcher.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/segment-fetcher.hpp	/^namespace ndn {$/;"	n
ndn	util/signal-connection.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/signal-connection.hpp	/^namespace ndn {$/;"	n
ndn	util/signal-emit.hpp	/^namespace ndn {$/;"	n
ndn	util/signal-scoped-connection.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/signal-scoped-connection.hpp	/^namespace ndn {$/;"	n
ndn	util/signal-signal.hpp	/^namespace ndn {$/;"	n
ndn	util/sqlite3-statement.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/sqlite3-statement.hpp	/^namespace ndn {$/;"	n
ndn	util/string-helper.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/string-helper.hpp	/^namespace ndn {$/;"	n
ndn	util/time-custom-clock.hpp	/^namespace ndn {$/;"	n
ndn	util/time-unit-test-clock.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/time-unit-test-clock.hpp	/^namespace ndn {$/;"	n
ndn	util/time.cpp	/^namespace ndn {$/;"	n	file:
ndn	util/time.hpp	/^namespace ndn {$/;"	n
ndn_digestSha256	util/crypto.cpp	/^void ndn_digestSha256(const uint8_t* data, size_t dataLength, uint8_t* digest)$/;"	f	namespace:ndn
nestedBlock	encoding/block-helpers.hpp	/^nestedBlock(uint32_t type, const U& value)$/;"	f	namespace:ndn::encoding
nfd	encoding/nfd-constants.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	encoding/nfd-constants.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	encoding/tlv-nfd.hpp	/^namespace nfd {$/;"	n	namespace:ndn::tlv
nfd	face.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-channel-status.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	management/nfd-channel-status.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-command-options.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	management/nfd-command-options.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-control-command.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	management/nfd-control-command.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-control-parameters.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	management/nfd-control-parameters.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-control-response.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-controller.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	management/nfd-controller.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-face-event-notification.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	management/nfd-face-event-notification.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-face-monitor.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-face-query-filter.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	management/nfd-face-query-filter.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-face-status.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	management/nfd-face-status.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-face-traits.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-fib-entry.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	management/nfd-fib-entry.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-forwarder-status.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	management/nfd-forwarder-status.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-local-control-header.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-rib-entry.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	management/nfd-rib-entry.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-rib-flags.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	management/nfd-strategy-choice.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	management/nfd-strategy-choice.hpp	/^namespace nfd {$/;"	n	namespace:ndn
noexcept	util/ethernet.hpp	/^  operator()(const ndn::util::ethernet::Address& a) const noexcept;$/;"	m	struct:std::hash
noexcept	util/scheduler-scoped-event-id.hpp	/^  ScopedEventId(ScopedEventId&& other) noexcept;$/;"	m	class:ndn::util::scheduler::ScopedEventId
noexcept	util/signal-scoped-connection.hpp	/^  ScopedConnection(ScopedConnection&& other) noexcept;$/;"	m	class:ndn::util::signal::ScopedConnection
noexcept	util/time.hpp	/^  from_time_t(std::time_t t) noexcept;$/;"	m	class:ndn::time::system_clock
noexcept	util/time.hpp	/^  now() noexcept;$/;"	m	class:ndn::time::steady_clock
noexcept	util/time.hpp	/^  now() noexcept;$/;"	m	class:ndn::time::system_clock
noexcept	util/time.hpp	/^  to_time_t(const time_point& t) noexcept;$/;"	m	class:ndn::time::system_clock
nonNegativeIntegerBlock	encoding/block-helpers.hpp	/^nonNegativeIntegerBlock(uint32_t type, uint64_t value)$/;"	f	namespace:ndn::encoding
nop	util/face-uri.cpp	/^nop()$/;"	f	namespace:ndn::util
now	util/monotonic_deadline_timer.hpp	/^  now()$/;"	f	struct:boost::asio::time_traits
npos	name.cpp	/^const size_t Name::npos = std::numeric_limits<size_t>::max();$/;"	m	class:ndn::Name	file:
npos	name.hpp	/^  static const size_t npos;$/;"	m	class:ndn::Name
oid	encoding/oid.cpp	/^namespace oid {$/;"	n	namespace:ndn	file:
oid	encoding/oid.hpp	/^namespace oid {$/;"	n	namespace:ndn
onCertFailed	security/validator-config.cpp	/^ValidatorConfig::onCertFailed(const shared_ptr<const Data>& signCertificate,$/;"	f	class:ndn::ValidatorConfig
onCertValidated	security/validator-config.cpp	/^ValidatorConfig::onCertValidated(const shared_ptr<const Data>& signCertificate,$/;"	f	class:ndn::ValidatorConfig
onCertificateValidated	security/validator-regex.cpp	/^ValidatorRegex::onCertificateValidated(const shared_ptr<const Data>& signCertificate,$/;"	f	class:ndn::ValidatorRegex
onCertificateValidationFailed	security/validator-regex.cpp	/^ValidatorRegex::onCertificateValidationFailed(const shared_ptr<const Data>& signCertificate,$/;"	f	class:ndn::ValidatorRegex
onChanged	data.cpp	/^Data::onChanged()$/;"	f	class:ndn::Data
onConfigRule	security/validator-config.cpp	/^ValidatorConfig::onConfigRule(const security::conf::ConfigSection& configSection,$/;"	f	class:ndn::ValidatorConfig
onConfigTrustAnchor	security/validator-config.cpp	/^ValidatorConfig::onConfigTrustAnchor(const security::conf::ConfigSection& configSection,$/;"	f	class:ndn::ValidatorConfig
onData	security/validator.cpp	/^Validator::onData(const Interest& interest,$/;"	f	class:ndn::Validator
onDecodeError	util/notification-subscriber.hpp	/^  signal::Signal<NotificationSubscriber, Data> onDecodeError;$/;"	m	class:ndn::util::NotificationSubscriber
onDnsFailure	util/face-uri.cpp	/^  onDnsFailure(shared_ptr<FaceUri> faceUri, const FaceUri::CanonizeFailureCallback& onFailure,$/;"	f	class:ndn::util::IpHostCanonizeProvider	file:
onDnsSuccess	util/face-uri.cpp	/^  onDnsSuccess(shared_ptr<FaceUri> faceUri,$/;"	f	class:ndn::util::IpHostCanonizeProvider	file:
onEmpty	detail/container-with-on-empty-signal.hpp	/^  util::Signal<ContainerWithOnEmptySignal<T>> onEmpty;$/;"	m	class:ndn::ContainerWithOnEmptySignal
onEmptyPitOrNoRegisteredPrefixes	detail/face-impl.hpp	/^  onEmptyPitOrNoRegisteredPrefixes()$/;"	f	class:ndn::Face::Impl
onEvent	util/scheduler.cpp	/^Scheduler::onEvent(const boost::system::error_code& error)$/;"	f	class:ndn::util::scheduler::Scheduler
onNetworkStateChanged	util/network-monitor.hpp	/^  Signal<NetworkMonitor> onNetworkStateChanged;$/;"	m	class:ndn::util::NetworkMonitor
onNotification	util/notification-subscriber.hpp	/^  signal::Signal<NotificationSubscriber, Notification> onNotification;$/;"	m	class:ndn::util::NotificationSubscriber
onReceiveElement	face.cpp	/^Face::onReceiveElement(const Block& blockFromDaemon)$/;"	f	class:ndn::Face
onResolveError	util/dns.cpp	/^  onResolveError(const std::string& errorInfo, const shared_ptr<Resolver>& self)$/;"	f	class:ndn::dns::Resolver
onResolveSuccess	util/dns.cpp	/^  onResolveSuccess(const boost::system::error_code& error,$/;"	f	class:ndn::dns::Resolver
onSegmentReceived	util/segment-fetcher.cpp	/^SegmentFetcher::onSegmentReceived(const Interest& origInterest,$/;"	f	class:ndn::util::SegmentFetcher
onSendBlock	util/dummy-client-face.cpp	/^  Signal<Transport, Block> onSendBlock;$/;"	m	class:ndn::util::DummyClientFace::Transport	file:
onSendData	util/dummy-client-face.hpp	/^  Signal<DummyClientFace, Data> onSendData;$/;"	m	class:ndn::util::DummyClientFace
onSendInterest	util/dummy-client-face.hpp	/^  Signal<DummyClientFace, Interest> onSendInterest;$/;"	m	class:ndn::util::DummyClientFace
onSendNack	util/dummy-client-face.hpp	/^  Signal<DummyClientFace, lp::Nack> onSendNack;$/;"	m	class:ndn::util::DummyClientFace
onTimeout	security/validator.cpp	/^Validator::onTimeout(const Interest& interest,$/;"	f	class:ndn::Validator
onTimeout	util/notification-subscriber.hpp	/^  signal::Signal<NotificationSubscriber> onTimeout;$/;"	m	class:ndn::util::NotificationSubscriber
open	util/config-file.cpp	/^ConfigFile::open()$/;"	f	class:ndn::ConfigFile
operator !	security/identity.cpp	/^Identity::operator!() const$/;"	f	class:ndn::security::Identity
operator !	security/key.cpp	/^Key::operator!() const$/;"	f	class:ndn::security::Key
operator !=	data.cpp	/^Data::operator!=(const Data& other) const$/;"	f	class:ndn::Data
operator !=	encoding/block.cpp	/^Block::operator!=(const Block& other) const$/;"	f	class:ndn::Block
operator !=	encoding/oid.hpp	/^  operator!=(const OID& oid) const$/;"	f	class:ndn::OID
operator !=	exclude.hpp	/^Exclude::operator!=(const Exclude& other) const$/;"	f	class:ndn::Exclude
operator !=	interest.hpp	/^  operator!=(const Interest& other) const$/;"	f	class:ndn::Interest
operator !=	key-locator.hpp	/^  operator!=(const KeyLocator& other) const$/;"	f	class:ndn::KeyLocator
operator !=	meta-info.hpp	/^MetaInfo::operator!=(const MetaInfo& other) const$/;"	f	class:ndn::MetaInfo
operator !=	name-component.hpp	/^  operator!=(const Component& other) const$/;"	f	class:ndn::name::Component
operator !=	name.hpp	/^  operator!=(const Name& name) const$/;"	f	class:ndn::Name
operator !=	security/additional-description.cpp	/^AdditionalDescription::operator!=(const AdditionalDescription& other) const$/;"	f	class:ndn::security::AdditionalDescription
operator !=	security/certificate-container.cpp	/^CertificateContainer::const_iterator::operator!=(const const_iterator& other)$/;"	f	class:ndn::security::CertificateContainer::const_iterator
operator !=	security/identity-container.cpp	/^IdentityContainer::const_iterator::operator!=(const const_iterator& other)$/;"	f	class:ndn::security::IdentityContainer::const_iterator
operator !=	security/key-container.cpp	/^KeyContainer::const_iterator::operator!=(const const_iterator& other)$/;"	f	class:ndn::security::KeyContainer::const_iterator
operator !=	security/public-key.hpp	/^  operator!=(const PublicKey& key) const$/;"	f	class:ndn::PublicKey
operator !=	security/validity-period.cpp	/^ValidityPeriod::operator!=(const ValidityPeriod& other) const$/;"	f	class:ndn::security::ValidityPeriod
operator !=	selectors.hpp	/^  operator!=(const Selectors& other) const$/;"	f	class:ndn::Selectors
operator !=	signature-info.hpp	/^  operator!=(const SignatureInfo& rhs) const$/;"	f	class:ndn::SignatureInfo
operator !=	signature.hpp	/^  operator!=(const Signature& other) const$/;"	f	class:ndn::Signature
operator !=	util/digest.hpp	/^  operator!=(Digest<Hash>& digest)$/;"	f	class:ndn::util::Digest
operator !=	util/face-uri.cpp	/^FaceUri::operator!=(const FaceUri& rhs) const$/;"	f	class:ndn::util::FaceUri
operator !=	util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator!=(const const_iterator& rhs)$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator !=	util/signal-connection.cpp	/^Connection::operator!=(const Connection& other) const$/;"	f	class:ndn::util::signal::Connection
operator ()	detail/interest-filter-record.hpp	/^  operator()(const shared_ptr<InterestFilterRecord>& interestFilterId) const$/;"	f	class:ndn::MatchInterestFilterId
operator ()	detail/pending-interest.hpp	/^  operator()(const shared_ptr<const PendingInterest>& pendingInterest) const$/;"	f	class:ndn::MatchPendingInterestId
operator ()	detail/registered-prefix.hpp	/^  operator()(const shared_ptr<RegisteredPrefix>& registeredPrefix) const$/;"	f	class:ndn::MatchRegisteredPrefixId
operator ()	lp/detail/field-info.cpp	/^  operator()(FieldInfo* info, T)$/;"	f	struct:ndn::lp::detail::ExtractFieldInfo
operator ()	name.cpp	/^hash<ndn::Name>::operator()(const ndn::Name& name) const$/;"	f	class:std::hash
operator ()	util/dns.hpp	/^  operator()(const boost::asio::ip::address& address)$/;"	f	struct:ndn::dns::AnyAddress
operator ()	util/dns.hpp	/^  operator()(const boost::asio::ip::address& address)$/;"	f	struct:ndn::dns::Ipv4Only
operator ()	util/dns.hpp	/^  operator()(const boost::asio::ip::address& address)$/;"	f	struct:ndn::dns::Ipv6Only
operator ()	util/face-uri.cpp	/^  operator()(CP*)$/;"	f	class:ndn::util::CanonizeProviderTableInitializer
operator ()	util/segment-fetcher.hpp	/^  operator()(const Data& data) const$/;"	f	class:ndn::util::DontVerifySegment
operator ()	util/signal-signal.hpp	/^Signal<Owner, TArgs...>::operator()(const TArgs&... args)$/;"	f	class:ndn::util::signal::Signal
operator ()	util/signal-signal.hpp	/^Signal<Owner, TArgs...>::operator()(const TArgs&... args, const DummyExtraArg&)$/;"	f	class:ndn::util::signal::Signal
operator *	security/certificate-container.cpp	/^CertificateContainer::const_iterator::operator*()$/;"	f	class:ndn::security::CertificateContainer::const_iterator
operator *	security/identity-container.cpp	/^IdentityContainer::const_iterator::operator*()$/;"	f	class:ndn::security::IdentityContainer::const_iterator
operator *	security/key-container.cpp	/^KeyContainer::const_iterator::operator*()$/;"	f	class:ndn::security::KeyContainer::const_iterator
operator *	util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator*()$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator ++	security/certificate-container.cpp	/^CertificateContainer::const_iterator::operator++()$/;"	f	class:ndn::security::CertificateContainer::const_iterator
operator ++	security/certificate-container.cpp	/^CertificateContainer::const_iterator::operator++(int)$/;"	f	class:ndn::security::CertificateContainer::const_iterator
operator ++	security/identity-container.cpp	/^IdentityContainer::const_iterator::operator++()$/;"	f	class:ndn::security::IdentityContainer::const_iterator
operator ++	security/identity-container.cpp	/^IdentityContainer::const_iterator::operator++(int)$/;"	f	class:ndn::security::IdentityContainer::const_iterator
operator ++	security/key-container.cpp	/^KeyContainer::const_iterator::operator++()$/;"	f	class:ndn::security::KeyContainer::const_iterator
operator ++	security/key-container.cpp	/^KeyContainer::const_iterator::operator++(int)$/;"	f	class:ndn::security::KeyContainer::const_iterator
operator ++	util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator++()$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator ++	util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator++(int)$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator ->	util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator->()$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator <	name-component.hpp	/^  operator<(const Component& other) const$/;"	f	class:ndn::name::Component
operator <	name.hpp	/^  operator<(const Name& other) const$/;"	f	class:ndn::Name
operator <	util/scheduler.hpp	/^    operator <(const EventInfo& other) const$/;"	f	struct:ndn::util::scheduler::Scheduler::EventInfo
operator <<	data.cpp	/^operator<<(std::ostream& os, const Data& data)$/;"	f	namespace:ndn
operator <<	encoding/nfd-constants.cpp	/^operator<<(std::ostream& os, FacePersistency facePersistency)$/;"	f	namespace:ndn::nfd
operator <<	encoding/nfd-constants.cpp	/^operator<<(std::ostream& os, FaceScope faceScope)$/;"	f	namespace:ndn::nfd
operator <<	encoding/nfd-constants.cpp	/^operator<<(std::ostream& os, LinkType linkType)$/;"	f	namespace:ndn::nfd
operator <<	exclude.cpp	/^operator<<(std::ostream& os, const Exclude& exclude)$/;"	f	namespace:ndn
operator <<	interest-filter.cpp	/^operator<<(std::ostream& os, const InterestFilter& filter)$/;"	f	namespace:ndn
operator <<	interest.cpp	/^operator<<(std::ostream& os, const Interest& interest)$/;"	f	namespace:ndn
operator <<	lp/cache-policy.cpp	/^operator<<(std::ostream& os, CachePolicyType policy)$/;"	f	namespace:ndn::lp
operator <<	lp/nack-header.cpp	/^operator<<(std::ostream& os, NackReason reason)$/;"	f	namespace:ndn::lp
operator <<	management/nfd-control-parameters.cpp	/^operator<<(std::ostream& os, const ControlParameters& parameters)$/;"	f	namespace:ndn::nfd
operator <<	management/nfd-face-event-notification.cpp	/^operator<<(std::ostream& os, const FaceEventNotification& notification)$/;"	f	namespace:ndn::nfd
operator <<	management/nfd-face-query-filter.cpp	/^operator<<(std::ostream& os, const FaceQueryFilter& filter)$/;"	f	namespace:ndn::nfd
operator <<	management/nfd-face-status.cpp	/^operator<<(std::ostream& os, const FaceStatus& status)$/;"	f	namespace:ndn::nfd
operator <<	management/nfd-rib-entry.cpp	/^operator<<(std::ostream& os, const RibEntry& entry)$/;"	f	namespace:ndn::nfd
operator <<	management/nfd-rib-entry.cpp	/^operator<<(std::ostream& os, const Route& route)$/;"	f	namespace:ndn::nfd
operator <<	meta-info.cpp	/^operator<<(std::ostream& os, const MetaInfo& info)$/;"	f	namespace:ndn
operator <<	mgmt/control-response.cpp	/^operator<<(std::ostream& os, const ControlResponse& response)$/;"	f	namespace:ndn::mgmt
operator <<	name-component.hpp	/^operator<<(std::ostream& os, const Component& component)$/;"	f	namespace:ndn::name
operator <<	name.cpp	/^operator<<(std::ostream& os, const Name& name)$/;"	f	namespace:ndn
operator <<	security/additional-description.cpp	/^operator<<(std::ostream& os, const AdditionalDescription& other)$/;"	f	namespace:ndn::security
operator <<	security/certificate.cpp	/^operator<<(std::ostream& os, const Certificate& cert)$/;"	f	namespace:ndn
operator <<	security/public-key.cpp	/^operator<<(std::ostream& os, const PublicKey& key)$/;"	f	namespace:ndn
operator <<	security/validity-period.cpp	/^operator<<(std::ostream& os, const ValidityPeriod& period)$/;"	f	namespace:ndn::security
operator <<	util/digest.cpp	/^Digest<Hash>::operator<<(Digest<Hash>& src)$/;"	f	class:ndn::util::Digest
operator <<	util/digest.cpp	/^Digest<Hash>::operator<<(const Block& block)$/;"	f	class:ndn::util::Digest
operator <<	util/digest.cpp	/^Digest<Hash>::operator<<(const std::string& str)$/;"	f	class:ndn::util::Digest
operator <<	util/digest.cpp	/^Digest<Hash>::operator<<(uint64_t value)$/;"	f	class:ndn::util::Digest
operator <<	util/digest.cpp	/^operator<<(std::ostream& os, Digest<Hash>& digest)$/;"	f	namespace:ndn::util
operator <<	util/ethernet.cpp	/^operator<<(std::ostream& o, const Address& a)$/;"	f	namespace:ndn::util::ethernet
operator <<	util/face-uri.cpp	/^operator<<(std::ostream& os, const FaceUri& uri)$/;"	f	namespace:ndn::util
operator <<	util/regex/regex-matcher.hpp	/^operator<<(std::ostream& os, const RegexMatcher& regex)$/;"	f	namespace:ndn
operator <=	name-component.hpp	/^  operator<=(const Component& other) const$/;"	f	class:ndn::name::Component
operator <=	name.hpp	/^  operator<=(const Name& other) const$/;"	f	class:ndn::Name
operator <=	util/scheduler.hpp	/^    operator <=(const EventInfo& other) const$/;"	f	struct:ndn::util::scheduler::Scheduler::EventInfo
operator =	security/sec-tpm-osx.cpp	/^  operator=(const CFReleaser& inReleaser)$/;"	f	class:ndn::CFReleaser
operator =	security/sec-tpm-osx.cpp	/^  operator=(const T& typeRef)$/;"	f	class:ndn::CFReleaser
operator =	util/scheduler-scoped-event-id.cpp	/^ScopedEventId::operator=(const EventId& event)$/;"	f	class:ndn::util::scheduler::ScopedEventId
operator =	util/signal-scoped-connection.cpp	/^ScopedConnection::operator=(const Connection& connection)$/;"	f	class:ndn::util::signal::ScopedConnection
operator ==	data.cpp	/^Data::operator==(const Data& other) const$/;"	f	class:ndn::Data
operator ==	encoding/block.cpp	/^Block::operator==(const Block& other) const$/;"	f	class:ndn::Block
operator ==	encoding/oid.hpp	/^  operator==(const OID& oid) const$/;"	f	class:ndn::OID
operator ==	exclude.cpp	/^Exclude::operator==(const Exclude& other) const$/;"	f	class:ndn::Exclude
operator ==	interest.hpp	/^  operator==(const Interest& other) const$/;"	f	class:ndn::Interest
operator ==	key-locator.cpp	/^KeyLocator::operator==(const KeyLocator& other) const$/;"	f	class:ndn::KeyLocator
operator ==	meta-info.hpp	/^MetaInfo::operator==(const MetaInfo& other) const$/;"	f	class:ndn::MetaInfo
operator ==	name-component.hpp	/^  operator==(const Component& other) const$/;"	f	class:ndn::name::Component
operator ==	name.hpp	/^  operator==(const Name& name) const$/;"	f	class:ndn::Name
operator ==	security/additional-description.cpp	/^AdditionalDescription::operator==(const AdditionalDescription& other) const$/;"	f	class:ndn::security::AdditionalDescription
operator ==	security/certificate-container.cpp	/^CertificateContainer::const_iterator::operator==(const const_iterator& other)$/;"	f	class:ndn::security::CertificateContainer::const_iterator
operator ==	security/identity-container.cpp	/^IdentityContainer::const_iterator::operator==(const const_iterator& other)$/;"	f	class:ndn::security::IdentityContainer::const_iterator
operator ==	security/key-container.cpp	/^KeyContainer::const_iterator::operator==(const const_iterator& other)$/;"	f	class:ndn::security::KeyContainer::const_iterator
operator ==	security/public-key.hpp	/^  operator==(const PublicKey& key) const$/;"	f	class:ndn::PublicKey
operator ==	security/validity-period.cpp	/^ValidityPeriod::operator==(const ValidityPeriod& other) const$/;"	f	class:ndn::security::ValidityPeriod
operator ==	selectors.cpp	/^Selectors::operator==(const Selectors& other) const$/;"	f	class:ndn::Selectors
operator ==	signature-info.cpp	/^SignatureInfo::operator==(const SignatureInfo& rhs) const$/;"	f	class:ndn::SignatureInfo
operator ==	signature.hpp	/^  operator==(const Signature& other) const$/;"	f	class:ndn::Signature
operator ==	util/digest.cpp	/^Digest<Hash>::operator==(Digest<Hash>& digest)$/;"	f	class:ndn::util::Digest
operator ==	util/face-uri.cpp	/^FaceUri::operator==(const FaceUri& rhs) const$/;"	f	class:ndn::util::FaceUri
operator ==	util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator==(const const_iterator& rhs)$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator ==	util/signal-connection.cpp	/^Connection::operator==(const Connection& other) const$/;"	f	class:ndn::util::signal::Connection
operator >	name-component.hpp	/^  operator>(const Component& other) const$/;"	f	class:ndn::name::Component
operator >	name.hpp	/^  operator>(const Name& other) const$/;"	f	class:ndn::Name
operator >=	name-component.hpp	/^  operator>=(const Component& other) const$/;"	f	class:ndn::name::Component
operator >=	name.hpp	/^  operator>=(const Name& other) const$/;"	f	class:ndn::Name
operator >>	name.cpp	/^operator>>(std::istream& is, Name& name)$/;"	f	namespace:ndn
operator []	name.hpp	/^  operator[](ssize_t i) const$/;"	f	class:ndn::Name
operator bool	security/identity.cpp	/^Identity::operator bool() const$/;"	f	class:ndn::security::Identity
operator bool	security/key.cpp	/^Key::operator bool() const$/;"	f	class:ndn::security::Key
operator bool	signature.hpp	/^  operator bool() const$/;"	f	class:ndn::Signature
operator boost::asio::const_buffer	encoding/block.cpp	/^Block::operator boost::asio::const_buffer() const$/;"	f	class:ndn::Block
operator const Name&	interest-filter.hpp	/^  operator const Name&() const$/;"	f	class:ndn::InterestFilter
operator const Scheduler::EventQueue::iterator&	util/scheduler.cpp	/^  operator const Scheduler::EventQueue::iterator&() const$/;"	f	struct:ndn::util::scheduler::EventIdImpl
operator sqlite3_stmt*	util/sqlite3-statement.cpp	/^Sqlite3Statement::operator sqlite3_stmt*()$/;"	f	class:ndn::util::Sqlite3Statement
optional	management/nfd-control-command.hpp	/^    optional(ControlParameterField field)$/;"	f	class:ndn::nfd::ControlCommand::FieldValidator
parse	encoding/block.cpp	/^Block::parse() const$/;"	f	class:ndn::Block
parse	util/config-file.cpp	/^ConfigFile::parse()$/;"	f	class:ndn::ConfigFile
parse	util/face-uri.cpp	/^FaceUri::parse(const std::string& uri)$/;"	f	class:ndn::util::FaceUri
parseRepetition	util/regex/regex-repeat-matcher.hpp	/^RegexRepeatMatcher::parseRepetition()$/;"	f	class:ndn::RegexRepeatMatcher
parseUri	security/key-chain.cpp	/^parseUri(const std::string& uri)$/;"	f	namespace:ndn::security
pause	transport/stream-transport.hpp	/^  pause()$/;"	f	class:ndn::StreamTransportImpl
pause	transport/tcp-transport.cpp	/^TcpTransport::pause()$/;"	f	class:ndn::TcpTransport
pause	transport/unix-transport.cpp	/^UnixTransport::pause()$/;"	f	class:ndn::UnixTransport
pause	util/dummy-client-face.cpp	/^  pause()$/;"	f	class:ndn::util::DummyClientFace::Transport
period	util/time.hpp	/^  typedef duration::period                 period;$/;"	t	class:ndn::time::system_clock
period	util/time.hpp	/^  typedef duration::period period;$/;"	t	class:ndn::time::steady_clock
pointer	name.hpp	/^  typedef Component*              pointer;$/;"	t	class:ndn::Name
pollCfLoop	util/network-monitor.cpp	/^  pollCfLoop()$/;"	f	class:ndn::util::NetworkMonitor::Impl	file:
popRef	util/regex/regex-backref-manager.hpp	/^RegexBackrefManager::popRef()$/;"	f	class:ndn::RegexBackrefManager
postNotification	mgmt/dispatcher.cpp	/^Dispatcher::postNotification(const Block& notification, const PartialName& relPrefix)$/;"	f	class:ndn::mgmt::Dispatcher
postNotification	util/notification-stream.hpp	/^  postNotification(const Notification& notification)$/;"	f	class:ndn::util::NotificationStream
preCertificateValidation	security/validator.hpp	/^  preCertificateValidation(const Data& data)$/;"	f	class:ndn::Validator
prepareSignatureInfo	security/key-chain.cpp	/^KeyChain::prepareSignatureInfo(const SigningInfo& params)$/;"	f	class:ndn::security::KeyChain
prepareUnsignedIdentityCertificate	security/key-chain.cpp	/^KeyChain::prepareUnsignedIdentityCertificate(const Name& keyName,$/;"	f	class:ndn::security::KeyChain
prependBlock	encoding/block-helpers.hpp	/^prependBlock(EncodingImpl<TAG>& encoder, const Block& block)$/;"	f	namespace:ndn::encoding
prependBlock	encoding/encoder.cpp	/^Encoder::prependBlock(const Block& block)$/;"	f	class:ndn::encoding::Encoder
prependBlock	encoding/estimator.cpp	/^Estimator::prependBlock(const Block& block)$/;"	f	class:ndn::encoding::Estimator
prependBooleanBlock	encoding/block-helpers.hpp	/^prependBooleanBlock(EncodingImpl<TAG>& encoder, uint32_t type)$/;"	f	namespace:ndn::encoding
prependByte	encoding/encoder.cpp	/^Encoder::prependByte(uint8_t value)$/;"	f	class:ndn::encoding::Encoder
prependByte	encoding/estimator.cpp	/^Estimator::prependByte(uint8_t value)$/;"	f	class:ndn::encoding::Estimator
prependByteArray	encoding/encoder.cpp	/^Encoder::prependByteArray(const uint8_t* array, size_t length)$/;"	f	class:ndn::encoding::Encoder
prependByteArray	encoding/estimator.cpp	/^Estimator::prependByteArray(const uint8_t* array, size_t length)$/;"	f	class:ndn::encoding::Estimator
prependByteArrayBlock	encoding/block-helpers.hpp	/^prependByteArrayBlock(EncodingImpl<TAG>& encoder,$/;"	f	namespace:ndn::encoding
prependByteArrayBlock	encoding/encoder.cpp	/^Encoder::prependByteArrayBlock(uint32_t type, const uint8_t* array, size_t arraySize)$/;"	f	class:ndn::encoding::Encoder
prependByteArrayBlock	encoding/estimator.cpp	/^Estimator::prependByteArrayBlock(uint32_t type, const uint8_t* array, size_t arraySize)$/;"	f	class:ndn::encoding::Estimator
prependEmptyBlock	encoding/block-helpers.cpp	/^prependEmptyBlock(EncodingImpl<TAG>& encoder, uint32_t type)$/;"	f	namespace:ndn::encoding
prependNestedBlock	encoding/block-helpers.hpp	/^prependNestedBlock(EncodingImpl<TAG>& encoder, uint32_t type, const U& value)$/;"	f	namespace:ndn::encoding
prependNonNegativeInteger	encoding/encoder.cpp	/^Encoder::prependNonNegativeInteger(uint64_t varNumber)$/;"	f	class:ndn::encoding::Encoder
prependNonNegativeInteger	encoding/estimator.cpp	/^Estimator::prependNonNegativeInteger(uint64_t varNumber)$/;"	f	class:ndn::encoding::Estimator
prependNonNegativeIntegerBlock	encoding/block-helpers.cpp	/^prependNonNegativeIntegerBlock(EncodingImpl<TAG>& encoder, uint32_t type, uint64_t value)$/;"	f	namespace:ndn::encoding
prependRange	encoding/encoder.hpp	/^Encoder::prependRange(Iterator first, Iterator last)$/;"	f	class:ndn::encoding::Encoder
prependRange	encoding/estimator.hpp	/^Estimator::prependRange(Iterator first, Iterator last)$/;"	f	class:ndn::encoding::Estimator
prependStringBlock	encoding/block-helpers.cpp	/^prependStringBlock(EncodingImpl<TAG>& encoder, uint32_t type, const std::string& value)$/;"	f	namespace:ndn::encoding
prependVarNumber	encoding/encoder.cpp	/^Encoder::prependVarNumber(uint64_t varNumber)$/;"	f	class:ndn::encoding::Encoder
prependVarNumber	encoding/estimator.cpp	/^Estimator::prependVarNumber(uint64_t varNumber)$/;"	f	class:ndn::encoding::Estimator
printCache	util/in-memory-storage.cpp	/^InMemoryStorage::printCache(std::ostream& os) const$/;"	f	class:ndn::util::InMemoryStorage
printCertificate	security/certificate.cpp	/^Certificate::printCertificate(std::ostream& oss, const std::string& indent) const$/;"	f	class:ndn::Certificate
printHex	util/string-helper.cpp	/^printHex(std::ostream& os, const Buffer& buffer, bool isUpperCase\/* = true*\/)$/;"	f	namespace:ndn
printHex	util/string-helper.cpp	/^printHex(std::ostream& os, const uint8_t* buffer, size_t length, bool isUpperCase\/* = true*\/)$/;"	f	namespace:ndn
processAll	transport/stream-transport.hpp	/^  processAll(uint8_t* buffer, size_t& offset, size_t nBytesAvailable)$/;"	f	class:ndn::StreamTransportImpl
processAuthorizedControlCommandInterest	mgmt/dispatcher.cpp	/^Dispatcher::processAuthorizedControlCommandInterest(const std::string& requester,$/;"	f	class:ndn::mgmt::Dispatcher
processAuthorizedStatusDatasetInterest	mgmt/dispatcher.cpp	/^Dispatcher::processAuthorizedStatusDatasetInterest(const std::string& requester,$/;"	f	class:ndn::mgmt::Dispatcher
processCommandResponse	management/nfd-controller.cpp	/^Controller::processCommandResponse(const Data& data,$/;"	f	class:ndn::nfd::Controller
processControlCommandInterest	mgmt/dispatcher.cpp	/^Dispatcher::processControlCommandInterest(const Name& prefix,$/;"	f	class:ndn::mgmt::Dispatcher
processEvents	face.cpp	/^Face::processEvents(const time::milliseconds& timeout\/* = time::milliseconds::zero()*\/,$/;"	f	class:ndn::Face
processInterestFilters	detail/face-impl.hpp	/^  processInterestFilters(Interest& interest)$/;"	f	class:ndn::Face::Impl
processStatusDatasetInterest	mgmt/dispatcher.cpp	/^Dispatcher::processStatusDatasetInterest(const Name& prefix,$/;"	f	class:ndn::mgmt::Dispatcher
pureSign	security/key-chain.cpp	/^KeyChain::pureSign(const uint8_t* buf, size_t size,$/;"	f	class:ndn::security::KeyChain
pushRef	util/regex/regex-backref-manager.hpp	/^RegexBackrefManager::pushRef(const shared_ptr<RegexMatcher>& matcher)$/;"	f	class:ndn::RegexBackrefManager
push_back	encoding/block.cpp	/^Block::push_back(const Block& element)$/;"	f	class:ndn::Block
push_back	name.hpp	/^  push_back(const T& component)$/;"	f	class:ndn::Name
put	face.cpp	/^Face::put(const Data& data)$/;"	f	class:ndn::Face
put	face.cpp	/^Face::put(const lp::Nack& nack)$/;"	f	class:ndn::Face
random	util/random.cpp	/^namespace random {$/;"	n	namespace:ndn	file:
random	util/random.hpp	/^namespace random {$/;"	n	namespace:ndn
rbegin	exclude.hpp	/^Exclude::rbegin() const$/;"	f	class:ndn::Exclude
rbegin	name.hpp	/^  rbegin() const$/;"	f	class:ndn::Name
readNonNegativeInteger	encoding/block-helpers.cpp	/^readNonNegativeInteger(const Block& block)$/;"	f	namespace:ndn::encoding
readNonNegativeInteger	encoding/tlv.hpp	/^readNonNegativeInteger(size_t size, InputIterator& begin, const InputIterator& end)$/;"	f	namespace:ndn::tlv
readNonNegativeInteger	encoding/tlv.hpp	/^readNonNegativeInteger<std::istream_iterator<uint8_t> >(size_t size,$/;"	f	namespace:ndn::tlv
readString	encoding/block-helpers.cpp	/^readString(const Block& block)$/;"	f	namespace:ndn::encoding
readType	encoding/tlv.hpp	/^readType(InputIterator& begin, const InputIterator& end)$/;"	f	namespace:ndn::tlv
readType	encoding/tlv.hpp	/^readType(InputIterator& begin, const InputIterator& end, uint32_t& type)$/;"	f	namespace:ndn::tlv
readVarNumber	encoding/tlv.hpp	/^readVarNumber(InputIterator& begin, const InputIterator& end)$/;"	f	namespace:ndn::tlv
readVarNumber	encoding/tlv.hpp	/^readVarNumber(InputIterator& begin, const InputIterator& end, uint64_t& number)$/;"	f	namespace:ndn::tlv
readVarNumber	encoding/tlv.hpp	/^readVarNumber<std::istream_iterator<uint8_t>>(std::istream_iterator<uint8_t>& begin,$/;"	f	namespace:ndn::tlv
receive	transport/transport.hpp	/^Transport::receive(const Block& wire)$/;"	f	class:ndn::Transport
receive	util/dummy-client-face.cpp	/^  receive(Block block)$/;"	f	class:ndn::util::DummyClientFace::Transport
receive	util/dummy-client-face.cpp	/^DummyClientFace::receive(const Packet& packet)$/;"	f	class:ndn::util::DummyClientFace
receive	util/dummy-client-face.cpp	/^DummyClientFace::receive<lp::Nack>(const lp::Nack& nack)$/;"	f	class:ndn::util::DummyClientFace
recursiveMatch	util/regex/regex-matcher.hpp	/^RegexMatcher::recursiveMatch(size_t matcherNo, const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexMatcher
recursiveMatch	util/regex/regex-repeat-matcher.hpp	/^RegexRepeatMatcher::recursiveMatch(size_t repeat, const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexRepeatMatcher
reference	name.hpp	/^  typedef Component&              reference;$/;"	t	class:ndn::Name
refresh	security/validator-config.cpp	/^ValidatorConfig::DynamicTrustAnchorContainer::refresh()$/;"	f	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
refreshAnchors	security/validator-config.cpp	/^ValidatorConfig::refreshAnchors()$/;"	f	class:ndn::ValidatorConfig
refreshDefaultCertificate	security/key-chain.hpp	/^  refreshDefaultCertificate()$/;"	f	class:ndn::security::KeyChain
refreshDefaultCertificate	security/sec-public-info.cpp	/^SecPublicInfo::refreshDefaultCertificate()$/;"	f	class:ndn::SecPublicInfo
refreshNonce	interest.cpp	/^Interest::refreshNonce()$/;"	f	class:ndn::Interest
registerPib	security/key-chain.hpp	/^KeyChain::registerPib(std::initializer_list<std::string> aliases)$/;"	f	class:ndn::security::KeyChain
registerPibImpl	security/key-chain.cpp	/^KeyChain::registerPibImpl(const std::string& canonicalName,$/;"	f	class:ndn::security::KeyChain
registerPrefix	detail/face-impl.hpp	/^  registerPrefix(const Name& prefix,$/;"	f	class:ndn::Face::Impl
registerPrefix	face.cpp	/^Face::registerPrefix(const Name& prefix,$/;"	f	class:ndn::Face
registerPrefixId	mgmt/dispatcher.hpp	/^    const ndn::RegisteredPrefixId* registerPrefixId;$/;"	m	struct:ndn::mgmt::Dispatcher::TopPrefixEntry
registerTpm	security/key-chain.hpp	/^KeyChain::registerTpm(std::initializer_list<std::string> aliases)$/;"	f	class:ndn::security::KeyChain
registerTpmImpl	security/key-chain.cpp	/^KeyChain::registerTpmImpl(const std::string& canonicalName,$/;"	f	class:ndn::security::KeyChain
reject	mgmt/status-dataset-context.cpp	/^StatusDatasetContext::reject(const ControlResponse& resp \/*= a ControlResponse with 400*\/)$/;"	f	class:ndn::mgmt::StatusDatasetContext
release	security/sec-tpm-osx.cpp	/^  void release()$/;"	f	class:ndn::CFReleaser
release	util/in-memory-storage-entry.cpp	/^InMemoryStorageEntry::release()$/;"	f	class:ndn::util::InMemoryStorageEntry
release	util/scheduler-scoped-event-id.cpp	/^ScopedEventId::release()$/;"	f	class:ndn::util::scheduler::ScopedEventId
release	util/signal-scoped-connection.cpp	/^ScopedConnection::release()$/;"	f	class:ndn::util::signal::ScopedConnection
remove	encoding/block.cpp	/^Block::remove(uint32_t type)$/;"	f	class:ndn::Block
remove	lp/packet.hpp	/^  remove(size_t index = 0)$/;"	f	class:ndn::lp::Packet
remove	security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::remove(const Name& certificateName)$/;"	f	class:ndn::CertificateCacheTtl
removeAll	security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::removeAll()$/;"	f	class:ndn::CertificateCacheTtl
removeAppMetaInfo	meta-info.cpp	/^MetaInfo::removeAppMetaInfo(uint32_t tlvType)$/;"	f	class:ndn::MetaInfo
removeCertificate	security/key.cpp	/^Key::removeCertificate(const Name& certName)$/;"	f	class:ndn::security::Key
removeCertificate	security/pib-memory.cpp	/^PibMemory::removeCertificate(const Name& certName)$/;"	f	class:ndn::security::PibMemory
removeCertificate	security/pib-sqlite3.cpp	/^PibSqlite3::removeCertificate(const Name& certName)$/;"	f	class:ndn::security::PibSqlite3
removeDelegation	link.cpp	/^Link::removeDelegation(const Name& name)$/;"	f	class:ndn::Link
removeDelegationNoEncode	link.cpp	/^Link::removeDelegationNoEncode(const Name& name)$/;"	f	class:ndn::Link
removeIdentity	security/pib-memory.cpp	/^PibMemory::removeIdentity(const Name& identity)$/;"	f	class:ndn::security::PibMemory
removeIdentity	security/pib-sqlite3.cpp	/^PibSqlite3::removeIdentity(const Name& identity)$/;"	f	class:ndn::security::PibSqlite3
removeIdentity	security/pib.cpp	/^Pib::removeIdentity(const Name& identity)$/;"	f	class:ndn::security::Pib
removeKey	security/identity.cpp	/^Identity::removeKey(const name::Component& keyId)$/;"	f	class:ndn::security::Identity
removeKey	security/pib-memory.cpp	/^PibMemory::removeKey(const Name& identity, const name::Component& keyId)$/;"	f	class:ndn::security::PibMemory
removeKey	security/pib-sqlite3.cpp	/^PibSqlite3::removeKey(const Name& identity, const name::Component& keyId)$/;"	f	class:ndn::security::PibSqlite3
removePendingInterest	face.cpp	/^Face::removePendingInterest(const PendingInterestId* pendingInterestId)$/;"	f	class:ndn::Face
removeTag	tag-host.hpp	/^TagHost::removeTag() const$/;"	f	class:ndn::TagHost
removeTopPrefix	mgmt/dispatcher.cpp	/^Dispatcher::removeTopPrefix(const Name& prefix)$/;"	f	class:ndn::mgmt::Dispatcher
remove_if	detail/container-with-on-empty-signal.hpp	/^  void remove_if(Predicate p)$/;"	f	class:ndn::ContainerWithOnEmptySignal
rend	exclude.hpp	/^Exclude::rend() const$/;"	f	class:ndn::Exclude
rend	name.hpp	/^  rend() const$/;"	f	class:ndn::Name
rep	util/time.hpp	/^  typedef duration::rep                    rep;$/;"	t	class:ndn::time::system_clock
rep	util/time.hpp	/^  typedef duration::rep    rep;$/;"	t	class:ndn::time::steady_clock
required	management/nfd-control-command.hpp	/^    required(ControlParameterField field)$/;"	f	class:ndn::nfd::ControlCommand::FieldValidator
reserve	encoding/encoder.cpp	/^Encoder::reserve(size_t size, bool addInFront)$/;"	f	class:ndn::encoding::Encoder
reserveBack	encoding/encoder.cpp	/^Encoder::reserveBack(size_t size)$/;"	f	class:ndn::encoding::Encoder
reserveFront	encoding/encoder.cpp	/^Encoder::reserveFront(size_t size)$/;"	f	class:ndn::encoding::Encoder
reset	encoding/block.cpp	/^Block::reset()$/;"	f	class:ndn::Block
reset	security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::reset()$/;"	f	class:ndn::CertificateCacheTtl
reset	security/validator-config.cpp	/^ValidatorConfig::reset()$/;"	f	class:ndn::ValidatorConfig
reset	util/command-interest-validator.hpp	/^CommandInterestValidator::reset()$/;"	f	class:ndn::CommandInterestValidator
reset	util/digest.cpp	/^Digest<Hash>::reset()$/;"	f	class:ndn::util::Digest
reset	util/scheduler.cpp	/^  reset(const Scheduler::EventQueue::iterator& newIterator)$/;"	f	struct:ndn::util::scheduler::EventIdImpl
resetMatchResult	util/regex/regex-pseudo-matcher.hpp	/^RegexPseudoMatcher::resetMatchResult()$/;"	f	class:ndn::RegexPseudoMatcher
resetTpmPassword	security/key-chain.hpp	/^  resetTpmPassword()$/;"	f	class:ndn::security::KeyChain
resetTpmPassword	security/sec-tpm-file.hpp	/^  resetTpmPassword()$/;"	f	class:ndn::SecTpmFile
resetTpmPassword	security/sec-tpm-osx.cpp	/^SecTpmOsx::resetTpmPassword()$/;"	f	class:ndn::SecTpmOsx
resetWire	encoding/block.cpp	/^Block::resetWire()$/;"	f	class:ndn::Block
resolveHandler	transport/stream-transport.hpp	/^  resolveHandler(const boost::system::error_code& error,$/;"	f	class:ndn::StreamTransportWithResolverImpl
result_type	lp/detail/field-info.cpp	/^  typedef void result_type;$/;"	t	struct:ndn::lp::detail::ExtractFieldInfo	file:
resume	transport/stream-transport.hpp	/^  resume()$/;"	f	class:ndn::StreamTransportImpl
resume	transport/tcp-transport.cpp	/^TcpTransport::resume()$/;"	f	class:ndn::TcpTransport
resume	transport/unix-transport.cpp	/^UnixTransport::resume()$/;"	f	class:ndn::UnixTransport
resume	util/dummy-client-face.cpp	/^  resume()$/;"	f	class:ndn::util::DummyClientFace::Transport
retain	security/sec-tpm-osx.cpp	/^  retain(const T& typeRef)$/;"	f	class:ndn::CFReleaser
reverse_iterator	exclude.hpp	/^  typedef exclude_type::reverse_iterator reverse_iterator;$/;"	t	class:ndn::Exclude
reverse_iterator	name.hpp	/^  typedef boost::reverse_iterator<iterator>       reverse_iterator;$/;"	t	class:ndn::Name
revokeIdentity	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::revokeIdentity()$/;"	f	class:ndn::SecPublicInfoSqlite3
satisfy	security/sec-rule-relative.cpp	/^SecRuleRelative::satisfy(const Data& data)$/;"	f	class:ndn::SecRuleRelative
satisfy	security/sec-rule-relative.cpp	/^SecRuleRelative::satisfy(const Name& dataName, const Name& signerName)$/;"	f	class:ndn::SecRuleRelative
satisfy	security/sec-rule-specific.cpp	/^SecRuleSpecific::satisfy(const Data& data)$/;"	f	class:ndn::SecRuleSpecific
satisfy	security/sec-rule-specific.cpp	/^SecRuleSpecific::satisfy(const Name& dataName, const Name& signerName)$/;"	f	class:ndn::SecRuleSpecific
satisfyPendingInterests	detail/face-impl.hpp	/^  satisfyPendingInterests(Data& data)$/;"	f	class:ndn::Face::Impl
save	util/io.hpp	/^save(const T& object, const std::string& file, IoEncoding encoding = BASE_64)$/;"	f	namespace:ndn::io
save	util/io.hpp	/^save(const T& object, std::ostream& os, IoEncoding encoding = BASE_64)$/;"	f	namespace:ndn::io
scheduleCfLoop	util/network-monitor.cpp	/^  scheduleCfLoop()$/;"	f	class:ndn::util::NetworkMonitor::Impl
scheduleEvent	util/scheduler.cpp	/^Scheduler::scheduleEvent(const time::nanoseconds& after,$/;"	f	class:ndn::util::scheduler::Scheduler
scheduler	util/network-monitor.cpp	/^  Scheduler scheduler;$/;"	m	class:ndn::util::NetworkMonitor::Impl	file:
scheduler	util/scheduler-scoped-event-id.cpp	/^namespace scheduler {$/;"	n	namespace:ndn::util	file:
scheduler	util/scheduler-scoped-event-id.hpp	/^namespace scheduler {$/;"	n	namespace:ndn::util
scheduler	util/scheduler.cpp	/^namespace scheduler {$/;"	n	namespace:ndn::util	file:
scheduler	util/scheduler.hpp	/^namespace scheduler {$/;"	n	namespace:ndn::util
security	encoding/tlv-security.hpp	/^namespace security {$/;"	n	namespace:ndn::tlv
security	face.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/additional-description.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	security/additional-description.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/certificate-container.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	security/certificate-container.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/conf/checker.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/conf/common.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/conf/filter.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/conf/key-locator-checker.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/conf/rule.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/identity-container.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	security/identity-container.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/identity.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	security/identity.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/key-chain.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	security/key-chain.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/key-container.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	security/key-container.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/key.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	security/key.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/pib-impl.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/pib-memory.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	security/pib-memory.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/pib-sqlite3.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	security/pib-sqlite3.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/pib.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	security/pib.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/signing-helpers.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	security/signing-helpers.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/signing-info.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	security/signing-info.hpp	/^namespace security {$/;"	n	namespace:ndn
security	security/validity-period.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	security/validity-period.hpp	/^namespace security {$/;"	n	namespace:ndn
selectChild	util/in-memory-storage.cpp	/^InMemoryStorage::selectChild(const Interest& interest,$/;"	f	class:ndn::util::InMemoryStorage
selfSign	security/key-chain.cpp	/^KeyChain::selfSign(IdentityCertificate& cert)$/;"	f	class:ndn::security::KeyChain
selfSign	security/key-chain.cpp	/^KeyChain::selfSign(const Name& keyName)$/;"	f	class:ndn::security::KeyChain
send	transport/stream-transport.hpp	/^  send(const Block& header, const Block& payload)$/;"	f	class:ndn::StreamTransportImpl
send	transport/stream-transport.hpp	/^  send(const Block& wire)$/;"	f	class:ndn::StreamTransportImpl
send	transport/tcp-transport.cpp	/^TcpTransport::send(const Block& header, const Block& payload)$/;"	f	class:ndn::TcpTransport
send	transport/tcp-transport.cpp	/^TcpTransport::send(const Block& wire)$/;"	f	class:ndn::TcpTransport
send	transport/unix-transport.cpp	/^UnixTransport::send(const Block& header, const Block& payload)$/;"	f	class:ndn::UnixTransport
send	transport/unix-transport.cpp	/^UnixTransport::send(const Block& wire)$/;"	f	class:ndn::UnixTransport
send	util/dummy-client-face.cpp	/^  send(const Block& header, const Block& payload)$/;"	f	class:ndn::util::DummyClientFace::Transport
send	util/dummy-client-face.cpp	/^  send(const Block& wire)$/;"	f	class:ndn::util::DummyClientFace::Transport
sendControlResponse	mgmt/dispatcher.cpp	/^Dispatcher::sendControlResponse(const ControlResponse& resp, const Interest& interest,$/;"	f	class:ndn::mgmt::Dispatcher
sendData	mgmt/dispatcher.cpp	/^Dispatcher::sendData(const Name& dataName, const Block& content,$/;"	f	class:ndn::mgmt::Dispatcher
sendInitialInterest	util/notification-subscriber.hpp	/^  sendInitialInterest()$/;"	f	class:ndn::util::NotificationSubscriber
sendNextInterest	util/notification-subscriber.hpp	/^  sendNextInterest()$/;"	f	class:ndn::util::NotificationSubscriber
sentDatas	util/dummy-client-face.hpp	/^  std::vector<Data> sentDatas;$/;"	m	class:ndn::util::DummyClientFace
sentInterests	util/dummy-client-face.hpp	/^  std::vector<Interest> sentInterests;$/;"	m	class:ndn::util::DummyClientFace
sentNacks	util/dummy-client-face.hpp	/^  std::vector<lp::Nack> sentNacks;$/;"	m	class:ndn::util::DummyClientFace
set	lp/packet.hpp	/^  set(const typename FIELD::ValueType& value)$/;"	f	class:ndn::lp::Packet
set	name.cpp	/^Name::set(const char* uri)$/;"	f	class:ndn::Name
set	name.cpp	/^Name::set(const std::string& uri)$/;"	f	class:ndn::Name
set	security/additional-description.cpp	/^AdditionalDescription::set(const std::string& key, const std::string& value)$/;"	f	class:ndn::security::AdditionalDescription
set	security/public-key.hpp	/^  set(const uint8_t* keyDerBuf, size_t keyDerSize)$/;"	f	class:ndn::PublicKey
setAppMetaInfo	meta-info.cpp	/^MetaInfo::setAppMetaInfo(const std::list<Block>& info)$/;"	f	class:ndn::MetaInfo
setBody	mgmt/control-response.hpp	/^ControlResponse::setBody(const Block& body)$/;"	f	class:ndn::mgmt::ControlResponse
setCachingPolicy	data.cpp	/^Data::setCachingPolicy(nfd::LocalControlHeader::CachingPolicy cachingPolicy)$/;"	f	class:ndn::Data
setCachingPolicy	management/nfd-local-control-header.hpp	/^  setCachingPolicy(CachingPolicy cachingPolicy)$/;"	f	class:ndn::nfd::LocalControlHeader
setCapacity	util/in-memory-storage.cpp	/^InMemoryStorage::setCapacity(size_t capacity)$/;"	f	class:ndn::util::InMemoryStorage
setChildSelector	interest.hpp	/^  setChildSelector(int childSelector)$/;"	f	class:ndn::Interest
setChildSelector	selectors.cpp	/^Selectors::setChildSelector(int childSelector)$/;"	f	class:ndn::Selectors
setCode	mgmt/control-response.hpp	/^ControlResponse::setCode(uint32_t code)$/;"	f	class:ndn::mgmt::ControlResponse
setContent	data.cpp	/^Data::setContent(const Block& content)$/;"	f	class:ndn::Data
setContent	data.cpp	/^Data::setContent(const ConstBufferPtr& contentValue)$/;"	f	class:ndn::Data
setContent	data.cpp	/^Data::setContent(const uint8_t* content, size_t contentLength)$/;"	f	class:ndn::Data
setContentType	data.cpp	/^Data::setContentType(uint32_t type)$/;"	f	class:ndn::Data
setCost	management/nfd-control-parameters.hpp	/^  setCost(uint64_t cost)$/;"	f	class:ndn::nfd::ControlParameters
setCost	management/nfd-fib-entry.cpp	/^NextHopRecord::setCost(uint64_t cost)$/;"	f	class:ndn::nfd::NextHopRecord
setCost	management/nfd-rib-entry.hpp	/^  setCost(uint64_t cost)$/;"	f	class:ndn::nfd::Route
setCurrentTimestamp	management/nfd-forwarder-status.cpp	/^ForwarderStatus::setCurrentTimestamp(const time::system_clock::TimePoint& currentTimestamp)$/;"	f	class:ndn::nfd::ForwarderStatus
setCustomClocks	util/time.cpp	/^setCustomClocks(shared_ptr<CustomSteadyClock> steadyClock,$/;"	f	namespace:ndn::time
setData	util/in-memory-storage-entry.cpp	/^InMemoryStorageEntry::setData(const Data& data)$/;"	f	class:ndn::util::InMemoryStorageEntry
setDefaultCertificate	security/key.cpp	/^Key::setDefaultCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::Key
setDefaultCertificate	security/key.cpp	/^Key::setDefaultCertificate(const Name& certName)$/;"	f	class:ndn::security::Key
setDefaultCertificateInternal	security/key-chain.cpp	/^KeyChain::setDefaultCertificateInternal()$/;"	f	class:ndn::security::KeyChain
setDefaultCertificateNameForKey	security/key-chain.hpp	/^  setDefaultCertificateNameForKey(const Name& certificateName)$/;"	f	class:ndn::security::KeyChain
setDefaultCertificateNameForKey	security/sec-public-info.cpp	/^SecPublicInfo::setDefaultCertificateNameForKey(const Name& certificateName)$/;"	f	class:ndn::SecPublicInfo
setDefaultCertificateNameForKeyInternal	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::setDefaultCertificateNameForKeyInternal(const Name& certificateName)$/;"	f	class:ndn::SecPublicInfoSqlite3
setDefaultCertificateOfKey	security/pib-memory.cpp	/^PibMemory::setDefaultCertificateOfKey(const Name& identity, const name::Component& keyId, const Name& certName)$/;"	f	class:ndn::security::PibMemory
setDefaultCertificateOfKey	security/pib-sqlite3.cpp	/^PibSqlite3::setDefaultCertificateOfKey(const Name& identity, const name::Component& keyId,$/;"	f	class:ndn::security::PibSqlite3
setDefaultIdentity	security/key-chain.hpp	/^  setDefaultIdentity(const Name& identityName)$/;"	f	class:ndn::security::KeyChain
setDefaultIdentity	security/pib-memory.cpp	/^PibMemory::setDefaultIdentity(const Name& identityName)$/;"	f	class:ndn::security::PibMemory
setDefaultIdentity	security/pib-sqlite3.cpp	/^PibSqlite3::setDefaultIdentity(const Name& identityName)$/;"	f	class:ndn::security::PibSqlite3
setDefaultIdentity	security/pib.cpp	/^Pib::setDefaultIdentity(const Name& identityName)$/;"	f	class:ndn::security::Pib
setDefaultIdentity	security/sec-public-info.cpp	/^SecPublicInfo::setDefaultIdentity(const Name& identityName)$/;"	f	class:ndn::SecPublicInfo
setDefaultIdentityInternal	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::setDefaultIdentityInternal(const Name& identityName)$/;"	f	class:ndn::SecPublicInfoSqlite3
setDefaultKey	security/identity.cpp	/^Identity::setDefaultKey(const PublicKey& publicKey, const name::Component& keyId)$/;"	f	class:ndn::security::Identity
setDefaultKey	security/identity.cpp	/^Identity::setDefaultKey(const name::Component& keyId)$/;"	f	class:ndn::security::Identity
setDefaultKeyNameForIdentity	security/key-chain.hpp	/^  setDefaultKeyNameForIdentity(const Name& keyName)$/;"	f	class:ndn::security::KeyChain
setDefaultKeyNameForIdentity	security/sec-public-info.cpp	/^SecPublicInfo::setDefaultKeyNameForIdentity(const Name& keyName)$/;"	f	class:ndn::SecPublicInfo
setDefaultKeyNameForIdentityInternal	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::setDefaultKeyNameForIdentityInternal(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
setDefaultKeyOfIdentity	security/pib-memory.cpp	/^PibMemory::setDefaultKeyOfIdentity(const Name& identity, const name::Component& keyId)$/;"	f	class:ndn::security::PibMemory
setDefaultKeyOfIdentity	security/pib-sqlite3.cpp	/^PibSqlite3::setDefaultKeyOfIdentity(const Name& identity, const name::Component& keyId)$/;"	f	class:ndn::security::PibSqlite3
setDeleter	detail/pending-interest.hpp	/^  setDeleter(const std::function<void()>& deleter)$/;"	f	class:ndn::PendingInterest
setDigestAlgorithm	security/signing-info.hpp	/^  setDigestAlgorithm(const DigestAlgorithm& algorithm)$/;"	f	class:ndn::security::SigningInfo
setEC	interest.hpp	/^  setEC(const size_t& EC)$/;"	f	class:ndn::Interest
setExclude	interest.hpp	/^  setExclude(const Exclude& exclude)$/;"	f	class:ndn::Interest
setExclude	selectors.cpp	/^Selectors::setExclude(const Exclude& exclude)$/;"	f	class:ndn::Selectors
setExpirationPeriod	management/nfd-control-parameters.hpp	/^  setExpirationPeriod(const time::milliseconds& expirationPeriod)$/;"	f	class:ndn::nfd::ControlParameters
setExpirationPeriod	management/nfd-face-status.cpp	/^FaceStatus::setExpirationPeriod(const time::milliseconds& expirationPeriod)$/;"	f	class:ndn::nfd::FaceStatus
setExpirationPeriod	management/nfd-rib-entry.hpp	/^  setExpirationPeriod(const time::milliseconds& expirationPeriod)$/;"	f	class:ndn::nfd::Route
setExpiry	mgmt/status-dataset-context.cpp	/^StatusDatasetContext::setExpiry(const time::milliseconds& expiry)$/;"	f	class:ndn::mgmt::StatusDatasetContext
setFC	interest.hpp	/^  setFC(const size_t& FC)$/;"	f	class:ndn::Interest
setFaceId	management/nfd-control-parameters.hpp	/^  setFaceId(uint64_t faceId)$/;"	f	class:ndn::nfd::ControlParameters
setFaceId	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setFaceId(uint64_t faceId)$/;"	f	class:ndn::nfd::FaceQueryFilter
setFaceId	management/nfd-face-traits.hpp	/^  setFaceId(uint64_t faceId)$/;"	f	class:ndn::nfd::FaceTraits
setFaceId	management/nfd-fib-entry.cpp	/^NextHopRecord::setFaceId(uint64_t faceId)$/;"	f	class:ndn::nfd::NextHopRecord
setFaceId	management/nfd-rib-entry.hpp	/^  setFaceId(uint64_t faceId)$/;"	f	class:ndn::nfd::Route
setFacePersistency	management/nfd-control-parameters.hpp	/^  setFacePersistency(FacePersistency persistency)$/;"	f	class:ndn::nfd::ControlParameters
setFacePersistency	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setFacePersistency(FacePersistency facePersistency)$/;"	f	class:ndn::nfd::FaceQueryFilter
setFacePersistency	management/nfd-face-traits.hpp	/^  setFacePersistency(FacePersistency facePersistency)$/;"	f	class:ndn::nfd::FaceTraits
setFaceScope	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setFaceScope(FaceScope faceScope)$/;"	f	class:ndn::nfd::FaceQueryFilter
setFaceScope	management/nfd-face-traits.hpp	/^  setFaceScope(FaceScope faceScope)$/;"	f	class:ndn::nfd::FaceTraits
setFinalBlockId	data.cpp	/^Data::setFinalBlockId(const name::Component& finalBlockId)$/;"	f	class:ndn::Data
setFinalBlockId	meta-info.cpp	/^MetaInfo::setFinalBlockId(const name::Component& finalBlockId)$/;"	f	class:ndn::MetaInfo
setFlags	management/nfd-control-parameters.hpp	/^  setFlags(uint64_t flags)$/;"	f	class:ndn::nfd::ControlParameters
setFlags	management/nfd-rib-entry.hpp	/^  setFlags(uint64_t flags)$/;"	f	class:ndn::nfd::Route
setFreshnessPeriod	data.cpp	/^Data::setFreshnessPeriod(const time::milliseconds& freshnessPeriod)$/;"	f	class:ndn::Data
setFreshnessPeriod	meta-info.cpp	/^MetaInfo::setFreshnessPeriod(const time::milliseconds& freshnessPeriod)$/;"	f	class:ndn::MetaInfo
setHeader	lp/nack.hpp	/^  setHeader(NackHeader&& header)$/;"	f	class:ndn::lp::Nack
setHeader	lp/nack.hpp	/^  setHeader(const NackHeader& header)$/;"	f	class:ndn::lp::Nack
setInTerminal	security/key-chain.hpp	/^  setInTerminal(bool inTerminal)$/;"	f	class:ndn::security::KeyChain
setInTerminal	security/sec-tpm-file.hpp	/^  setInTerminal(bool inTerminal)$/;"	f	class:ndn::SecTpmFile
setInTerminal	security/sec-tpm-osx.cpp	/^SecTpmOsx::setInTerminal(bool inTerminal)$/;"	f	class:ndn::SecTpmOsx
setIncomingFaceId	data.cpp	/^Data::setIncomingFaceId(uint64_t incomingFaceId)$/;"	f	class:ndn::Data
setIncomingFaceId	interest.hpp	/^  setIncomingFaceId(uint64_t incomingFaceId)$/;"	f	class:ndn::Interest
setIncomingFaceId	management/nfd-local-control-header.hpp	/^  setIncomingFaceId(uint64_t incomingFaceId)$/;"	f	class:ndn::nfd::LocalControlHeader
setInfo	signature.cpp	/^Signature::setInfo(const Block& info)$/;"	f	class:ndn::Signature
setInfo	signature.hpp	/^  setInfo(const SignatureInfo& info)$/;"	f	class:ndn::Signature
setIntegerList	encoding/oid.hpp	/^  setIntegerList(const std::vector<int>& value)$/;"	f	class:ndn::OID
setInterestFilter	face.cpp	/^Face::setInterestFilter(const InterestFilter& interestFilter,$/;"	f	class:ndn::Face
setInterestLifetime	interest.hpp	/^  setInterestLifetime(const time::milliseconds& interestLifetime)$/;"	f	class:ndn::Interest
setKeyDigest	key-locator.cpp	/^KeyLocator::setKeyDigest(const Block& keyDigest)$/;"	f	class:ndn::KeyLocator
setKeyDigest	key-locator.cpp	/^KeyLocator::setKeyDigest(const ConstBufferPtr& keyDigest)$/;"	f	class:ndn::KeyLocator
setKeyLocator	signature-info.cpp	/^SignatureInfo::setKeyLocator(const KeyLocator& keyLocator)$/;"	f	class:ndn::SignatureInfo
setKeyLocator	signature.hpp	/^  setKeyLocator(const KeyLocator& keyLocator)$/;"	f	class:ndn::Signature
setKeySize	security/key-params.hpp	/^  setKeySize(uint32_t size)$/;"	f	class:ndn::SimplePublicKeyParams
setKeySize	security/key-params.hpp	/^  setKeySize(uint32_t size)$/;"	f	class:ndn::SimpleSymmetricKeyParams
setKind	management/nfd-face-event-notification.cpp	/^FaceEventNotification::setKind(FaceEventKind kind)$/;"	f	class:ndn::nfd::FaceEventNotification
setLastRefresh	security/validator-config.hpp	/^    setLastRefresh(const time::system_clock::TimePoint& lastRefresh)$/;"	f	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
setLink	interest.cpp	/^Interest::setLink(const Block& link)$/;"	f	class:ndn::Interest
setLinkType	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setLinkType(LinkType linkType)$/;"	f	class:ndn::nfd::FaceQueryFilter
setLinkType	management/nfd-face-traits.hpp	/^  setLinkType(LinkType linkType)$/;"	f	class:ndn::nfd::FaceTraits
setLocalControlFeature	management/nfd-control-parameters.hpp	/^  setLocalControlFeature(LocalControlFeature localControlFeature)$/;"	f	class:ndn::nfd::ControlParameters
setLocalUri	management/nfd-channel-status.cpp	/^ChannelStatus::setLocalUri(const std::string localUri)$/;"	f	class:ndn::nfd::ChannelStatus
setLocalUri	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setLocalUri(const std::string& localUri)$/;"	f	class:ndn::nfd::FaceQueryFilter
setLocalUri	management/nfd-face-traits.hpp	/^  setLocalUri(const std::string& localUri)$/;"	f	class:ndn::nfd::FaceTraits
setMatchResult	util/regex/regex-pseudo-matcher.hpp	/^RegexPseudoMatcher::setMatchResult(const std::string& str)$/;"	f	class:ndn::RegexPseudoMatcher
setMaxSuffixComponents	interest.hpp	/^  setMaxSuffixComponents(int maxSuffixComponents)$/;"	f	class:ndn::Interest
setMaxSuffixComponents	selectors.cpp	/^Selectors::setMaxSuffixComponents(int maxSuffixComponents)$/;"	f	class:ndn::Selectors
setMetaInfo	data.cpp	/^Data::setMetaInfo(const MetaInfo& metaInfo)$/;"	f	class:ndn::Data
setMinSuffixComponents	interest.hpp	/^  setMinSuffixComponents(int minSuffixComponents)$/;"	f	class:ndn::Interest
setMinSuffixComponents	selectors.cpp	/^Selectors::setMinSuffixComponents(int minSuffixComponents)$/;"	f	class:ndn::Selectors
setMustBeFresh	interest.hpp	/^  setMustBeFresh(bool mustBeFresh)$/;"	f	class:ndn::Interest
setMustBeFresh	selectors.cpp	/^Selectors::setMustBeFresh(bool mustBeFresh)$/;"	f	class:ndn::Selectors
setNCsEntries	management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNCsEntries(size_t nCsEntries)$/;"	f	class:ndn::nfd::ForwarderStatus
setNFibEntries	management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNFibEntries(size_t nFibEntries)$/;"	f	class:ndn::nfd::ForwarderStatus
setNInBytes	management/nfd-face-status.cpp	/^FaceStatus::setNInBytes(uint64_t nInBytes)$/;"	f	class:ndn::nfd::FaceStatus
setNInDatas	management/nfd-face-status.cpp	/^FaceStatus::setNInDatas(uint64_t nInDatas)$/;"	f	class:ndn::nfd::FaceStatus
setNInDatas	management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNInDatas(uint64_t nInDatas)$/;"	f	class:ndn::nfd::ForwarderStatus
setNInInterests	management/nfd-face-status.cpp	/^FaceStatus::setNInInterests(uint64_t nInInterests)$/;"	f	class:ndn::nfd::FaceStatus
setNInInterests	management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNInInterests(uint64_t nInInterests)$/;"	f	class:ndn::nfd::ForwarderStatus
setNInNacks	management/nfd-face-status.cpp	/^FaceStatus::setNInNacks(uint64_t nInNacks)$/;"	f	class:ndn::nfd::FaceStatus
setNInNacks	management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNInNacks(uint64_t nInNacks)$/;"	f	class:ndn::nfd::ForwarderStatus
setNMeasurementsEntries	management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNMeasurementsEntries(size_t nMeasurementsEntries)$/;"	f	class:ndn::nfd::ForwarderStatus
setNNameTreeEntries	management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNNameTreeEntries(size_t nNameTreeEntries)$/;"	f	class:ndn::nfd::ForwarderStatus
setNOutBytes	management/nfd-face-status.cpp	/^FaceStatus::setNOutBytes(uint64_t nOutBytes)$/;"	f	class:ndn::nfd::FaceStatus
setNOutDatas	management/nfd-face-status.cpp	/^FaceStatus::setNOutDatas(uint64_t nOutDatas)$/;"	f	class:ndn::nfd::FaceStatus
setNOutDatas	management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNOutDatas(uint64_t nOutDatas)$/;"	f	class:ndn::nfd::ForwarderStatus
setNOutInterests	management/nfd-face-status.cpp	/^FaceStatus::setNOutInterests(uint64_t nOutInterests)$/;"	f	class:ndn::nfd::FaceStatus
setNOutInterests	management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNOutInterests(uint64_t nOutInterests)$/;"	f	class:ndn::nfd::ForwarderStatus
setNOutNacks	management/nfd-face-status.cpp	/^FaceStatus::setNOutNacks(uint64_t nOutNacks)$/;"	f	class:ndn::nfd::FaceStatus
setNOutNacks	management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNOutNacks(uint64_t nOutNacks)$/;"	f	class:ndn::nfd::ForwarderStatus
setNPitEntries	management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNPitEntries(size_t nPitEntries)$/;"	f	class:ndn::nfd::ForwarderStatus
setName	data.cpp	/^Data::setName(const Name& name)$/;"	f	class:ndn::Data
setName	interest.hpp	/^  setName(const Name& name)$/;"	f	class:ndn::Interest
setName	key-locator.cpp	/^KeyLocator::setName(const Name& name)$/;"	f	class:ndn::KeyLocator
setName	management/nfd-control-parameters.hpp	/^  setName(const Name& name)$/;"	f	class:ndn::nfd::ControlParameters
setName	management/nfd-rib-entry.hpp	/^  setName(const Name& prefix)$/;"	f	class:ndn::nfd::RibEntry
setName	management/nfd-strategy-choice.cpp	/^StrategyChoice::setName(const Name& name)$/;"	f	class:ndn::nfd::StrategyChoice
setName	security/identity-certificate.cpp	/^IdentityCertificate::setName(const Name& name)$/;"	f	class:ndn::IdentityCertificate
setNextHopFaceId	interest.hpp	/^  setNextHopFaceId(uint64_t nextHopFaceId)$/;"	f	class:ndn::Interest
setNextHopFaceId	management/nfd-local-control-header.hpp	/^  setNextHopFaceId(uint64_t nextHopFaceId)$/;"	f	class:ndn::nfd::LocalControlHeader
setNextHopRecords	management/nfd-fib-entry.hpp	/^  setNextHopRecords(const T& begin, const T& end)$/;"	f	class:ndn::nfd::FibEntry
setNfdVersion	management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNfdVersion(const std::string& nfdVersion)$/;"	f	class:ndn::nfd::ForwarderStatus
setNonce	interest.cpp	/^Interest::setNonce(uint32_t nonce)$/;"	f	class:ndn::Interest
setNotAfter	security/certificate.hpp	/^  setNotAfter(const time::system_clock::TimePoint& notAfter)$/;"	f	class:ndn::Certificate
setNotBefore	security/certificate.hpp	/^  setNotBefore(const time::system_clock::TimePoint& notBefore)$/;"	f	class:ndn::Certificate
setNow	util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::setNow(const nanoseconds& timeSinceEpoch)$/;"	f	class:ndn::time::UnitTestClock
setOrigin	management/nfd-control-parameters.hpp	/^  setOrigin(uint64_t origin)$/;"	f	class:ndn::nfd::ControlParameters
setOrigin	management/nfd-rib-entry.hpp	/^  setOrigin(uint64_t origin)$/;"	f	class:ndn::nfd::Route
setPeriod	security/validity-period.cpp	/^ValidityPeriod::setPeriod(const time::system_clock::TimePoint& notBefore,$/;"	f	class:ndn::security::ValidityPeriod
setPolicy	lp/cache-policy.cpp	/^CachePolicy::setPolicy(CachePolicyType policy)$/;"	f	class:ndn::lp::CachePolicy
setPrefix	management/nfd-command-options.cpp	/^CommandOptions::setPrefix(const Name& prefix)$/;"	f	class:ndn::nfd::CommandOptions
setPrefix	management/nfd-fib-entry.cpp	/^FibEntry::setPrefix(const Name& prefix)$/;"	f	class:ndn::nfd::FibEntry
setPrefix	mgmt/status-dataset-context.cpp	/^StatusDatasetContext::setPrefix(const Name& prefix)$/;"	f	class:ndn::mgmt::StatusDatasetContext
setPublicKeyInfo	security/certificate.hpp	/^  setPublicKeyInfo(const PublicKey& key)$/;"	f	class:ndn::Certificate
setPublicKeyName	security/identity-certificate.cpp	/^IdentityCertificate::setPublicKeyName()$/;"	f	class:ndn::IdentityCertificate
setPublisherPublicKeyLocator	interest.hpp	/^  setPublisherPublicKeyLocator(const KeyLocator& keyLocator)$/;"	f	class:ndn::Interest
setPublisherPublicKeyLocator	selectors.cpp	/^Selectors::setPublisherPublicKeyLocator(const KeyLocator& keyLocator)$/;"	f	class:ndn::Selectors
setReason	lp/nack-header.cpp	/^NackHeader::setReason(NackReason reason)$/;"	f	class:ndn::lp::NackHeader
setReason	lp/nack.hpp	/^  setReason(NackReason reason)$/;"	f	class:ndn::lp::Nack
setRemoteUri	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setRemoteUri(const std::string& remoteUri)$/;"	f	class:ndn::nfd::FaceQueryFilter
setRemoteUri	management/nfd-face-traits.hpp	/^  setRemoteUri(const std::string& remoteUri)$/;"	f	class:ndn::nfd::FaceTraits
setSelectedDelegation	interest.cpp	/^Interest::setSelectedDelegation(const Name& delegationName)$/;"	f	class:ndn::Interest
setSelectedDelegation	interest.cpp	/^Interest::setSelectedDelegation(size_t delegationIndex)$/;"	f	class:ndn::Interest
setSelectors	interest.hpp	/^  setSelectors(const Selectors& selectors)$/;"	f	class:ndn::Interest
setSha256Signing	security/signing-info.cpp	/^SigningInfo::setSha256Signing()$/;"	f	class:ndn::security::SigningInfo
setSignature	data.cpp	/^Data::setSignature(const Signature& signature)$/;"	f	class:ndn::Data
setSignatureInfo	security/signing-info.cpp	/^SigningInfo::setSignatureInfo(const SignatureInfo& signatureInfo)$/;"	f	class:ndn::security::SigningInfo
setSignatureType	signature-info.cpp	/^SignatureInfo::setSignatureType(tlv::SignatureTypeValue type)$/;"	f	class:ndn::SignatureInfo
setSignatureValue	data.cpp	/^Data::setSignatureValue(const Block& value)$/;"	f	class:ndn::Data
setSigningCertName	security/signing-info.cpp	/^SigningInfo::setSigningCertName(const Name& certificateName)$/;"	f	class:ndn::security::SigningInfo
setSigningCertificate	management/nfd-command-options.cpp	/^CommandOptions::setSigningCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::nfd::CommandOptions
setSigningCertificate	management/nfd-command-options.cpp	/^CommandOptions::setSigningCertificate(const Name& certificateName)$/;"	f	class:ndn::nfd::CommandOptions
setSigningDefault	management/nfd-command-options.cpp	/^CommandOptions::setSigningDefault()$/;"	f	class:ndn::nfd::CommandOptions
setSigningIdentity	management/nfd-command-options.cpp	/^CommandOptions::setSigningIdentity(const Name& identityName)$/;"	f	class:ndn::nfd::CommandOptions
setSigningIdentity	security/signing-info.cpp	/^SigningInfo::setSigningIdentity(const Name& identity)$/;"	f	class:ndn::security::SigningInfo
setSigningInfo	management/nfd-command-options.cpp	/^CommandOptions::setSigningInfo(const security::SigningInfo& signingInfo)$/;"	f	class:ndn::nfd::CommandOptions
setSigningKeyName	security/signing-info.cpp	/^SigningInfo::setSigningKeyName(const Name& keyName)$/;"	f	class:ndn::security::SigningInfo
setStartTimestamp	management/nfd-forwarder-status.cpp	/^ForwarderStatus::setStartTimestamp(const time::system_clock::TimePoint& startTimestamp)$/;"	f	class:ndn::nfd::ForwarderStatus
setStrategy	management/nfd-control-parameters.hpp	/^  setStrategy(const Name& strategy)$/;"	f	class:ndn::nfd::ControlParameters
setStrategy	management/nfd-strategy-choice.cpp	/^StrategyChoice::setStrategy(const Name& strategy)$/;"	f	class:ndn::nfd::StrategyChoice
setTag	tag-host.hpp	/^TagHost::setTag(shared_ptr<T> tag) const$/;"	f	class:ndn::TagHost
setText	mgmt/control-response.hpp	/^ControlResponse::setText(const std::string& text)$/;"	f	class:ndn::mgmt::ControlResponse
setTimeout	management/nfd-command-options.cpp	/^CommandOptions::setTimeout(const time::milliseconds& timeout)$/;"	f	class:ndn::nfd::CommandOptions
setTpmLocator	security/pib-memory.cpp	/^PibMemory::setTpmLocator(const std::string& tpmLocator)$/;"	f	class:ndn::security::PibMemory
setTpmLocator	security/pib-sqlite3.cpp	/^PibSqlite3::setTpmLocator(const std::string& tpmLocator)$/;"	f	class:ndn::security::PibSqlite3
setTpmLocator	security/pib.cpp	/^Pib::setTpmLocator(const std::string& tpmLocator)$/;"	f	class:ndn::security::Pib
setTpmLocator	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::setTpmLocator(const string& tpmLocator)$/;"	f	class:ndn::SecPublicInfoSqlite3
setTpmLocatorInternal	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::setTpmLocatorInternal(const string& tpmLocator, bool needReset)$/;"	f	class:ndn::SecPublicInfoSqlite3
setTpmPassword	security/key-chain.hpp	/^  setTpmPassword(const uint8_t* password, size_t passwordLength)$/;"	f	class:ndn::security::KeyChain
setTpmPassword	security/sec-tpm-file.hpp	/^  setTpmPassword(const uint8_t* password, size_t passwordLength)$/;"	f	class:ndn::SecTpmFile
setTpmPassword	security/sec-tpm-osx.cpp	/^SecTpmOsx::setTpmPassword(const uint8_t* password, size_t passwordLength)$/;"	f	class:ndn::SecTpmOsx
setType	meta-info.cpp	/^MetaInfo::setType(uint32_t type)$/;"	f	class:ndn::MetaInfo
setUri	management/nfd-control-parameters.hpp	/^  setUri(const std::string& uri)$/;"	f	class:ndn::nfd::ControlParameters
setUriScheme	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setUriScheme(const std::string& uriScheme)$/;"	f	class:ndn::nfd::FaceQueryFilter
setValidityPeriod	signature-info.cpp	/^SignatureInfo::setValidityPeriod(const security::ValidityPeriod& validityPeriod)$/;"	f	class:ndn::SignatureInfo
setValue	signature.cpp	/^Signature::setValue(const Block& value)$/;"	f	class:ndn::Signature
sha256	util/crypto.cpp	/^sha256(const uint8_t* data, size_t dataLength)$/;"	f	namespace:ndn::crypto
shouldStop	util/notification-subscriber.hpp	/^  shouldStop()$/;"	f	class:ndn::util::NotificationSubscriber
shutdown	face.cpp	/^Face::shutdown()$/;"	f	class:ndn::Face
sign	security/key-chain.cpp	/^KeyChain::sign(Data& data, const SigningInfo& params)$/;"	f	class:ndn::security::KeyChain
sign	security/key-chain.cpp	/^KeyChain::sign(Interest& interest, const SigningInfo& params)$/;"	f	class:ndn::security::KeyChain
sign	security/key-chain.cpp	/^KeyChain::sign(const uint8_t* buffer, size_t bufferLength, const Name& certificateName)$/;"	f	class:ndn::security::KeyChain
sign	security/key-chain.cpp	/^KeyChain::sign(const uint8_t* buffer, size_t bufferLength, const SigningInfo& params)$/;"	f	class:ndn::security::KeyChain
sign	security/key-chain.hpp	/^KeyChain::sign(T& packet, const Name& certificateName)$/;"	f	class:ndn::security::KeyChain
signByIdentity	security/key-chain.cpp	/^KeyChain::signByIdentity(const uint8_t* buffer, size_t bufferLength, const Name& identityName)$/;"	f	class:ndn::security::KeyChain
signByIdentity	security/key-chain.hpp	/^KeyChain::signByIdentity(T& packet, const Name& identityName)$/;"	f	class:ndn::security::KeyChain
signImpl	security/key-chain.hpp	/^KeyChain::signImpl(T& packet, const SigningInfo& params)$/;"	f	class:ndn::security::KeyChain
signInTpm	security/key-chain.hpp	/^  signInTpm(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::security::KeyChain
signInTpm	security/sec-tpm-file.cpp	/^SecTpmFile::signInTpm(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::SecTpmFile
signInTpm	security/sec-tpm-osx.hpp	/^  signInTpm(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::SecTpmOsx
signInTpmInternal	security/sec-tpm-osx.cpp	/^SecTpmOsx::signInTpmInternal(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::SecTpmOsx
signPacketWrapper	security/key-chain.cpp	/^KeyChain::signPacketWrapper(Data& data, const Signature& signature,$/;"	f	class:ndn::security::KeyChain
signPacketWrapper	security/key-chain.cpp	/^KeyChain::signPacketWrapper(Interest& interest, const Signature& signature,$/;"	f	class:ndn::security::KeyChain
signWithSha256	security/key-chain.cpp	/^KeyChain::signWithSha256(Data& data)$/;"	f	class:ndn::security::KeyChain
signWithSha256	security/key-chain.cpp	/^KeyChain::signWithSha256(Interest& interest)$/;"	f	class:ndn::security::KeyChain
signal	util/signal-connection.cpp	/^namespace signal {$/;"	n	namespace:ndn::util	file:
signal	util/signal-connection.hpp	/^namespace signal {$/;"	n	namespace:ndn::util
signal	util/signal-emit.hpp	/^namespace signal {$/;"	n	namespace:ndn::util
signal	util/signal-scoped-connection.cpp	/^namespace signal {$/;"	n	namespace:ndn::util	file:
signal	util/signal-scoped-connection.hpp	/^namespace signal {$/;"	n	namespace:ndn::util
signal	util/signal-signal.hpp	/^namespace signal {$/;"	n	namespace:ndn::util
signed_interest	security/security-common.hpp	/^namespace signed_interest{$/;"	n	namespace:ndn
signingByCertificate	security/signing-helpers.cpp	/^signingByCertificate(const Name& certName)$/;"	f	namespace:ndn::security
signingByIdentity	security/signing-helpers.cpp	/^signingByIdentity(const Name& identity)$/;"	f	namespace:ndn::security
signingByKey	security/signing-helpers.cpp	/^signingByKey(const Name& keyName)$/;"	f	namespace:ndn::security
signingWithSha256	security/signing-helpers.cpp	/^signingWithSha256()$/;"	f	namespace:ndn::security
since	util/time.cpp	/^clock_string<ndn::time::steady_clock, CharT>::since()$/;"	f	class:boost::chrono::clock_string
since	util/time.cpp	/^clock_string<ndn::time::system_clock, CharT>::since()$/;"	f	class:boost::chrono::clock_string
size	detail/container-with-on-empty-signal.hpp	/^  size()$/;"	f	class:ndn::ContainerWithOnEmptySignal
size	encoding/block.cpp	/^Block::size() const$/;"	f	class:ndn::Block
size	encoding/encoder.hpp	/^Encoder::size() const$/;"	f	class:ndn::encoding::Encoder
size	exclude.hpp	/^Exclude::size() const$/;"	f	class:ndn::Exclude
size	name.hpp	/^  size() const$/;"	f	class:ndn::Name
size	security/additional-description.hpp	/^  size() const$/;"	f	class:ndn::security::AdditionalDescription
size	security/certificate-container.cpp	/^CertificateContainer::size() const$/;"	f	class:ndn::security::CertificateContainer
size	security/identity-container.cpp	/^IdentityContainer::size() const$/;"	f	class:ndn::security::IdentityContainer
size	security/key-container.cpp	/^KeyContainer::size() const$/;"	f	class:ndn::security::KeyContainer
size	util/in-memory-storage.hpp	/^  size() const$/;"	f	class:ndn::util::InMemoryStorage
size	util/regex/regex-backref-manager.hpp	/^RegexBackrefManager::size()$/;"	f	class:ndn::RegexBackrefManager
sizeOfNonNegativeInteger	encoding/tlv.hpp	/^sizeOfNonNegativeInteger(uint64_t varNumber)$/;"	f	namespace:ndn::tlv
sizeOfVarNumber	encoding/tlv.hpp	/^sizeOfVarNumber(uint64_t varNumber)$/;"	f	namespace:ndn::tlv
size_type	name.hpp	/^  typedef component_container::size_type       size_type;$/;"	t	class:ndn::Name
sqlite3_bind_string	security/sec-public-info-sqlite3.cpp	/^sqlite3_bind_string(sqlite3_stmt* statement,$/;"	f	namespace:ndn
sqlite3_column_string	security/sec-public-info-sqlite3.cpp	/^sqlite3_column_string(sqlite3_stmt* statement, int column)$/;"	f	namespace:ndn
start	management/nfd-controller.hpp	/^  start(const ControlParameters& parameters,$/;"	f	class:ndn::nfd::Controller
start	util/notification-subscriber.hpp	/^  start()$/;"	f	class:ndn::util::NotificationSubscriber
startCommand	management/nfd-controller.cpp	/^Controller::startCommand(const shared_ptr<ControlCommand>& command,$/;"	f	class:ndn::nfd::Controller
std	name.cpp	/^namespace std {$/;"	n	file:
std	name.hpp	/^namespace std {$/;"	n
std	util/ethernet.hpp	/^namespace std {$/;"	n
steady_clock	util/time.hpp	/^class steady_clock$/;"	c	namespace:ndn::time
step	util/sqlite3-statement.cpp	/^Sqlite3Statement::step()$/;"	f	class:ndn::util::Sqlite3Statement
stop	util/notification-subscriber.hpp	/^  stop()$/;"	f	class:ndn::util::NotificationSubscriber
subtract	util/monotonic_deadline_timer.hpp	/^  subtract(const time_type& timeLhs, const time_type& timeRhs)$/;"	f	struct:boost::asio::time_traits
sync	util/indented-stream.cpp	/^IndentedStream::StreamBuf::sync()$/;"	f	class:ndn::util::IndentedStream::StreamBuf
syncResolve	util/dns.cpp	/^  syncResolve(BoostResolver::query query)$/;"	f	class:ndn::dns::Resolver
syncResolve	util/dns.cpp	/^syncResolve(const std::string& host, boost::asio::io_service& ioService,$/;"	f	namespace:ndn::dns
system_clock	util/time.hpp	/^class system_clock$/;"	c	namespace:ndn::time
time	util/time-custom-clock.hpp	/^namespace time {$/;"	n	namespace:ndn
time	util/time-unit-test-clock.cpp	/^namespace time {$/;"	n	namespace:ndn	file:
time	util/time-unit-test-clock.hpp	/^namespace time {$/;"	n	namespace:ndn
time	util/time.cpp	/^namespace time {$/;"	n	namespace:ndn	file:
time	util/time.hpp	/^namespace time {$/;"	n	namespace:ndn
time_point	util/time.hpp	/^  typedef boost::chrono::time_point<steady_clock> time_point;$/;"	t	class:ndn::time::steady_clock
time_point	util/time.hpp	/^  typedef boost::chrono::time_point<system_clock> time_point;$/;"	t	class:ndn::time::system_clock
time_traits	util/monotonic_deadline_timer.hpp	/^struct time_traits<ndn::time::steady_clock>$/;"	s	namespace:boost::asio
time_type	util/monotonic_deadline_timer.hpp	/^  typedef ndn::time::steady_clock::TimePoint time_type;$/;"	t	struct:boost::asio::time_traits
tlv	encoding/tlv-nfd.hpp	/^namespace tlv {$/;"	n	namespace:ndn
tlv	encoding/tlv-security.hpp	/^namespace tlv {$/;"	n	namespace:ndn
tlv	encoding/tlv.hpp	/^namespace tlv {$/;"	n	namespace:ndn
tlv	lp/tlv.hpp	/^namespace tlv {$/;"	n	namespace:ndn::lp
tlvType	lp/detail/field-info.hpp	/^  uint64_t tlvType;$/;"	m	class:ndn::lp::detail::FieldInfo
toEscapedString	name-component.hpp	/^  toEscapedString() const)$/;"	f	class:ndn::name::Component
toHex	util/string-helper.cpp	/^toHex(const Buffer& buffer, bool isUpperCase\/* = true*\/)$/;"	f	namespace:ndn
toHex	util/string-helper.cpp	/^toHex(const uint8_t* buffer, size_t length, bool isUpperCase\/* = true*\/)$/;"	f	namespace:ndn
toInternalKeyName	security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::toInternalKeyName(const Name& keyName, KeyClass keyClass)$/;"	f	class:ndn::SecTpmOsx::Impl
toIsoString	util/time.cpp	/^toIsoString(const system_clock::TimePoint& timePoint)$/;"	f	namespace:ndn::time
toNumber	name-component.cpp	/^Component::toNumber() const$/;"	f	class:ndn::name::Component
toNumberWithMarker	name-component.cpp	/^Component::toNumberWithMarker(uint8_t marker) const$/;"	f	class:ndn::name::Component
toPosixDuration	util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::toPosixDuration(const typename BaseClock::duration& duration) const$/;"	f	class:ndn::time::UnitTestClock
toSegment	name-component.cpp	/^Component::toSegment() const$/;"	f	class:ndn::name::Component
toSegmentOffset	name-component.cpp	/^Component::toSegmentOffset() const$/;"	f	class:ndn::name::Component
toSequenceNumber	name-component.cpp	/^Component::toSequenceNumber() const$/;"	f	class:ndn::name::Component
toString	encoding/oid.cpp	/^OID::toString() const$/;"	f	class:ndn::OID
toString	util/digest.cpp	/^Digest<Hash>::toString()$/;"	f	class:ndn::util::Digest
toString	util/ethernet.cpp	/^Address::toString(char sep) const$/;"	f	class:ndn::util::ethernet::Address
toString	util/face-uri.cpp	/^FaceUri::toString() const$/;"	f	class:ndn::util::FaceUri
toString	util/time.cpp	/^toString(const system_clock::TimePoint& timePoint,$/;"	f	namespace:ndn::time
toTimestamp	name-component.cpp	/^Component::toTimestamp() const$/;"	f	class:ndn::name::Component
toUnixTimestamp	util/time.cpp	/^toUnixTimestamp(const system_clock::TimePoint& point)$/;"	f	namespace:ndn::time
toUri	exclude.cpp	/^Exclude::toUri() const$/;"	f	class:ndn::Exclude
toUri	interest.hpp	/^Interest::toUri() const$/;"	f	class:ndn::Interest
toUri	name-component.cpp	/^Component::toUri() const$/;"	f	class:ndn::name::Component
toUri	name-component.cpp	/^Component::toUri(std::ostream& result) const$/;"	f	class:ndn::name::Component
toUri	name.cpp	/^Name::toUri() const$/;"	f	class:ndn::Name
toVersion	name-component.cpp	/^Component::toVersion() const$/;"	f	class:ndn::name::Component
to_posix_duration	util/monotonic_deadline_timer.hpp	/^  to_posix_duration(const duration_type& duration)$/;"	f	struct:boost::asio::time_traits
to_posix_duration	util/time.cpp	/^steady_clock::to_posix_duration(const duration& duration)$/;"	f	class:ndn::time::steady_clock
topPrefix	mgmt/dispatcher.hpp	/^    Name topPrefix;$/;"	m	struct:ndn::mgmt::Dispatcher::TopPrefixEntry
transformName	security/sec-tpm-file.cpp	/^  transformName(const string& keyName, const string& extension)$/;"	f	class:ndn::SecTpmFile::Impl
trim	util/string-helper.cpp	/^trim(std::string& str)$/;"	f	namespace:ndn
trimLeft	util/string-helper.cpp	/^trimLeft(std::string& str)$/;"	f	namespace:ndn
trimRight	util/string-helper.cpp	/^trimRight(std::string& str)$/;"	f	namespace:ndn
type	encoding/block.hpp	/^Block::type() const$/;"	f	class:ndn::Block
unescape	util/string-helper.cpp	/^unescape(const std::string& str)$/;"	f	namespace:ndn
unlockTpm	security/key-chain.hpp	/^  unlockTpm(const char* password, size_t passwordLength, bool usePassword)$/;"	f	class:ndn::security::KeyChain
unlockTpm	security/sec-tpm-file.hpp	/^  unlockTpm(const char* password, size_t passwordLength, bool usePassword)$/;"	f	class:ndn::SecTpmFile
unlockTpm	security/sec-tpm-osx.cpp	/^SecTpmOsx::unlockTpm(const char* password, size_t passwordLength, bool usePassword)$/;"	f	class:ndn::SecTpmOsx
unregisterPrefix	face.cpp	/^Face::unregisterPrefix(const RegisteredPrefixId* registeredPrefixId,$/;"	f	class:ndn::Face
unsetCost	management/nfd-control-parameters.hpp	/^  unsetCost()$/;"	f	class:ndn::nfd::ControlParameters
unsetExpirationPeriod	management/nfd-control-parameters.hpp	/^  unsetExpirationPeriod()$/;"	f	class:ndn::nfd::ControlParameters
unsetFaceId	management/nfd-control-parameters.hpp	/^  unsetFaceId()$/;"	f	class:ndn::nfd::ControlParameters
unsetFaceId	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetFaceId()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetFacePersistency	management/nfd-control-parameters.hpp	/^  unsetFacePersistency()$/;"	f	class:ndn::nfd::ControlParameters
unsetFacePersistency	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetFacePersistency()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetFaceScope	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetFaceScope()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetFlags	management/nfd-control-parameters.hpp	/^  unsetFlags()$/;"	f	class:ndn::nfd::ControlParameters
unsetInterestFilter	face.cpp	/^Face::unsetInterestFilter(const InterestFilterId* interestFilterId)$/;"	f	class:ndn::Face
unsetInterestFilter	face.cpp	/^Face::unsetInterestFilter(const RegisteredPrefixId* registeredPrefixId)$/;"	f	class:ndn::Face
unsetKeyLocator	security/signature-sha256-with-ecdsa.cpp	/^SignatureSha256WithEcdsa::unsetKeyLocator()$/;"	f	class:ndn::SignatureSha256WithEcdsa
unsetKeyLocator	security/signature-sha256-with-rsa.cpp	/^SignatureSha256WithRsa::unsetKeyLocator()$/;"	f	class:ndn::SignatureSha256WithRsa
unsetKeyLocator	signature-info.cpp	/^SignatureInfo::unsetKeyLocator()$/;"	f	class:ndn::SignatureInfo
unsetKeyLocator	signature.hpp	/^  unsetKeyLocator()$/;"	f	class:ndn::Signature
unsetLink	interest.cpp	/^Interest::unsetLink()$/;"	f	class:ndn::Interest
unsetLinkType	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetLinkType()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetLocalControlFeature	management/nfd-control-parameters.hpp	/^  unsetLocalControlFeature()$/;"	f	class:ndn::nfd::ControlParameters
unsetLocalUri	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetLocalUri()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetName	management/nfd-control-parameters.hpp	/^  unsetName()$/;"	f	class:ndn::nfd::ControlParameters
unsetOrigin	management/nfd-control-parameters.hpp	/^  unsetOrigin()$/;"	f	class:ndn::nfd::ControlParameters
unsetRemoteUri	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetRemoteUri()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetSelectedDelegation	interest.cpp	/^Interest::unsetSelectedDelegation()$/;"	f	class:ndn::Interest
unsetStrategy	management/nfd-control-parameters.hpp	/^  unsetStrategy()$/;"	f	class:ndn::nfd::ControlParameters
unsetUri	management/nfd-control-parameters.hpp	/^  unsetUri()$/;"	f	class:ndn::nfd::ControlParameters
unsetUriScheme	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetUriScheme()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetValidityPeriod	signature-info.cpp	/^SignatureInfo::unsetValidityPeriod()$/;"	f	class:ndn::SignatureInfo
update	util/digest.cpp	/^Digest<Hash>::update(const uint8_t* buffer, size_t size)$/;"	f	class:ndn::util::Digest
util	util/digest.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/digest.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/dummy-client-face.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/dummy-client-face.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/ethernet.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/ethernet.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/face-uri.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/face-uri.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/in-memory-storage-entry.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/in-memory-storage-entry.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/in-memory-storage-fifo.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/in-memory-storage-fifo.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/in-memory-storage-lfu.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/in-memory-storage-lfu.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/in-memory-storage-lru.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/in-memory-storage-lru.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/in-memory-storage-persistent.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/in-memory-storage-persistent.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/in-memory-storage.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/in-memory-storage.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/indented-stream.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/indented-stream.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/network-monitor.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/network-monitor.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/notification-stream.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/notification-subscriber.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/scheduler-scoped-event-id.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/scheduler-scoped-event-id.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/scheduler.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/scheduler.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/segment-fetcher.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/segment-fetcher.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/signal-connection.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/signal-connection.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/signal-emit.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/signal-scoped-connection.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/signal-scoped-connection.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/signal-signal.hpp	/^namespace util {$/;"	n	namespace:ndn
util	util/sqlite3-statement.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	util/sqlite3-statement.hpp	/^namespace util {$/;"	n	namespace:ndn
validate	management/nfd-control-command.cpp	/^ControlCommand::FieldValidator::validate(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::ControlCommand::FieldValidator
validate	security/validator.cpp	/^Validator::validate(const Data& data,$/;"	f	class:ndn::Validator
validate	security/validator.cpp	/^Validator::validate(const Interest& interest,$/;"	f	class:ndn::Validator
validate	security/validator.hpp	/^  validate(const Data& data,$/;"	f	class:ndn::Validator
validate	security/validator.hpp	/^  validate(const Interest& interest,$/;"	f	class:ndn::Validator
validateRequest	management/nfd-control-command.cpp	/^ControlCommand::validateRequest(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::ControlCommand
validateRequest	management/nfd-control-command.cpp	/^FaceDestroyCommand::validateRequest(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceDestroyCommand
validateRequest	management/nfd-control-command.cpp	/^FaceLocalControlCommand::validateRequest(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceLocalControlCommand
validateRequest	management/nfd-control-command.cpp	/^StrategyChoiceUnsetCommand::validateRequest(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::StrategyChoiceUnsetCommand
validateResponse	management/nfd-control-command.cpp	/^ControlCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::ControlCommand
validateResponse	management/nfd-control-command.cpp	/^FaceCreateCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceCreateCommand
validateResponse	management/nfd-control-command.cpp	/^FaceDestroyCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceDestroyCommand
validateResponse	management/nfd-control-command.cpp	/^FaceLocalControlCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceLocalControlCommand
validateResponse	management/nfd-control-command.cpp	/^FibAddNextHopCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FibAddNextHopCommand
validateResponse	management/nfd-control-command.cpp	/^FibRemoveNextHopCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FibRemoveNextHopCommand
validateResponse	management/nfd-control-command.cpp	/^RibRegisterCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::RibRegisterCommand
validateResponse	management/nfd-control-command.cpp	/^RibUnregisterCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::RibUnregisterCommand
validateResponse	management/nfd-control-command.cpp	/^StrategyChoiceUnsetCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::StrategyChoiceUnsetCommand
validityCheck	security/identity.cpp	/^Identity::validityCheck() const$/;"	f	class:ndn::security::Identity
validityCheck	security/key.cpp	/^Key::validityCheck() const$/;"	f	class:ndn::security::Key
value	encoding/block.cpp	/^Block::value() const$/;"	f	class:ndn::Block
value_begin	encoding/block.hpp	/^Block::value_begin() const$/;"	f	class:ndn::Block
value_end	encoding/block.hpp	/^Block::value_end() const$/;"	f	class:ndn::Block
value_size	encoding/block.cpp	/^Block::value_size() const$/;"	f	class:ndn::Block
value_type	detail/container-with-on-empty-signal.hpp	/^  typedef typename Base::value_type value_type;$/;"	t	class:ndn::ContainerWithOnEmptySignal
value_type	encoding/encoder.hpp	/^  typedef Buffer::value_type value_type;$/;"	t	class:ndn::encoding::Encoder
value_type	name.hpp	/^  typedef Component               value_type;$/;"	t	class:ndn::Name
verifySignature	security/validator.cpp	/^Validator::verifySignature(const Data& data, const PublicKey& key)$/;"	f	class:ndn::Validator
verifySignature	security/validator.cpp	/^Validator::verifySignature(const Interest& interest, const PublicKey& key)$/;"	f	class:ndn::Validator
verifySignature	security/validator.cpp	/^Validator::verifySignature(const uint8_t* buf, const size_t size, const DigestSha256& sig)$/;"	f	class:ndn::Validator
verifySignature	security/validator.cpp	/^Validator::verifySignature(const uint8_t* buf,$/;"	f	class:ndn::Validator
verifySignature	security/validator.hpp	/^  verifySignature(const Buffer& blob, const DigestSha256& sig)$/;"	f	class:ndn::Validator
verifySignature	security/validator.hpp	/^  verifySignature(const Buffer& blob, const Signature& sig, const PublicKey& publicKey)$/;"	f	class:ndn::Validator
verifySignature	security/validator.hpp	/^  verifySignature(const Data& data, const DigestSha256& sig)$/;"	f	class:ndn::Validator
verifySignature	security/validator.hpp	/^  verifySignature(const Data& data,$/;"	f	class:ndn::Validator
verifySignature	security/validator.hpp	/^  verifySignature(const Interest& interest, const DigestSha256& sig)$/;"	f	class:ndn::Validator
verifySignature	security/validator.hpp	/^  verifySignature(const Interest& interest,$/;"	f	class:ndn::Validator
wantRegister	mgmt/dispatcher.hpp	/^    bool wantRegister;$/;"	m	struct:ndn::mgmt::Dispatcher::TopPrefixEntry
wire	encoding/block.cpp	/^Block::wire() const$/;"	f	class:ndn::Block
wireDecode	data.cpp	/^Data::wireDecode(const Block& wire)$/;"	f	class:ndn::Data
wireDecode	exclude.cpp	/^Exclude::wireDecode(const Block& wire)$/;"	f	class:ndn::Exclude
wireDecode	interest.cpp	/^Interest::wireDecode(const Block& wire)$/;"	f	class:ndn::Interest
wireDecode	key-locator.cpp	/^KeyLocator::wireDecode(const Block& wire)$/;"	f	class:ndn::KeyLocator
wireDecode	link.cpp	/^Link::wireDecode(const Block& wire)$/;"	f	class:ndn::Link
wireDecode	lp/cache-policy.cpp	/^CachePolicy::wireDecode(const Block& wire)$/;"	f	class:ndn::lp::CachePolicy
wireDecode	lp/nack-header.cpp	/^NackHeader::wireDecode(const Block& wire)$/;"	f	class:ndn::lp::NackHeader
wireDecode	lp/packet.cpp	/^Packet::wireDecode(const Block& wire)$/;"	f	class:ndn::lp::Packet
wireDecode	management/nfd-channel-status.cpp	/^ChannelStatus::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::ChannelStatus
wireDecode	management/nfd-control-parameters.cpp	/^ControlParameters::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::ControlParameters
wireDecode	management/nfd-face-event-notification.cpp	/^FaceEventNotification::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::FaceEventNotification
wireDecode	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::FaceQueryFilter
wireDecode	management/nfd-face-status.cpp	/^FaceStatus::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::FaceStatus
wireDecode	management/nfd-fib-entry.cpp	/^FibEntry::wireDecode(const Block& wire)$/;"	f	class:ndn::nfd::FibEntry
wireDecode	management/nfd-fib-entry.cpp	/^NextHopRecord::wireDecode(const Block& wire)$/;"	f	class:ndn::nfd::NextHopRecord
wireDecode	management/nfd-forwarder-status.cpp	/^ForwarderStatus::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::ForwarderStatus
wireDecode	management/nfd-local-control-header.hpp	/^LocalControlHeader::wireDecode(const Block& wire, uint8_t encodeMask)$/;"	f	class:ndn::nfd::LocalControlHeader
wireDecode	management/nfd-rib-entry.cpp	/^RibEntry::wireDecode(const Block& wire)$/;"	f	class:ndn::nfd::RibEntry
wireDecode	management/nfd-rib-entry.cpp	/^Route::wireDecode(const Block& wire)$/;"	f	class:ndn::nfd::Route
wireDecode	management/nfd-strategy-choice.cpp	/^StrategyChoice::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::StrategyChoice
wireDecode	meta-info.cpp	/^MetaInfo::wireDecode(const Block& wire)$/;"	f	class:ndn::MetaInfo
wireDecode	mgmt/control-response.cpp	/^ControlResponse::wireDecode(const Block& wire)$/;"	f	class:ndn::mgmt::ControlResponse
wireDecode	name-component.cpp	/^Component::wireDecode(const Block& wire)$/;"	f	class:ndn::name::Component
wireDecode	name.cpp	/^Name::wireDecode(const Block& wire)$/;"	f	class:ndn::Name
wireDecode	security/additional-description.cpp	/^AdditionalDescription::wireDecode(const Block& wire)$/;"	f	class:ndn::security::AdditionalDescription
wireDecode	security/certificate.cpp	/^Certificate::wireDecode(const Block& wire)$/;"	f	class:ndn::Certificate
wireDecode	security/identity-certificate.cpp	/^IdentityCertificate::wireDecode(const Block& wire)$/;"	f	class:ndn::IdentityCertificate
wireDecode	security/secured-bag.cpp	/^SecuredBag::wireDecode(const Block& wire)$/;"	f	class:ndn::SecuredBag
wireDecode	security/validity-period.cpp	/^ValidityPeriod::wireDecode(const Block& wire)$/;"	f	class:ndn::security::ValidityPeriod
wireDecode	selectors.cpp	/^Selectors::wireDecode(const Block& wire)$/;"	f	class:ndn::Selectors
wireDecode	signature-info.cpp	/^SignatureInfo::wireDecode(const Block& wire)$/;"	f	class:ndn::SignatureInfo
wireEncode	data.cpp	/^Data::wireEncode() const$/;"	f	class:ndn::Data
wireEncode	data.cpp	/^Data::wireEncode(EncodingBuffer& encoder, const Block& signatureValue) const$/;"	f	class:ndn::Data
wireEncode	data.cpp	/^Data::wireEncode(EncodingImpl<TAG>& encoder, bool unsignedPortion\/* = false*\/) const$/;"	f	class:ndn::Data
wireEncode	exclude.cpp	/^Exclude::wireEncode() const$/;"	f	class:ndn::Exclude
wireEncode	exclude.cpp	/^Exclude::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::Exclude
wireEncode	interest.cpp	/^Interest::wireEncode() const$/;"	f	class:ndn::Interest
wireEncode	interest.cpp	/^Interest::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::Interest
wireEncode	key-locator.cpp	/^KeyLocator::wireEncode() const$/;"	f	class:ndn::KeyLocator
wireEncode	key-locator.cpp	/^KeyLocator::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::KeyLocator
wireEncode	lp/cache-policy.cpp	/^CachePolicy::wireEncode() const$/;"	f	class:ndn::lp::CachePolicy
wireEncode	lp/cache-policy.cpp	/^CachePolicy::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::lp::CachePolicy
wireEncode	lp/nack-header.cpp	/^NackHeader::wireEncode() const$/;"	f	class:ndn::lp::NackHeader
wireEncode	lp/nack-header.cpp	/^NackHeader::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::lp::NackHeader
wireEncode	lp/packet.cpp	/^Packet::wireEncode() const$/;"	f	class:ndn::lp::Packet
wireEncode	lp/packet.cpp	/^Packet::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::lp::Packet
wireEncode	management/nfd-channel-status.cpp	/^ChannelStatus::wireEncode() const$/;"	f	class:ndn::nfd::ChannelStatus
wireEncode	management/nfd-channel-status.cpp	/^ChannelStatus::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::ChannelStatus
wireEncode	management/nfd-control-parameters.cpp	/^ControlParameters::wireEncode() const$/;"	f	class:ndn::nfd::ControlParameters
wireEncode	management/nfd-control-parameters.cpp	/^ControlParameters::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::ControlParameters
wireEncode	management/nfd-face-event-notification.cpp	/^FaceEventNotification::wireEncode() const$/;"	f	class:ndn::nfd::FaceEventNotification
wireEncode	management/nfd-face-event-notification.cpp	/^FaceEventNotification::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::FaceEventNotification
wireEncode	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::wireEncode() const$/;"	f	class:ndn::nfd::FaceQueryFilter
wireEncode	management/nfd-face-query-filter.cpp	/^FaceQueryFilter::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::FaceQueryFilter
wireEncode	management/nfd-face-status.cpp	/^FaceStatus::wireEncode() const$/;"	f	class:ndn::nfd::FaceStatus
wireEncode	management/nfd-face-status.cpp	/^FaceStatus::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::FaceStatus
wireEncode	management/nfd-fib-entry.cpp	/^FibEntry::wireEncode() const$/;"	f	class:ndn::nfd::FibEntry
wireEncode	management/nfd-fib-entry.cpp	/^FibEntry::wireEncode(EncodingImpl<TAG>& block) const$/;"	f	class:ndn::nfd::FibEntry
wireEncode	management/nfd-fib-entry.cpp	/^NextHopRecord::wireEncode() const$/;"	f	class:ndn::nfd::NextHopRecord
wireEncode	management/nfd-fib-entry.cpp	/^NextHopRecord::wireEncode(EncodingImpl<TAG>& block) const$/;"	f	class:ndn::nfd::NextHopRecord
wireEncode	management/nfd-forwarder-status.cpp	/^ForwarderStatus::wireEncode() const$/;"	f	class:ndn::nfd::ForwarderStatus
wireEncode	management/nfd-forwarder-status.cpp	/^ForwarderStatus::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::ForwarderStatus
wireEncode	management/nfd-local-control-header.hpp	/^LocalControlHeader::wireEncode(EncodingImpl<TAG>& block, size_t payloadSize,$/;"	f	class:ndn::nfd::LocalControlHeader
wireEncode	management/nfd-local-control-header.hpp	/^LocalControlHeader::wireEncode(const U& payload, uint8_t encodeMask) const$/;"	f	class:ndn::nfd::LocalControlHeader
wireEncode	management/nfd-rib-entry.cpp	/^RibEntry::wireEncode() const$/;"	f	class:ndn::nfd::RibEntry
wireEncode	management/nfd-rib-entry.cpp	/^RibEntry::wireEncode(EncodingImpl<TAG>& block) const$/;"	f	class:ndn::nfd::RibEntry
wireEncode	management/nfd-rib-entry.cpp	/^Route::wireEncode() const$/;"	f	class:ndn::nfd::Route
wireEncode	management/nfd-rib-entry.cpp	/^Route::wireEncode(EncodingImpl<TAG>& block) const$/;"	f	class:ndn::nfd::Route
wireEncode	management/nfd-strategy-choice.cpp	/^StrategyChoice::wireEncode() const$/;"	f	class:ndn::nfd::StrategyChoice
wireEncode	management/nfd-strategy-choice.cpp	/^StrategyChoice::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::StrategyChoice
wireEncode	meta-info.cpp	/^MetaInfo::wireEncode() const$/;"	f	class:ndn::MetaInfo
wireEncode	meta-info.cpp	/^MetaInfo::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::MetaInfo
wireEncode	mgmt/control-response.cpp	/^ControlResponse::wireEncode() const$/;"	f	class:ndn::mgmt::ControlResponse
wireEncode	name-component.cpp	/^Component::wireEncode() const$/;"	f	class:ndn::name::Component
wireEncode	name-component.cpp	/^Component::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::name::Component
wireEncode	name.cpp	/^Name::wireEncode() const$/;"	f	class:ndn::Name
wireEncode	name.cpp	/^Name::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::Name
wireEncode	security/additional-description.cpp	/^AdditionalDescription::wireEncode() const$/;"	f	class:ndn::security::AdditionalDescription
wireEncode	security/additional-description.cpp	/^AdditionalDescription::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::security::AdditionalDescription
wireEncode	security/secured-bag.cpp	/^SecuredBag::wireEncode() const$/;"	f	class:ndn::SecuredBag
wireEncode	security/validity-period.cpp	/^ValidityPeriod::wireEncode() const$/;"	f	class:ndn::security::ValidityPeriod
wireEncode	security/validity-period.cpp	/^ValidityPeriod::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::security::ValidityPeriod
wireEncode	selectors.cpp	/^Selectors::wireEncode() const$/;"	f	class:ndn::Selectors
wireEncode	selectors.cpp	/^Selectors::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::Selectors
wireEncode	signature-info.cpp	/^SignatureInfo::wireEncode() const$/;"	f	class:ndn::SignatureInfo
wireEncode	signature-info.cpp	/^SignatureInfo::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::SignatureInfo
wireReset	management/nfd-face-event-notification.cpp	/^FaceEventNotification::wireReset() const$/;"	f	class:ndn::nfd::FaceEventNotification
wireReset	management/nfd-face-status.cpp	/^FaceStatus::wireReset() const$/;"	f	class:ndn::nfd::FaceStatus
write	encoding/buffer-stream.hpp	/^  write(const char_type* s, std::streamsize n)$/;"	f	class:ndn::iostreams::buffer_append_device
writeNonNegativeInteger	encoding/tlv.hpp	/^writeNonNegativeInteger(std::ostream& os, uint64_t varNumber)$/;"	f	namespace:ndn::tlv
writeVarNumber	encoding/tlv.hpp	/^writeVarNumber(std::ostream& os, uint64_t varNumber)$/;"	f	namespace:ndn::tlv
~CFReleaser	security/sec-tpm-osx.cpp	/^  ~CFReleaser()$/;"	f	class:ndn::CFReleaser
~CanonizeProvider	util/face-uri.cpp	/^  ~CanonizeProvider()$/;"	f	class:ndn::util::CanonizeProvider
~Certificate	security/certificate.cpp	/^Certificate::~Certificate()$/;"	f	class:ndn::Certificate
~CertificateCache	security/certificate-cache.hpp	/^  ~CertificateCache()$/;"	f	class:ndn::CertificateCache
~CertificateCacheTtl	security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::~CertificateCacheTtl()$/;"	f	class:ndn::CertificateCacheTtl
~CertificateExtension	security/certificate-extension.hpp	/^  ~CertificateExtension()$/;"	f	class:ndn::CertificateExtension
~Checker	security/conf/checker.hpp	/^  ~Checker()$/;"	f	class:ndn::security::conf::Checker
~CommandInterestGenerator	util/command-interest-generator.hpp	/^  ~CommandInterestGenerator()$/;"	f	class:ndn::CommandInterestGenerator
~CommandInterestValidator	util/command-interest-validator.hpp	/^  ~CommandInterestValidator()$/;"	f	class:ndn::CommandInterestValidator
~ConfigFile	util/config-file.cpp	/^ConfigFile::~ConfigFile()$/;"	f	class:ndn::ConfigFile
~CustomClock	util/time-custom-clock.hpp	/^  virtual ~CustomClock()$/;"	f	class:ndn::time::CustomClock
~Dispatcher	mgmt/dispatcher.cpp	/^Dispatcher::~Dispatcher()$/;"	f	class:ndn::mgmt::Dispatcher
~Filter	security/conf/filter.hpp	/^  ~Filter()$/;"	f	class:ndn::security::conf::Filter
~InMemoryStorage	util/in-memory-storage.cpp	/^InMemoryStorage::~InMemoryStorage()$/;"	f	class:ndn::util::InMemoryStorage
~InMemoryStorageFifo	util/in-memory-storage-fifo.cpp	/^InMemoryStorageFifo::~InMemoryStorageFifo()$/;"	f	class:ndn::util::InMemoryStorageFifo
~InMemoryStorageLfu	util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::~InMemoryStorageLfu()$/;"	f	class:ndn::util::InMemoryStorageLfu
~InMemoryStorageLru	util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::~InMemoryStorageLru()$/;"	f	class:ndn::util::InMemoryStorageLru
~InMemoryStoragePersistent	util/in-memory-storage-persistent.cpp	/^InMemoryStoragePersistent::~InMemoryStoragePersistent()$/;"	f	class:ndn::util::InMemoryStoragePersistent
~IndentedStream	util/indented-stream.cpp	/^IndentedStream::~IndentedStream()$/;"	f	class:ndn::util::IndentedStream
~KeyChain	security/key-chain.cpp	/^KeyChain::~KeyChain()$/;"	f	class:ndn::security::KeyChain
~KeyLocatorChecker	security/conf/key-locator-checker.hpp	/^  ~KeyLocatorChecker()$/;"	f	class:ndn::security::conf::KeyLocatorChecker
~KeyParams	security/key-params.hpp	/^  ~KeyParams()$/;"	f	class:ndn::KeyParams
~NetworkMonitor	util/network-monitor.cpp	/^NetworkMonitor::~NetworkMonitor()$/;"	f	class:ndn::util::NetworkMonitor
~NotificationStream	util/notification-stream.hpp	/^  ~NotificationStream()$/;"	f	class:ndn::util::NotificationStream
~NotificationSubscriber	util/notification-subscriber.hpp	/^  ~NotificationSubscriber()$/;"	f	class:ndn::util::NotificationSubscriber
~Pib	security/pib.cpp	/^Pib::~Pib()$/;"	f	class:ndn::security::Pib
~PibImpl	security/pib-impl.hpp	/^  ~PibImpl()$/;"	f	class:ndn::security::PibImpl
~PibSqlite3	security/pib-sqlite3.cpp	/^PibSqlite3::~PibSqlite3()$/;"	f	class:ndn::security::PibSqlite3
~RegexBackrefManager	util/regex/regex-backref-manager.hpp	/^RegexBackrefManager::~RegexBackrefManager()$/;"	f	class:ndn::RegexBackrefManager
~RegexBackrefMatcher	util/regex/regex-backref-matcher.hpp	/^  ~RegexBackrefMatcher()$/;"	f	class:ndn::RegexBackrefMatcher
~RegexComponentMatcher	util/regex/regex-component-matcher.hpp	/^  ~RegexComponentMatcher()$/;"	f	class:ndn::RegexComponentMatcher
~RegexComponentSetMatcher	util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::~RegexComponentSetMatcher()$/;"	f	class:ndn::RegexComponentSetMatcher
~RegexMatcher	util/regex/regex-matcher.hpp	/^RegexMatcher::~RegexMatcher()$/;"	f	class:ndn::RegexMatcher
~RegexNameFilter	security/conf/filter.hpp	/^  ~RegexNameFilter()$/;"	f	class:ndn::security::conf::RegexNameFilter
~RegexPatternListMatcher	util/regex/regex-pattern-list-matcher.hpp	/^  ~RegexPatternListMatcher()$/;"	f	class:ndn::RegexPatternListMatcher
~RegexPseudoMatcher	util/regex/regex-pseudo-matcher.hpp	/^  ~RegexPseudoMatcher()$/;"	f	class:ndn::RegexPseudoMatcher
~RegexRepeatMatcher	util/regex/regex-repeat-matcher.hpp	/^  ~RegexRepeatMatcher()$/;"	f	class:ndn::RegexRepeatMatcher
~RegexTopMatcher	util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::~RegexTopMatcher()$/;"	f	class:ndn::RegexTopMatcher
~RelationNameFilter	security/conf/filter.hpp	/^  ~RelationNameFilter()$/;"	f	class:ndn::security::conf::RelationNameFilter
~Rule	security/conf/rule.hpp	/^  ~Rule()$/;"	f	class:ndn::security::conf::Rule
~ScopedConnection	util/signal-scoped-connection.cpp	/^ScopedConnection::~ScopedConnection()$/;"	f	class:ndn::util::signal::ScopedConnection
~ScopedEventId	util/scheduler-scoped-event-id.cpp	/^ScopedEventId::~ScopedEventId()$/;"	f	class:ndn::util::scheduler::ScopedEventId
~SecPublicInfo	security/sec-public-info.cpp	/^SecPublicInfo::~SecPublicInfo()$/;"	f	class:ndn::SecPublicInfo
~SecPublicInfoSqlite3	security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::~SecPublicInfoSqlite3()$/;"	f	class:ndn::SecPublicInfoSqlite3
~SecRule	security/sec-rule.hpp	/^  ~SecRule()$/;"	f	class:ndn::SecRule
~SecRuleRelative	security/sec-rule-relative.cpp	/^SecRuleRelative::~SecRuleRelative()$/;"	f	class:ndn::SecRuleRelative
~SecRuleSpecific	security/sec-rule-specific.hpp	/^  ~SecRuleSpecific() {};$/;"	f	class:ndn::SecRuleSpecific
~SecTpm	security/sec-tpm.cpp	/^SecTpm::~SecTpm()$/;"	f	class:ndn::SecTpm
~SecTpmFile	security/sec-tpm-file.cpp	/^SecTpmFile::~SecTpmFile()$/;"	f	class:ndn::SecTpmFile
~SecTpmOsx	security/sec-tpm-osx.cpp	/^SecTpmOsx::~SecTpmOsx()$/;"	f	class:ndn::SecTpmOsx
~SecuredBag	security/secured-bag.cpp	/^SecuredBag::~SecuredBag()$/;"	f	class:ndn::SecuredBag
~Signal	util/signal-signal.hpp	/^Signal<Owner, TArgs...>::~Signal()$/;"	f	class:ndn::util::signal::Signal
~Sqlite3Statement	util/sqlite3-statement.cpp	/^Sqlite3Statement::~Sqlite3Statement()$/;"	f	class:ndn::util::Sqlite3Statement
~Tag	tag.hpp	/^Tag::~Tag()$/;"	f	class:ndn::Tag
~TcpTransport	transport/tcp-transport.cpp	/^TcpTransport::~TcpTransport()$/;"	f	class:ndn::TcpTransport
~Transport	transport/transport.hpp	/^Transport::~Transport()$/;"	f	class:ndn::Transport
~UnixTransport	transport/unix-transport.cpp	/^UnixTransport::~UnixTransport()$/;"	f	class:ndn::UnixTransport
~ValidationRequest	security/validation-request.hpp	/^  ~ValidationRequest()$/;"	f	class:ndn::ValidationRequest
~ValidatorConfig	security/validator-config.hpp	/^  ~ValidatorConfig()$/;"	f	class:ndn::ValidatorConfig
~ValidatorNull	security/validator-null.hpp	/^  ~ValidatorNull()$/;"	f	class:ndn::ValidatorNull
~ValidatorRegex	security/validator-regex.hpp	/^  ~ValidatorRegex()$/;"	f	class:ndn::ValidatorRegex
