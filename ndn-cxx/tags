!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACL_TYPE_PRIVATE	src/security/security-common.hpp	/^  ACL_TYPE_PRIVATE$/;"	e	enum:ndn::AclType
ACL_TYPE_PUBLIC	src/security/security-common.hpp	/^  ACL_TYPE_PUBLIC,$/;"	e	enum:ndn::AclType
ADDR_LEN	src/util/ethernet.hpp	/^const size_t ADDR_LEN     = 6;      \/\/\/< Octets in one Ethernet address$/;"	m	namespace:ndn::util::ethernet
AES_KEY_SIZES	src/security/key-params.cpp	/^static const uint32_t AES_KEY_SIZES[] = {64, 128, 256};$/;"	m	namespace:ndn	file:
AR	build/c4che/_cache.py	/^AR = ['\/usr\/bin\/ar']$/;"	v
ARFLAGS	build/c4che/_cache.py	/^ARFLAGS = ['rcs']$/;"	v
AcceptContinuation	src/mgmt/dispatcher.hpp	/^typedef std::function<void(const std::string& requester)> AcceptContinuation;$/;"	t	namespace:ndn::mgmt
AccumulatorType	tools/ndnsec/util.hpp	/^  AccumulatorType(T* store)$/;"	f	class:AccumulatorType
AccumulatorType	tools/ndnsec/util.hpp	/^class AccumulatorType : public boost::program_options::value_semantic$/;"	c
AclType	src/security/security-common.hpp	/^enum AclType {$/;"	g	namespace:ndn
AdditionalDescription	src/encoding/tlv.hpp	/^  AdditionalDescription = 258,$/;"	e	enum:ndn::tlv::__anon5
AdditionalDescription	src/security/additional-description.cpp	/^AdditionalDescription::AdditionalDescription(const Block& block)$/;"	f	class:ndn::security::AdditionalDescription
AdditionalDescription	src/security/additional-description.hpp	/^class AdditionalDescription$/;"	c	namespace:ndn::security
Address	src/util/ethernet.cpp	/^Address::Address()$/;"	f	class:ndn::util::ethernet::Address
Address	src/util/ethernet.cpp	/^Address::Address(const uint8_t octets[ADDR_LEN])$/;"	f	class:ndn::util::ethernet::Address
Address	src/util/ethernet.cpp	/^Address::Address(uint8_t a1, uint8_t a2, uint8_t a3, uint8_t a4, uint8_t a5, uint8_t a6)$/;"	f	class:ndn::util::ethernet::Address
Address	src/util/ethernet.hpp	/^class Address : public std::array<uint8_t, ADDR_LEN>$/;"	c	namespace:ndn::util::ethernet
AddressSelector	src/util/dns.hpp	/^typedef function<bool (const boost::asio::ip::address& address)> AddressSelector;$/;"	t	namespace:ndn::dns
AesKeyParams	src/security/key-params.hpp	/^typedef SimpleSymmetricKeyParams<AesKeyParamsInfo> AesKeyParams;$/;"	t	namespace:ndn
AesKeyParamsInfo	src/security/key-params.hpp	/^class AesKeyParamsInfo$/;"	c	namespace:ndn
AnchorList	src/security/validator-config.hpp	/^  typedef std::map<Name, shared_ptr<IdentityCertificate> > AnchorList;$/;"	t	class:ndn::ValidatorConfig
Any	src/encoding/tlv.hpp	/^  Any           = 19,$/;"	e	enum:ndn::tlv::__anon4
AnyAddress	src/util/dns.hpp	/^struct AnyAddress$/;"	s	namespace:ndn::dns
AppPrivateBlock1	src/encoding/tlv.hpp	/^  AppPrivateBlock1 = 128,$/;"	e	enum:ndn::tlv::__anon4
AppPrivateBlock2	src/encoding/tlv.hpp	/^  AppPrivateBlock2 = 32767$/;"	e	enum:ndn::tlv::__anon4
ArgumentError	src/management/nfd-control-command.hpp	/^    ArgumentError(const std::string& what)$/;"	f	class:ndn::nfd::ControlCommand::ArgumentError
ArgumentError	src/management/nfd-control-command.hpp	/^  class ArgumentError : public std::invalid_argument$/;"	c	class:ndn::nfd::ControlCommand
Authorization	src/mgmt/dispatcher.hpp	/^                           const RejectContinuation& reject)> Authorization;$/;"	t	namespace:ndn::mgmt
AuthorizationAcceptedCallback	src/mgmt/dispatcher.hpp	/^                             const ControlParameters*)> AuthorizationAcceptedCallback;$/;"	t	class:ndn::mgmt::Dispatcher
AuthorizationRejectedCallback	src/mgmt/dispatcher.hpp	/^                             const Interest& interest)> AuthorizationRejectedCallback;$/;"	t	class:ndn::mgmt::Dispatcher
BASE_64	src/util/io.hpp	/^  BASE_64,$/;"	e	enum:ndn::io::IoEncoding
BERDecodeTime	src/encoding/cryptopp/asn_ext.cpp	/^BERDecodeTime(CryptoPP::BufferedTransformation& bt,$/;"	f	namespace:ndn
BINDIR	build/c4che/_cache.py	/^BINDIR = '\/usr\/local\/bin'$/;"	v
BOOST_AUTO_TEST_CASE	tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(LargeDelayBetweenFaceConstructorAndProcessEvents) \/\/ Bug #2742$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(SetFilter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(SetRegexFilter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(SetRegexFilterButNoRegister)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(SetRegexFilterError)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(SetTwoFilters)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(ShutdownWhileSendInProgress) \/\/ Bug #3136$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(Tcp)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(Unix)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/integrated/network-monitor.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	tests/unit-tests/data.t.cpp	/^BOOST_AUTO_TEST_CASE(DataEqualityChecks)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/data.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeWithLocalHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/data.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeWithoutLocalHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/data.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeWithLocalHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/data.t.cpp	/^BOOST_AUTO_TEST_CASE(SignatureEqualityChecks)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(Data)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(Empty)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(Nested)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeInteger)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(String)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(BlockFromBlock)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(BlockFromBlockCopyOnWriteModifyCopy)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(BlockFromBlockCopyOnWriteModifyOrig)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(BlockToBuffer)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodingBufferToBlock)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(Equality)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(EraseRange)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(EraseSingleElement)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(FromBuffer)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(FromStream)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(FromStreamWhitespace) \/\/ Bug 2728$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(FromStreamZeroLength) \/\/ Bug 2729$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(InsertBeginning)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(InsertEnd)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(InsertMiddle)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeNumberEightBytes)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeNumberFourBytes1)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeNumberFourBytes2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeNumberOneByte1)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeNumberOneByte2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeNumberTwoBytes1)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeNumberTwoBytes2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(Remove)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(VarNumberFiveBytes1)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(VarNumberFiveBytes2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(VarNumberNineBytes)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(VarNumberOneByte1)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(VarNumberOneByte2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(VarNumberThreeBytes1)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(VarNumberThreeBytes2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/encoder.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/encoder.t.cpp	/^BOOST_AUTO_TEST_CASE(Reserve)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/encoder.t.cpp	/^BOOST_AUTO_TEST_CASE(Tlv)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/estimator.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/estimator.t.cpp	/^BOOST_AUTO_TEST_CASE(Tlv)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/tlv.t.cpp	/^BOOST_AUTO_TEST_CASE(Exception)$/;"	f	namespace:ndn::tlv::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/tlv.t.cpp	/^BOOST_AUTO_TEST_CASE(ReadFromBuffer)$/;"	f	namespace:ndn::tlv::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/tlv.t.cpp	/^BOOST_AUTO_TEST_CASE(ReadFromStream)$/;"	f	namespace:ndn::tlv::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/tlv.t.cpp	/^BOOST_AUTO_TEST_CASE(SizeOf)$/;"	f	namespace:ndn::tlv::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/encoding/tlv.t.cpp	/^BOOST_AUTO_TEST_CASE(Write)$/;"	f	namespace:ndn::tlv::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/exclude.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/exclude.t.cpp	/^BOOST_AUTO_TEST_CASE(Before)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/exclude.t.cpp	/^BOOST_AUTO_TEST_CASE(EqualityComparable)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/exclude.t.cpp	/^BOOST_AUTO_TEST_CASE(ExcludeEmptyComponent) \/\/ Bug #2660$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/exclude.t.cpp	/^BOOST_AUTO_TEST_CASE(ImplicitSha256Digest)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/exclude.t.cpp	/^BOOST_AUTO_TEST_CASE(Malformed)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/exclude.t.cpp	/^BOOST_AUTO_TEST_CASE(Ranges)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(DeprecatedExpressInterestData)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(DeprecatedExpressInterestTimeout)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(DestructionWithoutCancellingPendingInterests) \/\/ Bug #2518$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ExpressInterestData)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ExpressInterestNack)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ExpressInterestTimeout)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ExpressInterestWithLocalControlHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ProcessEvents)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(PutDataWithLocalControlHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(PutNack)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ReceiveDataWithLocalControlHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ReceiveInterestWithLocalControlHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(RegisterUnregisterPrefix)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(RemovePendingInterest)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(SetRegexFilter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(SetRegexFilterAndRegister)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(SetRegexFilterError)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(SetUnsetInterestFilter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(SetUnsetInterestFilterWithoutSucessCallback)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(SimilarFilters)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(Decode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeEncode) \/\/ this test case to ensure that wireDecode resets all the fields$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeFromStream)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeInterestWithLink)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeInterestWithLinkNonDecreasingOrder)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeWithLocalHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeWithoutLocalHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeDecodeWithLink)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeWithLocalHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(InterestContainingSelectedDelegationButNoLink)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(InterestEqualityChecks)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(InterestFilterMatching)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(LinkObject)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(LinkObjectMissingContentType)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(LinkObjectNoMetaInfo)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(LinkObjectWrongContentType)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(MatchesData)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(SelectedDelegationChecks)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(SelectedDelegationEqualToDelegationCount)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(SelectedDelegationGreaterThanDelegationCount)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(SelectedDelegationIsNotNonNegativeInteger)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(SelectorsEqualityChecks)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/key-locator.t.cpp	/^BOOST_AUTO_TEST_CASE(Equality)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/key-locator.t.cpp	/^BOOST_AUTO_TEST_CASE(TypeKeyDigest)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/key-locator.t.cpp	/^BOOST_AUTO_TEST_CASE(TypeName)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/key-locator.t.cpp	/^BOOST_AUTO_TEST_CASE(TypeNone)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/key-locator.t.cpp	/^BOOST_AUTO_TEST_CASE(UnknownType)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(CheckEncodeDecode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(CheckInsertDelegation)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(CheckRemoveDelegation)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(CountDelegationFromWire)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(Decode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(IncorrectContentType)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(MissingNameEncoding)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(MissingPreferenceEncoding)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(PairParsingCheck)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/cache-policy.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeInvalidPolicyError)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/cache-policy.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeMissingPolicyError)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/cache-policy.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeUnknownPolicyError)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/cache-policy.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/cache-policy.t.cpp	/^BOOST_AUTO_TEST_CASE(Policy)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/nack-header.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeOmitReason)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/nack-header.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeUnknownReasonCode)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/nack-header.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/nack-header.t.cpp	/^BOOST_AUTO_TEST_CASE(Reason)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/nack.t.cpp	/^BOOST_AUTO_TEST_CASE(Members)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeBareNetworkLayerPacket)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeEmpty)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeFragment)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeIdle)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeIgnoredHeader)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeNormal)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeRepeatedFragment)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeRepeatedNonRepeatableHeader)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeUnrecognizedHeader)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeUnrecognizedTlvType)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeWrongOrderAmongHeaders)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeWrongOrderFragment)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeFragment)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeSortOrder)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeSubTlv)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(FieldAccess)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-channel-status.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-command-options.t.cpp	/^BOOST_AUTO_TEST_CASE(Prefix)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-command-options.t.cpp	/^BOOST_AUTO_TEST_CASE(SigningInfo)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-command-options.t.cpp	/^BOOST_AUTO_TEST_CASE(Timeout)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(FaceCreate)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(FaceDestroy)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(FaceDisableLocalControl)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(FaceEnableLocalControl)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(FibAddNextHop)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(FibRemoveNextHop)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(RibRegister)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(RibUnregister)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(StrategyChoiceSet)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(StrategyChoiceUnset)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-parameters.t.cpp	/^BOOST_AUTO_TEST_CASE(FaceLocalControlOptions)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-parameters.t.cpp	/^BOOST_AUTO_TEST_CASE(FaceOptions)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-parameters.t.cpp	/^BOOST_AUTO_TEST_CASE(FibOptions)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-parameters.t.cpp	/^BOOST_AUTO_TEST_CASE(RibOptions)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-parameters.t.cpp	/^BOOST_AUTO_TEST_CASE(StrategyChoiceOptions)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-response.t.cpp	/^BOOST_AUTO_TEST_CASE(ControlResponseDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-control-response.t.cpp	/^BOOST_AUTO_TEST_CASE(ControlResponseEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-face-event-notification.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeCreated)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-face-event-notification.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeDestroyed)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-face-event-notification.t.cpp	/^BOOST_AUTO_TEST_CASE(Traits)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-face-query-filter.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-face-status.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-fib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(TestFibEntryDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-fib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(TestFibEntryEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-fib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(TestFibEntryNoNextHopEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-fib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(TestFibEntryNoNextHopsDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-fib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(TestNextHopRecordDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-fib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(TestNextHopRecordEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-forwarder-status.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RibEntryClear)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RibEntryDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RibEntryEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RibEntryInfiniteExpirationPeriodDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RibEntryInfiniteExpirationPeriodEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RibEntryOutputStream)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RouteDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RouteEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RouteInfiniteExpirationPeriodDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RouteInfiniteExpirationPeriodEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RouteOutputStream)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/management/nfd-strategy-choice.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/meta-info.t.cpp	/^BOOST_AUTO_TEST_CASE(AppMetaInfo)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/meta-info.t.cpp	/^BOOST_AUTO_TEST_CASE(AppMetaInfoTypeRange)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/meta-info.t.cpp	/^BOOST_AUTO_TEST_CASE(Decode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/meta-info.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/meta-info.t.cpp	/^BOOST_AUTO_TEST_CASE(EqualityChecks)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(AppendEndReject)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(AppendReject)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(EndAppend)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(EndEnd)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(EndReject)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(Expiry)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(GetPrefix)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(Invalid)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(Reject)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(RejectAppend)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(RejectEnd)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(Respond)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(RespondLarge)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(ResponseMultipleSmall)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(Valid)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(ValidWithAppendCalled)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(ValidWithEndCalled)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(ValidWithRejectCalled)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(Append)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(AppendNumber)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(AppendsAndMultiEncode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(Compare)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(CreateComponentWithIterators) \/\/ Bug #2490$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(Decode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeComponent)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(GetSuccessor)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(ImplicitSha256Digest)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(Markers)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(NameWithSpaces)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(SubName)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(SubNameNegativeIndex)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(SubNameOutOfRangeIndexes)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(UnorderedMap)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(ZeroLengthComponent)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(ZeroLengthComponentCompare)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/ndebug.cpp	/^BOOST_AUTO_TEST_CASE(AssertFalse)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/ndebug.cpp	/^BOOST_AUTO_TEST_CASE(SideEffect)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/additional-info.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/certificate.t.cpp	/^BOOST_AUTO_TEST_CASE(Decode)$/;"	f	namespace:ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/certificate.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeError)$/;"	f	namespace:ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/certificate.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/conf/checker.t.cpp	/^BOOST_AUTO_TEST_CASE(CustomizedCheckerTest1)$/;"	f	namespace:ndn::security::conf::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/conf/checker.t.cpp	/^BOOST_AUTO_TEST_CASE(CustomizedCheckerTest2)$/;"	f	namespace:ndn::security::conf::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/conf/checker.t.cpp	/^BOOST_AUTO_TEST_CASE(CustomizedCheckerTest3)$/;"	f	namespace:ndn::security::conf::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/conf/checker.t.cpp	/^BOOST_AUTO_TEST_CASE(FixedSignerCheckerTest1)$/;"	f	namespace:ndn::security::conf::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/conf/checker.t.cpp	/^BOOST_AUTO_TEST_CASE(HierarchicalCheckerTest1)$/;"	f	namespace:ndn::security::conf::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/digest-sha256.t.cpp	/^BOOST_AUTO_TEST_CASE(DataSignature)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/digest-sha256.t.cpp	/^BOOST_AUTO_TEST_CASE(InterestSignature)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/digest-sha256.t.cpp	/^BOOST_AUTO_TEST_CASE(Sha256)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/identity-management-fixture.t.cpp	/^BOOST_AUTO_TEST_CASE(Tmp)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructorEmpty2Config)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructorEmptyConfig)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructorMal2Config)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructorMalConfig)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructorNormalConfig)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(Delete)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(ExportIdentity)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(GeneralSigningInterface)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(KeyChainWithCustomTpmAndPib)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(PrepareIdentityCertificate)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/key-params.t.cpp	/^BOOST_AUTO_TEST_CASE(AesParameter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/key-params.t.cpp	/^BOOST_AUTO_TEST_CASE(EcdsaParameter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/key-params.t.cpp	/^BOOST_AUTO_TEST_CASE(Error)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/key-params.t.cpp	/^BOOST_AUTO_TEST_CASE(RsaParameter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/pib-memory.t.cpp	/^BOOST_AUTO_TEST_CASE(TpmLocatorManagement)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/pib-sqlite3.t.cpp	/^BOOST_AUTO_TEST_CASE(TpmTest)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/public-key.t.cpp	/^BOOST_AUTO_TEST_CASE(ECDSA)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/public-key.t.cpp	/^BOOST_AUTO_TEST_CASE(RSA)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^BOOST_AUTO_TEST_CASE(KeyTypeEcdsa)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^BOOST_AUTO_TEST_CASE(KeyTypeNonExist)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^BOOST_AUTO_TEST_CASE(KeyTypeRsa)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-rule-relative.t.cpp	/^BOOST_AUTO_TEST_CASE(SecRuleRelativeTest)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-rule-specific.t.cpp	/^BOOST_AUTO_TEST_CASE(SecRuleSpecificTest)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-tpm-file.t.cpp	/^BOOST_AUTO_TEST_CASE(Delete)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-tpm-file.t.cpp	/^BOOST_AUTO_TEST_CASE(EcdsaSigning)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-tpm-file.t.cpp	/^BOOST_AUTO_TEST_CASE(ImportExportEcdsaKey)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-tpm-file.t.cpp	/^BOOST_AUTO_TEST_CASE(ImportExportKey)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-tpm-file.t.cpp	/^BOOST_AUTO_TEST_CASE(RandomGenerator)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-tpm-file.t.cpp	/^BOOST_AUTO_TEST_CASE(SignVerify)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-tpm-osx.t.cpp	/^BOOST_AUTO_TEST_CASE(Delete)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-tpm-osx.t.cpp	/^BOOST_AUTO_TEST_CASE(EcdsaSigning)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-tpm-osx.t.cpp	/^BOOST_AUTO_TEST_CASE(ExportImportEcdsaKey)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-tpm-osx.t.cpp	/^BOOST_AUTO_TEST_CASE(ExportImportKey)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-tpm-osx.t.cpp	/^BOOST_AUTO_TEST_CASE(NonExistingKey)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-tpm-osx.t.cpp	/^BOOST_AUTO_TEST_CASE(RandomGenerator)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/sec-tpm-osx.t.cpp	/^BOOST_AUTO_TEST_CASE(SignVerify)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^BOOST_AUTO_TEST_CASE(DataSignature)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^BOOST_AUTO_TEST_CASE(Decoding)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^BOOST_AUTO_TEST_CASE(Encoding)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^BOOST_AUTO_TEST_CASE(InterestSignature)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^BOOST_AUTO_TEST_CASE(DataSignature)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^BOOST_AUTO_TEST_CASE(Decoding)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^BOOST_AUTO_TEST_CASE(Encoding)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^BOOST_AUTO_TEST_CASE(InterestSignature)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/signing-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(Certificate)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/signing-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(Identity)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/signing-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(Key)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/signing-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(Sha256)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/signing-info.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/signing-info.t.cpp	/^BOOST_AUTO_TEST_CASE(CustomSignatureInfo)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/validator.t.cpp	/^BOOST_AUTO_TEST_CASE(EcdsaSignatureVerification)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/validator.t.cpp	/^BOOST_AUTO_TEST_CASE(EcdsaSignatureVerification2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/validator.t.cpp	/^BOOST_AUTO_TEST_CASE(Null)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/validator.t.cpp	/^BOOST_AUTO_TEST_CASE(RsaSignatureVerification)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/validity-period.t.cpp	/^BOOST_AUTO_TEST_CASE(Comparison)$/;"	f	namespace:ndn::security::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/validity-period.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructorSetter)$/;"	f	namespace:ndn::security::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/validity-period.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodingError)$/;"	f	namespace:ndn::security::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/security/validity-period.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodingDecoding)$/;"	f	namespace:ndn::security::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/signature-info.t.cpp	/^BOOST_AUTO_TEST_CASE(Constructor)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/signature-info.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructorError)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/signature-info.t.cpp	/^BOOST_AUTO_TEST_CASE(OtherTlvs)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/signature-info.t.cpp	/^BOOST_AUTO_TEST_CASE(SetterGetter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/signature-info.t.cpp	/^BOOST_AUTO_TEST_CASE(ValidityPeriodExtension)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/transport/tcp-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketHostAndPortBadMalformedUri)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/transport/tcp-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketHostAndPortBadMissingHost)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/transport/tcp-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketHostAndPortBadWrongTransport)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/transport/tcp-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketHostAndPortNameOkOmittedHostOmittedPort)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/transport/tcp-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketHostAndPortOkOmittedPort)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/transport/tcp-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketNameOk)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/transport/unix-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketNameBadMalformedUri)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/transport/unix-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketNameBadWrongTransport)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/transport/unix-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketNameOk)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/transport/unix-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketNameOkOmittedSocketOmittedProtocol)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/transport/unix-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketNameOkOmittedSocketWithProtocol)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/backports.t.cpp	/^BOOST_AUTO_TEST_CASE(MakeUnique)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(EmptyPathParse)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(MalformedParse)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(TestParse)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(Compare)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(Compute)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(ComputeDigest)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructFromStream)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(Error)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(OperatorBlock)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(OperatorDigest)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(OperatorString)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(OperatorUint64t)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(Print)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(Sha256Digest)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/dns.t.cpp	/^BOOST_AUTO_TEST_CASE(Asynchronous)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/dns.t.cpp	/^BOOST_AUTO_TEST_CASE(AsynchronousV4)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/dns.t.cpp	/^BOOST_AUTO_TEST_CASE(AsynchronousV4AndV6)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/dns.t.cpp	/^BOOST_AUTO_TEST_CASE(AsynchronousV6)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/dns.t.cpp	/^BOOST_AUTO_TEST_CASE(Synchronous)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/ethernet.t.cpp	/^BOOST_AUTO_TEST_CASE(BasicChecks)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/ethernet.t.cpp	/^BOOST_AUTO_TEST_CASE(FromString)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/ethernet.t.cpp	/^BOOST_AUTO_TEST_CASE(StdHash)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/ethernet.t.cpp	/^BOOST_AUTO_TEST_CASE(ToString)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(Bug1635)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(CanonizeEmptyCallback)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(ParseDev)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(ParseEther)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(ParseFd)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(ParseInternal)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(ParseTcp)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(ParseUdp)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(ParseUnix)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/in-memory-storage-fifo.t.cpp	/^BOOST_AUTO_TEST_CASE(ArrivalQueue)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/in-memory-storage-fifo.t.cpp	/^BOOST_AUTO_TEST_CASE(ArrivalQueue2)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/in-memory-storage-lfu.t.cpp	/^BOOST_AUTO_TEST_CASE(FrequencyQueue)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/in-memory-storage-lfu.t.cpp	/^BOOST_AUTO_TEST_CASE(FrequencyQueue2)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/in-memory-storage-lru.t.cpp	/^BOOST_AUTO_TEST_CASE(UsedTimeQueue)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/in-memory-storage-lru.t.cpp	/^BOOST_AUTO_TEST_CASE(UsedTimeQueue2)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/in-memory-storage-persistent.t.cpp	/^BOOST_AUTO_TEST_CASE(GetLimit)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/in-memory-storage-persistent.t.cpp	/^BOOST_AUTO_TEST_CASE(InsertAndDouble)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/indented-stream.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/indented-stream.t.cpp	/^BOOST_AUTO_TEST_CASE(BasicWithFlushes) \/\/ Bug #2723$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/io.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/notification-stream.t.cpp	/^BOOST_AUTO_TEST_CASE(Post)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(BackRefMatcher)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(BackRefMatcherAdvanced)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(BackRefMatcherAdvanced2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(ComponentMatcher)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(ComponentSetMatcher)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(PatternListMatcher)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(RepeatMatcher)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(TopMatcher)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(TopMatcherAdvanced)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(CancelEmptyEvent)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(Events)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(ScopedEventIdAssign)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(ScopedEventIdDestruct)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(ScopedEventIdMove)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(ScopedEventIdRelease)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(SelfCancel)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(AutoDisconnect)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(AutoDisconnectAssign)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(AutoDisconnectAssignSame)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(AutoDisconnectMove)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(AutoDisconnectRelease)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ConnectInHandler)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ConnectSingleShot)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ConnectSingleShot1)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ConnectSingleShotDisconnected)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(DisconnectSelfInHandler)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(HandlerByRef)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(HandlerByVal)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ManualDisconnect)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ManualDisconnectDestructed)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(OneArgument)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ThrowInHandler)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(TwoArguments)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(TwoListeners)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ZeroSlot)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/sqlite3-statement.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/string-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(FromHex)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/string-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(FromHexChar)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/string-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(ToHex)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/string-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(Trim)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/string-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(Unescape)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(DigestExclude)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(DigestOrder)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(EmptyDataName)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(EmptyInterestName)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(ExactName)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(FullName)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(Leftmost)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(MaxSuffixComponents)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(MinSuffixComponents)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(Rightmost)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/time.t.cpp	/^BOOST_AUTO_TEST_CASE(SteadyClock)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/util/time.t.cpp	/^BOOST_AUTO_TEST_CASE(SystemClock)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/version.t.cpp	/^BOOST_AUTO_TEST_CASE(Version)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/version.t.cpp	/^BOOST_AUTO_TEST_CASE(VersionString)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/random.t.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(GoodnessOfFit, RandomGenerator, RandomGenerators)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(ChildSelector, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(ChildSelector2, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(DigestCalculation, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(DuplicateInsertion, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(DuplicateInsertion2, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(EraseCanonical, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(ExcludeSelector, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(GetLimit, T, InMemoryStoragesLimited)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(ImplicitDigestSelector, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndDouble, T, InMemoryStoragesLimited)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndEraseByName, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndEraseByPrefix, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndEvict, T, InMemoryStoragesLimited)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndFind, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndFindByFullName, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndFindByName, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndNotFind, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndNotFindByFullName, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndNotFindByName, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertCanonical, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(Insertion, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(Insertion2, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(Insertion3, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(Iterator, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(MinMaxComponentsSelector, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(PublisherKeySelector, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(PublisherKeySelector2, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(setCapacity, T, InMemoryStoragesLimited)$/;"	f	namespace:ndn::util
BOOST_BIND_NO_PLACEHOLDERS	src/common.hpp	109;"	d
BOOST_CONCEPT_USAGE	src/lp/field.hpp	/^  BOOST_CONCEPT_USAGE(Field)$/;"	f	struct:ndn::lp::Field
BOOST_CONCEPT_USAGE	src/util/concepts.hpp	/^  BOOST_CONCEPT_USAGE(Hashable)$/;"	f	class:ndn::Hashable
BOOST_CONCEPT_USAGE	src/util/concepts.hpp	/^  BOOST_CONCEPT_USAGE(WireDecodable)$/;"	f	class:ndn::WireDecodable
BOOST_CONCEPT_USAGE	src/util/concepts.hpp	/^  BOOST_CONCEPT_USAGE(WireEncodable)$/;"	f	class:ndn::WireEncodable
BOOST_CONCEPT_USAGE	src/util/concepts.hpp	/^  BOOST_CONCEPT_USAGE(WireEncodableWithEncodingBuffer)$/;"	f	class:ndn::WireEncodableWithEncodingBuffer
BOOST_FIXTURE_TEST_CASE	tests/integrated/face.cpp	/^BOOST_FIXTURE_TEST_CASE(RegisterPrefix, FacesFixture3)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/integrated/face.cpp	/^BOOST_FIXTURE_TEST_CASE(RegisterUnregisterPrefix, FacesFixture2)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/integrated/face.cpp	/^BOOST_FIXTURE_TEST_CASE(SetRegexFilterAndRegister, FacesFixture3)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/data.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Decode, TestDataFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/data.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Encode, TestDataFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/data.t.cpp	/^BOOST_FIXTURE_TEST_CASE(FullName, DataIdentityFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_FIXTURE_TEST_CASE(RegisterUnregisterPrefixFail, FacesNoRegistrationReplyFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SetInterestFilterFail, FacesNoRegistrationReplyFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SetInterestFilterFailWithoutSuccessCallback, FacesNoRegistrationReplyFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/face.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SetInterestFilterNoReg, FacesNoRegistrationReplyFixture) \/\/ Bug 2318$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/management/nfd-controller.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CommandErrorCode, CommandFixture)$/;"	f	namespace:ndn::nfd::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/management/nfd-controller.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CommandInvalidRequest, CommandFixture)$/;"	f	namespace:ndn::nfd::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/management/nfd-controller.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CommandInvalidResponse, CommandFixture)$/;"	f	namespace:ndn::nfd::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/management/nfd-controller.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CommandSuccess, CommandFixture)$/;"	f	namespace:ndn::nfd::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/management/nfd-controller.t.cpp	/^BOOST_FIXTURE_TEST_CASE(OptionsPrefix, CommandFixture)$/;"	f	namespace:ndn::nfd::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/management/nfd-controller.t.cpp	/^BOOST_FIXTURE_TEST_CASE(OptionsTimeout, CommandFixture)$/;"	f	namespace:ndn::nfd::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/mgmt/dispatcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(AddRemoveTopPrefix, DispatcherFixture)$/;"	f	namespace:ndn::mgmt::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/mgmt/dispatcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(BasicUsageSemantics, DispatcherFixture)$/;"	f	namespace:ndn::mgmt::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/mgmt/dispatcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ControlCommand, DispatcherFixture)$/;"	f	namespace:ndn::mgmt::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/mgmt/dispatcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(NotificationStream, DispatcherFixture)$/;"	f	namespace:ndn::mgmt::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/mgmt/dispatcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(StatusDataset, DispatcherFixture)$/;"	f	namespace:ndn::mgmt::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Expiration, CertificateCacheFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Reset, CertificateCacheFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TtlRefresh, CertificateCacheFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/certificate-container.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestCertificateContainer, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/identity-container.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestIdentityContainer, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/identity.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestKeyOperation, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/identity.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ValidityChecking, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/key-container.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestKeyContainer, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/key.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestCertificateOperation, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/key.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ValidityChecking, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/pib.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestIdentityOperation, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/pib.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ValidityChecking, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Basic, PibTmpPathFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TpmLocatorTest, PibTmpPathFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(FixedSignerChecker, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(FixedSignerChecker2, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(HierarchicalChecker, FacesFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(KeyLocatorNameChecker1, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(MaxKeyTest, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(MaxKeyTest2, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(NameFilter, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(NameFilter2, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(NameFilter3, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(NameFilter4, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Nrd, FacesFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Reset, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SignedInterestTest, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TrustAnchorDir, DirTestFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TrustAnchorWildcard, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CanonizeEther, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CanonizeTcpV4, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CanonizeTcpV6, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CanonizeUdpV4, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CanonizeUdpV6, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CanonizeUnsupported, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CheckCanonicalTcp, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CheckCanonicalUdp, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/notification-subscriber.t.cpp	/^BOOST_FIXTURE_TEST_CASE(EndToEnd, EndToEndFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/scheduler.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CancelAll, CancelAllFixture)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/scheduler.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Reschedule, SelfRescheduleFixture)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/scheduler.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Reschedule2, SelfRescheduleFixture)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/scheduler.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Reschedule3, SelfRescheduleFixture)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/segment-fetcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Basic, Fixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/segment-fetcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(NoSegmentInData, Fixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/segment-fetcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SegmentValidationFailure, Fixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/segment-fetcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Timeout, Fixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/segment-fetcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Triple, Fixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/segment-fetcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TripleWithInitialSegmentFetching, Fixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/time-unit-test-clock.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Scheduler, UnitTestTimeFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/time-unit-test-clock.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SteadyClock, UnitTestTimeFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	tests/unit-tests/util/time-unit-test-clock.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SystemClock, UnitTestTimeFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE_TEMPLATE	tests/unit-tests/name.t.cpp	/^BOOST_FIXTURE_TEST_CASE_TEMPLATE(NamingConventions, T, ConventionsDatasets, T)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE_TEMPLATE	tests/unit-tests/security/pib-impl.t.cpp	/^BOOST_FIXTURE_TEST_CASE_TEMPLATE(CertificateManagement, T, PibImpls, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE_TEMPLATE	tests/unit-tests/security/pib-impl.t.cpp	/^BOOST_FIXTURE_TEST_CASE_TEMPLATE(IdentityManagement, T, PibImpls, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE_TEMPLATE	tests/unit-tests/security/pib-impl.t.cpp	/^BOOST_FIXTURE_TEST_CASE_TEMPLATE(KeyManagement, T, PibImpls, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE_TEMPLATE	tests/unit-tests/tag-host.t.cpp	/^BOOST_FIXTURE_TEST_CASE_TEMPLATE(Basic, T, Fixtures, T)$/;"	f	namespace:ndn::tests
BOOST_REGEXP_MARK_COUNT_CORRECTION	src/util/regex/regex-component-matcher.hpp	/^static const size_t BOOST_REGEXP_MARK_COUNT_CORRECTION =$/;"	m	namespace:ndn
BOOST_TEST_DYN_LINK	tests/integrated/face.cpp	23;"	d	file:
BOOST_TEST_DYN_LINK	tests/integrated/network-monitor.cpp	23;"	d	file:
BOOST_TEST_DYN_LINK	tests/main.cpp	23;"	d	file:
BOOST_TEST_MAIN	tests/integrated/face.cpp	22;"	d	file:
BOOST_TEST_MAIN	tests/integrated/network-monitor.cpp	22;"	d	file:
BOOST_TEST_MAIN	tests/main.cpp	22;"	d	file:
BOOST_TEST_MODULE	tests/integrated/face.cpp	24;"	d	file:
BOOST_TEST_MODULE	tests/integrated/network-monitor.cpp	24;"	d	file:
BOOST_TEST_MODULE	tests/main.cpp	24;"	d	file:
BOOST_VERSION	build/c4che/_cache.py	/^BOOST_VERSION = '1_54'$/;"	v
BOOST_VERSION_NUMBER	build/c4che/_cache.py	/^BOOST_VERSION_NUMBER = 105400$/;"	v
BUFFER	tests/unit-tests/encoding/tlv.t.cpp	/^static const uint8_t BUFFER[] = {$/;"	m	namespace:ndn::tlv::tests	file:
Base	src/detail/container-with-on-empty-signal.hpp	/^  typedef std::list<T> Base;$/;"	t	class:ndn::ContainerWithOnEmptySignal
Base	src/lp/field.hpp	/^class Base$/;"	c	namespace:ndn::lp::field_location_tags
BasicBlockFixture	tests/unit-tests/encoding/block.t.cpp	/^class BasicBlockFixture$/;"	c	namespace:ndn::tests	file:
Block	src/encoding/block.cpp	/^Block::Block()$/;"	f	class:ndn::Block
Block	src/encoding/block.cpp	/^Block::Block(const Block& block,$/;"	f	class:ndn::Block
Block	src/encoding/block.cpp	/^Block::Block(const ConstBufferPtr& buffer)$/;"	f	class:ndn::Block
Block	src/encoding/block.cpp	/^Block::Block(const ConstBufferPtr& buffer,$/;"	f	class:ndn::Block
Block	src/encoding/block.cpp	/^Block::Block(const ConstBufferPtr& wire,$/;"	f	class:ndn::Block
Block	src/encoding/block.cpp	/^Block::Block(const EncodingBuffer& buffer)$/;"	f	class:ndn::Block
Block	src/encoding/block.cpp	/^Block::Block(const uint8_t* buffer, size_t maxlength)$/;"	f	class:ndn::Block
Block	src/encoding/block.cpp	/^Block::Block(const void* bufferX, size_t maxlength)$/;"	f	class:ndn::Block
Block	src/encoding/block.cpp	/^Block::Block(uint32_t type)$/;"	f	class:ndn::Block
Block	src/encoding/block.cpp	/^Block::Block(uint32_t type, const Block& value)$/;"	f	class:ndn::Block
Block	src/encoding/block.cpp	/^Block::Block(uint32_t type, const ConstBufferPtr& value)$/;"	f	class:ndn::Block
Block	src/encoding/block.hpp	/^class Block$/;"	c	namespace:ndn
BlockPrinter	tools/tlvdump.cpp	/^BlockPrinter(const Block& block, const std::string& indent = "")$/;"	f	namespace:ndn
BlockSequence	src/transport/stream-transport.hpp	/^  typedef std::list<Block> BlockSequence;$/;"	t	class:ndn::StreamTransportImpl
BoostResolver	src/util/dns.cpp	/^typedef boost::asio::ip::basic_resolver<boost::asio::ip::udp> BoostResolver;$/;"	t	namespace:ndn::dns	file:
Buffer	src/encoding/buffer.cpp	/^Buffer::Buffer()$/;"	f	class:ndn::Buffer
Buffer	src/encoding/buffer.cpp	/^Buffer::Buffer(const void* buf, size_t length)$/;"	f	class:ndn::Buffer
Buffer	src/encoding/buffer.cpp	/^Buffer::Buffer(size_t size)$/;"	f	class:ndn::Buffer
Buffer	src/encoding/buffer.hpp	/^  Buffer(InputIterator first, InputIterator last)$/;"	f	class:ndn::Buffer
Buffer	src/encoding/buffer.hpp	/^class Buffer : public std::vector<uint8_t>$/;"	c	namespace:ndn
BufferPtr	src/encoding/buffer.hpp	/^typedef shared_ptr<Buffer> BufferPtr;$/;"	t	namespace:ndn
C1	waf	/^C1='#-'$/;"	v
C2	waf	/^C2='#*'$/;"	v
C3	waf	/^C3='#&'$/;"	v
CC_VERSION	build/c4che/_cache.py	/^CC_VERSION = ('4', '8', '4')$/;"	v
CERT	tests/unit-tests/security/certificate.t.cpp	/^const uint8_t CERT[] = {$/;"	m	namespace:ndn	file:
CERT_INFO	tests/unit-tests/security/certificate.t.cpp	/^const std::string CERT_INFO = "Certificate name:\\n"$/;"	m	namespace:ndn	file:
CFReleaser	src/security/sec-tpm-osx.cpp	/^  CFReleaser()$/;"	f	class:ndn::CFReleaser
CFReleaser	src/security/sec-tpm-osx.cpp	/^  CFReleaser(const CFReleaser& inReleaser)$/;"	f	class:ndn::CFReleaser
CFReleaser	src/security/sec-tpm-osx.cpp	/^  CFReleaser(const T& typeRef)$/;"	f	class:ndn::CFReleaser
CFReleaser	src/security/sec-tpm-osx.cpp	/^class CFReleaser$/;"	c	namespace:ndn	file:
COMPILER_CXX	build/c4che/_cache.py	/^COMPILER_CXX = 'g++'$/;"	v
CONGESTION	src/lp/nack-header.hpp	/^  CONGESTION = 50,$/;"	m	class:ndn::lp::NackReason
CONTROL_PARAMETER_COST	src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_COST,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_EXPIRATION_PERIOD	src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_EXPIRATION_PERIOD,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_FACE_ID	src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_FACE_ID,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_FACE_PERSISTENCY	src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_FACE_PERSISTENCY,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_FIELD	src/management/nfd-control-parameters.hpp	/^const std::string CONTROL_PARAMETER_FIELD[CONTROL_PARAMETER_UBOUND] = {$/;"	m	namespace:ndn::nfd
CONTROL_PARAMETER_FLAGS	src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_FLAGS,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_LOCAL_CONTROL_FEATURE	src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_LOCAL_CONTROL_FEATURE,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_NAME	src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_NAME,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_ORIGIN	src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_ORIGIN,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_STRATEGY	src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_STRATEGY,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_UBOUND	src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_UBOUND$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_URI	src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_URI,$/;"	e	enum:ndn::nfd::ControlParameterField
CPPPATH_ST	build/c4che/_cache.py	/^CPPPATH_ST = '-I%s'$/;"	v
CRC_LEN	src/util/ethernet.hpp	/^const size_t CRC_LEN      = 4;      \/\/\/< Octets in Ethernet frame check sequence$/;"	m	namespace:ndn::util::ethernet
CRYPTOPP_VERSION	build/c4che/_cache.py	/^CRYPTOPP_VERSION = '561'$/;"	v
CXX	build/c4che/_cache.py	/^CXX = ['\/usr\/bin\/g++']$/;"	v
CXXFLAGS_MACBUNDLE	build/c4che/_cache.py	/^CXXFLAGS_MACBUNDLE = ['-fPIC']$/;"	v
CXXFLAGS_cxxshlib	build/c4che/_cache.py	/^CXXFLAGS_cxxshlib = ['-fPIC']$/;"	v
CXXLNK_SRC_F	build/c4che/_cache.py	/^CXXLNK_SRC_F = []$/;"	v
CXXLNK_TGT_F	build/c4che/_cache.py	/^CXXLNK_TGT_F = ['-o']$/;"	v
CXXPCH_EXT	build/c4che/_cache.py	/^CXXPCH_EXT = '.gch'$/;"	v
CXXPCH_F	build/c4che/_cache.py	/^CXXPCH_F = ['-include']$/;"	v
CXXPCH_FLAGS	build/c4che/_cache.py	/^CXXPCH_FLAGS = ['-x', 'c++-header']$/;"	v
CXX_NAME	build/c4che/_cache.py	/^CXX_NAME = 'gcc'$/;"	v
CXX_SRC_F	build/c4che/_cache.py	/^CXX_SRC_F = []$/;"	v
CXX_TGT_F	build/c4che/_cache.py	/^CXX_TGT_F = ['-c', '-o']$/;"	v
Cache	src/security/certificate-cache-ttl.hpp	/^  typedef std::map<Name, std::pair<shared_ptr<const IdentityCertificate>, EventId> > Cache;$/;"	t	class:ndn::CertificateCacheTtl
Cache	src/util/in-memory-storage.hpp	/^  > Cache;$/;"	t	class:ndn::util::InMemoryStorage
CachePolicy	src/lp/cache-policy.cpp	/^CachePolicy::CachePolicy()$/;"	f	class:ndn::lp::CachePolicy
CachePolicy	src/lp/cache-policy.cpp	/^CachePolicy::CachePolicy(const Block& block)$/;"	f	class:ndn::lp::CachePolicy
CachePolicy	src/lp/cache-policy.hpp	/^class CachePolicy$/;"	c	class:ndn::lp::CachePolicyType
CachePolicy	src/lp/tlv.hpp	/^  CachePolicy = 820,$/;"	e	enum:ndn::lp::tlv::__anon9
CachePolicyField	src/lp/fields.hpp	/^                          tlv::CachePolicy> CachePolicyField;$/;"	t	namespace:ndn::lp
CachePolicyType	src/lp/cache-policy.hpp	/^enum class CachePolicyType {$/;"	c	namespace:ndn::lp
CachePolicyType	src/lp/tlv.hpp	/^  CachePolicyType = 821,$/;"	e	enum:ndn::lp::tlv::__anon9
CachingPolicy	src/encoding/tlv-nfd.hpp	/^  CachingPolicy      = 83,$/;"	e	enum:ndn::tlv::nfd::__anon3
CancelAllFixture	tests/unit-tests/util/scheduler.t.cpp	/^  CancelAllFixture()$/;"	f	struct:ndn::util::scheduler::tests::CancelAllFixture
CancelAllFixture	tests/unit-tests/util/scheduler.t.cpp	/^struct CancelAllFixture : public ::ndn::tests::UnitTestTimeFixture$/;"	s	namespace:ndn::util::scheduler::tests	file:
CanonizeFailureCallback	src/util/face-uri.hpp	/^  typedef function<void(const std::string& reason)> CanonizeFailureCallback;$/;"	t	class:ndn::util::FaceUri
CanonizeFixture	tests/unit-tests/util/face-uri.t.cpp	/^  CanonizeFixture()$/;"	f	class:ndn::util::tests::CanonizeFixture
CanonizeFixture	tests/unit-tests/util/face-uri.t.cpp	/^class CanonizeFixture : noncopyable$/;"	c	namespace:ndn::util::tests	file:
CanonizeProvider	src/util/face-uri.cpp	/^class CanonizeProvider : noncopyable$/;"	c	namespace:ndn::util	file:
CanonizeProviderTable	src/util/face-uri.cpp	/^typedef std::map<std::string, shared_ptr<CanonizeProvider> > CanonizeProviderTable;$/;"	t	namespace:ndn::util	file:
CanonizeProviderTableInitializer	src/util/face-uri.cpp	/^  CanonizeProviderTableInitializer(CanonizeProviderTable& providerTable)$/;"	f	class:ndn::util::CanonizeProviderTableInitializer
CanonizeProviderTableInitializer	src/util/face-uri.cpp	/^class CanonizeProviderTableInitializer$/;"	c	namespace:ndn::util	file:
CanonizeProviders	src/util/face-uri.cpp	/^  > CanonizeProviders;$/;"	t	namespace:ndn::util	file:
CanonizeSuccessCallback	src/util/face-uri.hpp	/^  typedef function<void(const FaceUri&)> CanonizeSuccessCallback;$/;"	t	class:ndn::util::FaceUri
CanonizeTestCase	tests/unit-tests/util/face-uri.t.cpp	/^    CanonizeTestCase(const std::string& request,$/;"	f	class:ndn::util::tests::CanonizeFixture::CanonizeTestCase
CanonizeTestCase	tests/unit-tests/util/face-uri.t.cpp	/^  class CanonizeTestCase$/;"	c	class:ndn::util::tests::CanonizeFixture	file:
Certificate	src/security/certificate.cpp	/^Certificate::Certificate()$/;"	f	class:ndn::Certificate
Certificate	src/security/certificate.cpp	/^Certificate::Certificate(const Block& block)$/;"	f	class:ndn::Certificate
Certificate	src/security/certificate.cpp	/^Certificate::Certificate(const Data& data)$/;"	f	class:ndn::Certificate
Certificate	src/security/certificate.hpp	/^class Certificate : public Data$/;"	c	namespace:ndn
CertificateCache	src/security/certificate-cache.hpp	/^class CertificateCache : noncopyable$/;"	c	namespace:ndn
CertificateCacheFixture	tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^  CertificateCacheFixture()$/;"	f	class:ndn::tests::CertificateCacheFixture
CertificateCacheFixture	tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^class CertificateCacheFixture : public UnitTestTimeFixture$/;"	c	namespace:ndn::tests	file:
CertificateCacheTtl	src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::CertificateCacheTtl(boost::asio::io_service& io,$/;"	f	class:ndn::CertificateCacheTtl
CertificateCacheTtl	src/security/certificate-cache-ttl.hpp	/^class CertificateCacheTtl : public CertificateCache$/;"	c	namespace:ndn
CertificateContainer	src/security/certificate-container.cpp	/^CertificateContainer::CertificateContainer()$/;"	f	class:ndn::security::CertificateContainer
CertificateContainer	src/security/certificate-container.cpp	/^CertificateContainer::CertificateContainer(std::set<Name>&& certNames,$/;"	f	class:ndn::security::CertificateContainer
CertificateContainer	src/security/certificate-container.hpp	/^class CertificateContainer$/;"	c	namespace:ndn::security
CertificateExtension	src/security/certificate-extension.hpp	/^  CertificateExtension(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::CertificateExtension
CertificateExtension	src/security/certificate-extension.hpp	/^  CertificateExtension(const OID& oid, const bool isCritical, const Buffer& value)$/;"	f	class:ndn::CertificateExtension
CertificateExtension	src/security/certificate-extension.hpp	/^  CertificateExtension(const OID& oid, const bool isCritical,$/;"	f	class:ndn::CertificateExtension
CertificateExtension	src/security/certificate-extension.hpp	/^class CertificateExtension$/;"	c	namespace:ndn
CertificateList	src/security/validator-config.hpp	/^  typedef std::list<shared_ptr<IdentityCertificate> > CertificateList;$/;"	t	class:ndn::ValidatorConfig
CertificatePackage	src/encoding/tlv-security.hpp	/^  CertificatePackage = 130$/;"	e	enum:ndn::tlv::security::__anon1
CertificateSubjectDescription	src/security/certificate-subject-description.hpp	/^  CertificateSubjectDescription(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::CertificateSubjectDescription
CertificateSubjectDescription	src/security/certificate-subject-description.hpp	/^  CertificateSubjectDescription(const OID& oid, const std::string& value)$/;"	f	class:ndn::CertificateSubjectDescription
CertificateSubjectDescription	src/security/certificate-subject-description.hpp	/^class CertificateSubjectDescription$/;"	c	namespace:ndn
ChannelStatus	src/encoding/tlv-nfd.hpp	/^  ChannelStatus         = 130,$/;"	e	enum:ndn::tlv::nfd::__anon2
ChannelStatus	src/management/nfd-channel-status.cpp	/^ChannelStatus::ChannelStatus()$/;"	f	class:ndn::nfd::ChannelStatus
ChannelStatus	src/management/nfd-channel-status.cpp	/^ChannelStatus::ChannelStatus(const Block& payload)$/;"	f	class:ndn::nfd::ChannelStatus
ChannelStatus	src/management/nfd-channel-status.hpp	/^class ChannelStatus$/;"	c	namespace:ndn::nfd
Checker	src/security/conf/checker.hpp	/^class Checker$/;"	c	namespace:ndn::security::conf
CheckerFactory	src/security/conf/checker.hpp	/^class CheckerFactory$/;"	c	namespace:ndn::security::conf
CheckerList	src/security/conf/rule.hpp	/^  typedef std::vector<shared_ptr<Checker> > CheckerList;$/;"	t	class:ndn::security::conf::Rule
ChildSelector	src/encoding/tlv.hpp	/^  ChildSelector = 17,$/;"	e	enum:ndn::tlv::__anon4
CleanupEntry	src/util/in-memory-storage-lfu.hpp	/^  struct CleanupEntry$/;"	s	class:ndn::util::InMemoryStorageLfu
CleanupIndex	src/util/in-memory-storage-fifo.hpp	/^  > CleanupIndex;$/;"	t	class:ndn::util::InMemoryStorageFifo
CleanupIndex	src/util/in-memory-storage-lfu.hpp	/^  > CleanupIndex;$/;"	t	class:ndn::util::InMemoryStorageLfu
CleanupIndex	src/util/in-memory-storage-lru.hpp	/^  > CleanupIndex;$/;"	t	class:ndn::util::InMemoryStorageLru
CommandContinuation	src/mgmt/dispatcher.hpp	/^typedef std::function<void(const ControlResponse& resp)> CommandContinuation;$/;"	t	namespace:ndn::mgmt
CommandFailArgs	tests/unit-tests/management/nfd-controller.t.cpp	/^  typedef boost::tuple<uint32_t,std::string> CommandFailArgs;$/;"	t	class:ndn::nfd::tests::CommandFixture	file:
CommandFailCallback	src/management/nfd-controller.hpp	/^  typedef function<void(uint32_t\/*code*\/,const std::string&\/*reason*\/)> CommandFailCallback;$/;"	t	class:ndn::nfd::Controller
CommandFixture	tests/unit-tests/management/nfd-controller.t.cpp	/^  CommandFixture()$/;"	f	class:ndn::nfd::tests::CommandFixture
CommandFixture	tests/unit-tests/management/nfd-controller.t.cpp	/^class CommandFixture : public ndn::tests::UnitTestTimeFixture$/;"	c	namespace:ndn::nfd::tests	file:
CommandInterestGenerator	src/util/command-interest-generator.hpp	/^  CommandInterestGenerator()$/;"	f	class:ndn::CommandInterestGenerator
CommandInterestGenerator	src/util/command-interest-generator.hpp	/^class CommandInterestGenerator$/;"	c	namespace:ndn
CommandInterestValidator	src/util/command-interest-validator.hpp	/^  CommandInterestValidator(const time::milliseconds& graceInterval =$/;"	f	class:ndn::CommandInterestValidator
CommandInterestValidator	src/util/command-interest-validator.hpp	/^class CommandInterestValidator : public Validator$/;"	c	namespace:ndn
CommandOptions	src/management/nfd-command-options.cpp	/^CommandOptions::CommandOptions()$/;"	f	class:ndn::nfd::CommandOptions
CommandOptions	src/management/nfd-command-options.hpp	/^class CommandOptions$/;"	c	namespace:ndn::nfd
CommandSucceedArgs	tests/unit-tests/management/nfd-controller.t.cpp	/^  typedef boost::tuple<ControlParameters> CommandSucceedArgs;$/;"	t	class:ndn::nfd::tests::CommandFixture	file:
CommandSucceedCallback	src/management/nfd-controller.hpp	/^  typedef function<void(const ControlParameters&)> CommandSucceedCallback;$/;"	t	class:ndn::nfd::Controller
CompleteCallback	src/util/segment-fetcher.hpp	/^  typedef function<void (const ConstBufferPtr& data)> CompleteCallback;$/;"	t	class:ndn::util::SegmentFetcher
Component	src/name-component.cpp	/^Component::Component()$/;"	f	class:ndn::name::Component
Component	src/name-component.cpp	/^Component::Component(const Block& wire)$/;"	f	class:ndn::name::Component
Component	src/name-component.cpp	/^Component::Component(const Buffer& value)$/;"	f	class:ndn::name::Component
Component	src/name-component.cpp	/^Component::Component(const ConstBufferPtr& buffer)$/;"	f	class:ndn::name::Component
Component	src/name-component.cpp	/^Component::Component(const char* str)$/;"	f	class:ndn::name::Component
Component	src/name-component.cpp	/^Component::Component(const std::string& str)$/;"	f	class:ndn::name::Component
Component	src/name-component.cpp	/^Component::Component(const uint8_t* value, size_t valueLen)$/;"	f	class:ndn::name::Component
Component	src/name-component.hpp	/^Component::Component(Iterator first, Iterator last)$/;"	f	class:ndn::name::Component
Component	src/name-component.hpp	/^class Component : public Block$/;"	c	namespace:ndn::name
Component	src/name.hpp	/^  typedef name::Component Component;$/;"	t	class:ndn::Name
Component1	tests/unit-tests/name.t.cpp	/^const uint8_t Component1[] = {0x7, 0x3, \/\/ Error in Type$/;"	m	namespace:ndn::tests	file:
ComponentsSet	src/util/regex/regex-component-set-matcher.hpp	/^  typedef std::set<shared_ptr<RegexComponentMatcher> > ComponentsSet;$/;"	t	class:ndn::RegexComponentSetMatcher
ConfigFile	src/util/config-file.cpp	/^ConfigFile::ConfigFile()$/;"	f	class:ndn::ConfigFile
ConfigFile	src/util/config-file.hpp	/^class ConfigFile : noncopyable$/;"	c	namespace:ndn
ConfigSection	src/security/conf/common.hpp	/^typedef boost::property_tree::ptree ConfigSection;$/;"	t	namespace:ndn::security::conf
Connection	src/util/signal-connection.cpp	/^Connection::Connection()$/;"	f	class:ndn::util::signal::Connection
Connection	src/util/signal-connection.cpp	/^Connection::Connection(weak_ptr<function<void()>> disconnect)$/;"	f	class:ndn::util::signal::Connection
Connection	src/util/signal-connection.hpp	/^class Connection$/;"	c	namespace:ndn::util::signal
ConstBufferPtr	src/encoding/buffer.hpp	/^typedef shared_ptr<const Buffer> ConstBufferPtr;$/;"	t	namespace:ndn
Consumer	examples/consumer.cpp	/^class Consumer : noncopyable$/;"	c	namespace:ndn::examples	file:
Consumer	tools/ndncatchunks3.cpp	/^  Consumer(const std::string& dataName,$/;"	f	class:ndn::Consumer
Consumer	tools/ndncatchunks3.cpp	/^class Consumer$/;"	c	namespace:ndn	file:
ConsumerWithTimer	examples/consumer-with-timer.cpp	/^  ConsumerWithTimer()$/;"	f	class:ndn::examples::ConsumerWithTimer
ConsumerWithTimer	examples/consumer-with-timer.cpp	/^class ConsumerWithTimer : noncopyable$/;"	c	namespace:ndn::examples	file:
ContainerWithOnEmptySignal	src/detail/container-with-on-empty-signal.hpp	/^class ContainerWithOnEmptySignal$/;"	c	namespace:ndn
Content	src/encoding/tlv.hpp	/^  Content       = 21,$/;"	e	enum:ndn::tlv::__anon4
Content1	tests/unit-tests/data.t.cpp	/^const uint8_t Content1[] = {0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x21};$/;"	m	namespace:ndn::tests	file:
ContentType	src/encoding/tlv.hpp	/^  ContentType     = 24,$/;"	e	enum:ndn::tlv::__anon4
ContentTypeValue	src/encoding/tlv.hpp	/^enum ContentTypeValue {$/;"	g	namespace:ndn::tlv
ContentType_Blob	src/encoding/tlv.hpp	/^  ContentType_Blob = 0,$/;"	e	enum:ndn::tlv::ContentTypeValue
ContentType_Key	src/encoding/tlv.hpp	/^  ContentType_Key = 2,$/;"	e	enum:ndn::tlv::ContentTypeValue
ContentType_Link	src/encoding/tlv.hpp	/^  ContentType_Link = 1,$/;"	e	enum:ndn::tlv::ContentTypeValue
ContentType_Nack	src/encoding/tlv.hpp	/^  ContentType_Nack = 3$/;"	e	enum:ndn::tlv::ContentTypeValue
ControlCommand	src/management/nfd-control-command.cpp	/^ControlCommand::ControlCommand(const std::string& module, const std::string& verb)$/;"	f	class:ndn::nfd::ControlCommand
ControlCommand	src/management/nfd-control-command.hpp	/^class ControlCommand : noncopyable$/;"	c	namespace:ndn::nfd
ControlCommandHandler	src/mgmt/dispatcher.hpp	/^                           const CommandContinuation& done)> ControlCommandHandler;$/;"	t	namespace:ndn::mgmt
ControlParameterField	src/management/nfd-control-parameters.hpp	/^enum ControlParameterField {$/;"	g	namespace:ndn::nfd
ControlParameters	src/encoding/tlv-nfd.hpp	/^  ControlParameters   = 104,$/;"	e	enum:ndn::tlv::nfd::__anon2
ControlParameters	src/management/nfd-control-parameters.cpp	/^ControlParameters::ControlParameters()$/;"	f	class:ndn::nfd::ControlParameters
ControlParameters	src/management/nfd-control-parameters.cpp	/^ControlParameters::ControlParameters(const Block& block)$/;"	f	class:ndn::nfd::ControlParameters
ControlParameters	src/management/nfd-control-parameters.hpp	/^class ControlParameters : public ndn::mgmt::ControlParameters$/;"	c	namespace:ndn::nfd
ControlParameters	src/mgmt/control-parameters.hpp	/^class ControlParameters$/;"	c	namespace:ndn::mgmt
ControlParametersParser	src/mgmt/dispatcher.hpp	/^  ControlParametersParser;$/;"	t	class:ndn::mgmt::Dispatcher
ControlResponse	src/encoding/tlv-nfd.hpp	/^  ControlResponse = 101,$/;"	e	enum:ndn::tlv::nfd::__anon2
ControlResponse	src/management/nfd-control-response.hpp	/^typedef ndn::mgmt::ControlResponse ControlResponse;$/;"	t	namespace:ndn::nfd
ControlResponse	src/mgmt/control-response.cpp	/^ControlResponse::ControlResponse()$/;"	f	class:ndn::mgmt::ControlResponse
ControlResponse	src/mgmt/control-response.cpp	/^ControlResponse::ControlResponse(const Block& block)$/;"	f	class:ndn::mgmt::ControlResponse
ControlResponse	src/mgmt/control-response.cpp	/^ControlResponse::ControlResponse(uint32_t code, const std::string& text)$/;"	f	class:ndn::mgmt::ControlResponse
ControlResponse	src/mgmt/control-response.hpp	/^class ControlResponse$/;"	c	namespace:ndn::mgmt
Controller	src/management/nfd-controller.cpp	/^Controller::Controller(Face& face, KeyChain& keyChain)$/;"	f	class:ndn::nfd::Controller
Controller	src/management/nfd-controller.hpp	/^class Controller : noncopyable$/;"	c	namespace:ndn::nfd
ConventionsDatasets	tests/unit-tests/name.t.cpp	/^typedef boost::mpl::vector<Numeric, Timestamp> ConventionsDatasets;$/;"	t	namespace:ndn::tests	file:
Cost	src/encoding/tlv-nfd.hpp	/^  Cost                = 106,$/;"	e	enum:ndn::tlv::nfd::__anon2
CryptoPP	src/encoding/oid.hpp	/^namespace CryptoPP {$/;"	n
CryptoPP	src/security/certificate-extension.hpp	/^namespace CryptoPP {$/;"	n
CryptoPP	src/security/certificate-subject-description.hpp	/^namespace CryptoPP {$/;"	n
CryptoPP	src/security/public-key.hpp	/^namespace CryptoPP {$/;"	n
CurrentTimestamp	src/encoding/tlv-nfd.hpp	/^  CurrentTimestamp     = 130,$/;"	e	enum:ndn::tlv::nfd::__anon2
CustomClock	src/util/time-custom-clock.hpp	/^class CustomClock$/;"	c	namespace:ndn::time
CustomSteadyClock	src/util/time-custom-clock.hpp	/^typedef CustomClock<steady_clock> CustomSteadyClock;$/;"	t	namespace:ndn::time
CustomSystemClock	src/util/time-custom-clock.hpp	/^typedef CustomClock<system_clock> CustomSystemClock;$/;"	t	namespace:ndn::time
CustomizedChecker	src/security/conf/checker.hpp	/^  CustomizedChecker(uint32_t sigType,$/;"	f	class:ndn::security::conf::CustomizedChecker
CustomizedChecker	src/security/conf/checker.hpp	/^class CustomizedChecker : public Checker$/;"	c	namespace:ndn::security::conf
DATADIR	build/c4che/_cache.py	/^DATADIR = '\/usr\/local\/share'$/;"	v
DATAROOTDIR	build/c4che/_cache.py	/^DATAROOTDIR = '\/usr\/local\/share'$/;"	v
DATA_HAS_NO_SEGMENT	src/util/segment-fetcher.hpp	/^    DATA_HAS_NO_SEGMENT = 2,$/;"	e	enum:ndn::util::SegmentFetcher::ErrorCode
DECLARE_SIGNAL_EMIT	src/util/signal-emit.hpp	59;"	d
DEFAULT_CERTIFICATE_CACHE	src/security/validator-config.cpp	/^const shared_ptr<CertificateCache> ValidatorConfig::DEFAULT_CERTIFICATE_CACHE;$/;"	m	class:ndn::ValidatorConfig	file:
DEFAULT_CERTIFICATE_CACHE	src/security/validator-config.hpp	/^  static const shared_ptr<CertificateCache> DEFAULT_CERTIFICATE_CACHE;$/;"	m	class:ndn::ValidatorConfig
DEFAULT_CERTIFICATE_CACHE	src/security/validator-regex.cpp	/^const shared_ptr<CertificateCache> ValidatorRegex::DEFAULT_CERTIFICATE_CACHE;$/;"	m	class:ndn::ValidatorRegex	file:
DEFAULT_CERTIFICATE_CACHE	src/security/validator-regex.hpp	/^  static const shared_ptr<CertificateCache> DEFAULT_CERTIFICATE_CACHE;$/;"	m	class:ndn::ValidatorRegex
DEFAULT_CERTIFICATE_NAME	src/util/command-interest-generator.hpp	/^  static const Name DEFAULT_CERTIFICATE_NAME;$/;"	m	class:ndn::CommandInterestGenerator
DEFAULT_GRACE_INTERVAL	src/security/validator-config.hpp	/^  static const time::milliseconds DEFAULT_GRACE_INTERVAL;$/;"	m	class:ndn::ValidatorConfig
DEFAULT_INTEREST_LIFETIME	src/interest.hpp	/^const time::milliseconds DEFAULT_INTEREST_LIFETIME = time::milliseconds(4000);$/;"	m	namespace:ndn
DEFAULT_KEY_PARAMS	src/security/key-chain.cpp	/^const RsaKeyParams KeyChain::DEFAULT_KEY_PARAMS;$/;"	m	class:ndn::security::KeyChain	file:
DEFAULT_KEY_PARAMS	src/security/key-chain.hpp	/^  static const RsaKeyParams DEFAULT_KEY_PARAMS;$/;"	m	class:ndn::security::KeyChain
DEFAULT_KEY_TIMESTAMP_TTL	src/security/validator-config.cpp	/^const time::system_clock::Duration ValidatorConfig::DEFAULT_KEY_TIMESTAMP_TTL = time::hours(1);$/;"	m	class:ndn::ValidatorConfig	file:
DEFAULT_KEY_TIMESTAMP_TTL	src/security/validator-config.hpp	/^  static const time::system_clock::Duration DEFAULT_KEY_TIMESTAMP_TTL;$/;"	m	class:ndn::ValidatorConfig
DEFAULT_OPTIONS	src/util/dummy-client-face.hpp	/^  static const Options DEFAULT_OPTIONS;$/;"	m	class:ndn::util::DummyClientFace
DEFAULT_PIB_SCHEME	src/security/key-chain.cpp	/^const std::string DEFAULT_PIB_SCHEME = "pib-sqlite3";$/;"	m	namespace:ndn::security	file:
DEFAULT_PREFIX	src/management/nfd-command-options.hpp	/^  static const Name DEFAULT_PREFIX;$/;"	m	class:ndn::nfd::CommandOptions
DEFAULT_PREFIX	src/security/key-chain.hpp	/^  static const Name DEFAULT_PREFIX;$/;"	m	class:ndn::security::KeyChain
DEFAULT_PRIVATE_KEY_DER	tests/unit-tests/data.t.cpp	/^const unsigned char DEFAULT_PRIVATE_KEY_DER[] = {$/;"	m	namespace:ndn::tests	file:
DEFAULT_SIGNING_INFO	src/security/key-chain.hpp	/^  static const SigningInfo DEFAULT_SIGNING_INFO;$/;"	m	class:ndn::security::KeyChain
DEFAULT_STATUS_DATASET_FRESHNESS_PERIOD	src/mgmt/status-dataset-context.cpp	/^const time::milliseconds DEFAULT_STATUS_DATASET_FRESHNESS_PERIOD = time::milliseconds(1000);$/;"	m	namespace:ndn::mgmt	file:
DEFAULT_TIMEOUT	src/management/nfd-command-options.hpp	/^  static const time::milliseconds DEFAULT_TIMEOUT;$/;"	m	class:ndn::nfd::CommandOptions
DEFAULT_TPM_SCHEME	src/security/key-chain.cpp	/^const std::string DEFAULT_TPM_SCHEME = "tpm-file";$/;"	m	namespace:ndn::security	file:
DEFAULT_TPM_SCHEME	src/security/key-chain.cpp	/^const std::string DEFAULT_TPM_SCHEME = "tpm-osxkeychain";$/;"	m	namespace:ndn::security	file:
DEFINES	build/c4che/_cache.py	/^DEFINES = ['NDEBUG']$/;"	v
DEFINES_CRYPTOPP	build/c4che/_cache.py	/^DEFINES_CRYPTOPP = []$/;"	v
DEFINES_ST	build/c4che/_cache.py	/^DEFINES_ST = '-D%s'$/;"	v
DEPRECATED	src/common.hpp	79;"	d
DEPRECATED	src/common.hpp	81;"	d
DEPRECATED	src/common.hpp	84;"	d
DEPRECATED	src/encoding/block.hpp	/^  DEPRECATED($/;"	f	class:ndn::Block
DEPRECATED	src/name-component.hpp	/^  DEPRECATED($/;"	f	class:ndn::name::Component
DEREncodeGeneralTime	src/encoding/cryptopp/asn_ext.cpp	/^DEREncodeGeneralTime(CryptoPP::BufferedTransformation& bt,$/;"	f	namespace:ndn
DEST_BINFMT	build/c4che/_cache.py	/^DEST_BINFMT = 'elf'$/;"	v
DEST_CPU	build/c4che/_cache.py	/^DEST_CPU = 'x86'$/;"	v
DEST_OS	build/c4che/_cache.py	/^DEST_OS = 'linux'$/;"	v
DIGEST_ALGORITHM_SHA256	src/security/security-common.hpp	/^  DIGEST_ALGORITHM_SHA256$/;"	e	enum:ndn::DigestAlgorithm
DIGEST_SHA256_IDENTITY	src/security/key-chain.hpp	/^  static const Name DIGEST_SHA256_IDENTITY;$/;"	m	class:ndn::security::KeyChain
DOCDIR	build/c4che/_cache.py	/^DOCDIR = '\/usr\/local\/share\/doc\/ndn-cxx'$/;"	v
DOXYGEN	build/c4che/_cache.py	/^DOXYGEN = ['\/usr\/bin\/doxygen']$/;"	v
DUMMY_CERT	tests/unit-tests/security/dummy-keychain.cpp	/^static const uint8_t DUMMY_CERT[] =$/;"	m	namespace:ndn::security	file:
DUMMY_SIGNATURE	tests/unit-tests/security/dummy-keychain.cpp	/^static const uint8_t DUMMY_SIGNATURE[] =$/;"	m	namespace:ndn::security	file:
DUPLICATE	src/lp/nack-header.hpp	/^  DUPLICATE = 100,$/;"	m	class:ndn::lp::NackReason
DVIDIR	build/c4che/_cache.py	/^DVIDIR = '\/usr\/local\/share\/doc\/ndn-cxx'$/;"	v
Data	src/data.cpp	/^Data::Data()$/;"	f	class:ndn::Data
Data	src/data.cpp	/^Data::Data(const Block& wire)$/;"	f	class:ndn::Data
Data	src/data.cpp	/^Data::Data(const Name& name)$/;"	f	class:ndn::Data
Data	src/data.hpp	/^class Data : public TagHost, public enable_shared_from_this<Data>$/;"	c	namespace:ndn
Data	src/encoding/tlv.hpp	/^  Data          = 6,$/;"	e	enum:ndn::tlv::__anon4
Data1	tests/unit-tests/data.t.cpp	/^const uint8_t Data1[] = {$/;"	m	namespace:ndn::tests	file:
DataBlockFast	src/encoding/block-helpers.hpp	/^class DataBlockFast$/;"	c	namespace:ndn::encoding
DataBlockSlow	src/encoding/block-helpers.hpp	/^class DataBlockSlow$/;"	c	namespace:ndn::encoding
DataCallback	src/face.hpp	/^typedef function<void(const Interest&, const Data&)> DataCallback;$/;"	t	namespace:ndn
DataIdentityFixture	tests/unit-tests/data.t.cpp	/^  DataIdentityFixture()$/;"	f	class:ndn::tests::DataIdentityFixture
DataIdentityFixture	tests/unit-tests/data.t.cpp	/^class DataIdentityFixture$/;"	c	namespace:ndn::tests	file:
DataRule	src/security/validator-config.hpp	/^  typedef security::conf::Rule<Data>     DataRule;$/;"	t	class:ndn::ValidatorConfig
DataRuleList	src/security/validator-config.hpp	/^  typedef std::vector<shared_ptr<DataRule> >     DataRuleList;$/;"	t	class:ndn::ValidatorConfig
DataSender	src/mgmt/status-dataset-context.hpp	/^                             const MetaInfo& metaInfo)> DataSender;$/;"	t	class:ndn::mgmt::StatusDatasetContext
DataWithLocalControlHeader	tests/unit-tests/data.t.cpp	/^const uint8_t DataWithLocalControlHeader[] = {$/;"	m	namespace:ndn::tests	file:
DataWithoutLocalControlHeader	tests/unit-tests/data.t.cpp	/^const uint8_t DataWithoutLocalControlHeader[] = {$/;"	m	namespace:ndn::tests	file:
Dataset	tests/unit-tests/name.t.cpp	/^                                 function<bool(const name::Component&)> > > Dataset;$/;"	t	class:ndn::tests::Numeric	file:
Dataset	tests/unit-tests/name.t.cpp	/^                                 function<bool(const name::Component&)> > > Dataset;$/;"	t	class:ndn::tests::Timestamp	file:
DecodeHelper	src/lp/detail/field-decl.hpp	/^struct DecodeHelper$/;"	s	namespace:ndn::lp::detail
DecodeHelper	src/lp/detail/field-decl.hpp	/^struct DecodeHelper<TlvType, std::pair<Buffer::const_iterator, Buffer::const_iterator>>$/;"	s	namespace:ndn::lp::detail
DecodeHelper	src/lp/detail/field-decl.hpp	/^struct DecodeHelper<TlvType, uint64_t>$/;"	s	namespace:ndn::lp::detail
DelegationSet	src/link.hpp	/^  typedef std::set<std::pair<uint32_t, Name>> DelegationSet;$/;"	t	class:ndn::Link
DescriptionEntry	src/encoding/tlv.hpp	/^  DescriptionEntry = 512,$/;"	e	enum:ndn::tlv::__anon5
DescriptionKey	src/encoding/tlv.hpp	/^  DescriptionKey = 513,$/;"	e	enum:ndn::tlv::__anon5
DescriptionValue	src/encoding/tlv.hpp	/^  DescriptionValue = 514$/;"	e	enum:ndn::tlv::__anon5
Digest	src/util/digest.cpp	/^Digest<Hash>::Digest()$/;"	f	class:ndn::util::Digest
Digest	src/util/digest.cpp	/^Digest<Hash>::Digest(std::istream& is)$/;"	f	class:ndn::util::Digest
Digest	src/util/digest.hpp	/^class Digest$/;"	c	namespace:ndn::util
DigestAlgorithm	src/security/security-common.hpp	/^enum DigestAlgorithm {$/;"	g	namespace:ndn
DigestSha256	src/encoding/tlv.hpp	/^  DigestSha256 = 0,$/;"	e	enum:ndn::tlv::SignatureTypeValue
DigestSha256	src/security/digest-sha256.cpp	/^DigestSha256::DigestSha256()$/;"	f	class:ndn::DigestSha256
DigestSha256	src/security/digest-sha256.cpp	/^DigestSha256::DigestSha256(const Signature& signature)$/;"	f	class:ndn::DigestSha256
DigestSha256	src/security/digest-sha256.hpp	/^class DigestSha256 : public Signature$/;"	c	namespace:ndn
DirTestFixture	tests/unit-tests/security/validator-config.t.cpp	/^  DirTestFixture()$/;"	f	struct:ndn::tests::DirTestFixture
DirTestFixture	tests/unit-tests/security/validator-config.t.cpp	/^struct DirTestFixture : public security::IdentityManagementTimeFixture$/;"	s	namespace:ndn::tests	file:
Dispatcher	src/mgmt/dispatcher.cpp	/^Dispatcher::Dispatcher(Face& face, security::KeyChain& keyChain,$/;"	f	class:ndn::mgmt::Dispatcher
Dispatcher	src/mgmt/dispatcher.hpp	/^class Dispatcher : noncopyable$/;"	c	namespace:ndn::mgmt
DispatcherFixture	tests/unit-tests/mgmt/dispatcher.t.cpp	/^  DispatcherFixture()$/;"	f	class:ndn::mgmt::tests::DispatcherFixture
DispatcherFixture	tests/unit-tests/mgmt/dispatcher.t.cpp	/^class DispatcherFixture : public UnitTestTimeFixture$/;"	c	namespace:ndn::mgmt::tests	file:
DnsFixture	tests/unit-tests/util/dns.t.cpp	/^  DnsFixture()$/;"	f	class:ndn::util::tests::DnsFixture
DnsFixture	tests/unit-tests/util/dns.t.cpp	/^class DnsFixture$/;"	c	namespace:ndn::util::tests	file:
DontVerifySegment	src/util/segment-fetcher.hpp	/^class DontVerifySegment$/;"	c	namespace:ndn::util
DummyClientFace	src/util/dummy-client-face.cpp	/^DummyClientFace::DummyClientFace(const Options& options, shared_ptr<Transport> transport)$/;"	f	class:ndn::util::DummyClientFace
DummyClientFace	src/util/dummy-client-face.cpp	/^DummyClientFace::DummyClientFace(const Options& options, shared_ptr<Transport> transport,$/;"	f	class:ndn::util::DummyClientFace
DummyClientFace	src/util/dummy-client-face.hpp	/^class DummyClientFace : public ndn::Face$/;"	c	namespace:ndn::util
DummyExtraArg	src/util/signal-emit.hpp	/^class DummyExtraArg$/;"	c	namespace:ndn::util::signal
DummyPublicInfo	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::DummyPublicInfo(const std::string& locator)$/;"	f	class:ndn::security::DummyPublicInfo
DummyPublicInfo	tests/unit-tests/security/dummy-keychain.hpp	/^class DummyPublicInfo : public SecPublicInfo$/;"	c	namespace:ndn::security
DummyPublicInfo2	tests/unit-tests/security/dummy-keychain.cpp	/^typedef DummyPublicInfo DummyPublicInfo2;$/;"	t	namespace:ndn::security	file:
DummyTpm	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::DummyTpm(const std::string& locator)$/;"	f	class:ndn::security::DummyTpm
DummyTpm	tests/unit-tests/security/dummy-keychain.hpp	/^class DummyTpm : public SecTpm$/;"	c	namespace:ndn::security
DummyTpm2	tests/unit-tests/security/dummy-keychain.cpp	/^typedef DummyTpm DummyTpm2;$/;"	t	namespace:ndn::security	file:
Duration	src/util/time.hpp	/^  typedef duration Duration;$/;"	t	class:ndn::time::steady_clock
Duration	src/util/time.hpp	/^  typedef duration Duration;$/;"	t	class:ndn::time::system_clock
DynamicContainers	src/security/validator-config.hpp	/^  typedef std::list<DynamicTrustAnchorContainer> DynamicContainers; \/\/ sorted by m_lastRefresh$/;"	t	class:ndn::ValidatorConfig
DynamicTrustAnchorContainer	src/security/validator-config.hpp	/^    DynamicTrustAnchorContainer(const boost::filesystem::path& path, bool isDir,$/;"	f	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
DynamicTrustAnchorContainer	src/security/validator-config.hpp	/^  class DynamicTrustAnchorContainer : public TrustAnchorContainer$/;"	c	class:ndn::ValidatorConfig
ECDSA_DER_KEY_DIGEST	tests/unit-tests/security/public-key.t.cpp	/^const uint8_t ECDSA_DER_KEY_DIGEST[] = {$/;"	m	namespace:ndn::tests	file:
ECDSA_KEY_SIZES	src/security/key-params.cpp	/^static const uint32_t ECDSA_KEY_SIZES[] = {256, 384};$/;"	m	namespace:ndn	file:
EMPTY_KEY_ID	src/security/identity.cpp	/^const name::Component Identity::EMPTY_KEY_ID;$/;"	m	class:ndn::security::Identity	file:
EMPTY_KEY_ID	src/security/identity.hpp	/^  static const name::Component EMPTY_KEY_ID;$/;"	m	class:ndn::security::Identity
EMPTY_NAME	src/security/signing-info.cpp	/^const Name SigningInfo::EMPTY_NAME;$/;"	m	class:ndn::security::SigningInfo	file:
EMPTY_NAME	src/security/signing-info.hpp	/^  static const Name EMPTY_NAME;$/;"	m	class:ndn::security::SigningInfo
EMPTY_SIGNATURE_INFO	src/security/signing-info.cpp	/^const SignatureInfo SigningInfo::EMPTY_SIGNATURE_INFO;$/;"	m	class:ndn::security::SigningInfo	file:
EMPTY_SIGNATURE_INFO	src/security/signing-info.hpp	/^  static const SignatureInfo EMPTY_SIGNATURE_INFO;$/;"	m	class:ndn::security::SigningInfo
ENCRYPT_MODE_CFB_AES	src/security/security-common.hpp	/^  ENCRYPT_MODE_CFB_AES$/;"	e	enum:ndn::EncryptMode
ENCRYPT_MODE_DEFAULT	src/security/security-common.hpp	/^  ENCRYPT_MODE_DEFAULT,$/;"	e	enum:ndn::EncryptMode
ERROR_LBOUND	src/management/nfd-controller.cpp	/^const uint32_t Controller::ERROR_LBOUND = 400;$/;"	m	class:ndn::nfd::Controller	file:
ERROR_LBOUND	src/management/nfd-controller.hpp	/^  static const uint32_t ERROR_LBOUND;$/;"	m	class:ndn::nfd::Controller
ERROR_SERVER	src/management/nfd-controller.cpp	/^const uint32_t Controller::ERROR_SERVER = 500;$/;"	m	class:ndn::nfd::Controller	file:
ERROR_SERVER	src/management/nfd-controller.hpp	/^  static const uint32_t ERROR_SERVER;$/;"	m	class:ndn::nfd::Controller
ERROR_TIMEOUT	src/management/nfd-controller.cpp	/^const uint32_t Controller::ERROR_TIMEOUT = 10060;$/;"	m	class:ndn::nfd::Controller	file:
ERROR_TIMEOUT	src/management/nfd-controller.hpp	/^  static const uint32_t ERROR_TIMEOUT;$/;"	m	class:ndn::nfd::Controller
ETHERTYPE_NDN	src/util/ethernet.hpp	/^const uint16_t ETHERTYPE_NDN = 0x8624;$/;"	m	namespace:ndn::util::ethernet
EXEC_PREFIX	build/c4che/_cache.py	/^EXEC_PREFIX = '\/usr\/local'$/;"	v
EXPR_BACKREF	src/util/regex/regex-matcher.hpp	/^    EXPR_BACKREF,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_COMPONENT	src/util/regex/regex-matcher.hpp	/^    EXPR_COMPONENT,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_COMPONENT_SET	src/util/regex/regex-matcher.hpp	/^    EXPR_COMPONENT_SET,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_PATTERN_LIST	src/util/regex/regex-matcher.hpp	/^    EXPR_PATTERN_LIST,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_PSEUDO	src/util/regex/regex-matcher.hpp	/^    EXPR_PSEUDO$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_REPEAT_PATTERN	src/util/regex/regex-matcher.hpp	/^    EXPR_REPEAT_PATTERN,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_TOP	src/util/regex/regex-matcher.hpp	/^    EXPR_TOP,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EcdsaKeyParams	src/security/key-params.hpp	/^typedef SimplePublicKeyParams<EcdsaKeyParamsInfo> EcdsaKeyParams;$/;"	t	namespace:ndn
EcdsaKeyParamsInfo	src/security/key-params.hpp	/^class EcdsaKeyParamsInfo$/;"	c	namespace:ndn
EncodeHelper	src/lp/detail/field-decl.hpp	/^struct EncodeHelper$/;"	s	namespace:ndn::lp::detail
EncodeHelper	src/lp/detail/field-decl.hpp	/^struct EncodeHelper<TAG, TlvType, std::pair<Buffer::const_iterator, Buffer::const_iterator>>$/;"	s	namespace:ndn::lp::detail
EncodeHelper	src/lp/detail/field-decl.hpp	/^struct EncodeHelper<TAG, TlvType, uint64_t>$/;"	s	namespace:ndn::lp::detail
Encoder	src/encoding/encoder.cpp	/^Encoder::Encoder(const Block& block)$/;"	f	class:ndn::encoding::Encoder
Encoder	src/encoding/encoder.cpp	/^Encoder::Encoder(size_t totalReserve\/* = 8800*\/, size_t reserveFromBack\/* = 400*\/)$/;"	f	class:ndn::encoding::Encoder
Encoder	src/encoding/encoder.hpp	/^class Encoder$/;"	c	namespace:ndn::encoding
EncoderTag	src/encoding/encoding-buffer-fwd.hpp	/^static const Tag EncoderTag = true;$/;"	m	namespace:ndn::encoding
EncodingBuffer	src/encoding/encoding-buffer-fwd.hpp	/^typedef EncodingImpl<EncoderTag> EncodingBuffer;$/;"	t	namespace:ndn::encoding
EncodingEstimator	src/encoding/encoding-buffer-fwd.hpp	/^typedef EncodingImpl<EstimatorTag> EncodingEstimator;$/;"	t	namespace:ndn::encoding
EncodingImpl	src/encoding/encoding-buffer.hpp	/^  EncodingImpl(const Block& block)$/;"	f	class:ndn::encoding::EncodingImpl
EncodingImpl	src/encoding/encoding-buffer.hpp	/^  EncodingImpl(size_t totalReserve = 0, size_t totalFromBack = 0)$/;"	f	class:ndn::encoding::EncodingImpl
EncodingImpl	src/encoding/encoding-buffer.hpp	/^  EncodingImpl(size_t totalReserve = 8800, size_t reserveFromBack = 400)$/;"	f	class:ndn::encoding::EncodingImpl
EncodingImpl	src/encoding/encoding-buffer.hpp	/^class EncodingImpl<EncoderTag> : public encoding::Encoder$/;"	c	namespace:ndn::encoding
EncodingImpl	src/encoding/encoding-buffer.hpp	/^class EncodingImpl<EstimatorTag> : public encoding::Estimator$/;"	c	namespace:ndn::encoding
EncryptMode	src/security/security-common.hpp	/^enum EncryptMode {$/;"	g	namespace:ndn
EndPoint	src/util/dns.cpp	/^typedef boost::asio::ip::udp::endpoint EndPoint;$/;"	t	namespace:ndn::dns	file:
EndToEndFixture	tests/unit-tests/util/notification-subscriber.t.cpp	/^  EndToEndFixture()$/;"	f	class:ndn::util::tests::EndToEndFixture
EndToEndFixture	tests/unit-tests/util/notification-subscriber.t.cpp	/^class EndToEndFixture : public ndn::tests::UnitTestTimeFixture$/;"	c	namespace:ndn::util::tests	file:
Error	src/data.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Data::Error
Error	src/data.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Data
Error	src/encoding/block.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Block::Error
Error	src/encoding/block.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Block
Error	src/encoding/tlv.hpp	/^  Error(const std::string& what)$/;"	f	class:ndn::tlv::Error
Error	src/encoding/tlv.hpp	/^class Error : public std::runtime_error$/;"	c	namespace:ndn::tlv
Error	src/exclude.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Exclude::Error
Error	src/exclude.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Exclude
Error	src/face.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Face::Error
Error	src/face.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::Face
Error	src/interest-filter.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::InterestFilter::Error
Error	src/interest-filter.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::InterestFilter
Error	src/interest.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Interest::Error
Error	src/interest.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Interest
Error	src/key-locator.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::KeyLocator::Error
Error	src/key-locator.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::KeyLocator
Error	src/link.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Link::Error
Error	src/link.hpp	/^  class Error : public Data::Error$/;"	c	class:ndn::Link
Error	src/lp/cache-policy.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::lp::CachePolicyType::CachePolicy::Error
Error	src/lp/cache-policy.hpp	/^  class Error : public ndn::tlv::Error$/;"	c	class:ndn::lp::CachePolicyType::CachePolicy
Error	src/lp/packet.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::lp::Packet::Error
Error	src/lp/packet.hpp	/^  class Error : public ndn::tlv::Error$/;"	c	class:ndn::lp::Packet
Error	src/management/nfd-channel-status.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::ChannelStatus::Error
Error	src/management/nfd-channel-status.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::ChannelStatus
Error	src/management/nfd-control-parameters.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::ControlParameters::Error
Error	src/management/nfd-control-parameters.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::ControlParameters
Error	src/management/nfd-face-query-filter.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::FaceQueryFilter::Error
Error	src/management/nfd-face-query-filter.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::FaceQueryFilter
Error	src/management/nfd-face-traits.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::FaceTraits::Error
Error	src/management/nfd-face-traits.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::FaceTraits
Error	src/management/nfd-fib-entry.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::FibEntry::Error
Error	src/management/nfd-fib-entry.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::NextHopRecord::Error
Error	src/management/nfd-fib-entry.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::FibEntry
Error	src/management/nfd-fib-entry.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::NextHopRecord
Error	src/management/nfd-forwarder-status.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::ForwarderStatus::Error
Error	src/management/nfd-forwarder-status.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::ForwarderStatus
Error	src/management/nfd-local-control-header.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::LocalControlHeader::Error
Error	src/management/nfd-local-control-header.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::nfd::LocalControlHeader
Error	src/management/nfd-rib-entry.hpp	/^    Error(const std::string& what) : tlv::Error(what)$/;"	f	class:ndn::nfd::RibEntry::Error
Error	src/management/nfd-rib-entry.hpp	/^    Error(const std::string& what) : tlv::Error(what)$/;"	f	class:ndn::nfd::Route::Error
Error	src/management/nfd-rib-entry.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::RibEntry
Error	src/management/nfd-rib-entry.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::Route
Error	src/management/nfd-strategy-choice.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::StrategyChoice::Error
Error	src/management/nfd-strategy-choice.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::StrategyChoice
Error	src/meta-info.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::MetaInfo::Error
Error	src/meta-info.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::MetaInfo
Error	src/mgmt/control-response.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::mgmt::ControlResponse::Error
Error	src/mgmt/control-response.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::mgmt::ControlResponse
Error	src/mgmt/dispatcher.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::mgmt::Dispatcher::Error
Error	src/mgmt/dispatcher.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::mgmt::Dispatcher
Error	src/name-component.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::name::Component::Error
Error	src/name-component.hpp	/^  class Error : public Block::Error$/;"	c	class:ndn::name::Component
Error	src/name.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Name::Error
Error	src/name.hpp	/^  class Error : public name::Component::Error$/;"	c	class:ndn::Name
Error	src/security/additional-description.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::AdditionalDescription::Error
Error	src/security/additional-description.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::security::AdditionalDescription
Error	src/security/certificate-extension.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::CertificateExtension::Error
Error	src/security/certificate-extension.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::CertificateExtension
Error	src/security/certificate.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Certificate::Error
Error	src/security/certificate.hpp	/^  class Error : public Data::Error$/;"	c	class:ndn::Certificate
Error	src/security/conf/common.hpp	/^  Error(const std::string& what)$/;"	f	class:ndn::security::conf::Error
Error	src/security/conf/common.hpp	/^class Error : public std::runtime_error$/;"	c	namespace:ndn::security::conf
Error	src/security/digest-sha256.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::DigestSha256::Error
Error	src/security/digest-sha256.hpp	/^  class Error : public Signature::Error$/;"	c	class:ndn::DigestSha256
Error	src/security/identity-certificate.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::IdentityCertificate::Error
Error	src/security/identity-certificate.hpp	/^  class Error : public Certificate::Error$/;"	c	class:ndn::IdentityCertificate
Error	src/security/key-chain.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::KeyChain::Error
Error	src/security/key-chain.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::security::KeyChain
Error	src/security/key-params.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::KeyParams::Error
Error	src/security/key-params.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::KeyParams
Error	src/security/pib-impl.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::PibImpl::Error
Error	src/security/pib-impl.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::security::PibImpl
Error	src/security/pib-memory.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::PibMemory::Error
Error	src/security/pib-memory.hpp	/^  class Error : public PibImpl::Error$/;"	c	class:ndn::security::PibMemory
Error	src/security/pib.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::Pib::Error
Error	src/security/pib.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::security::Pib
Error	src/security/public-key.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::PublicKey::Error
Error	src/security/public-key.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::PublicKey
Error	src/security/sec-public-info-sqlite3.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecPublicInfoSqlite3::Error
Error	src/security/sec-public-info-sqlite3.hpp	/^  class Error : public SecPublicInfo::Error$/;"	c	class:ndn::SecPublicInfoSqlite3
Error	src/security/sec-public-info.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecPublicInfo::Error
Error	src/security/sec-public-info.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::SecPublicInfo
Error	src/security/sec-rule-relative.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecRuleRelative::Error
Error	src/security/sec-rule-relative.hpp	/^  class Error : public SecRule::Error$/;"	c	class:ndn::SecRuleRelative
Error	src/security/sec-rule.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecRule::Error
Error	src/security/sec-rule.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::SecRule
Error	src/security/sec-tpm-file.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecTpmFile::Error
Error	src/security/sec-tpm-file.hpp	/^  class Error : public SecTpm::Error$/;"	c	class:ndn::SecTpmFile
Error	src/security/sec-tpm-osx.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecTpmOsx::Error
Error	src/security/sec-tpm-osx.hpp	/^  class Error : public SecTpm::Error$/;"	c	class:ndn::SecTpmOsx
Error	src/security/sec-tpm.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecTpm::Error
Error	src/security/sec-tpm.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::SecTpm
Error	src/security/secured-bag.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecuredBag::Error
Error	src/security/secured-bag.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::SecuredBag
Error	src/security/signature-sha256-with-ecdsa.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SignatureSha256WithEcdsa::Error
Error	src/security/signature-sha256-with-ecdsa.hpp	/^  class Error : public Signature::Error$/;"	c	class:ndn::SignatureSha256WithEcdsa
Error	src/security/signature-sha256-with-rsa.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SignatureSha256WithRsa::Error
Error	src/security/signature-sha256-with-rsa.hpp	/^  class Error : public Signature::Error$/;"	c	class:ndn::SignatureSha256WithRsa
Error	src/security/signing-info.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::SigningInfo::Error
Error	src/security/signing-info.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::security::SigningInfo
Error	src/security/validator-config.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::ValidatorConfig::Error
Error	src/security/validator-config.hpp	/^  class Error : public Validator::Error$/;"	c	class:ndn::ValidatorConfig
Error	src/security/validator-regex.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::ValidatorRegex::Error
Error	src/security/validator-regex.hpp	/^  class Error : public Validator::Error$/;"	c	class:ndn::ValidatorRegex
Error	src/security/validator.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Validator::Error
Error	src/security/validator.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::Validator
Error	src/security/validity-period.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::ValidityPeriod::Error
Error	src/security/validity-period.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::security::ValidityPeriod
Error	src/selectors.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Selectors::Error
Error	src/selectors.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Selectors
Error	src/signature-info.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SignatureInfo::Error
Error	src/signature-info.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::SignatureInfo
Error	src/signature.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Signature::Error
Error	src/signature.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Signature
Error	src/transport/transport.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::Transport
Error	src/transport/transport.hpp	/^Transport::Error::Error(const boost::system::error_code& code, const std::string& msg)$/;"	f	class:ndn::Transport::Error
Error	src/transport/transport.hpp	/^Transport::Error::Error(const std::string& msg)$/;"	f	class:ndn::Transport::Error
Error	src/util/config-file.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::ConfigFile::Error
Error	src/util/config-file.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::ConfigFile
Error	src/util/digest.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::util::Digest::Error
Error	src/util/digest.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::util::Digest
Error	src/util/dns.hpp	/^  Error(const std::string& what)$/;"	f	struct:ndn::dns::Error
Error	src/util/dns.hpp	/^struct Error : public std::runtime_error$/;"	s	namespace:ndn::dns
Error	src/util/face-uri.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::util::FaceUri::Error
Error	src/util/face-uri.hpp	/^  class Error : public std::invalid_argument$/;"	c	class:ndn::util::FaceUri
Error	src/util/in-memory-storage.hpp	/^    Error() : std::runtime_error("Cannot reduce the capacity of the in-memory storage!")$/;"	f	class:ndn::util::InMemoryStorage::Error
Error	src/util/in-memory-storage.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::util::InMemoryStorage
Error	src/util/io.hpp	/^  Error(const std::string& what)$/;"	f	class:ndn::io::Error
Error	src/util/io.hpp	/^class Error : public std::runtime_error$/;"	c	namespace:ndn::io
Error	src/util/network-monitor.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::util::NetworkMonitor::Error
Error	src/util/network-monitor.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::util::NetworkMonitor
Error	src/util/regex/regex-matcher.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::RegexMatcher::Error
Error	src/util/regex/regex-matcher.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::RegexMatcher
ErrorCallback	src/transport/transport.hpp	/^  typedef function<void ()> ErrorCallback;$/;"	t	class:ndn::Transport
ErrorCallback	src/util/dns.hpp	/^typedef function<void (const std::string& reason)> ErrorCallback;$/;"	t	namespace:ndn::dns
ErrorCallback	src/util/segment-fetcher.hpp	/^  typedef function<void (uint32_t code, const std::string& msg)> ErrorCallback;$/;"	t	class:ndn::util::SegmentFetcher
ErrorCode	src/util/segment-fetcher.hpp	/^  enum ErrorCode {$/;"	g	class:ndn::util::SegmentFetcher
Estimator	src/encoding/estimator.cpp	/^Estimator::Estimator(size_t totalReserve, size_t reserveFromBack)$/;"	f	class:ndn::encoding::Estimator
Estimator	src/encoding/estimator.hpp	/^class Estimator$/;"	c	namespace:ndn::encoding
EstimatorTag	src/encoding/encoding-buffer-fwd.hpp	/^static const Tag EstimatorTag = false;$/;"	m	namespace:ndn::encoding
EtherCanonizeProvider	src/util/face-uri.cpp	/^class EtherCanonizeProvider : public CanonizeProvider$/;"	c	namespace:ndn::util	file:
Event	src/util/scheduler.hpp	/^  typedef function<void()> Event;$/;"	t	class:ndn::util::scheduler::Scheduler
EventId	src/util/scheduler.hpp	/^typedef shared_ptr<EventIdImpl> EventId;$/;"	t	namespace:ndn::util::scheduler
EventIdImpl	src/util/scheduler.cpp	/^  EventIdImpl(const Scheduler::EventQueue::iterator& event)$/;"	f	struct:ndn::util::scheduler::EventIdImpl
EventIdImpl	src/util/scheduler.cpp	/^struct EventIdImpl$/;"	s	namespace:ndn::util::scheduler	file:
EventInfo	src/util/scheduler.cpp	/^Scheduler::EventInfo::EventInfo(const time::nanoseconds& after,$/;"	f	class:ndn::util::scheduler::Scheduler::EventInfo
EventInfo	src/util/scheduler.cpp	/^Scheduler::EventInfo::EventInfo(const time::steady_clock::TimePoint& when,$/;"	f	class:ndn::util::scheduler::Scheduler::EventInfo
EventInfo	src/util/scheduler.hpp	/^  struct EventInfo$/;"	s	class:ndn::util::scheduler::Scheduler
EventQueue	src/util/scheduler.hpp	/^  typedef std::multiset<EventInfo> EventQueue;$/;"	t	class:ndn::util::scheduler::Scheduler
Exclude	src/encoding/tlv.hpp	/^  Exclude       = 16,$/;"	e	enum:ndn::tlv::__anon4
Exclude	src/exclude.cpp	/^Exclude::Exclude()$/;"	f	class:ndn::Exclude
Exclude	src/exclude.cpp	/^Exclude::Exclude(const Block& wire)$/;"	f	class:ndn::Exclude
Exclude	src/exclude.hpp	/^class Exclude$/;"	c	namespace:ndn
ExpirationPeriod	src/encoding/tlv-nfd.hpp	/^  ExpirationPeriod    = 109,$/;"	e	enum:ndn::tlv::nfd::__anon2
ExtensionList	src/security/certificate.hpp	/^  typedef std::vector<CertificateExtension> ExtensionList;$/;"	t	class:ndn::Certificate
ExtractFieldInfo	src/lp/detail/field-info.cpp	/^struct ExtractFieldInfo$/;"	s	namespace:ndn::lp::detail	file:
FACE_EVENT_CREATED	src/management/nfd-face-event-notification.hpp	/^  FACE_EVENT_CREATED = 1,$/;"	e	enum:ndn::nfd::FaceEventKind
FACE_EVENT_DESTROYED	src/management/nfd-face-event-notification.hpp	/^  FACE_EVENT_DESTROYED = 2$/;"	e	enum:ndn::nfd::FaceEventKind
FACE_PERSISTENCY_ON_DEMAND	src/encoding/nfd-constants.hpp	/^  FACE_PERSISTENCY_ON_DEMAND = 1,$/;"	e	enum:ndn::nfd::FacePersistency
FACE_PERSISTENCY_PERMANENT	src/encoding/nfd-constants.hpp	/^  FACE_PERSISTENCY_PERMANENT = 2$/;"	e	enum:ndn::nfd::FacePersistency
FACE_PERSISTENCY_PERSISTENT	src/encoding/nfd-constants.hpp	/^  FACE_PERSISTENCY_PERSISTENT = 0,$/;"	e	enum:ndn::nfd::FacePersistency
FACE_SCOPE_LOCAL	src/encoding/nfd-constants.hpp	/^  FACE_SCOPE_LOCAL = 1$/;"	e	enum:ndn::nfd::FaceScope
FACE_SCOPE_NON_LOCAL	src/encoding/nfd-constants.hpp	/^  FACE_SCOPE_NON_LOCAL = 0,$/;"	e	enum:ndn::nfd::FaceScope
Face	src/face.cpp	/^Face::Face()$/;"	f	class:ndn::Face
Face	src/face.cpp	/^Face::Face(boost::asio::io_service& ioService)$/;"	f	class:ndn::Face
Face	src/face.cpp	/^Face::Face(const shared_ptr<Transport>& transport)$/;"	f	class:ndn::Face
Face	src/face.cpp	/^Face::Face(const shared_ptr<Transport>& transport,$/;"	f	class:ndn::Face
Face	src/face.cpp	/^Face::Face(const std::string& host, const std::string& port\/* = "6363"*\/)$/;"	f	class:ndn::Face
Face	src/face.cpp	/^Face::Face(shared_ptr<Transport> transport,$/;"	f	class:ndn::Face
Face	src/face.hpp	/^class Face : noncopyable$/;"	c	namespace:ndn
FaceCreateCommand	src/management/nfd-control-command.cpp	/^FaceCreateCommand::FaceCreateCommand()$/;"	f	class:ndn::nfd::FaceCreateCommand
FaceCreateCommand	src/management/nfd-control-command.hpp	/^class FaceCreateCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
FaceDestroyCommand	src/management/nfd-control-command.cpp	/^FaceDestroyCommand::FaceDestroyCommand()$/;"	f	class:ndn::nfd::FaceDestroyCommand
FaceDestroyCommand	src/management/nfd-control-command.hpp	/^class FaceDestroyCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
FaceDisableLocalControlCommand	src/management/nfd-control-command.cpp	/^FaceDisableLocalControlCommand::FaceDisableLocalControlCommand()$/;"	f	class:ndn::nfd::FaceDisableLocalControlCommand
FaceDisableLocalControlCommand	src/management/nfd-control-command.hpp	/^class FaceDisableLocalControlCommand : public FaceLocalControlCommand$/;"	c	namespace:ndn::nfd
FaceEnableLocalControlCommand	src/management/nfd-control-command.cpp	/^FaceEnableLocalControlCommand::FaceEnableLocalControlCommand()$/;"	f	class:ndn::nfd::FaceEnableLocalControlCommand
FaceEnableLocalControlCommand	src/management/nfd-control-command.hpp	/^class FaceEnableLocalControlCommand : public FaceLocalControlCommand$/;"	c	namespace:ndn::nfd
FaceEventKind	src/encoding/tlv-nfd.hpp	/^  FaceEventKind         = 193,$/;"	e	enum:ndn::tlv::nfd::__anon2
FaceEventKind	src/management/nfd-face-event-notification.hpp	/^enum FaceEventKind {$/;"	g	namespace:ndn::nfd
FaceEventNotification	src/encoding/tlv-nfd.hpp	/^  FaceEventNotification = 192,$/;"	e	enum:ndn::tlv::nfd::__anon2
FaceEventNotification	src/management/nfd-face-event-notification.cpp	/^FaceEventNotification::FaceEventNotification()$/;"	f	class:ndn::nfd::FaceEventNotification
FaceEventNotification	src/management/nfd-face-event-notification.cpp	/^FaceEventNotification::FaceEventNotification(const Block& block)$/;"	f	class:ndn::nfd::FaceEventNotification
FaceEventNotification	src/management/nfd-face-event-notification.hpp	/^class FaceEventNotification : public FaceTraits<FaceEventNotification>$/;"	c	namespace:ndn::nfd
FaceFixture	tests/unit-tests/face.t.cpp	/^  FaceFixture(bool enableRegistrationReply = true)$/;"	f	class:ndn::tests::FaceFixture
FaceFixture	tests/unit-tests/face.t.cpp	/^class FaceFixture : public UnitTestTimeFixture$/;"	c	namespace:ndn::tests	file:
FaceId	src/encoding/tlv-nfd.hpp	/^  FaceId              = 105,$/;"	e	enum:ndn::tlv::nfd::__anon2
FaceLocalControlCommand	src/management/nfd-control-command.cpp	/^FaceLocalControlCommand::FaceLocalControlCommand(const std::string& verb)$/;"	f	class:ndn::nfd::FaceLocalControlCommand
FaceLocalControlCommand	src/management/nfd-control-command.hpp	/^class FaceLocalControlCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
FaceMonitor	src/management/nfd-face-monitor.hpp	/^  FaceMonitor(Face& face)$/;"	f	class:ndn::nfd::FaceMonitor
FaceMonitor	src/management/nfd-face-monitor.hpp	/^class FaceMonitor : public util::NotificationSubscriber<FaceEventNotification>$/;"	c	namespace:ndn::nfd
FacePersistency	src/encoding/nfd-constants.hpp	/^enum FacePersistency {$/;"	g	namespace:ndn::nfd
FacePersistency	src/encoding/tlv-nfd.hpp	/^  FacePersistency       = 133,$/;"	e	enum:ndn::tlv::nfd::__anon2
FaceQueryFilter	src/encoding/tlv-nfd.hpp	/^  FaceQueryFilter       = 150,$/;"	e	enum:ndn::tlv::nfd::__anon2
FaceQueryFilter	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::FaceQueryFilter()$/;"	f	class:ndn::nfd::FaceQueryFilter
FaceQueryFilter	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::FaceQueryFilter(const Block& block)$/;"	f	class:ndn::nfd::FaceQueryFilter
FaceQueryFilter	src/management/nfd-face-query-filter.hpp	/^class FaceQueryFilter$/;"	c	namespace:ndn::nfd
FaceScope	src/encoding/nfd-constants.hpp	/^enum FaceScope {$/;"	g	namespace:ndn::nfd
FaceScope	src/encoding/tlv-nfd.hpp	/^  FaceScope             = 132,$/;"	e	enum:ndn::tlv::nfd::__anon2
FaceStatus	src/encoding/tlv-nfd.hpp	/^  FaceStatus            = 128,$/;"	e	enum:ndn::tlv::nfd::__anon2
FaceStatus	src/management/nfd-face-status.cpp	/^FaceStatus::FaceStatus()$/;"	f	class:ndn::nfd::FaceStatus
FaceStatus	src/management/nfd-face-status.cpp	/^FaceStatus::FaceStatus(const Block& block)$/;"	f	class:ndn::nfd::FaceStatus
FaceStatus	src/management/nfd-face-status.hpp	/^class FaceStatus : public FaceTraits<FaceStatus>$/;"	c	namespace:ndn::nfd
FaceTraits	src/management/nfd-face-traits.hpp	/^  FaceTraits()$/;"	f	class:ndn::nfd::FaceTraits
FaceTraits	src/management/nfd-face-traits.hpp	/^class FaceTraits$/;"	c	namespace:ndn::nfd
FaceUri	src/util/face-uri.cpp	/^FaceUri::FaceUri()$/;"	f	class:ndn::util::FaceUri
FaceUri	src/util/face-uri.cpp	/^FaceUri::FaceUri(const boost::asio::ip::tcp::endpoint& endpoint)$/;"	f	class:ndn::util::FaceUri
FaceUri	src/util/face-uri.cpp	/^FaceUri::FaceUri(const boost::asio::ip::tcp::endpoint& endpoint, const std::string& scheme)$/;"	f	class:ndn::util::FaceUri
FaceUri	src/util/face-uri.cpp	/^FaceUri::FaceUri(const boost::asio::ip::udp::endpoint& endpoint)$/;"	f	class:ndn::util::FaceUri
FaceUri	src/util/face-uri.cpp	/^FaceUri::FaceUri(const boost::asio::local::stream_protocol::endpoint& endpoint)$/;"	f	class:ndn::util::FaceUri
FaceUri	src/util/face-uri.cpp	/^FaceUri::FaceUri(const char* uri)$/;"	f	class:ndn::util::FaceUri
FaceUri	src/util/face-uri.cpp	/^FaceUri::FaceUri(const ethernet::Address& address)$/;"	f	class:ndn::util::FaceUri
FaceUri	src/util/face-uri.cpp	/^FaceUri::FaceUri(const std::string& uri)$/;"	f	class:ndn::util::FaceUri
FaceUri	src/util/face-uri.hpp	/^class FaceUri$/;"	c	namespace:ndn::util
FacesFixture	tests/integrated/face.cpp	/^  FacesFixture()$/;"	f	class:ndn::tests::FacesFixture
FacesFixture	tests/integrated/face.cpp	/^class FacesFixture : public security::IdentityManagementFixture$/;"	c	namespace:ndn::tests	file:
FacesFixture	tests/unit-tests/security/validator-config.t.cpp	/^  FacesFixture()$/;"	f	struct:ndn::tests::FacesFixture
FacesFixture	tests/unit-tests/security/validator-config.t.cpp	/^struct FacesFixture : public security::IdentityManagementTimeFixture$/;"	s	namespace:ndn::tests	file:
FacesFixture2	tests/integrated/face.cpp	/^class FacesFixture2 : public FacesFixture$/;"	c	namespace:ndn::tests	file:
FacesFixture3	tests/integrated/face.cpp	/^  FacesFixture3()$/;"	f	class:ndn::tests::FacesFixture3
FacesFixture3	tests/integrated/face.cpp	/^class FacesFixture3 : public FacesFixture2$/;"	c	namespace:ndn::tests	file:
FacesNoRegistrationReplyFixture	tests/unit-tests/face.t.cpp	/^  FacesNoRegistrationReplyFixture()$/;"	f	class:ndn::tests::FacesNoRegistrationReplyFixture
FacesNoRegistrationReplyFixture	tests/unit-tests/face.t.cpp	/^class FacesNoRegistrationReplyFixture : public FaceFixture$/;"	c	namespace:ndn::tests	file:
Factory	src/security/key-chain.cpp	/^  Factory(const std::string& canonicalName, const T& create)$/;"	f	struct:ndn::security::Factory
Factory	src/security/key-chain.cpp	/^struct Factory$/;"	s	namespace:ndn::security	file:
FailureCallback	src/detail/registered-prefix.hpp	/^  typedef function<void(uint32_t\/*code*\/,const std::string&\/*reason*\/)> FailureCallback;$/;"	t	class:ndn::RegisteredPrefix
FibAddNextHopCommand	src/management/nfd-control-command.cpp	/^FibAddNextHopCommand::FibAddNextHopCommand()$/;"	f	class:ndn::nfd::FibAddNextHopCommand
FibAddNextHopCommand	src/management/nfd-control-command.hpp	/^class FibAddNextHopCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
FibEntry	src/encoding/tlv-nfd.hpp	/^  FibEntry      = 128,$/;"	e	enum:ndn::tlv::nfd::__anon2
FibEntry	src/management/nfd-fib-entry.cpp	/^FibEntry::FibEntry()$/;"	f	class:ndn::nfd::FibEntry
FibEntry	src/management/nfd-fib-entry.cpp	/^FibEntry::FibEntry(const Block& block)$/;"	f	class:ndn::nfd::FibEntry
FibEntry	src/management/nfd-fib-entry.hpp	/^class FibEntry$/;"	c	namespace:ndn::nfd
FibRemoveNextHopCommand	src/management/nfd-control-command.cpp	/^FibRemoveNextHopCommand::FibRemoveNextHopCommand()$/;"	f	class:ndn::nfd::FibRemoveNextHopCommand
FibRemoveNextHopCommand	src/management/nfd-control-command.hpp	/^class FibRemoveNextHopCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
Field	src/lp/field.hpp	/^struct Field$/;"	s	namespace:ndn::lp
FieldDecl	src/lp/detail/field-decl.hpp	/^class FieldDecl$/;"	c	namespace:ndn::lp::detail
FieldInfo	src/lp/detail/field-info.cpp	/^FieldInfo::FieldInfo()$/;"	f	class:ndn::lp::detail::FieldInfo
FieldInfo	src/lp/detail/field-info.cpp	/^FieldInfo::FieldInfo(uint64_t tlv)$/;"	f	class:ndn::lp::detail::FieldInfo
FieldInfo	src/lp/detail/field-info.hpp	/^class FieldInfo$/;"	c	namespace:ndn::lp::detail
FieldLocation	src/lp/detail/field-decl.hpp	/^  typedef LOCATION FieldLocation;$/;"	t	class:ndn::lp::detail::FieldDecl
FieldSet	src/lp/fields.hpp	/^  > FieldSet;$/;"	t	namespace:ndn::lp
FieldValidator	src/management/nfd-control-command.cpp	/^ControlCommand::FieldValidator::FieldValidator()$/;"	f	class:ndn::nfd::ControlCommand::FieldValidator
FieldValidator	src/management/nfd-control-command.hpp	/^  class FieldValidator$/;"	c	class:ndn::nfd::ControlCommand
Filter	src/security/conf/filter.hpp	/^class Filter$/;"	c	namespace:ndn::security::conf
FilterFactory	src/security/conf/filter.hpp	/^class FilterFactory$/;"	c	namespace:ndn::security::conf
FilterList	src/security/conf/rule.hpp	/^  typedef std::vector<shared_ptr<Filter> > FilterList;$/;"	t	class:ndn::security::conf::Rule
FinalBlockId	src/encoding/tlv.hpp	/^  FinalBlockId  = 26,$/;"	e	enum:ndn::tlv::__anon4
FindFixture	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^class FindFixture$/;"	c	namespace:ndn::util	file:
FixedSignerChecker	src/security/conf/checker.hpp	/^  FixedSignerChecker(uint32_t sigType,$/;"	f	class:ndn::security::conf::FixedSignerChecker
FixedSignerChecker	src/security/conf/checker.hpp	/^class FixedSignerChecker : public Checker$/;"	c	namespace:ndn::security::conf
Fixture	tests/unit-tests/util/segment-fetcher.t.cpp	/^  Fixture()$/;"	f	class:ndn::util::tests::Fixture
Fixture	tests/unit-tests/util/segment-fetcher.t.cpp	/^class Fixture : public ndn::tests::UnitTestTimeFixture$/;"	c	namespace:ndn::util::tests	file:
Fixtures	tests/unit-tests/tag-host.t.cpp	/^typedef boost::mpl::vector<TagHost, Interest, Data> Fixtures;$/;"	t	namespace:ndn::tests	file:
Flags	src/encoding/tlv-nfd.hpp	/^  Flags               = 108,$/;"	e	enum:ndn::tlv::nfd::__anon2
ForwarderStatus	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::ForwarderStatus()$/;"	f	class:ndn::nfd::ForwarderStatus
ForwarderStatus	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::ForwarderStatus(const Block& payload)$/;"	f	class:ndn::nfd::ForwarderStatus
ForwarderStatus	src/management/nfd-forwarder-status.hpp	/^class ForwarderStatus$/;"	c	namespace:ndn::nfd
FragCount	src/lp/tlv.hpp	/^  FragCount = 83,$/;"	e	enum:ndn::lp::tlv::__anon9
FragCountField	src/lp/fields.hpp	/^                          tlv::FragCount> FragCountField;$/;"	t	namespace:ndn::lp
FragIndex	src/lp/tlv.hpp	/^  FragIndex = 82,$/;"	e	enum:ndn::lp::tlv::__anon9
FragIndexField	src/lp/fields.hpp	/^                          tlv::FragIndex> FragIndexField;$/;"	t	namespace:ndn::lp
Fragment	src/lp/field.hpp	/^class Fragment : public Base$/;"	c	namespace:ndn::lp::field_location_tags
Fragment	src/lp/tlv.hpp	/^  Fragment = 80,$/;"	e	enum:ndn::lp::tlv::__anon9
FragmentField	src/lp/fields.hpp	/^                          tlv::Fragment> FragmentField;$/;"	t	namespace:ndn::lp
FreshnessPeriod	src/encoding/tlv.hpp	/^  FreshnessPeriod = 25,$/;"	e	enum:ndn::tlv::__anon4
GIT	waf	/^GIT="2b3bb0af33c07b93a72803a332ea8286427006bc"$/;"	v
GRACE_INTERVAL	src/util/command-interest-validator.hpp	/^    GRACE_INTERVAL = 3000 \/\/ ms$/;"	e	enum:ndn::CommandInterestValidator::__anon11
HAVE_IS_DEFAULT_CONSTRUCTIBLE	build/c4che/_cache.py	/^HAVE_IS_DEFAULT_CONSTRUCTIBLE = True$/;"	v
HAVE_IS_NOTHROW_MOVE_ASSIGNABLE	build/c4che/_cache.py	/^HAVE_IS_NOTHROW_MOVE_ASSIGNABLE = True$/;"	v
HAVE_IS_NOTHROW_MOVE_CONSTRUCTIBLE	build/c4che/_cache.py	/^HAVE_IS_NOTHROW_MOVE_CONSTRUCTIBLE = True$/;"	v
HAVE_SQLITE3	build/c4che/_cache.py	/^HAVE_SQLITE3 = 1$/;"	v
HDR_LEN	src/util/ethernet.hpp	/^const size_t HDR_LEN      = 14;     \/\/\/< Total octets in Ethernet header (without 802.1Q tag)$/;"	m	namespace:ndn::util::ethernet
HEADER1_MAX	src/lp/tlv.hpp	/^  HEADER1_MAX = 99,$/;"	e	enum:ndn::lp::tlv::__anon10
HEADER1_MIN	src/lp/tlv.hpp	/^  HEADER1_MIN = 81,$/;"	e	enum:ndn::lp::tlv::__anon10
HEADER3_MAX	src/lp/tlv.hpp	/^  HEADER3_MAX = 959$/;"	e	enum:ndn::lp::tlv::__anon10
HEADER3_MIN	src/lp/tlv.hpp	/^  HEADER3_MIN = 800,$/;"	e	enum:ndn::lp::tlv::__anon10
HEX	src/util/io.hpp	/^  HEX$/;"	e	enum:ndn::io::IoEncoding
HTMLDIR	build/c4che/_cache.py	/^HTMLDIR = '\/usr\/local\/share\/doc\/ndn-cxx'$/;"	v
Handler	src/util/signal-signal.hpp	/^  typedef function<void(const TArgs&...)> Handler;$/;"	t	class:ndn::util::signal::Signal
HandlerMap	src/mgmt/dispatcher.hpp	/^  typedef std::unordered_map<PartialName, InterestHandler> HandlerMap;$/;"	t	class:ndn::mgmt::Dispatcher
HandlerMapIt	src/mgmt/dispatcher.hpp	/^  typedef HandlerMap::iterator HandlerMapIt;$/;"	t	class:ndn::mgmt::Dispatcher
HashFunction	src/util/digest.hpp	/^  typedef Hash HashFunction;$/;"	t	class:ndn::util::Digest
Hashable	src/util/concepts.hpp	/^class Hashable$/;"	c	namespace:ndn
Header	src/lp/field.hpp	/^class Header : public Base$/;"	c	namespace:ndn::lp::field_location_tags
HexPrinter	tools/tlvdump.cpp	/^HexPrinter(const Block& block, const std::string& indent = "")$/;"	f	namespace:ndn
HierarchicalChecker	src/security/conf/checker.hpp	/^  HierarchicalChecker(uint32_t sigType)$/;"	f	class:ndn::security::conf::HierarchicalChecker
HierarchicalChecker	src/security/conf/checker.hpp	/^class HierarchicalChecker : public CustomizedChecker$/;"	c	namespace:ndn::security::conf
HttpException	tools/ndnsec/cert-install.hpp	/^  HttpException(const std::string& what)$/;"	f	class:HttpException
HttpException	tools/ndnsec/cert-install.hpp	/^class HttpException : public std::runtime_error$/;"	c
HyperKeyLocatorNameChecker	src/security/conf/key-locator-checker.hpp	/^  HyperKeyLocatorNameChecker(const std::string& pExpr, const std::string pExpand,$/;"	f	class:ndn::security::conf::HyperKeyLocatorNameChecker
HyperKeyLocatorNameChecker	src/security/conf/key-locator-checker.hpp	/^class HyperKeyLocatorNameChecker : public KeyLocatorChecker$/;"	c	namespace:ndn::security::conf
ID1_KEY1	tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID1_KEY1[] = {$/;"	v
ID1_KEY1_CERT1	tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID1_KEY1_CERT1[] = {$/;"	v
ID1_KEY1_CERT2	tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID1_KEY1_CERT2[] = {$/;"	v
ID1_KEY2	tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID1_KEY2[] = {$/;"	v
ID1_KEY2_CERT1	tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID1_KEY2_CERT1[] = {$/;"	v
ID1_KEY2_CERT2	tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID1_KEY2_CERT2[] = {$/;"	v
ID2_KEY1	tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID2_KEY1[] = {$/;"	v
ID2_KEY1_CERT1	tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID2_KEY1_CERT1[] = {$/;"	v
ID2_KEY1_CERT2	tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID2_KEY1_CERT2[] = {$/;"	v
ID2_KEY2	tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID2_KEY2[] = {$/;"	v
ID2_KEY2_CERT1	tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID2_KEY2_CERT1[] = {$/;"	v
ID2_KEY2_CERT2	tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID2_KEY2_CERT2[] = {$/;"	v
INCLUDEDIR	build/c4che/_cache.py	/^INCLUDEDIR = '\/usr\/local\/include'$/;"	v
INCLUDES_BOOST	build/c4che/_cache.py	/^INCLUDES_BOOST = '\/usr\/include'$/;"	v
INCLUDES_CRYPTOPP	build/c4che/_cache.py	/^INCLUDES_CRYPTOPP = ['\/usr\/include']$/;"	v
INFINITE_EXPIRATION_PERIOD	src/management/nfd-rib-entry.hpp	/^  static const time::milliseconds INFINITE_EXPIRATION_PERIOD;$/;"	m	class:ndn::nfd::Route
INFODIR	build/c4che/_cache.py	/^INFODIR = '\/usr\/local\/share\/info'$/;"	v
INITIAL	src/mgmt/status-dataset-context.hpp	/^    INITIAL, \/\/\/< none of .append, .end, .reject has been invoked$/;"	m	class:ndn::mgmt::StatusDatasetContext::State
INITIALIZATION	src/security/pib-sqlite3.cpp	/^static const string INITIALIZATION =$/;"	m	namespace:ndn::security	file:
INIT_CERT_TABLE	src/security/sec-public-info-sqlite3.cpp	/^static const string INIT_CERT_TABLE =$/;"	m	namespace:ndn	file:
INIT_ID_TABLE	src/security/sec-public-info-sqlite3.cpp	/^static const string INIT_ID_TABLE =$/;"	m	namespace:ndn	file:
INIT_KEY_TABLE	src/security/sec-public-info-sqlite3.cpp	/^static const string INIT_KEY_TABLE =$/;"	m	namespace:ndn	file:
INIT_TPM_INFO_TABLE	src/security/sec-public-info-sqlite3.cpp	/^static const string INIT_TPM_INFO_TABLE =$/;"	m	namespace:ndn	file:
INSTALL	waf	/^INSTALL=''$/;"	v
INTEREST_SIG_INFO	src/security/conf/checker.hpp	/^    INTEREST_SIG_INFO = -2$/;"	e	enum:ndn::security::conf::Checker::__anon7
INTEREST_SIG_VALUE	src/security/conf/checker.hpp	/^    INTEREST_SIG_VALUE = -1,$/;"	e	enum:ndn::security::conf::Checker::__anon7
INTEREST_TIMEOUT	src/util/segment-fetcher.hpp	/^    INTEREST_TIMEOUT = 1,$/;"	e	enum:ndn::util::SegmentFetcher::ErrorCode
INVALID_FACE_ID	src/encoding/nfd-constants.hpp	/^static const uint64_t INVALID_FACE_ID = std::numeric_limits<uint64_t>::max();$/;"	m	namespace:ndn::nfd
INVALID_SELECTED_DELEGATION_INDEX	src/link.hpp	/^const size_t INVALID_SELECTED_DELEGATION_INDEX = std::numeric_limits<size_t>::max();$/;"	m	namespace:ndn
ISO_DATETIME_SIZE	src/security/validity-period.cpp	/^static const size_t ISO_DATETIME_SIZE = 15;$/;"	m	namespace:ndn::security	file:
Identity	src/security/identity.cpp	/^Identity::Identity()$/;"	f	class:ndn::security::Identity
Identity	src/security/identity.cpp	/^Identity::Identity(const Name& identityName, shared_ptr<PibImpl> impl, bool needInit)$/;"	f	class:ndn::security::Identity
Identity	src/security/identity.hpp	/^class Identity$/;"	c	namespace:ndn::security
IdentityCertificate	src/security/identity-certificate.cpp	/^IdentityCertificate::IdentityCertificate()$/;"	f	class:ndn::IdentityCertificate
IdentityCertificate	src/security/identity-certificate.cpp	/^IdentityCertificate::IdentityCertificate(const Block& block)$/;"	f	class:ndn::IdentityCertificate
IdentityCertificate	src/security/identity-certificate.cpp	/^IdentityCertificate::IdentityCertificate(const Data& data)$/;"	f	class:ndn::IdentityCertificate
IdentityCertificate	src/security/identity-certificate.hpp	/^class IdentityCertificate : public Certificate$/;"	c	namespace:ndn
IdentityContainer	src/security/identity-container.cpp	/^IdentityContainer::IdentityContainer()$/;"	f	class:ndn::security::IdentityContainer
IdentityContainer	src/security/identity-container.cpp	/^IdentityContainer::IdentityContainer(std::set<Name>&& identities,$/;"	f	class:ndn::security::IdentityContainer
IdentityContainer	src/security/identity-container.hpp	/^class IdentityContainer$/;"	c	namespace:ndn::security
IdentityFixture	tests/unit-tests/security/identity-fixture.cpp	/^  IdentityFixture()$/;"	f	class:ndn::security::IdentityFixture
IdentityFixture	tests/unit-tests/security/identity-fixture.cpp	/^class IdentityFixture : public util::TestHomeEnvironmentFixture$/;"	c	namespace:ndn::security	file:
IdentityManagementFixture	tests/identity-management-fixture.cpp	/^IdentityManagementFixture::IdentityManagementFixture()$/;"	f	class:ndn::security::IdentityManagementFixture
IdentityManagementFixture	tests/identity-management-fixture.hpp	/^class IdentityManagementFixture$/;"	c	namespace:ndn::security
IdentityManagementTimeFixture	tests/unit-tests/identity-management-time-fixture.cpp	/^IdentityManagementTimeFixture::IdentityManagementTimeFixture()$/;"	f	class:ndn::security::IdentityManagementTimeFixture
IdentityManagementTimeFixture	tests/unit-tests/identity-management-time-fixture.hpp	/^class IdentityManagementTimeFixture : public tests::UnitTestTimeFixture$/;"	c	namespace:ndn::security
IdentityPackage	src/encoding/tlv-security.hpp	/^  IdentityPackage    = 128,$/;"	e	enum:ndn::tlv::security::__anon1
Impl	src/detail/face-impl.hpp	/^  Impl(Face& face)$/;"	f	class:ndn::Face::Impl
Impl	src/detail/face-impl.hpp	/^class Face::Impl : noncopyable$/;"	c	class:ndn::Face
Impl	src/security/sec-tpm-file.cpp	/^  Impl(const string& dir)$/;"	f	class:ndn::SecTpmFile::Impl
Impl	src/security/sec-tpm-file.cpp	/^class SecTpmFile::Impl$/;"	c	class:ndn::SecTpmFile	file:
Impl	src/security/sec-tpm-osx.cpp	/^  Impl()$/;"	f	class:ndn::SecTpmOsx::Impl
Impl	src/security/sec-tpm-osx.cpp	/^class SecTpmOsx::Impl$/;"	c	class:ndn::SecTpmOsx	file:
Impl	src/transport/stream-transport.hpp	/^  typedef StreamTransportImpl<BaseTransport,Protocol> Impl;$/;"	t	class:ndn::StreamTransportImpl
Impl	src/transport/stream-transport.hpp	/^  typedef StreamTransportWithResolverImpl<BaseTransport,Protocol> Impl;$/;"	t	class:ndn::StreamTransportWithResolverImpl
Impl	src/transport/tcp-transport.hpp	/^  typedef StreamTransportWithResolverImpl<TcpTransport, boost::asio::ip::tcp> Impl;$/;"	t	class:ndn::TcpTransport
Impl	src/transport/unix-transport.hpp	/^  typedef StreamTransportImpl<UnixTransport, boost::asio::local::stream_protocol> Impl;$/;"	t	class:ndn::UnixTransport
Impl	src/util/network-monitor.cpp	/^  Impl(boost::asio::io_service& io)$/;"	f	class:ndn::util::NetworkMonitor::Impl
Impl	src/util/network-monitor.cpp	/^class NetworkMonitor::Impl$/;"	c	class:ndn::util::NetworkMonitor	file:
ImplicitSha256DigestComponent	src/encoding/tlv.hpp	/^  ImplicitSha256DigestComponent = 1,$/;"	e	enum:ndn::tlv::__anon4
InMemoryStorage	src/util/in-memory-storage.cpp	/^InMemoryStorage::InMemoryStorage(size_t limit)$/;"	f	class:ndn::util::InMemoryStorage
InMemoryStorage	src/util/in-memory-storage.hpp	/^class InMemoryStorage : noncopyable$/;"	c	namespace:ndn::util
InMemoryStorageEntry	src/util/in-memory-storage-entry.hpp	/^class InMemoryStorageEntry : noncopyable$/;"	c	namespace:ndn::util
InMemoryStorageFifo	src/util/in-memory-storage-fifo.cpp	/^InMemoryStorageFifo::InMemoryStorageFifo(size_t limit)$/;"	f	class:ndn::util::InMemoryStorageFifo
InMemoryStorageFifo	src/util/in-memory-storage-fifo.hpp	/^class InMemoryStorageFifo : public InMemoryStorage$/;"	c	namespace:ndn::util
InMemoryStorageLfu	src/util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::InMemoryStorageLfu(size_t limit)$/;"	f	class:ndn::util::InMemoryStorageLfu
InMemoryStorageLfu	src/util/in-memory-storage-lfu.hpp	/^class InMemoryStorageLfu : public InMemoryStorage$/;"	c	namespace:ndn::util
InMemoryStorageLru	src/util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::InMemoryStorageLru(size_t limit)$/;"	f	class:ndn::util::InMemoryStorageLru
InMemoryStorageLru	src/util/in-memory-storage-lru.hpp	/^class InMemoryStorageLru : public InMemoryStorage$/;"	c	namespace:ndn::util
InMemoryStoragePersistent	src/util/in-memory-storage-persistent.cpp	/^InMemoryStoragePersistent::InMemoryStoragePersistent()$/;"	f	class:ndn::util::InMemoryStoragePersistent
InMemoryStoragePersistent	src/util/in-memory-storage-persistent.hpp	/^class InMemoryStoragePersistent : public InMemoryStorage$/;"	c	namespace:ndn::util
InMemoryStorages	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^                         InMemoryStorageLru> InMemoryStorages;$/;"	t	namespace:ndn::util	file:
InMemoryStoragesLimited	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^                         InMemoryStoragesLimited;$/;"	t	namespace:ndn::util	file:
IncomingFaceId	src/encoding/tlv-nfd.hpp	/^  IncomingFaceId     = 81,$/;"	e	enum:ndn::tlv::nfd::__anon3
IncomingFaceId	src/lp/tlv.hpp	/^  IncomingFaceId = 817$/;"	e	enum:ndn::lp::tlv::__anon9
IncomingFaceIdField	src/lp/fields.hpp	/^                          tlv::IncomingFaceId> IncomingFaceIdField;$/;"	t	namespace:ndn::lp
IncorrectContentTypeLink	tests/unit-tests/link.t.cpp	/^const uint8_t IncorrectContentTypeLink[] = {$/;"	m	namespace:ndn::tests	file:
IndentedStream	src/util/indented-stream.cpp	/^IndentedStream::IndentedStream(std::ostream& os, const std::string& indent)$/;"	f	class:ndn::util::IndentedStream
IndentedStream	src/util/indented-stream.hpp	/^class IndentedStream : public std::ostream$/;"	c	namespace:ndn::util
Interest	src/encoding/tlv.hpp	/^  Interest      = 5,$/;"	e	enum:ndn::tlv::__anon4
Interest	src/interest.cpp	/^Interest::Interest()$/;"	f	class:ndn::Interest
Interest	src/interest.cpp	/^Interest::Interest(const Block& wire)$/;"	f	class:ndn::Interest
Interest	src/interest.cpp	/^Interest::Interest(const Name& name)$/;"	f	class:ndn::Interest
Interest	src/interest.cpp	/^Interest::Interest(const Name& name, const time::milliseconds& interestLifetime)$/;"	f	class:ndn::Interest
Interest	src/interest.hpp	/^class Interest : public TagHost, public enable_shared_from_this<Interest>$/;"	c	namespace:ndn
Interest1	tests/unit-tests/interest.t.cpp	/^const uint8_t Interest1[] = {$/;"	m	namespace:ndn::tests	file:
Interest2	tests/unit-tests/interest.t.cpp	/^const uint8_t Interest2[] = {$/;"	m	namespace:ndn::tests	file:
InterestCallback	src/detail/interest-filter-record.hpp	/^  typedef function<void (const InterestFilter&, const Interest&)> InterestCallback;$/;"	t	class:ndn::InterestFilterRecord
InterestFilter	src/interest-filter.cpp	/^InterestFilter::InterestFilter(const Name& prefix, const std::string& regexFilter)$/;"	f	class:ndn::InterestFilter
InterestFilter	src/interest-filter.hpp	/^InterestFilter::InterestFilter(const Name& prefix)$/;"	f	class:ndn::InterestFilter
InterestFilter	src/interest-filter.hpp	/^InterestFilter::InterestFilter(const char* prefixUri)$/;"	f	class:ndn::InterestFilter
InterestFilter	src/interest-filter.hpp	/^InterestFilter::InterestFilter(const std::string& prefixUri)$/;"	f	class:ndn::InterestFilter
InterestFilter	src/interest-filter.hpp	/^class InterestFilter$/;"	c	namespace:ndn
InterestFilterRecord	src/detail/interest-filter-record.hpp	/^  InterestFilterRecord(const InterestFilter& filter, const InterestCallback& afterInterest)$/;"	f	class:ndn::InterestFilterRecord
InterestFilterRecord	src/detail/interest-filter-record.hpp	/^class InterestFilterRecord : noncopyable$/;"	c	namespace:ndn
InterestFilterTable	src/detail/face-impl.hpp	/^  typedef std::list<shared_ptr<InterestFilterRecord> > InterestFilterTable;$/;"	t	class:ndn::Face::Impl
InterestHandler	src/mgmt/dispatcher.hpp	/^                             const Interest& interest)> InterestHandler;$/;"	t	class:ndn::mgmt::Dispatcher
InterestLifetime	src/encoding/tlv.hpp	/^  InterestLifetime          = 12,$/;"	e	enum:ndn::tlv::__anon4
InterestRule	src/security/validator-config.hpp	/^  typedef security::conf::Rule<Interest> InterestRule;$/;"	t	class:ndn::ValidatorConfig
InterestRuleList	src/security/validator-config.hpp	/^  typedef std::vector<shared_ptr<InterestRule> > InterestRuleList;$/;"	t	class:ndn::ValidatorConfig
InterestWithLink	tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithLink[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithLinkMissingContentType	tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithLinkMissingContentType[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithLinkNoMetaInfo	tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithLinkNoMetaInfo[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithLinkNonDecreasingOrder	tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithLinkNonDecreasingOrder[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithLinkNotNonIntegerSelectedDelegation	tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithLinkNotNonIntegerSelectedDelegation[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithLinkWrongContentType	tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithLinkWrongContentType[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithLocalControlHeader	tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithLocalControlHeader[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithSelectedDelegationButNoLink	tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithSelectedDelegationButNoLink[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithoutLocalControlHeader	tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithoutLocalControlHeader[] = {$/;"	m	namespace:ndn::tests	file:
IoEncoding	src/util/io.hpp	/^enum IoEncoding {$/;"	g	namespace:ndn::io
IpAddress	src/util/dns.hpp	/^typedef boost::asio::ip::address IpAddress;$/;"	t	namespace:ndn::dns
IpHostCanonizeProvider	src/util/face-uri.cpp	/^  IpHostCanonizeProvider(const std::string& baseScheme,$/;"	f	class:ndn::util::IpHostCanonizeProvider
IpHostCanonizeProvider	src/util/face-uri.cpp	/^class IpHostCanonizeProvider : public CanonizeProvider$/;"	c	namespace:ndn::util	file:
Ipv4Only	src/util/dns.hpp	/^struct Ipv4Only$/;"	s	namespace:ndn::dns
Ipv6Only	src/util/dns.hpp	/^struct Ipv6Only$/;"	s	namespace:ndn::dns
IsRepeatable	src/lp/detail/field-decl.hpp	/^  typedef std::integral_constant<bool, REPEATABLE> IsRepeatable;$/;"	t	class:ndn::lp::detail::FieldDecl
KEY_CLASS_PRIVATE	src/security/security-common.hpp	/^  KEY_CLASS_PRIVATE,$/;"	e	enum:ndn::KeyClass
KEY_CLASS_PUBLIC	src/security/security-common.hpp	/^  KEY_CLASS_PUBLIC,$/;"	e	enum:ndn::KeyClass
KEY_CLASS_SYMMETRIC	src/security/security-common.hpp	/^  KEY_CLASS_SYMMETRIC$/;"	e	enum:ndn::KeyClass
KEY_OFFSET	src/security/additional-description.cpp	/^static const size_t KEY_OFFSET = 0;$/;"	m	namespace:ndn::security	file:
KEY_TYPE_AES	src/security/security-common.hpp	/^  KEY_TYPE_AES   = 128,$/;"	e	enum:ndn::KeyType
KEY_TYPE_ECDSA	src/security/security-common.hpp	/^  KEY_TYPE_ECDSA = 1,$/;"	e	enum:ndn::KeyType
KEY_TYPE_NULL	src/security/security-common.hpp	/^  KEY_TYPE_NULL  = 255$/;"	e	enum:ndn::KeyType
KEY_TYPE_RSA	src/security/security-common.hpp	/^  KEY_TYPE_RSA   = 0,$/;"	e	enum:ndn::KeyType
Key	src/security/key.cpp	/^Key::Key()$/;"	f	class:ndn::security::Key
Key	src/security/key.cpp	/^Key::Key(const Name& identityName, const name::Component& keyId,$/;"	f	class:ndn::security::Key
Key	src/security/key.hpp	/^class Key$/;"	c	namespace:ndn::security
KeyChain	src/security/key-chain.cpp	/^KeyChain::KeyChain()$/;"	f	class:ndn::security::KeyChain
KeyChain	src/security/key-chain.cpp	/^KeyChain::KeyChain(const std::string& pibName,$/;"	f	class:ndn::security::KeyChain
KeyChain	src/security/key-chain.hpp	/^class KeyChain : noncopyable$/;"	c	namespace:ndn::security
KeyClass	src/security/security-common.hpp	/^enum KeyClass {$/;"	g	namespace:ndn
KeyContainer	src/security/key-container.cpp	/^KeyContainer::KeyContainer()$/;"	f	class:ndn::security::KeyContainer
KeyContainer	src/security/key-container.cpp	/^KeyContainer::KeyContainer(const Name& identity,$/;"	f	class:ndn::security::KeyContainer
KeyContainer	src/security/key-container.hpp	/^class KeyContainer$/;"	c	namespace:ndn::security
KeyDigest	src/encoding/tlv.hpp	/^  KeyDigest     = 29,$/;"	e	enum:ndn::tlv::__anon4
KeyLocator	src/encoding/tlv.hpp	/^  KeyLocator    = 28,$/;"	e	enum:ndn::tlv::__anon4
KeyLocator	src/key-locator.cpp	/^KeyLocator::KeyLocator()$/;"	f	class:ndn::KeyLocator
KeyLocator	src/key-locator.cpp	/^KeyLocator::KeyLocator(const Block& wire)$/;"	f	class:ndn::KeyLocator
KeyLocator	src/key-locator.cpp	/^KeyLocator::KeyLocator(const Name& name)$/;"	f	class:ndn::KeyLocator
KeyLocator	src/key-locator.hpp	/^class KeyLocator$/;"	c	namespace:ndn
KeyLocatorChecker	src/security/conf/key-locator-checker.hpp	/^class KeyLocatorChecker$/;"	c	namespace:ndn::security::conf
KeyLocatorCheckerFactory	src/security/conf/key-locator-checker.hpp	/^class KeyLocatorCheckerFactory$/;"	c	namespace:ndn::security::conf
KeyLocator_KeyDigest	src/key-locator.hpp	/^    KeyLocator_KeyDigest = 1,$/;"	e	enum:ndn::KeyLocator::Type
KeyLocator_Name	src/key-locator.hpp	/^    KeyLocator_Name = 0,$/;"	e	enum:ndn::KeyLocator::Type
KeyLocator_None	src/key-locator.hpp	/^    KeyLocator_None = 65535,$/;"	e	enum:ndn::KeyLocator::Type
KeyLocator_Unknown	src/key-locator.hpp	/^    KeyLocator_Unknown = 255$/;"	e	enum:ndn::KeyLocator::Type
KeyPackage	src/encoding/tlv-security.hpp	/^  KeyPackage         = 129,$/;"	e	enum:ndn::tlv::security::__anon1
KeyParams	src/security/key-params.hpp	/^  KeyParams(KeyType keyType)$/;"	f	class:ndn::KeyParams
KeyParams	src/security/key-params.hpp	/^class KeyParams$/;"	c	namespace:ndn
KeyType	src/security/security-common.hpp	/^enum KeyType {$/;"	g	namespace:ndn
LIBDIR	build/c4che/_cache.py	/^LIBDIR = '\/usr\/local\/lib'$/;"	v
LIBEXECDIR	build/c4che/_cache.py	/^LIBEXECDIR = '\/usr\/local\/libexec'$/;"	v
LIBPATH_BOOST	build/c4che/_cache.py	/^LIBPATH_BOOST = ['\/usr\/lib\/i386-linux-gnu']$/;"	v
LIBPATH_CRYPTOPP	build/c4che/_cache.py	/^LIBPATH_CRYPTOPP = ['\/usr\/lib']$/;"	v
LIBPATH_ST	build/c4che/_cache.py	/^LIBPATH_ST = '-L%s'$/;"	v
LIB_BOOST	build/c4che/_cache.py	/^LIB_BOOST = ['boost_system', 'boost_filesystem', 'boost_date_time', 'boost_iostreams', 'boost_regex', 'boost_program_options', 'boost_chrono', 'boost_random']$/;"	v
LIB_CRYPTOPP	build/c4che/_cache.py	/^LIB_CRYPTOPP = ['cryptopp']$/;"	v
LIB_PTHREAD	build/c4che/_cache.py	/^LIB_PTHREAD = ['pthread']$/;"	v
LIB_RT	build/c4che/_cache.py	/^LIB_RT = ['rt']$/;"	v
LIB_SQLITE3	build/c4che/_cache.py	/^LIB_SQLITE3 = ['sqlite3']$/;"	v
LIB_ST	build/c4che/_cache.py	/^LIB_ST = '-l%s'$/;"	v
LINK	tests/unit-tests/interest.t.cpp	/^const uint8_t LINK[] = {$/;"	m	namespace:ndn::tests	file:
LINKFLAGS_MACBUNDLE	build/c4che/_cache.py	/^LINKFLAGS_MACBUNDLE = ['-bundle', '-undefined', 'dynamic_lookup']$/;"	v
LINKFLAGS_cxxshlib	build/c4che/_cache.py	/^LINKFLAGS_cxxshlib = ['-shared']$/;"	v
LINKFLAGS_cxxstlib	build/c4che/_cache.py	/^LINKFLAGS_cxxstlib = ['-Wl,-Bstatic']$/;"	v
LINK_CXX	build/c4che/_cache.py	/^LINK_CXX = ['\/usr\/bin\/g++']$/;"	v
LINK_TYPE_MULTI_ACCESS	src/encoding/nfd-constants.hpp	/^  LINK_TYPE_MULTI_ACCESS = 1$/;"	e	enum:ndn::nfd::LinkType
LINK_TYPE_POINT_TO_POINT	src/encoding/nfd-constants.hpp	/^  LINK_TYPE_POINT_TO_POINT = 0,$/;"	e	enum:ndn::nfd::LinkType
LOCALEDIR	build/c4che/_cache.py	/^LOCALEDIR = '\/usr\/local\/share\/locale'$/;"	v
LOCALSTATEDIR	build/c4che/_cache.py	/^LOCALSTATEDIR = '\/usr\/local\/var'$/;"	v
LOCAL_CONTROL_FEATURE_INCOMING_FACE_ID	src/management/nfd-control-parameters.hpp	/^  LOCAL_CONTROL_FEATURE_INCOMING_FACE_ID = 1,$/;"	e	enum:ndn::nfd::LocalControlFeature
LOCAL_CONTROL_FEATURE_NEXT_HOP_FACE_ID	src/management/nfd-control-parameters.hpp	/^  LOCAL_CONTROL_FEATURE_NEXT_HOP_FACE_ID = 2$/;"	e	enum:ndn::nfd::LocalControlFeature
LastTimestampMap	src/security/validator-config.hpp	/^  typedef std::map<Name, time::system_clock::TimePoint> LastTimestampMap;$/;"	t	class:ndn::ValidatorConfig
LastTimestampMap	src/util/command-interest-validator.hpp	/^  typedef std::map<Name, time::system_clock::TimePoint> LastTimestampMap;$/;"	t	class:ndn::CommandInterestValidator
Link	src/link.cpp	/^Link::Link(const Block& block)$/;"	f	class:ndn::Link
Link	src/link.cpp	/^Link::Link(const Name& name)$/;"	f	class:ndn::Link
Link	src/link.cpp	/^Link::Link(const Name& name, std::initializer_list<std::pair<uint32_t, Name>> links)$/;"	f	class:ndn::Link
Link	src/link.hpp	/^class Link : public Data$/;"	c	namespace:ndn
LinkDelegation	src/encoding/tlv.hpp	/^  LinkDelegation = 31,$/;"	e	enum:ndn::tlv::__anon4
LinkPreference	src/encoding/tlv.hpp	/^  LinkPreference = 30,$/;"	e	enum:ndn::tlv::__anon4
LinkTest	tests/unit-tests/link.t.cpp	/^const uint8_t LinkTest[] = {$/;"	m	namespace:ndn::tests	file:
LinkType	src/encoding/nfd-constants.hpp	/^enum LinkType {$/;"	g	namespace:ndn::nfd
LinkType	src/encoding/tlv-nfd.hpp	/^  LinkType              = 134,$/;"	e	enum:ndn::tlv::nfd::__anon2
LocalControlFeature	src/encoding/tlv-nfd.hpp	/^  LocalControlFeature = 110,$/;"	e	enum:ndn::tlv::nfd::__anon2
LocalControlFeature	src/management/nfd-control-parameters.hpp	/^enum LocalControlFeature {$/;"	g	namespace:ndn::nfd
LocalControlHeader	src/encoding/tlv-nfd.hpp	/^  LocalControlHeader = 80,$/;"	e	enum:ndn::tlv::nfd::__anon3
LocalControlHeader	src/management/nfd-local-control-header.hpp	/^  LocalControlHeader()$/;"	f	class:ndn::nfd::LocalControlHeader
LocalControlHeader	src/management/nfd-local-control-header.hpp	/^  LocalControlHeader(const Block& wire, uint8_t encodeMask = ENCODE_ALL)$/;"	f	class:ndn::nfd::LocalControlHeader
LocalControlHeader	src/management/nfd-local-control-header.hpp	/^class LocalControlHeader$/;"	c	namespace:ndn::nfd
LocalUri	src/encoding/tlv-nfd.hpp	/^  LocalUri              = 129,$/;"	e	enum:ndn::tlv::nfd::__anon2
LpPacket	src/lp/tlv.hpp	/^  LpPacket = 100,$/;"	e	enum:ndn::lp::tlv::__anon9
MANDIR	build/c4che/_cache.py	/^MANDIR = '\/usr\/local\/share\/man'$/;"	v
MAX_DATA_LEN	src/util/ethernet.hpp	/^const size_t MAX_DATA_LEN = 1500;   \/\/\/< Max octets in Ethernet payload$/;"	m	namespace:ndn::util::ethernet
MAX_NDN_PACKET_SIZE	src/encoding/tlv.hpp	/^const size_t MAX_NDN_PACKET_SIZE = 8800;$/;"	m	namespace:ndn
MAX_SEG_SIZE	tools/ndnputchunks3.cpp	/^const size_t MAX_SEG_SIZE = 4096;$/;"	m	namespace:ndn	file:
MAX_SIZE_OF_BLOCK_FROM_STREAM	src/encoding/block.cpp	/^const size_t MAX_SIZE_OF_BLOCK_FROM_STREAM = 8800;$/;"	m	namespace:ndn	file:
MIN_DATA_LEN	src/util/ethernet.hpp	/^const size_t MIN_DATA_LEN = 46;     \/\/\/< Min octets in Ethernet payload (assuming no 802.1Q tag)$/;"	m	namespace:ndn::util::ethernet
MIN_LENGTH	src/security/security-common.hpp	/^  MIN_LENGTH = 4$/;"	e	enum:ndn::signed_interest::__anon6
MIN_LENGTH	src/util/command-interest-validator.hpp	/^    MIN_LENGTH = 4,$/;"	e	enum:ndn::CommandInterestValidator::__anon11
MatchInterestFilterId	src/detail/interest-filter-record.hpp	/^  MatchInterestFilterId(const InterestFilterId* interestFilterId)$/;"	f	class:ndn::MatchInterestFilterId
MatchInterestFilterId	src/detail/interest-filter-record.hpp	/^class MatchInterestFilterId$/;"	c	namespace:ndn
MatchPendingInterestId	src/detail/pending-interest.hpp	/^  MatchPendingInterestId(const PendingInterestId* pendingInterestId)$/;"	f	class:ndn::MatchPendingInterestId
MatchPendingInterestId	src/detail/pending-interest.hpp	/^class MatchPendingInterestId$/;"	c	namespace:ndn
MatchRegisteredPrefixId	src/detail/registered-prefix.hpp	/^  MatchRegisteredPrefixId(const RegisteredPrefixId* registeredPrefixId)$/;"	f	class:ndn::MatchRegisteredPrefixId
MatchRegisteredPrefixId	src/detail/registered-prefix.hpp	/^class MatchRegisteredPrefixId$/;"	c	namespace:ndn
MaxSuffixComponents	src/encoding/tlv.hpp	/^  MaxSuffixComponents       = 14,$/;"	e	enum:ndn::tlv::__anon4
MetaInfo	src/encoding/tlv.hpp	/^  MetaInfo      = 20,$/;"	e	enum:ndn::tlv::__anon4
MetaInfo	src/meta-info.cpp	/^MetaInfo::MetaInfo()$/;"	f	class:ndn::MetaInfo
MetaInfo	src/meta-info.cpp	/^MetaInfo::MetaInfo(const Block& block)$/;"	f	class:ndn::MetaInfo
MetaInfo	src/meta-info.hpp	/^class MetaInfo$/;"	c	namespace:ndn
MetaInfo1	tests/unit-tests/meta-info.t.cpp	/^const uint8_t MetaInfo1[] = {0x14, 0x04, 0x19, 0x02, 0x27, 0x10};$/;"	m	namespace:ndn::tests	file:
MetaInfo2	tests/unit-tests/meta-info.t.cpp	/^const uint8_t MetaInfo2[] = {0x14, 0x14, 0x19, 0x02, 0x27, 0x10, 0x1a, 0x0e, 0x08, 0x0c,$/;"	m	namespace:ndn::tests	file:
MetaInfo3	tests/unit-tests/meta-info.t.cpp	/^const uint8_t MetaInfo3[] = {0x14, 0x17, 0x18, 0x01, 0x01, 0x19, 0x02, 0x27, 0x10, 0x1a,$/;"	m	namespace:ndn::tests	file:
MinSuffixComponents	src/encoding/tlv.hpp	/^  MinSuffixComponents       = 13,$/;"	e	enum:ndn::tlv::__anon4
MismatchError	src/security/key-chain.hpp	/^    MismatchError(const std::string& what)$/;"	f	class:ndn::security::KeyChain::MismatchError
MismatchError	src/security/key-chain.hpp	/^  class MismatchError : public Error$/;"	c	class:ndn::security::KeyChain
MissingNameLink	tests/unit-tests/link.t.cpp	/^const uint8_t MissingNameLink[] = {$/;"	m	namespace:ndn::tests	file:
MissingPreferenceLink	tests/unit-tests/link.t.cpp	/^const uint8_t MissingPreferenceLink[] = {$/;"	m	namespace:ndn::tests	file:
MustBeFresh	src/encoding/tlv.hpp	/^  MustBeFresh   = 18,$/;"	e	enum:ndn::tlv::__anon4
NCsEntries	src/encoding/tlv-nfd.hpp	/^  NCsEntries           = 135,$/;"	e	enum:ndn::tlv::nfd::__anon2
NDN_ASN_EXT_HPP	src/encoding/cryptopp/asn_ext.hpp	26;"	d
NDN_COMMON_HPP	src/common.hpp	29;"	d
NDN_COMMON_PCH_HPP	src/common-pch.hpp	23;"	d
NDN_CXX_DECL_FINAL	src/common.hpp	55;"	d
NDN_CXX_DECL_FINAL	src/common.hpp	58;"	d
NDN_CXX_DECL_FINAL	src/management/nfd-control-parameters.hpp	/^  wireDecode(const Block& wire) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::nfd::ControlParameters
NDN_CXX_DECL_FINAL	src/management/nfd-control-parameters.hpp	/^  wireEncode() const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::nfd::ControlParameters
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^                             const Name& certName) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  addCertificate(const IdentityCertificate& certificate) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  addIdentity(const Name& identity) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  addKey(const Name& identity, const name::Component& keyId, const PublicKey& publicKey) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  getCertificate(const Name& certName) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  getCertificatesOfKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  getDefaultCertificateOfKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  getDefaultIdentity() const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  getDefaultKeyOfIdentity(const Name& identity) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  getIdentities() const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  getKeyBits(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  getKeysOfIdentity(const Name& identity) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  getTpmLocator() const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  hasCertificate(const Name& certName) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  hasIdentity(const Name& identity) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  hasKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  removeCertificate(const Name& certName) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  removeIdentity(const Name& identity) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  removeKey(const Name& identity, const name::Component& keyId) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  setDefaultIdentity(const Name& identityName) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  setDefaultKeyOfIdentity(const Name& identity, const name::Component& keyId) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	src/security/pib-sqlite3.hpp	/^  setTpmLocator(const std::string& tpmLocator) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_OVERRIDE	src/common.hpp	54;"	d
NDN_CXX_DECL_OVERRIDE	src/common.hpp	57;"	d
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  addCertificate(const IdentityCertificate& certificate) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  addIdentity(const Name& identity) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  addKey(const Name& identity, const name::Component& keyId, const PublicKey& publicKey) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  getCertificate(const Name& certName) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  getCertificatesOfKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  getDefaultCertificateOfKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  getDefaultIdentity() const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  getDefaultKeyOfIdentity(const Name& identity) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  getIdentities() const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  getKeyBits(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  getKeysOfIdentity(const Name& identity) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  getTpmLocator() const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  hasCertificate(const Name& certName) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  hasIdentity(const Name& identity) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  hasKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  removeCertificate(const Name& certName) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  removeIdentity(const Name& identity) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  removeKey(const Name& identity, const name::Component& keyId) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  setDefaultCertificateOfKey(const Name& identity, const name::Component& keyId, const Name& certName) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  setDefaultIdentity(const Name& identityName) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  setDefaultKeyOfIdentity(const Name& identity, const name::Component& keyId) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	src/security/pib-memory.hpp	/^  setTpmLocator(const std::string& tpmLocator) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_ENABLE_DEPRECATED_BLOCK_HELPERS	src/encoding/block-helpers.hpp	223;"	d
NDN_CXX_HAVE_CXX_FRIEND_TYPENAME	build/src/ndn-cxx-config.hpp	9;"	d
NDN_CXX_HAVE_CXX_OVERRIDE_FINAL	build/src/ndn-cxx-config.hpp	10;"	d
NDN_CXX_HAVE_GETPASS	build/src/ndn-cxx-config.hpp	14;"	d
NDN_CXX_HAVE_IS_DEFAULT_CONSTRUCTIBLE	build/src/ndn-cxx-config.hpp	6;"	d
NDN_CXX_HAVE_IS_NOTHROW_MOVE_ASSIGNABLE	build/src/ndn-cxx-config.hpp	8;"	d
NDN_CXX_HAVE_IS_NOTHROW_MOVE_CONSTRUCTIBLE	build/src/ndn-cxx-config.hpp	7;"	d
NDN_CXX_HAVE_PTHREAD	build/src/ndn-cxx-config.hpp	12;"	d
NDN_CXX_HAVE_RT	build/src/ndn-cxx-config.hpp	13;"	d
NDN_CXX_HAVE_RTNETLINK	build/src/ndn-cxx-config.hpp	15;"	d
NDN_CXX_HAVE_SQLITE3	build/src/ndn-cxx-config.hpp	16;"	d
NDN_CXX_HAVE_STD_TO_STRING	build/src/ndn-cxx-config.hpp	11;"	d
NDN_CXX_KEYCHAIN_REGISTER_PIB	src/security/key-chain.hpp	933;"	d
NDN_CXX_KEYCHAIN_REGISTER_TPM	src/security/key-chain.hpp	949;"	d
NDN_CXX_LP_CACHE_POLICY_HPP	src/lp/cache-policy.hpp	25;"	d
NDN_CXX_LP_DETAIL_FIELD_DECL_HPP	src/lp/detail/field-decl.hpp	23;"	d
NDN_CXX_LP_DETAIL_FIELD_INFO_HPP	src/lp/detail/field-info.hpp	23;"	d
NDN_CXX_LP_FIELDS_HPP	src/lp/fields.hpp	23;"	d
NDN_CXX_LP_FIELD_HPP	src/lp/field.hpp	23;"	d
NDN_CXX_LP_NACK_HEADER_HPP	src/lp/nack-header.hpp	25;"	d
NDN_CXX_LP_NACK_HPP	src/lp/nack.hpp	25;"	d
NDN_CXX_LP_PACKET_HPP	src/lp/packet.hpp	23;"	d
NDN_CXX_LP_SEQUENCE_HPP	src/lp/sequence.hpp	25;"	d
NDN_CXX_LP_TLV_HPP	src/lp/tlv.hpp	23;"	d
NDN_CXX_PROTECTED_WITH_TESTS_ELSE_PRIVATE	src/common.hpp	39;"	d
NDN_CXX_PROTECTED_WITH_TESTS_ELSE_PRIVATE	src/common.hpp	44;"	d
NDN_CXX_PUBLIC_WITH_TESTS_ELSE_PRIVATE	src/common.hpp	38;"	d
NDN_CXX_PUBLIC_WITH_TESTS_ELSE_PRIVATE	src/common.hpp	43;"	d
NDN_CXX_PUBLIC_WITH_TESTS_ELSE_PROTECTED	src/common.hpp	37;"	d
NDN_CXX_PUBLIC_WITH_TESTS_ELSE_PROTECTED	src/common.hpp	42;"	d
NDN_CXX_SECURITY_SIGNING_HELPERS_HPP	src/security/signing-helpers.hpp	23;"	d
NDN_CXX_SIGNAL_EMIT	src/util/signal-emit.hpp	71;"	d
NDN_CXX_SPECIALIZE_BOOST_IS_PLACEHOLDER_FOR_STD_PLACEHOLDER	src/common.hpp	112;"	d
NDN_CXX_SPECIALIZE_BOOST_IS_PLACEHOLDER_FOR_STD_PLACEHOLDER	src/common.hpp	129;"	d
NDN_CXX_SYSCONFDIR	build/src/ndn-cxx-config.hpp	17;"	d
NDN_CXX_VERSION	build/src/version.hpp	35;"	d
NDN_CXX_VERSION_BUILD_STRING	build/src/version.hpp	57;"	d
NDN_CXX_VERSION_MAJOR	build/src/version.hpp	60;"	d
NDN_CXX_VERSION_MINOR	build/src/version.hpp	62;"	d
NDN_CXX_VERSION_PATCH	build/src/version.hpp	64;"	d
NDN_CXX_VERSION_STRING	build/src/version.hpp	41;"	d
NDN_CXX_VIRTUAL_WITH_TESTS	src/common.hpp	36;"	d
NDN_CXX_VIRTUAL_WITH_TESTS	src/common.hpp	41;"	d
NDN_DATA_HPP	src/data.hpp	23;"	d
NDN_DETAIL_CONTAINER_WITH_ON_EMPTY_SIGNAL_HPP	src/detail/container-with-on-empty-signal.hpp	23;"	d
NDN_DETAIL_FACE_IMPL_HPP	src/detail/face-impl.hpp	23;"	d
NDN_DETAIL_INTEREST_FILTER_RECORD_HPP	src/detail/interest-filter-record.hpp	23;"	d
NDN_DETAIL_PENDING_INTEREST_HPP	src/detail/pending-interest.hpp	23;"	d
NDN_DETAIL_REGISTERED_PREFIX_HPP	src/detail/registered-prefix.hpp	23;"	d
NDN_ENCODING_BLOCK_HELPERS_HPP	src/encoding/block-helpers.hpp	23;"	d
NDN_ENCODING_BLOCK_HPP	src/encoding/block.hpp	25;"	d
NDN_ENCODING_BUFFER_HPP	src/encoding/buffer.hpp	25;"	d
NDN_ENCODING_BUFFER_STREAM_HPP	src/encoding/buffer-stream.hpp	25;"	d
NDN_ENCODING_ENCODER_HPP	src/encoding/encoder.hpp	23;"	d
NDN_ENCODING_ENCODING_BUFFER_FWD_HPP	src/encoding/encoding-buffer-fwd.hpp	23;"	d
NDN_ENCODING_ENCODING_BUFFER_HPP	src/encoding/encoding-buffer.hpp	23;"	d
NDN_ENCODING_ENDIAN_HPP	src/encoding/endian.hpp	25;"	d
NDN_ENCODING_ESTIMATOR_HPP	src/encoding/estimator.hpp	23;"	d
NDN_ENCODING_NFD_CONSTANTS_HPP	src/encoding/nfd-constants.hpp	23;"	d
NDN_ENCODING_OID_HPP	src/encoding/oid.hpp	23;"	d
NDN_ENCODING_TLV_HPP	src/encoding/tlv.hpp	23;"	d
NDN_ENCODING_TLV_NFD_HPP	src/encoding/tlv-nfd.hpp	23;"	d
NDN_ENCODING_TLV_SECURITY_HPP	src/encoding/tlv-security.hpp	23;"	d
NDN_EXCLUDE_H	src/exclude.hpp	25;"	d
NDN_FACE_HPP	src/face.hpp	23;"	d
NDN_FACE_KEEP_DEPRECATED_REGISTRATION_SIGNING	src/face.hpp	34;"	d
NDN_HELPERS_COMMAND_INTEREST_GENERATOR_HPP	src/util/command-interest-generator.hpp	23;"	d
NDN_INTEREST_FILTER_HPP	src/interest-filter.hpp	23;"	d
NDN_INTEREST_HPP	src/interest.hpp	23;"	d
NDN_KEY_LOCATOR_HPP	src/key-locator.hpp	23;"	d
NDN_LINK_HPP	src/link.hpp	23;"	d
NDN_MANAGEMENT_CONFIG_FILE_HPP	src/util/config-file.hpp	23;"	d
NDN_MANAGEMENT_CONTROL_RESPONSE_HPP	src/management/nfd-control-response.hpp	23;"	d
NDN_MANAGEMENT_NFD_CHANNEL_STATUS_HPP	src/management/nfd-channel-status.hpp	23;"	d
NDN_MANAGEMENT_NFD_COMMAND_OPTIONS_HPP	src/management/nfd-command-options.hpp	23;"	d
NDN_MANAGEMENT_NFD_COMMAND_OPTIONS_KEEP_DEPRECATED_SIGNING_PARAMS	src/management/nfd-command-options.hpp	27;"	d
NDN_MANAGEMENT_NFD_CONTROLLER_HPP	src/management/nfd-controller.hpp	23;"	d
NDN_MANAGEMENT_NFD_CONTROL_COMMAND_HPP	src/management/nfd-control-command.hpp	23;"	d
NDN_MANAGEMENT_NFD_CONTROL_PARAMETERS_HPP	src/management/nfd-control-parameters.hpp	23;"	d
NDN_MANAGEMENT_NFD_FACE_EVENT_NOTIFICATION_HPP	src/management/nfd-face-event-notification.hpp	23;"	d
NDN_MANAGEMENT_NFD_FACE_MONITOR_HPP	src/management/nfd-face-monitor.hpp	49;"	d
NDN_MANAGEMENT_NFD_FACE_QUERY_FILTER_HPP	src/management/nfd-face-query-filter.hpp	23;"	d
NDN_MANAGEMENT_NFD_FACE_STATUS_HPP	src/management/nfd-face-status.hpp	23;"	d
NDN_MANAGEMENT_NFD_FACE_TRAITS_HPP	src/management/nfd-face-traits.hpp	23;"	d
NDN_MANAGEMENT_NFD_FIB_ENTRY_HPP	src/management/nfd-fib-entry.hpp	23;"	d
NDN_MANAGEMENT_NFD_FORWARDER_STATUS_HPP	src/management/nfd-forwarder-status.hpp	23;"	d
NDN_MANAGEMENT_NFD_LOCAL_CONTROL_HEADER_HPP	src/management/nfd-local-control-header.hpp	23;"	d
NDN_MANAGEMENT_NFD_RIB_ENTRY_HPP	src/management/nfd-rib-entry.hpp	23;"	d
NDN_MANAGEMENT_NFD_RIB_FLAGS_HPP	src/management/nfd-rib-flags.hpp	23;"	d
NDN_MANAGEMENT_NFD_STRATEGY_CHOICE_HPP	src/management/nfd-strategy-choice.hpp	23;"	d
NDN_META_INFO_HPP	src/meta-info.hpp	23;"	d
NDN_MGMT_CONTROL_PARAMETERS_HPP	src/mgmt/control-parameters.hpp	23;"	d
NDN_MGMT_CONTROL_RESPONSE_HPP	src/mgmt/control-response.hpp	23;"	d
NDN_MGMT_DISPATCHER_HPP	src/mgmt/dispatcher.hpp	23;"	d
NDN_MGMT_STATUS_DATASET_CONTEXT_HPP	src/mgmt/status-dataset-context.hpp	23;"	d
NDN_NAME_COMPONENT_HPP	src/name-component.hpp	23;"	d
NDN_NAME_HPP	src/name.hpp	27;"	d
NDN_SECURITTY_PIB_SQLITE3_HPP	src/security/pib-sqlite3.hpp	23;"	d
NDN_SECURITY_ADDITIONAL_DESCRIPTION_HPP	src/security/additional-description.hpp	23;"	d
NDN_SECURITY_CERTIFICATE_CACHE_HPP	src/security/certificate-cache.hpp	25;"	d
NDN_SECURITY_CERTIFICATE_CACHE_TTL_HPP	src/security/certificate-cache-ttl.hpp	25;"	d
NDN_SECURITY_CERTIFICATE_CONTAINER_HPP	src/security/certificate-container.hpp	23;"	d
NDN_SECURITY_CERTIFICATE_EXTENSION_HPP	src/security/certificate-extension.hpp	27;"	d
NDN_SECURITY_CERTIFICATE_HPP	src/security/certificate.hpp	27;"	d
NDN_SECURITY_CERTIFICATE_SUBJECT_DESCRIPTION_HPP	src/security/certificate-subject-description.hpp	27;"	d
NDN_SECURITY_COMMON_HPP	src/security/security-common.hpp	23;"	d
NDN_SECURITY_CONF_CHECKER_HPP	src/security/conf/checker.hpp	25;"	d
NDN_SECURITY_CONF_COMMON_HPP	src/security/conf/common.hpp	25;"	d
NDN_SECURITY_CONF_FILTER_HPP	src/security/conf/filter.hpp	25;"	d
NDN_SECURITY_CONF_KEY_LOCATOR_CHECKER_HPP	src/security/conf/key-locator-checker.hpp	25;"	d
NDN_SECURITY_CONF_RULE_HPP	src/security/conf/rule.hpp	25;"	d
NDN_SECURITY_CRYPTOPP_HPP	src/security/cryptopp.hpp	23;"	d
NDN_SECURITY_DIGEST_SHA256_HPP	src/security/digest-sha256.hpp	23;"	d
NDN_SECURITY_IDENTITY_CERTIFICATE_HPP	src/security/identity-certificate.hpp	25;"	d
NDN_SECURITY_IDENTITY_CONTAINER_HPP	src/security/identity-container.hpp	23;"	d
NDN_SECURITY_IDENTITY_HPP	src/security/identity.hpp	23;"	d
NDN_SECURITY_KEY_CHAIN_HPP	src/security/key-chain.hpp	25;"	d
NDN_SECURITY_KEY_CONTAINER_HPP	src/security/key-container.hpp	23;"	d
NDN_SECURITY_KEY_HPP	src/security/key.hpp	23;"	d
NDN_SECURITY_KEY_PARAMS_HPP	src/security/key-params.hpp	23;"	d
NDN_SECURITY_OPENSSL_HPP	src/security/openssl.hpp	23;"	d
NDN_SECURITY_PIB_HPP	src/security/pib.hpp	23;"	d
NDN_SECURITY_PIB_IMPL_HPP	src/security/pib-impl.hpp	23;"	d
NDN_SECURITY_PIB_MEMORY_HPP	src/security/pib-memory.hpp	23;"	d
NDN_SECURITY_PUBLIC_KEY_HPP	src/security/public-key.hpp	27;"	d
NDN_SECURITY_SECURED_BAG_HPP	src/security/secured-bag.hpp	23;"	d
NDN_SECURITY_SEC_PUBLIC_INFO_HPP	src/security/sec-public-info.hpp	23;"	d
NDN_SECURITY_SEC_PUBLIC_INFO_SQLITE3_HPP	src/security/sec-public-info-sqlite3.hpp	26;"	d
NDN_SECURITY_SEC_RULE_HPP	src/security/sec-rule.hpp	25;"	d
NDN_SECURITY_SEC_RULE_RELATIVE_HPP	src/security/sec-rule-relative.hpp	25;"	d
NDN_SECURITY_SEC_RULE_SPECIFIC_H	src/security/sec-rule-specific.hpp	25;"	d
NDN_SECURITY_SEC_TPM_FILE_HPP	src/security/sec-tpm-file.hpp	27;"	d
NDN_SECURITY_SEC_TPM_HPP	src/security/sec-tpm.hpp	25;"	d
NDN_SECURITY_SEC_TPM_OSX_HPP	src/security/sec-tpm-osx.hpp	25;"	d
NDN_SECURITY_SIGNATURE_SHA256_WITH_ECDSA_HPP	src/security/signature-sha256-with-ecdsa.hpp	23;"	d
NDN_SECURITY_SIGNATURE_SHA256_WITH_RSA_HPP	src/security/signature-sha256-with-rsa.hpp	23;"	d
NDN_SECURITY_SIGNING_INFO_HPP	src/security/signing-info.hpp	23;"	d
NDN_SECURITY_VALIDATION_REQUEST_HPP	src/security/validation-request.hpp	25;"	d
NDN_SECURITY_VALIDATOR_CONFIG_HPP	src/security/validator-config.hpp	25;"	d
NDN_SECURITY_VALIDATOR_HPP	src/security/validator.hpp	26;"	d
NDN_SECURITY_VALIDATOR_NULL_HPP	src/security/validator-null.hpp	26;"	d
NDN_SECURITY_VALIDATOR_REGEX_HPP	src/security/validator-regex.hpp	25;"	d
NDN_SECURITY_VALIDITY_PERIOD_HPP	src/security/validity-period.hpp	23;"	d
NDN_SELECTORS_HPP	src/selectors.hpp	23;"	d
NDN_SIGNATURE_HPP	src/signature.hpp	23;"	d
NDN_SIGNATURE_INFO_HPP	src/signature-info.hpp	23;"	d
NDN_STRING_HELPER_HPP	src/util/string-helper.hpp	23;"	d
NDN_TAG_HOST_HPP	src/tag-host.hpp	23;"	d
NDN_TAG_HPP	src/tag.hpp	23;"	d
NDN_TESTS_BOOST_TEST_HPP	tests/boost-test.hpp	23;"	d
NDN_TESTS_IDENTITY_MANAGEMENT_FIXTURE_HPP	tests/identity-management-fixture.hpp	23;"	d
NDN_TESTS_IDENTITY_MANAGEMENT_TIME_FIXTURE_HPP	tests/unit-tests/identity-management-time-fixture.hpp	23;"	d
NDN_TESTS_NETWORK_CONFIGURATION_DETECTOR_HPP	tests/unit-tests/network-configuration-detector.hpp	23;"	d
NDN_TESTS_PIB_DATA_FIXTURE_HPP	tests/unit-tests/security/pib-data-fixture.hpp	23;"	d
NDN_TESTS_SECURITY_DUMMY_KEYCHAIN_HPP	tests/unit-tests/security/dummy-keychain.hpp	23;"	d
NDN_TESTS_UNIT_TESTS_MAKE_INTEREST_DATA_HPP	tests/unit-tests/make-interest-data.hpp	28;"	d
NDN_TESTS_UNIT_TESTS_TRANSPORT_FIXTURE_HPP	tests/unit-tests/transport/transport-fixture.hpp	26;"	d
NDN_TESTS_UNIT_TESTS_UNIT_TEST_TIME_FIXTURE_HPP	tests/unit-tests/unit-test-time-fixture.hpp	23;"	d
NDN_TESTS_UNIT_TESTS_UTIL_HOME_ENVIRONMENT_FIXTURE_HPP	tests/unit-tests/util/test-home-environment-fixture.hpp	23;"	d
NDN_TIME_CUSTOM_CLOCK_HPP	src/util/time-custom-clock.hpp	23;"	d
NDN_TIME_HPP	src/util/time.hpp	23;"	d
NDN_TIME_UNIT_TEST_CLOCK_HPP	src/util/time-unit-test-clock.hpp	23;"	d
NDN_TOOLS_NDNSEC_CERT_DUMP_HPP	tools/ndnsec/cert-dump.hpp	25;"	d
NDN_TOOLS_NDNSEC_CERT_GEN_HPP	tools/ndnsec/cert-gen.hpp	25;"	d
NDN_TOOLS_NDNSEC_CERT_INSTALL_HPP	tools/ndnsec/cert-install.hpp	25;"	d
NDN_TOOLS_NDNSEC_CERT_REVOKE_HPP	tools/ndnsec/cert-revoke.hpp	25;"	d
NDN_TOOLS_NDNSEC_DELETE_HPP	tools/ndnsec/delete.hpp	25;"	d
NDN_TOOLS_NDNSEC_DSK_GEN_HPP	tools/ndnsec/dsk-gen.hpp	25;"	d
NDN_TOOLS_NDNSEC_EXPORT_HPP	tools/ndnsec/export.hpp	25;"	d
NDN_TOOLS_NDNSEC_GET_DEFAULT_HPP	tools/ndnsec/get-default.hpp	25;"	d
NDN_TOOLS_NDNSEC_IMPORT_HPP	tools/ndnsec/import.hpp	25;"	d
NDN_TOOLS_NDNSEC_KEY_GEN_HPP	tools/ndnsec/key-gen.hpp	25;"	d
NDN_TOOLS_NDNSEC_LIST_HPP	tools/ndnsec/list.hpp	25;"	d
NDN_TOOLS_NDNSEC_OP_TOOL_HPP	tools/ndnsec/op-tool.hpp	25;"	d
NDN_TOOLS_NDNSEC_SET_ACL_HPP	tools/ndnsec/set-acl.hpp	25;"	d
NDN_TOOLS_NDNSEC_SET_DEFAULT_HPP	tools/ndnsec/set-default.hpp	25;"	d
NDN_TOOLS_NDNSEC_SIGN_REQ_HPP	tools/ndnsec/sign-req.hpp	25;"	d
NDN_TOOLS_NDNSEC_SIG_VERIFY_HPP	tools/ndnsec/sig-verify.hpp	25;"	d
NDN_TOOLS_NDNSEC_UNLOCK_TPM_HPP	tools/ndnsec/unlock-tpm.hpp	25;"	d
NDN_TOOLS_NDNSEC_UTIL_HPP	tools/ndnsec/util.hpp	25;"	d
NDN_TRANSPORT_STREAM_TRANSPORT_HPP	src/transport/stream-transport.hpp	23;"	d
NDN_TRANSPORT_TCP_TRANSPORT_HPP	src/transport/tcp-transport.hpp	23;"	d
NDN_TRANSPORT_TRANSPORT_HPP	src/transport/transport.hpp	23;"	d
NDN_TRANSPORT_UNIX_TRANSPORT_HPP	src/transport/unix-transport.hpp	23;"	d
NDN_UNIT_TESTS_UTIL_SIMPLE_NOTIFICATION_HPP	tests/unit-tests/util/simple-notification.hpp	29;"	d
NDN_UTIL_BACKPORTS_HPP	src/util/backports.hpp	29;"	d
NDN_UTIL_COMMAND_INTEREST_VALIDATOR_HPP	src/util/command-interest-validator.hpp	23;"	d
NDN_UTIL_CONCEPTS_HPP	src/util/concepts.hpp	23;"	d
NDN_UTIL_CRYPTO_HPP	src/util/crypto.hpp	23;"	d
NDN_UTIL_DIGEST_HPP	src/util/digest.hpp	23;"	d
NDN_UTIL_DNS_H	src/util/dns.hpp	23;"	d
NDN_UTIL_DUMMY_CLIENT_FACE_HPP	src/util/dummy-client-face.hpp	23;"	d
NDN_UTIL_ETHERNET_HPP	src/util/ethernet.hpp	29;"	d
NDN_UTIL_FACE_URI_HPP	src/util/face-uri.hpp	29;"	d
NDN_UTIL_INDENTED_STREAM_HPP	src/util/indented-stream.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_ENTRY_HPP	src/util/in-memory-storage-entry.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_FIFO_HPP	src/util/in-memory-storage-fifo.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_HPP	src/util/in-memory-storage.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_LFU_HPP	src/util/in-memory-storage-lfu.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_LRU_HPP	src/util/in-memory-storage-lru.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_PERSISTENT_HPP	src/util/in-memory-storage-persistent.hpp	23;"	d
NDN_UTIL_IO_HPP	src/util/io.hpp	23;"	d
NDN_UTIL_MONOTONIC_DEADLINE_TIMER_HPP	src/util/monotonic_deadline_timer.hpp	27;"	d
NDN_UTIL_NETWORK_MONITOR_HPP	src/util/network-monitor.hpp	23;"	d
NDN_UTIL_NOTIFICATION_STREAM_HPP	src/util/notification-stream.hpp	49;"	d
NDN_UTIL_NOTIFICATION_SUBSCRIBER_HPP	src/util/notification-subscriber.hpp	49;"	d
NDN_UTIL_RANDOM_HPP	src/util/random.hpp	23;"	d
NDN_UTIL_REGEX_BACKREF_MANAGER_HPP	src/util/regex/regex-backref-manager.hpp	25;"	d
NDN_UTIL_REGEX_COMPONENT_SET_MATCHER_HPP	src/util/regex/regex-component-set-matcher.hpp	25;"	d
NDN_UTIL_REGEX_HPP	src/util/regex.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_BACKREF_MATCHER_HPP	src/util/regex/regex-backref-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_COMPONENT_MATCHER_HPP	src/util/regex/regex-component-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_MATCHER_H	src/util/regex/regex-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_PATTERN_LIST_MATCHER_HPP	src/util/regex/regex-pattern-list-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_PSEUDO_MATCHER_HPP	src/util/regex/regex-pseudo-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_REPEAT_MATCHER_HPP	src/util/regex/regex-repeat-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_TOP_MATCHER_HPP	src/util/regex/regex-top-matcher.hpp	25;"	d
NDN_UTIL_SCHEDULER_HPP	src/util/scheduler.hpp	23;"	d
NDN_UTIL_SCHEDULER_SCOPED_EVENT_ID_HPP	src/util/scheduler-scoped-event-id.hpp	23;"	d
NDN_UTIL_SEGMENT_FETCHER_HPP	src/util/segment-fetcher.hpp	23;"	d
NDN_UTIL_SIGNAL_CONNECTION_HPP	src/util/signal-connection.hpp	23;"	d
NDN_UTIL_SIGNAL_EMIT_HPP	src/util/signal-emit.hpp	34;"	d
NDN_UTIL_SIGNAL_HPP	src/util/signal.hpp	23;"	d
NDN_UTIL_SIGNAL_SCOPED_CONNECTION_HPP	src/util/signal-scoped-connection.hpp	23;"	d
NDN_UTIL_SIGNAL_SIGNAL_HPP	src/util/signal-signal.hpp	23;"	d
NDN_UTIL_SQLITE3_STATEMENT_HPP	src/util/sqlite3-statement.hpp	23;"	d
NDN_VERSION_HPP	build/src/version.hpp	23;"	d
NFibEntries	src/encoding/tlv-nfd.hpp	/^  NFibEntries          = 132,$/;"	e	enum:ndn::tlv::nfd::__anon2
NInBytes	src/encoding/tlv-nfd.hpp	/^  NInBytes      = 148,$/;"	e	enum:ndn::tlv::nfd::__anon2
NInDatas	src/encoding/tlv-nfd.hpp	/^  NInDatas      = 145,$/;"	e	enum:ndn::tlv::nfd::__anon2
NInInterests	src/encoding/tlv-nfd.hpp	/^  NInInterests  = 144,$/;"	e	enum:ndn::tlv::nfd::__anon2
NInNacks	src/encoding/tlv-nfd.hpp	/^  NInNacks      = 151,$/;"	e	enum:ndn::tlv::nfd::__anon2
NMeasurementsEntries	src/encoding/tlv-nfd.hpp	/^  NMeasurementsEntries = 134,$/;"	e	enum:ndn::tlv::nfd::__anon2
NNameTreeEntries	src/encoding/tlv-nfd.hpp	/^  NNameTreeEntries     = 131,$/;"	e	enum:ndn::tlv::nfd::__anon2
NONE	src/lp/cache-policy.hpp	/^  NONE = 0,$/;"	m	class:ndn::lp::CachePolicyType
NONE	src/lp/nack-header.hpp	/^  NONE = 0,$/;"	m	class:ndn::lp::NackReason
NOT_AFTER_OFFSET	src/security/validity-period.cpp	/^static const size_t NOT_AFTER_OFFSET = 1;$/;"	m	namespace:ndn::security	file:
NOT_BEFORE_OFFSET	src/security/validity-period.cpp	/^static const size_t NOT_BEFORE_OFFSET = 0;$/;"	m	namespace:ndn::security	file:
NO_CACHE	src/lp/cache-policy.hpp	/^  NO_CACHE = 1$/;"	m	class:ndn::lp::CachePolicyType
NO_ENCODING	src/util/io.hpp	/^  NO_ENCODING,$/;"	e	enum:ndn::io::IoEncoding
NO_ROUTE	src/lp/nack-header.hpp	/^  NO_ROUTE = 150$/;"	m	class:ndn::lp::NackReason
NOutBytes	src/encoding/tlv-nfd.hpp	/^  NOutBytes     = 149,$/;"	e	enum:ndn::tlv::nfd::__anon2
NOutDatas	src/encoding/tlv-nfd.hpp	/^  NOutDatas     = 147,$/;"	e	enum:ndn::tlv::nfd::__anon2
NOutInterests	src/encoding/tlv-nfd.hpp	/^  NOutInterests = 146,$/;"	e	enum:ndn::tlv::nfd::__anon2
NOutNacks	src/encoding/tlv-nfd.hpp	/^  NOutNacks     = 152,$/;"	e	enum:ndn::tlv::nfd::__anon2
NPitEntries	src/encoding/tlv-nfd.hpp	/^  NPitEntries          = 133,$/;"	e	enum:ndn::tlv::nfd::__anon2
NULL_PORT	src/util/dns.cpp	/^  static const std::string NULL_PORT;$/;"	m	class:ndn::dns::Resolver	file:
NULL_PORT	src/util/dns.cpp	/^const std::string Resolver::NULL_PORT = "";$/;"	m	class:ndn::dns::Resolver	file:
Nack	src/lp/nack.cpp	/^Nack::Nack(Interest&& interest)$/;"	f	class:ndn::lp::Nack
Nack	src/lp/nack.cpp	/^Nack::Nack(const Interest& interest)$/;"	f	class:ndn::lp::Nack
Nack	src/lp/nack.hpp	/^class Nack : public TagHost$/;"	c	namespace:ndn::lp
Nack	src/lp/tlv.hpp	/^  Nack = 800,$/;"	e	enum:ndn::lp::tlv::__anon9
NackCallback	src/face.hpp	/^typedef function<void(const Interest&, const lp::Nack&)> NackCallback;$/;"	t	namespace:ndn
NackField	src/lp/fields.hpp	/^                          tlv::Nack> NackField;$/;"	t	namespace:ndn::lp
NackHeader	src/lp/nack-header.cpp	/^NackHeader::NackHeader()$/;"	f	class:ndn::lp::NackHeader
NackHeader	src/lp/nack-header.cpp	/^NackHeader::NackHeader(const Block& block)$/;"	f	class:ndn::lp::NackHeader
NackHeader	src/lp/nack-header.hpp	/^class NackHeader$/;"	c	class:ndn::lp::NackReason
NackReason	src/lp/nack-header.hpp	/^enum class NackReason {$/;"	c	namespace:ndn::lp
NackReason	src/lp/tlv.hpp	/^  NackReason = 801,$/;"	e	enum:ndn::lp::tlv::__anon9
Name	src/encoding/tlv.hpp	/^  Name          = 7,$/;"	e	enum:ndn::tlv::__anon4
Name	src/name.cpp	/^Name::Name()$/;"	f	class:ndn::Name
Name	src/name.cpp	/^Name::Name(const Block& wire)$/;"	f	class:ndn::Name
Name	src/name.cpp	/^Name::Name(const char* uri)$/;"	f	class:ndn::Name
Name	src/name.cpp	/^Name::Name(const std::string& uri)$/;"	f	class:ndn::Name
Name	src/name.hpp	/^class Name : public enable_shared_from_this<Name>$/;"	c	namespace:ndn
Name1	tests/unit-tests/name.t.cpp	/^const uint8_t Name1[] = {0x7,  0x7, \/\/ Name$/;"	m	namespace:ndn::tests	file:
Name2	tests/unit-tests/name.t.cpp	/^const uint8_t Name2[] = {0x7,  0xc, \/\/ Name$/;"	m	namespace:ndn::tests	file:
NameComponent	src/encoding/tlv.hpp	/^  NameComponent = 8,$/;"	e	enum:ndn::tlv::__anon4
NetworkConfigurationDetector	tests/unit-tests/network-configuration-detector.hpp	/^class NetworkConfigurationDetector$/;"	c	namespace:ndn::tests
NetworkMonitor	src/util/network-monitor.cpp	/^NetworkMonitor::NetworkMonitor(boost::asio::io_service& io)$/;"	f	class:ndn::util::NetworkMonitor
NetworkMonitor	src/util/network-monitor.hpp	/^class NetworkMonitor : boost::noncopyable$/;"	c	namespace:ndn::util
NextHopFaceId	src/encoding/tlv-nfd.hpp	/^  NextHopFaceId      = 82,$/;"	e	enum:ndn::tlv::nfd::__anon3
NextHopFaceId	src/lp/tlv.hpp	/^  NextHopFaceId = 816,$/;"	e	enum:ndn::lp::tlv::__anon9
NextHopFaceIdField	src/lp/fields.hpp	/^                          tlv::NextHopFaceId> NextHopFaceIdField;$/;"	t	namespace:ndn::lp
NextHopRecord	src/encoding/tlv-nfd.hpp	/^  NextHopRecord = 129,$/;"	e	enum:ndn::tlv::nfd::__anon2
NextHopRecord	src/management/nfd-fib-entry.cpp	/^NextHopRecord::NextHopRecord()$/;"	f	class:ndn::nfd::NextHopRecord
NextHopRecord	src/management/nfd-fib-entry.cpp	/^NextHopRecord::NextHopRecord(const Block& block)$/;"	f	class:ndn::nfd::NextHopRecord
NextHopRecord	src/management/nfd-fib-entry.hpp	/^class NextHopRecord$/;"	c	namespace:ndn::nfd
NfdVersion	src/encoding/tlv-nfd.hpp	/^  NfdVersion           = 128,$/;"	e	enum:ndn::tlv::nfd::__anon2
NoCache	src/encoding/tlv-nfd.hpp	/^  NoCache            = 96$/;"	e	enum:ndn::tlv::nfd::__anon3
Nonce	src/encoding/tlv.hpp	/^  Nonce         = 10,$/;"	e	enum:ndn::tlv::__anon4
NotAfter	src/encoding/tlv.hpp	/^  NotAfter = 255,$/;"	e	enum:ndn::tlv::__anon5
NotBefore	src/encoding/tlv.hpp	/^  NotBefore = 254,$/;"	e	enum:ndn::tlv::__anon5
NotificationStream	src/util/notification-stream.hpp	/^  NotificationStream(Face& face, const Name& prefix, KeyChain& keyChain)$/;"	f	class:ndn::util::NotificationStream
NotificationStream	src/util/notification-stream.hpp	/^class NotificationStream : noncopyable$/;"	c	namespace:ndn::util
NotificationSubscriber	src/util/notification-subscriber.hpp	/^  NotificationSubscriber(Face& face, const Name& prefix,$/;"	f	class:ndn::util::NotificationSubscriber
NotificationSubscriber	src/util/notification-subscriber.hpp	/^class NotificationSubscriber : noncopyable$/;"	c	namespace:ndn::util
Numeric	tests/unit-tests/name.t.cpp	/^  Numeric()$/;"	f	class:ndn::tests::Numeric
Numeric	tests/unit-tests/name.t.cpp	/^class Numeric$/;"	c	namespace:ndn::tests	file:
OBufferStream	src/encoding/buffer-stream.hpp	/^  OBufferStream()$/;"	f	class:ndn::OBufferStream
OBufferStream	src/encoding/buffer-stream.hpp	/^class OBufferStream : public boost::iostreams::stream<iostreams::buffer_append_device>$/;"	c	namespace:ndn
OID	src/encoding/oid.cpp	/^OID::OID(const char* oid)$/;"	f	class:ndn::OID
OID	src/encoding/oid.cpp	/^OID::OID(const string& oid)$/;"	f	class:ndn::OID
OID	src/encoding/oid.hpp	/^  OID()$/;"	f	class:ndn::OID
OID	src/encoding/oid.hpp	/^  OID(const std::vector<int>& oid)$/;"	f	class:ndn::OID
OID	src/encoding/oid.hpp	/^class OID$/;"	c	namespace:ndn
OID_MAGIC_NUMBER	src/encoding/oid.cpp	/^static const int OID_MAGIC_NUMBER = 40;$/;"	m	namespace:ndn	file:
OLDINCLUDEDIR	build/c4che/_cache.py	/^OLDINCLUDEDIR = '\/usr\/include'$/;"	v
OnData	src/face.hpp	/^typedef function<void(const Interest&, Data&)> OnData;$/;"	t	namespace:ndn
OnDataCheckFailed	src/security/conf/checker.hpp	/^  typedef function<void(const shared_ptr<const Data>&, const std::string&)> OnDataCheckFailed;$/;"	t	class:ndn::security::conf::Checker
OnDataChecked	src/security/conf/checker.hpp	/^  typedef function<void(const shared_ptr<const Data>&)> OnDataChecked;$/;"	t	class:ndn::security::conf::Checker
OnDataValidated	src/security/validation-request.hpp	/^typedef function<void(const shared_ptr<const Data>&)> OnDataValidated;$/;"	t	namespace:ndn
OnDataValidationFailed	src/security/validation-request.hpp	/^                      const std::string&)> OnDataValidationFailed;$/;"	t	namespace:ndn
OnFailure	src/security/validator.hpp	/^  typedef function<void(const std::string&)> OnFailure;$/;"	t	class:ndn::Validator
OnInterest	src/face.hpp	/^typedef function<void (const InterestFilter&, const Interest&)> OnInterest;$/;"	t	namespace:ndn
OnInterestCheckFailed	src/security/conf/checker.hpp	/^                        const std::string&)> OnInterestCheckFailed;$/;"	t	class:ndn::security::conf::Checker
OnInterestChecked	src/security/conf/checker.hpp	/^  typedef function<void(const shared_ptr<const Interest>&)> OnInterestChecked;$/;"	t	class:ndn::security::conf::Checker
OnInterestValidated	src/security/validation-request.hpp	/^typedef function<void(const shared_ptr<const Interest>&)> OnInterestValidated;$/;"	t	namespace:ndn
OnInterestValidationFailed	src/security/validation-request.hpp	/^                      const std::string&)> OnInterestValidationFailed;$/;"	t	namespace:ndn
OnTimeout	src/face.hpp	/^typedef function<void(const Interest&)> OnTimeout;$/;"	t	namespace:ndn
Options	src/util/dummy-client-face.hpp	/^  struct Options$/;"	s	class:ndn::util::DummyClientFace
Origin	src/encoding/tlv-nfd.hpp	/^  Origin              = 111,$/;"	e	enum:ndn::tlv::nfd::__anon2
OsxKeyChainTestFixture	tests/unit-tests/security/sec-tpm-osx.t.cpp	/^  OsxKeyChainTestFixture()$/;"	f	class:ndn::tests::OsxKeyChainTestFixture
OsxKeyChainTestFixture	tests/unit-tests/security/sec-tpm-osx.t.cpp	/^class OsxKeyChainTestFixture$/;"	c	namespace:ndn::tests	file:
PACKAGE	build/c4che/_cache.py	/^PACKAGE = 'ndn-cxx'$/;"	v
PDFDIR	build/c4che/_cache.py	/^PDFDIR = '\/usr\/local\/share\/doc\/ndn-cxx'$/;"	v
PKGCONFIG	build/c4che/_cache.py	/^PKGCONFIG = ['\/usr\/bin\/pkg-config']$/;"	v
POS_RANDOM_VAL	src/security/security-common.hpp	/^  POS_RANDOM_VAL = -3,$/;"	e	enum:ndn::signed_interest::__anon6
POS_RANDOM_VAL	src/util/command-interest-validator.hpp	/^    POS_RANDOM_VAL = -3,$/;"	e	enum:ndn::CommandInterestValidator::__anon11
POS_SIG_INFO	src/security/security-common.hpp	/^  POS_SIG_INFO = -2,$/;"	e	enum:ndn::signed_interest::__anon6
POS_SIG_INFO	src/util/command-interest-validator.hpp	/^    POS_SIG_INFO = -2,$/;"	e	enum:ndn::CommandInterestValidator::__anon11
POS_SIG_VALUE	src/security/security-common.hpp	/^  POS_SIG_VALUE = -1,$/;"	e	enum:ndn::signed_interest::__anon6
POS_SIG_VALUE	src/util/command-interest-validator.hpp	/^    POS_SIG_VALUE = -1,$/;"	e	enum:ndn::CommandInterestValidator::__anon11
POS_TIMESTAMP	src/security/security-common.hpp	/^  POS_TIMESTAMP = -4,$/;"	e	enum:ndn::signed_interest::__anon6
POS_TIMESTAMP	src/util/command-interest-validator.hpp	/^    POS_TIMESTAMP = -4,$/;"	e	enum:ndn::CommandInterestValidator::__anon11
PREFIX	build/c4che/_cache.py	/^PREFIX = '\/usr\/local'$/;"	v
PSDIR	build/c4che/_cache.py	/^PSDIR = '\/usr\/local\/share\/doc\/ndn-cxx'$/;"	v
PUBLIC_KEY	tests/unit-tests/security/certificate.t.cpp	/^const uint8_t PUBLIC_KEY[] = {$/;"	m	namespace:ndn	file:
Packet	src/lp/packet.cpp	/^Packet::Packet()$/;"	f	class:ndn::lp::Packet
Packet	src/lp/packet.cpp	/^Packet::Packet(const Block& wire)$/;"	f	class:ndn::lp::Packet
Packet	src/lp/packet.hpp	/^class Packet$/;"	c	namespace:ndn::lp
Parsed	src/util/config-file.hpp	/^  typedef boost::property_tree::ptree Parsed;$/;"	t	class:ndn::ConfigFile
PartialName	src/name.hpp	/^typedef Name PartialName;$/;"	t	namespace:ndn
PendingInterest	src/detail/pending-interest.hpp	/^  PendingInterest(shared_ptr<const Interest> interest,$/;"	f	class:ndn::PendingInterest
PendingInterest	src/detail/pending-interest.hpp	/^class PendingInterest : noncopyable$/;"	c	namespace:ndn
PendingInterestTable	src/detail/face-impl.hpp	/^  typedef ContainerWithOnEmptySignal<shared_ptr<PendingInterest>> PendingInterestTable;$/;"	t	class:ndn::Face::Impl
Pib	src/security/pib.cpp	/^Pib::Pib(const std::string scheme, const std::string& location, shared_ptr<PibImpl> impl)$/;"	f	class:ndn::security::Pib
Pib	src/security/pib.hpp	/^class Pib : noncopyable$/;"	c	namespace:ndn::security
PibCreateFunc	src/security/key-chain.hpp	/^  typedef function<unique_ptr<SecPublicInfo> (const std::string&)> PibCreateFunc;$/;"	t	class:ndn::security::KeyChain
PibDataFixture	tests/unit-tests/security/pib-data-fixture.cpp	/^PibDataFixture::PibDataFixture()$/;"	f	class:ndn::security::PibDataFixture
PibDataFixture	tests/unit-tests/security/pib-data-fixture.hpp	/^class PibDataFixture$/;"	c	namespace:ndn::security
PibFactory	src/security/key-chain.cpp	/^typedef Factory<KeyChain::PibCreateFunc> PibFactory;$/;"	t	namespace:ndn::security	file:
PibImpl	src/security/pib-impl.hpp	/^class PibImpl$/;"	c	namespace:ndn::security
PibImpls	tests/unit-tests/security/pib-impl.t.cpp	/^                         PibSqlite3Wrapper> PibImpls;$/;"	t	namespace:ndn::security::tests	file:
PibMemory	src/security/pib-memory.cpp	/^PibMemory::PibMemory()$/;"	f	class:ndn::security::PibMemory
PibMemory	src/security/pib-memory.hpp	/^class PibMemory : public PibImpl$/;"	c	namespace:ndn::security
PibMemoryWrapper	tests/unit-tests/security/pib-impl.t.cpp	/^class PibMemoryWrapper$/;"	c	namespace:ndn::security::tests	file:
PibSqlite3	src/security/pib-sqlite3.cpp	/^PibSqlite3::PibSqlite3(const string& dir)$/;"	f	class:ndn::security::PibSqlite3
PibSqlite3	src/security/pib-sqlite3.hpp	/^class PibSqlite3 : public PibImpl$/;"	c	namespace:ndn::security
PibSqlite3TestFixture	tests/unit-tests/security/pib-sqlite3.t.cpp	/^  PibSqlite3TestFixture()$/;"	f	class:ndn::security::tests::PibSqlite3TestFixture
PibSqlite3TestFixture	tests/unit-tests/security/pib-sqlite3.t.cpp	/^class PibSqlite3TestFixture$/;"	c	namespace:ndn::security::tests	file:
PibSqlite3Wrapper	tests/unit-tests/security/pib-impl.t.cpp	/^  PibSqlite3Wrapper()$/;"	f	class:ndn::security::tests::PibSqlite3Wrapper
PibSqlite3Wrapper	tests/unit-tests/security/pib-impl.t.cpp	/^class PibSqlite3Wrapper$/;"	c	namespace:ndn::security::tests	file:
PibTmpPathFixture	tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^  PibTmpPathFixture()$/;"	f	class:ndn::tests::PibTmpPathFixture
PibTmpPathFixture	tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^class PibTmpPathFixture$/;"	c	namespace:ndn::tests	file:
PostNotification	src/mgmt/dispatcher.hpp	/^typedef std::function<void(const Block& notification)> PostNotification;$/;"	t	namespace:ndn::mgmt
Producer	examples/producer.cpp	/^class Producer : noncopyable$/;"	c	namespace:ndn::examples	file:
Producer	tools/ndnputchunks3.cpp	/^  Producer(const char* name)$/;"	f	class:ndn::Producer
Producer	tools/ndnputchunks3.cpp	/^class Producer$/;"	c	namespace:ndn	file:
PseudoRandomWord32	tests/unit-tests/util/random.t.cpp	/^class PseudoRandomWord32$/;"	c	namespace:ndn::tests	file:
PseudoRandomWord64	tests/unit-tests/util/random.t.cpp	/^class PseudoRandomWord64$/;"	c	namespace:ndn::tests	file:
PublicKey	src/security/public-key.cpp	/^PublicKey::PublicKey()$/;"	f	class:ndn::PublicKey
PublicKey	src/security/public-key.cpp	/^PublicKey::PublicKey(const uint8_t* keyDerBuf, size_t keyDerSize)$/;"	f	class:ndn::PublicKey
PublicKey	src/security/public-key.hpp	/^class PublicKey$/;"	c	namespace:ndn
PublisherPublicKeyLocator	src/encoding/tlv.hpp	/^  PublisherPublicKeyLocator = 15,$/;"	e	enum:ndn::tlv::__anon4
REAL_CERT	tests/unit-tests/security/certificate.t.cpp	/^const unsigned char REAL_CERT[] = {$/;"	m	namespace:ndn	file:
REAL_CERT_INFO	tests/unit-tests/security/certificate.t.cpp	/^const std::string REAL_CERT_INFO = "Certificate name:\\n"$/;"	m	namespace:ndn	file:
RELATION_EQUAL	src/security/conf/filter.hpp	/^      RELATION_EQUAL,$/;"	e	enum:ndn::security::conf::RelationNameFilter::Relation
RELATION_EQUAL	src/security/conf/key-locator-checker.hpp	/^    RELATION_EQUAL,$/;"	e	enum:ndn::security::conf::KeyLocatorChecker::Relation
RELATION_IS_PREFIX_OF	src/security/conf/filter.hpp	/^      RELATION_IS_PREFIX_OF,$/;"	e	enum:ndn::security::conf::RelationNameFilter::Relation
RELATION_IS_PREFIX_OF	src/security/conf/key-locator-checker.hpp	/^    RELATION_IS_PREFIX_OF,$/;"	e	enum:ndn::security::conf::KeyLocatorChecker::Relation
RELATION_IS_STRICT_PREFIX_OF	src/security/conf/filter.hpp	/^      RELATION_IS_STRICT_PREFIX_OF$/;"	e	enum:ndn::security::conf::RelationNameFilter::Relation
RELATION_IS_STRICT_PREFIX_OF	src/security/conf/key-locator-checker.hpp	/^    RELATION_IS_STRICT_PREFIX_OF$/;"	e	enum:ndn::security::conf::KeyLocatorChecker::Relation
RESPONDED	src/mgmt/status-dataset-context.hpp	/^    RESPONDED, \/\/\/< .append has been invoked$/;"	m	class:ndn::mgmt::StatusDatasetContext::State
REVISION	waf	/^REVISION="849024857bd41c3cf8e87dc01ecf79b0"$/;"	v
ROUTE_FLAG_CAPTURE	src/encoding/nfd-constants.hpp	/^  ROUTE_FLAG_CAPTURE       = 2$/;"	e	enum:ndn::nfd::RouteFlags
ROUTE_FLAG_CHILD_INHERIT	src/encoding/nfd-constants.hpp	/^  ROUTE_FLAG_CHILD_INHERIT = 1,$/;"	e	enum:ndn::nfd::RouteFlags
ROUTE_ORIGIN_APP	src/encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_APP      = 0,$/;"	e	enum:ndn::nfd::RouteOrigin
ROUTE_ORIGIN_AUTOCONF	src/encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_AUTOCONF = 66,$/;"	e	enum:ndn::nfd::RouteOrigin
ROUTE_ORIGIN_AUTOREG	src/encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_AUTOREG  = 64,$/;"	e	enum:ndn::nfd::RouteOrigin
ROUTE_ORIGIN_CLIENT	src/encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_CLIENT   = 65,$/;"	e	enum:ndn::nfd::RouteOrigin
ROUTE_ORIGIN_NLSR	src/encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_NLSR     = 128,$/;"	e	enum:ndn::nfd::RouteOrigin
ROUTE_ORIGIN_STATIC	src/encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_STATIC   = 255$/;"	e	enum:ndn::nfd::RouteOrigin
RPATH_ST	build/c4che/_cache.py	/^RPATH_ST = '-Wl,-rpath,%s'$/;"	v
RSA_CERT	tests/unit-tests/security/certificate.t.cpp	/^const uint8_t RSA_CERT[] = {$/;"	m	namespace:ndn	file:
RSA_CERT_INFO	tests/unit-tests/security/certificate.t.cpp	/^const std::string RSA_CERT_INFO =$/;"	m	namespace:ndn	file:
RSA_DER_KEY_DIGEST	tests/unit-tests/security/public-key.t.cpp	/^const uint8_t RSA_DER_KEY_DIGEST[] = {$/;"	m	namespace:ndn::tests	file:
RSA_KEY_SIZES	src/security/key-params.cpp	/^static const uint32_t RSA_KEY_SIZES[] = {2048, 1024};$/;"	m	namespace:ndn	file:
RandomGenerators	tests/unit-tests/util/random.t.cpp	/^                           SecureRandomWord64> RandomGenerators;$/;"	t	namespace:ndn::tests	file:
ReceiveCallback	src/transport/transport.hpp	/^  typedef function<void (const Block& wire)> ReceiveCallback;$/;"	t	class:ndn::Transport
RefObject	tests/unit-tests/util/signal.t.cpp	/^  RefObject()$/;"	f	class:ndn::util::signal::tests::RefObject
RefObject	tests/unit-tests/util/signal.t.cpp	/^  RefObject(const RefObject& other)$/;"	f	class:ndn::util::signal::tests::RefObject
RefObject	tests/unit-tests/util/signal.t.cpp	/^class RefObject$/;"	c	namespace:ndn::util::signal::tests	file:
Regex	src/util/regex.hpp	/^typedef RegexTopMatcher Regex;$/;"	t	namespace:ndn
RegexBackrefManager	src/util/regex/regex-backref-manager.hpp	/^  RegexBackrefManager()$/;"	f	class:ndn::RegexBackrefManager
RegexBackrefManager	src/util/regex/regex-backref-manager.hpp	/^class RegexBackrefManager$/;"	c	namespace:ndn
RegexBackrefMatcher	src/util/regex/regex-backref-matcher.hpp	/^RegexBackrefMatcher::RegexBackrefMatcher(const std::string& expr,$/;"	f	class:ndn::RegexBackrefMatcher
RegexBackrefMatcher	src/util/regex/regex-backref-matcher.hpp	/^class RegexBackrefMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexComponentMatcher	src/util/regex/regex-component-matcher.hpp	/^RegexComponentMatcher::RegexComponentMatcher(const std::string& expr,$/;"	f	class:ndn::RegexComponentMatcher
RegexComponentMatcher	src/util/regex/regex-component-matcher.hpp	/^class RegexComponentMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexComponentSetMatcher	src/util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::RegexComponentSetMatcher(const std::string& expr,$/;"	f	class:ndn::RegexComponentSetMatcher
RegexComponentSetMatcher	src/util/regex/regex-component-set-matcher.hpp	/^class RegexComponentSetMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexExprType	src/util/regex/regex-matcher.hpp	/^  enum RegexExprType {$/;"	g	class:ndn::RegexMatcher
RegexKeyLocatorNameChecker	src/security/conf/key-locator-checker.hpp	/^  RegexKeyLocatorNameChecker(const Regex& regex)$/;"	f	class:ndn::security::conf::RegexKeyLocatorNameChecker
RegexKeyLocatorNameChecker	src/security/conf/key-locator-checker.hpp	/^class RegexKeyLocatorNameChecker : public KeyLocatorChecker$/;"	c	namespace:ndn::security::conf
RegexList	src/security/validator-regex.hpp	/^  typedef std::vector< shared_ptr<Regex> > RegexList;$/;"	t	class:ndn::ValidatorRegex
RegexMatcher	src/util/regex/regex-matcher.hpp	/^RegexMatcher::RegexMatcher(const std::string& expr,$/;"	f	class:ndn::RegexMatcher
RegexMatcher	src/util/regex/regex-matcher.hpp	/^class RegexMatcher$/;"	c	namespace:ndn
RegexNameFilter	src/security/conf/filter.hpp	/^  RegexNameFilter(const Regex& regex)$/;"	f	class:ndn::security::conf::RegexNameFilter
RegexNameFilter	src/security/conf/filter.hpp	/^class RegexNameFilter : public Filter$/;"	c	namespace:ndn::security::conf
RegexPatternListMatcher	src/util/regex/regex-pattern-list-matcher.hpp	/^RegexPatternListMatcher::RegexPatternListMatcher(const std::string& expr,$/;"	f	class:ndn::RegexPatternListMatcher
RegexPatternListMatcher	src/util/regex/regex-pattern-list-matcher.hpp	/^class RegexPatternListMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexPseudoMatcher	src/util/regex/regex-pseudo-matcher.hpp	/^RegexPseudoMatcher::RegexPseudoMatcher()$/;"	f	class:ndn::RegexPseudoMatcher
RegexPseudoMatcher	src/util/regex/regex-pseudo-matcher.hpp	/^class RegexPseudoMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexRepeatMatcher	src/util/regex/regex-repeat-matcher.hpp	/^RegexRepeatMatcher::RegexRepeatMatcher(const std::string& expr,$/;"	f	class:ndn::RegexRepeatMatcher
RegexRepeatMatcher	src/util/regex/regex-repeat-matcher.hpp	/^class RegexRepeatMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexTopMatcher	src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::RegexTopMatcher(const std::string& expr, const std::string& expand)$/;"	f	class:ndn::RegexTopMatcher
RegexTopMatcher	src/util/regex/regex-top-matcher.hpp	/^class RegexTopMatcher: public RegexMatcher$/;"	c	namespace:ndn
RegisterPrefixFailureCallback	src/face.hpp	/^typedef function<void(const Name&, const std::string&)> RegisterPrefixFailureCallback;$/;"	t	namespace:ndn
RegisterPrefixSuccessCallback	src/face.hpp	/^typedef function<void(const Name&)> RegisterPrefixSuccessCallback;$/;"	t	namespace:ndn
RegisteredPrefix	src/detail/registered-prefix.hpp	/^  RegisteredPrefix(const Name& prefix,$/;"	f	class:ndn::RegisteredPrefix
RegisteredPrefix	src/detail/registered-prefix.hpp	/^class RegisteredPrefix : noncopyable$/;"	c	namespace:ndn
RegisteredPrefixTable	src/detail/face-impl.hpp	/^  typedef ContainerWithOnEmptySignal<shared_ptr<RegisteredPrefix>> RegisteredPrefixTable;$/;"	t	class:ndn::Face::Impl
RejectContinuation	src/mgmt/dispatcher.hpp	/^typedef std::function<void(RejectReply act)> RejectContinuation;$/;"	t	namespace:ndn::mgmt
RejectReply	src/mgmt/dispatcher.hpp	/^enum class RejectReply {$/;"	c	namespace:ndn::mgmt
Relation	src/security/conf/filter.hpp	/^  enum Relation$/;"	g	class:ndn::security::conf::RelationNameFilter
Relation	src/security/conf/key-locator-checker.hpp	/^  enum Relation {$/;"	g	class:ndn::security::conf::KeyLocatorChecker
RelationKeyLocatorNameChecker	src/security/conf/key-locator-checker.hpp	/^  RelationKeyLocatorNameChecker(const Name& name,$/;"	f	class:ndn::security::conf::RelationKeyLocatorNameChecker
RelationKeyLocatorNameChecker	src/security/conf/key-locator-checker.hpp	/^class RelationKeyLocatorNameChecker : public KeyLocatorChecker$/;"	c	namespace:ndn::security::conf
RelationNameFilter	src/security/conf/filter.hpp	/^  RelationNameFilter(const Name& name, Relation relation)$/;"	f	class:ndn::security::conf::RelationNameFilter
RelationNameFilter	src/security/conf/filter.hpp	/^class RelationNameFilter : public Filter$/;"	c	namespace:ndn::security::conf
Resolver	src/util/dns.cpp	/^  Resolver(const SuccessCallback& onSuccess,$/;"	f	class:ndn::dns::Resolver
Resolver	src/util/dns.cpp	/^class Resolver : noncopyable$/;"	c	namespace:ndn::dns	file:
RibEntry	src/encoding/tlv-nfd.hpp	/^  RibEntry = 128,$/;"	e	enum:ndn::tlv::nfd::__anon2
RibEntry	src/management/nfd-rib-entry.cpp	/^RibEntry::RibEntry()$/;"	f	class:ndn::nfd::RibEntry
RibEntry	src/management/nfd-rib-entry.cpp	/^RibEntry::RibEntry(const Block& block)$/;"	f	class:ndn::nfd::RibEntry
RibEntry	src/management/nfd-rib-entry.hpp	/^class RibEntry$/;"	c	namespace:ndn::nfd
RibEntryData	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^const uint8_t RibEntryData[] =$/;"	m	namespace:ndn::nfd::tests	file:
RibEntryInfiniteExpirationPeriod	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^const uint8_t RibEntryInfiniteExpirationPeriod[] =$/;"	m	namespace:ndn::nfd::tests	file:
RibFlagsTraits	src/management/nfd-rib-flags.hpp	/^class RibFlagsTraits$/;"	c	namespace:ndn::nfd
RibRegisterCommand	src/management/nfd-control-command.cpp	/^RibRegisterCommand::RibRegisterCommand()$/;"	f	class:ndn::nfd::RibRegisterCommand
RibRegisterCommand	src/management/nfd-control-command.hpp	/^class RibRegisterCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
RibUnregisterCommand	src/management/nfd-control-command.cpp	/^RibUnregisterCommand::RibUnregisterCommand()$/;"	f	class:ndn::nfd::RibUnregisterCommand
RibUnregisterCommand	src/management/nfd-control-command.hpp	/^class RibUnregisterCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
Route	src/encoding/tlv-nfd.hpp	/^  Route    = 129$/;"	e	enum:ndn::tlv::nfd::__anon2
Route	src/management/nfd-rib-entry.cpp	/^Route::Route()$/;"	f	class:ndn::nfd::Route
Route	src/management/nfd-rib-entry.cpp	/^Route::Route(const Block& block)$/;"	f	class:ndn::nfd::Route
Route	src/management/nfd-rib-entry.hpp	/^class Route : public RibFlagsTraits<Route>$/;"	c	namespace:ndn::nfd
RouteData	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^const uint8_t RouteData[] =$/;"	m	namespace:ndn::nfd::tests	file:
RouteFlags	src/encoding/nfd-constants.hpp	/^enum RouteFlags {$/;"	g	namespace:ndn::nfd
RouteInfiniteExpirationPeriod	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^const uint8_t RouteInfiniteExpirationPeriod[] =$/;"	m	namespace:ndn::nfd::tests	file:
RouteList	src/management/nfd-rib-entry.hpp	/^  typedef std::list<Route> RouteList;$/;"	t	class:ndn::nfd::RibEntry
RouteOrigin	src/encoding/nfd-constants.hpp	/^enum RouteOrigin {$/;"	g	namespace:ndn::nfd
RsaKeyParams	src/security/key-params.hpp	/^typedef SimplePublicKeyParams<RsaKeyParamsInfo> RsaKeyParams;$/;"	t	namespace:ndn
RsaKeyParamsInfo	src/security/key-params.hpp	/^class RsaKeyParamsInfo$/;"	c	namespace:ndn
Rule	src/security/conf/rule.hpp	/^  Rule(const std::string& id)$/;"	f	class:ndn::security::conf::Rule
Rule	src/security/conf/rule.hpp	/^class Rule$/;"	c	namespace:ndn::security::conf
RuleList	src/security/validator-regex.hpp	/^  typedef std::vector< shared_ptr<SecRuleRelative> > RuleList;$/;"	t	class:ndn::ValidatorRegex
SBINDIR	build/c4che/_cache.py	/^SBINDIR = '\/usr\/local\/sbin'$/;"	v
SCHEME	src/security/sec-public-info-sqlite3.hpp	/^  static const std::string SCHEME;$/;"	m	class:ndn::SecPublicInfoSqlite3
SCHEME	src/security/sec-tpm-file.hpp	/^  static const std::string SCHEME;$/;"	m	class:ndn::SecTpmFile
SCHEME	src/security/sec-tpm-osx.hpp	/^  static const std::string SCHEME;$/;"	m	class:ndn::SecTpmOsx
SCHEME	tests/unit-tests/security/dummy-keychain.cpp	/^const std::string DummyPublicInfo::SCHEME = "pib-dummy";$/;"	m	class:ndn::security::DummyPublicInfo	file:
SCHEME	tests/unit-tests/security/dummy-keychain.cpp	/^const std::string DummyTpm::SCHEME = "tpm-dummy";$/;"	m	class:ndn::security::DummyTpm	file:
SCHEME	tests/unit-tests/security/dummy-keychain.hpp	/^  static const std::string SCHEME;$/;"	m	class:ndn::security::DummyPublicInfo
SCHEME	tests/unit-tests/security/dummy-keychain.hpp	/^  static const std::string SCHEME;$/;"	m	class:ndn::security::DummyTpm
SEGMENT_MARKER	src/name-component.hpp	/^static const uint8_t SEGMENT_MARKER = 0x00;$/;"	m	namespace:ndn::name
SEGMENT_OFFSET_MARKER	src/name-component.hpp	/^static const uint8_t SEGMENT_OFFSET_MARKER = 0xFB;$/;"	m	namespace:ndn::name
SEGMENT_VERIFICATION_FAIL	src/util/segment-fetcher.hpp	/^    SEGMENT_VERIFICATION_FAIL = 3$/;"	e	enum:ndn::util::SegmentFetcher::ErrorCode
SELF_SIGNED_ECDSA_CERT	tests/unit-tests/security/certificate.t.cpp	/^const uint8_t SELF_SIGNED_ECDSA_CERT[] = {$/;"	m	namespace:ndn	file:
SELF_SIGNED_ECDSA_CERT	tests/unit-tests/security/pib-sqlite3.t.cpp	/^const uint8_t SELF_SIGNED_ECDSA_CERT[] = {$/;"	m	namespace:ndn::security::tests	file:
SELF_SIGNED_ECDSA_CERT_INFO	tests/unit-tests/security/certificate.t.cpp	/^const std::string SELF_SIGNED_ECDSA_CERT_INFO =$/;"	m	namespace:ndn	file:
SEQUENCE_NUMBER_MARKER	src/name-component.hpp	/^static const uint8_t SEQUENCE_NUMBER_MARKER = 0xFE;$/;"	m	namespace:ndn::name
SH	build/c4che/_cache.py	/^SH = ['\/bin\/sh']$/;"	v
SHA256_DIGEST_SIZE	src/util/crypto.hpp	/^static const size_t SHA256_DIGEST_SIZE = 32;$/;"	m	namespace:ndn::crypto
SHAREDSTATEDIR	build/c4che/_cache.py	/^SHAREDSTATEDIR = '\/usr\/local\/com'$/;"	v
SHLIB_MARKER	build/c4che/_cache.py	/^SHLIB_MARKER = '-Wl,-Bdynamic'$/;"	v
SIGNER_TYPE_CERT	src/security/signing-info.hpp	/^    SIGNER_TYPE_CERT = 3,$/;"	e	enum:ndn::security::SigningInfo::SignerType
SIGNER_TYPE_ID	src/security/signing-info.hpp	/^    SIGNER_TYPE_ID = 1,$/;"	e	enum:ndn::security::SigningInfo::SignerType
SIGNER_TYPE_KEY	src/security/signing-info.hpp	/^    SIGNER_TYPE_KEY = 2,$/;"	e	enum:ndn::security::SigningInfo::SignerType
SIGNER_TYPE_NULL	src/security/signing-info.hpp	/^    SIGNER_TYPE_NULL = 0,$/;"	e	enum:ndn::security::SigningInfo::SignerType
SIGNER_TYPE_SHA256	src/security/signing-info.hpp	/^    SIGNER_TYPE_SHA256 = 4$/;"	e	enum:ndn::security::SigningInfo::SignerType
SIGNING_PARAMS_CERTIFICATE	src/management/nfd-command-options.hpp	/^    SIGNING_PARAMS_CERTIFICATE$/;"	e	enum:ndn::nfd::CommandOptions::SigningParamsKind
SIGNING_PARAMS_DEFAULT	src/management/nfd-command-options.hpp	/^    SIGNING_PARAMS_DEFAULT,$/;"	e	enum:ndn::nfd::CommandOptions::SigningParamsKind
SIGNING_PARAMS_IDENTITY	src/management/nfd-command-options.hpp	/^    SIGNING_PARAMS_IDENTITY,$/;"	e	enum:ndn::nfd::CommandOptions::SigningParamsKind
SILENT	src/mgmt/dispatcher.hpp	/^  SILENT,$/;"	m	class:ndn::mgmt::RejectReply
SONAME_ST	build/c4che/_cache.py	/^SONAME_ST = '-Wl,-h,%s'$/;"	v
SPHINX_BUILD	build/c4che/_cache.py	/^SPHINX_BUILD = ['\/usr\/bin\/sphinx-build']$/;"	v
STLIBPATH_ST	build/c4che/_cache.py	/^STLIBPATH_ST = '-L%s'$/;"	v
STLIB_MARKER	build/c4che/_cache.py	/^STLIB_MARKER = '-Wl,-Bstatic'$/;"	v
STLIB_ST	build/c4che/_cache.py	/^STLIB_ST = '-l%s'$/;"	v
SYSCONFDIR	build/c4che/_cache.py	/^SYSCONFDIR = '\/usr\/local\/etc'$/;"	v
Scheduler	src/util/scheduler.cpp	/^Scheduler::Scheduler(boost::asio::io_service& ioService)$/;"	f	class:ndn::util::scheduler::Scheduler
Scheduler	src/util/scheduler.hpp	/^class Scheduler$/;"	c	namespace:ndn::util::scheduler
ScopedConnection	src/util/signal-scoped-connection.cpp	/^ScopedConnection::ScopedConnection()$/;"	f	class:ndn::util::signal::ScopedConnection
ScopedConnection	src/util/signal-scoped-connection.cpp	/^ScopedConnection::ScopedConnection(const Connection& connection)$/;"	f	class:ndn::util::signal::ScopedConnection
ScopedConnection	src/util/signal-scoped-connection.hpp	/^class ScopedConnection : noncopyable$/;"	c	namespace:ndn::util::signal
ScopedEventFixture	tests/unit-tests/util/scheduler.t.cpp	/^  ScopedEventFixture()$/;"	f	class:ndn::util::scheduler::tests::ScopedEventFixture
ScopedEventFixture	tests/unit-tests/util/scheduler.t.cpp	/^class ScopedEventFixture : public UnitTestTimeFixture$/;"	c	namespace:ndn::util::scheduler::tests	file:
ScopedEventId	src/util/scheduler-scoped-event-id.cpp	/^ScopedEventId::ScopedEventId(Scheduler& scheduler)$/;"	f	class:ndn::util::scheduler::ScopedEventId
ScopedEventId	src/util/scheduler-scoped-event-id.hpp	/^class ScopedEventId : noncopyable$/;"	c	namespace:ndn::util::scheduler
SecPublicInfo	src/security/sec-public-info.cpp	/^SecPublicInfo::SecPublicInfo(const std::string& location)$/;"	f	class:ndn::SecPublicInfo
SecPublicInfo	src/security/sec-public-info.hpp	/^class SecPublicInfo : noncopyable$/;"	c	namespace:ndn
SecPublicInfoSqlite3	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::SecPublicInfoSqlite3(const std::string& dir)$/;"	f	class:ndn::SecPublicInfoSqlite3
SecPublicInfoSqlite3	src/security/sec-public-info-sqlite3.hpp	/^class SecPublicInfoSqlite3 : public SecPublicInfo$/;"	c	namespace:ndn
SecRule	src/security/sec-rule.hpp	/^  SecRule(bool isPositive)$/;"	f	class:ndn::SecRule
SecRule	src/security/sec-rule.hpp	/^class SecRule$/;"	c	namespace:ndn
SecRuleRelative	src/security/sec-rule-relative.cpp	/^SecRuleRelative::SecRuleRelative(const string& dataRegex, const string& signerRegex,$/;"	f	class:ndn::SecRuleRelative
SecRuleRelative	src/security/sec-rule-relative.hpp	/^class SecRuleRelative : public SecRule$/;"	c	namespace:ndn
SecRuleSpecific	src/security/sec-rule-specific.cpp	/^SecRuleSpecific::SecRuleSpecific(const SecRuleSpecific& rule)$/;"	f	class:ndn::SecRuleSpecific
SecRuleSpecific	src/security/sec-rule-specific.cpp	/^SecRuleSpecific::SecRuleSpecific(shared_ptr<Regex> dataRegex)$/;"	f	class:ndn::SecRuleSpecific
SecRuleSpecific	src/security/sec-rule-specific.cpp	/^SecRuleSpecific::SecRuleSpecific(shared_ptr<Regex> dataRegex,$/;"	f	class:ndn::SecRuleSpecific
SecRuleSpecific	src/security/sec-rule-specific.hpp	/^class SecRuleSpecific : public SecRule$/;"	c	namespace:ndn
SecTpm	src/security/sec-tpm.cpp	/^SecTpm::SecTpm(const string& location)$/;"	f	class:ndn::SecTpm
SecTpm	src/security/sec-tpm.hpp	/^class SecTpm : noncopyable$/;"	c	namespace:ndn
SecTpmFile	src/security/sec-tpm-file.cpp	/^SecTpmFile::SecTpmFile(const string& location)$/;"	f	class:ndn::SecTpmFile
SecTpmFile	src/security/sec-tpm-file.hpp	/^class SecTpmFile : public SecTpm$/;"	c	namespace:ndn
SecTpmOsx	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::SecTpmOsx(const std::string& location)$/;"	f	class:ndn::SecTpmOsx
SecTpmOsx	src/security/sec-tpm-osx.hpp	/^class SecTpmOsx : public SecTpm$/;"	c	namespace:ndn
SecureRandomWord32	tests/unit-tests/util/random.t.cpp	/^class SecureRandomWord32$/;"	c	namespace:ndn::tests	file:
SecureRandomWord64	tests/unit-tests/util/random.t.cpp	/^class SecureRandomWord64$/;"	c	namespace:ndn::tests	file:
SecuredBag	src/security/secured-bag.cpp	/^SecuredBag::SecuredBag()$/;"	f	class:ndn::SecuredBag
SecuredBag	src/security/secured-bag.cpp	/^SecuredBag::SecuredBag(const Block& wire)$/;"	f	class:ndn::SecuredBag
SecuredBag	src/security/secured-bag.cpp	/^SecuredBag::SecuredBag(const IdentityCertificate& cert, ConstBufferPtr key)$/;"	f	class:ndn::SecuredBag
SecuredBag	src/security/secured-bag.hpp	/^class SecuredBag$/;"	c	namespace:ndn
SegmentFetcher	src/util/segment-fetcher.cpp	/^SegmentFetcher::SegmentFetcher(Face& face,$/;"	f	class:ndn::util::SegmentFetcher
SegmentFetcher	src/util/segment-fetcher.hpp	/^class SegmentFetcher : noncopyable$/;"	c	namespace:ndn::util
SelectedDelegation	src/encoding/tlv.hpp	/^  SelectedDelegation = 32,$/;"	e	enum:ndn::tlv::__anon4
Selectors	src/encoding/tlv.hpp	/^  Selectors     = 9,$/;"	e	enum:ndn::tlv::__anon4
Selectors	src/selectors.cpp	/^Selectors::Selectors()$/;"	f	class:ndn::Selectors
Selectors	src/selectors.cpp	/^Selectors::Selectors(const Block& wire)$/;"	f	class:ndn::Selectors
Selectors	src/selectors.hpp	/^class Selectors$/;"	c	namespace:ndn
Self	src/util/signal-signal.hpp	/^  typedef Signal<Owner, TArgs...> Self;$/;"	t	class:ndn::util::signal::Signal
SelfRescheduleFixture	tests/unit-tests/util/scheduler.t.cpp	/^  SelfRescheduleFixture()$/;"	f	class:ndn::util::scheduler::tests::SelfRescheduleFixture
SelfRescheduleFixture	tests/unit-tests/util/scheduler.t.cpp	/^class SelfRescheduleFixture : public UnitTestTimeFixture$/;"	c	namespace:ndn::util::scheduler::tests	file:
Sequence	src/lp/sequence.hpp	/^typedef uint64_t Sequence;$/;"	t	namespace:ndn::lp
Sequence	src/lp/tlv.hpp	/^  Sequence = 81,$/;"	e	enum:ndn::lp::tlv::__anon9
SequenceField	src/lp/fields.hpp	/^                          tlv::Sequence> SequenceField;$/;"	t	namespace:ndn::lp
Sha256	src/signature.hpp	/^    Sha256 = tlv::DigestSha256,$/;"	e	enum:ndn::Signature::__anon8
Sha256	src/util/digest.hpp	/^typedef Digest<CryptoPP::SHA256> Sha256;$/;"	t	namespace:ndn::util
Sha256WithEcdsa	src/signature.hpp	/^    Sha256WithEcdsa = tlv::SignatureSha256WithEcdsa$/;"	e	enum:ndn::Signature::__anon8
Sha256WithRsa	src/signature.hpp	/^    Sha256WithRsa = tlv::SignatureSha256WithRsa,$/;"	e	enum:ndn::Signature::__anon8
SignParams	src/security/key-chain.hpp	/^  typedef std::map<std::string, Block> SignParams;$/;"	t	class:ndn::security::KeyChain
Signal	src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::Signal()$/;"	f	class:ndn::util::signal::Signal
Signal	src/util/signal-signal.hpp	/^class Signal : noncopyable$/;"	c	namespace:ndn::util::signal
SignalEmitter1	tests/unit-tests/util/signal.t.cpp	/^class SignalEmitter1 : public SignalOwner1$/;"	c	namespace:ndn::util::signal::tests	file:
SignalOwner0	tests/unit-tests/util/signal.t.cpp	/^class SignalOwner0$/;"	c	namespace:ndn::util::signal::tests	file:
SignalOwner1	tests/unit-tests/util/signal.t.cpp	/^class SignalOwner1$/;"	c	namespace:ndn::util::signal::tests	file:
Signature	src/signature.cpp	/^Signature::Signature(const Block& info, const Block& value)$/;"	f	class:ndn::Signature
Signature	src/signature.cpp	/^Signature::Signature(const SignatureInfo& info, const Block& value)$/;"	f	class:ndn::Signature
Signature	src/signature.hpp	/^class Signature$/;"	c	namespace:ndn
SignatureInfo	src/encoding/tlv.hpp	/^  SignatureInfo = 22,$/;"	e	enum:ndn::tlv::__anon4
SignatureInfo	src/signature-info.cpp	/^SignatureInfo::SignatureInfo()$/;"	f	class:ndn::SignatureInfo
SignatureInfo	src/signature-info.cpp	/^SignatureInfo::SignatureInfo(const Block& block)$/;"	f	class:ndn::SignatureInfo
SignatureInfo	src/signature-info.cpp	/^SignatureInfo::SignatureInfo(tlv::SignatureTypeValue type)$/;"	f	class:ndn::SignatureInfo
SignatureInfo	src/signature-info.cpp	/^SignatureInfo::SignatureInfo(tlv::SignatureTypeValue type, const KeyLocator& keyLocator)$/;"	f	class:ndn::SignatureInfo
SignatureInfo	src/signature-info.hpp	/^class SignatureInfo$/;"	c	namespace:ndn
SignatureSha256EcdsaTimeFixture	tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^  SignatureSha256EcdsaTimeFixture()$/;"	f	class:ndn::tests::SignatureSha256EcdsaTimeFixture
SignatureSha256EcdsaTimeFixture	tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^class SignatureSha256EcdsaTimeFixture : public UnitTestTimeFixture$/;"	c	namespace:ndn::tests	file:
SignatureSha256RsaTimeFixture	tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^  SignatureSha256RsaTimeFixture()$/;"	f	class:ndn::tests::SignatureSha256RsaTimeFixture
SignatureSha256RsaTimeFixture	tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^class SignatureSha256RsaTimeFixture : public UnitTestTimeFixture$/;"	c	namespace:ndn::tests	file:
SignatureSha256WithEcdsa	src/encoding/tlv.hpp	/^  SignatureSha256WithEcdsa = 3$/;"	e	enum:ndn::tlv::SignatureTypeValue
SignatureSha256WithEcdsa	src/security/signature-sha256-with-ecdsa.cpp	/^SignatureSha256WithEcdsa::SignatureSha256WithEcdsa(const KeyLocator& keyLocator)$/;"	f	class:ndn::SignatureSha256WithEcdsa
SignatureSha256WithEcdsa	src/security/signature-sha256-with-ecdsa.cpp	/^SignatureSha256WithEcdsa::SignatureSha256WithEcdsa(const Signature& signature)$/;"	f	class:ndn::SignatureSha256WithEcdsa
SignatureSha256WithEcdsa	src/security/signature-sha256-with-ecdsa.hpp	/^class SignatureSha256WithEcdsa : public Signature$/;"	c	namespace:ndn
SignatureSha256WithRsa	src/encoding/tlv.hpp	/^  SignatureSha256WithRsa = 1,$/;"	e	enum:ndn::tlv::SignatureTypeValue
SignatureSha256WithRsa	src/security/signature-sha256-with-rsa.cpp	/^SignatureSha256WithRsa::SignatureSha256WithRsa(const KeyLocator& keyLocator)$/;"	f	class:ndn::SignatureSha256WithRsa
SignatureSha256WithRsa	src/security/signature-sha256-with-rsa.cpp	/^SignatureSha256WithRsa::SignatureSha256WithRsa(const Signature& signature)$/;"	f	class:ndn::SignatureSha256WithRsa
SignatureSha256WithRsa	src/security/signature-sha256-with-rsa.hpp	/^class SignatureSha256WithRsa : public Signature$/;"	c	namespace:ndn
SignatureType	src/encoding/tlv.hpp	/^  SignatureType = 27,$/;"	e	enum:ndn::tlv::__anon4
SignatureTypeValue	src/encoding/tlv.hpp	/^enum SignatureTypeValue {$/;"	g	namespace:ndn::tlv
SignatureValue	src/encoding/tlv.hpp	/^  SignatureValue  = 23,$/;"	e	enum:ndn::tlv::__anon4
SignerList	src/security/conf/checker.hpp	/^  typedef std::map<Name, shared_ptr<IdentityCertificate> > SignerList;$/;"	t	class:ndn::security::conf::FixedSignerChecker
SignerType	src/security/signing-info.hpp	/^  enum SignerType {$/;"	g	class:ndn::security::SigningInfo
SigningInfo	src/security/signing-info.cpp	/^SigningInfo::SigningInfo(SignerType signerType,$/;"	f	class:ndn::security::SigningInfo
SigningInfo	src/security/signing-info.hpp	/^class SigningInfo$/;"	c	namespace:ndn::security
SigningParamsKind	src/management/nfd-command-options.hpp	/^  enum SigningParamsKind {$/;"	g	class:ndn::nfd::CommandOptions
SimpleNotification	tests/unit-tests/util/simple-notification.hpp	/^  SimpleNotification()$/;"	f	class:ndn::util::tests::SimpleNotification
SimpleNotification	tests/unit-tests/util/simple-notification.hpp	/^  SimpleNotification(const Block& block)$/;"	f	class:ndn::util::tests::SimpleNotification
SimpleNotification	tests/unit-tests/util/simple-notification.hpp	/^  SimpleNotification(const std::string& message)$/;"	f	class:ndn::util::tests::SimpleNotification
SimpleNotification	tests/unit-tests/util/simple-notification.hpp	/^class SimpleNotification$/;"	c	namespace:ndn::util::tests
SimplePublicKeyParams	src/security/key-params.hpp	/^  SimplePublicKeyParams(const KeyParams& params)$/;"	f	class:ndn::SimplePublicKeyParams
SimplePublicKeyParams	src/security/key-params.hpp	/^  SimplePublicKeyParams(const SimplePublicKeyParams& params)$/;"	f	class:ndn::SimplePublicKeyParams
SimplePublicKeyParams	src/security/key-params.hpp	/^  SimplePublicKeyParams(uint32_t size = KeyParamsInfo::getDefaultSize())$/;"	f	class:ndn::SimplePublicKeyParams
SimplePublicKeyParams	src/security/key-params.hpp	/^class SimplePublicKeyParams : public KeyParams$/;"	c	namespace:ndn
SimpleSymmetricKeyParams	src/security/key-params.hpp	/^  SimpleSymmetricKeyParams(const KeyParams& params)$/;"	f	class:ndn::SimpleSymmetricKeyParams
SimpleSymmetricKeyParams	src/security/key-params.hpp	/^  SimpleSymmetricKeyParams(const SimpleSymmetricKeyParams& params)$/;"	f	class:ndn::SimpleSymmetricKeyParams
SimpleSymmetricKeyParams	src/security/key-params.hpp	/^  SimpleSymmetricKeyParams(uint32_t size = KeyParamsInfo::getDefaultSize())$/;"	f	class:ndn::SimpleSymmetricKeyParams
SimpleSymmetricKeyParams	src/security/key-params.hpp	/^class SimpleSymmetricKeyParams : public KeyParams$/;"	c	namespace:ndn
Slot	src/util/signal-signal.hpp	/^  struct Slot$/;"	s	class:ndn::util::signal::Signal
SlotList	src/util/signal-signal.hpp	/^  typedef std::list<Slot> SlotList;$/;"	t	class:ndn::util::signal::Signal
Sqlite3Statement	src/util/sqlite3-statement.cpp	/^Sqlite3Statement::Sqlite3Statement(sqlite3* database, const std::string& statement)$/;"	f	class:ndn::util::Sqlite3Statement
Sqlite3Statement	src/util/sqlite3-statement.hpp	/^class Sqlite3Statement : noncopyable$/;"	c	namespace:ndn::util
Sqlite3StatementTestFixture	tests/unit-tests/util/sqlite3-statement.t.cpp	/^  Sqlite3StatementTestFixture()$/;"	f	class:ndn::util::tests::Sqlite3StatementTestFixture
Sqlite3StatementTestFixture	tests/unit-tests/util/sqlite3-statement.t.cpp	/^class Sqlite3StatementTestFixture$/;"	c	namespace:ndn::util::tests	file:
StartTimestamp	src/encoding/tlv-nfd.hpp	/^  StartTimestamp       = 129,$/;"	e	enum:ndn::tlv::nfd::__anon2
State	src/mgmt/status-dataset-context.hpp	/^  enum class State {$/;"	c	class:ndn::mgmt::StatusDatasetContext
StatusCode	src/encoding/tlv-nfd.hpp	/^  StatusCode      = 102,$/;"	e	enum:ndn::tlv::nfd::__anon2
StatusDatasetContext	src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::StatusDatasetContext(const Interest& interest,$/;"	f	class:ndn::mgmt::StatusDatasetContext
StatusDatasetContext	src/mgmt/status-dataset-context.hpp	/^class StatusDatasetContext : noncopyable$/;"	c	namespace:ndn::mgmt
StatusDatasetContextFixture	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^  StatusDatasetContextFixture()$/;"	f	class:ndn::mgmt::tests::StatusDatasetContextFixture
StatusDatasetContextFixture	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^class StatusDatasetContextFixture$/;"	c	namespace:ndn::mgmt::tests	file:
StatusDatasetHandler	src/mgmt/dispatcher.hpp	/^                           StatusDatasetContext& context)> StatusDatasetHandler;$/;"	t	namespace:ndn::mgmt
StatusText	src/encoding/tlv-nfd.hpp	/^  StatusText      = 103,$/;"	e	enum:ndn::tlv::nfd::__anon2
Strategy	src/encoding/tlv-nfd.hpp	/^  Strategy            = 107,$/;"	e	enum:ndn::tlv::nfd::__anon2
StrategyChoice	src/encoding/tlv-nfd.hpp	/^  StrategyChoice = 128,$/;"	e	enum:ndn::tlv::nfd::__anon2
StrategyChoice	src/management/nfd-strategy-choice.cpp	/^StrategyChoice::StrategyChoice()$/;"	f	class:ndn::nfd::StrategyChoice
StrategyChoice	src/management/nfd-strategy-choice.cpp	/^StrategyChoice::StrategyChoice(const Block& payload)$/;"	f	class:ndn::nfd::StrategyChoice
StrategyChoice	src/management/nfd-strategy-choice.hpp	/^class StrategyChoice$/;"	c	namespace:ndn::nfd
StrategyChoiceSetCommand	src/management/nfd-control-command.cpp	/^StrategyChoiceSetCommand::StrategyChoiceSetCommand()$/;"	f	class:ndn::nfd::StrategyChoiceSetCommand
StrategyChoiceSetCommand	src/management/nfd-control-command.hpp	/^class StrategyChoiceSetCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
StrategyChoiceUnsetCommand	src/management/nfd-control-command.cpp	/^StrategyChoiceUnsetCommand::StrategyChoiceUnsetCommand()$/;"	f	class:ndn::nfd::StrategyChoiceUnsetCommand
StrategyChoiceUnsetCommand	src/management/nfd-control-command.hpp	/^class StrategyChoiceUnsetCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
StreamBuf	src/util/indented-stream.cpp	/^IndentedStream::StreamBuf::StreamBuf(std::ostream& os, const std::string& indent)$/;"	f	class:ndn::util::IndentedStream::StreamBuf
StreamBuf	src/util/indented-stream.hpp	/^  class StreamBuf : public std::stringbuf$/;"	c	class:ndn::util::IndentedStream
StreamTransportImpl	src/transport/stream-transport.hpp	/^  StreamTransportImpl(BaseTransport& transport, boost::asio::io_service& ioService)$/;"	f	class:ndn::StreamTransportImpl
StreamTransportImpl	src/transport/stream-transport.hpp	/^class StreamTransportImpl$/;"	c	namespace:ndn
StreamTransportWithResolverImpl	src/transport/stream-transport.hpp	/^  StreamTransportWithResolverImpl(BaseTransport& transport, boost::asio::io_service& ioService)$/;"	f	class:ndn::StreamTransportWithResolverImpl
StreamTransportWithResolverImpl	src/transport/stream-transport.hpp	/^class StreamTransportWithResolverImpl : public StreamTransportImpl<BaseTransport, Protocol>$/;"	c	namespace:ndn
StringHelperError	src/util/string-helper.hpp	/^  StringHelperError(const std::string& what)$/;"	f	class:ndn::StringHelperError
StringHelperError	src/util/string-helper.hpp	/^class StringHelperError : public std::invalid_argument$/;"	c	namespace:ndn
SubjectDescriptionList	src/security/certificate.hpp	/^  typedef std::vector<CertificateSubjectDescription> SubjectDescriptionList;$/;"	t	class:ndn::Certificate
SuccessCallback	src/detail/registered-prefix.hpp	/^  typedef function<void(const nfd::ControlParameters&)> SuccessCallback;$/;"	t	class:ndn::RegisteredPrefix
SuccessCallback	src/util/dns.hpp	/^typedef function<void (const IpAddress& address)> SuccessCallback;$/;"	t	namespace:ndn::dns
TAG_LEN	src/util/ethernet.hpp	/^const size_t TAG_LEN      = 4;      \/\/\/< Octets in 802.1Q tag (TPID + priority + VLAN)$/;"	m	namespace:ndn::util::ethernet
TAR	build/c4che/_cache.py	/^TAR = ['\/bin\/tar']$/;"	v
TIMESTAMP_MARKER	src/name-component.hpp	/^static const uint8_t TIMESTAMP_MARKER = 0xFC;$/;"	m	namespace:ndn::name
TLV_DICT	tools/tlvdump.cpp	/^std::map<uint32_t, std::string> TLV_DICT = {$/;"	m	namespace:ndn	file:
TYPE_LEN	src/util/ethernet.hpp	/^const size_t TYPE_LEN     = 2;      \/\/\/< Octets in Ethertype field$/;"	m	namespace:ndn::util::ethernet
Tag	src/encoding/encoding-buffer-fwd.hpp	/^typedef bool Tag;$/;"	t	namespace:ndn::encoding
Tag	src/tag.hpp	/^class Tag$/;"	c	namespace:ndn
TagHost	src/tag-host.hpp	/^class TagHost$/;"	c	namespace:ndn
TcpCanonizeProvider	src/util/face-uri.cpp	/^  TcpCanonizeProvider()$/;"	f	class:ndn::util::TcpCanonizeProvider
TcpCanonizeProvider	src/util/face-uri.cpp	/^class TcpCanonizeProvider : public IpHostCanonizeProvider<boost::asio::ip::tcp>$/;"	c	namespace:ndn::util	file:
TcpTransport	src/transport/tcp-transport.cpp	/^TcpTransport::TcpTransport(const std::string& host, const std::string& port\/* = "6363"*\/)$/;"	f	class:ndn::TcpTransport
TcpTransport	src/transport/tcp-transport.hpp	/^class TcpTransport : public Transport$/;"	c	namespace:ndn
TestControlResponse	tests/unit-tests/management/nfd-control-response.t.cpp	/^const uint8_t TestControlResponse[] = {0x65, 0x17,$/;"	m	namespace:ndn::nfd::tests	file:
TestDataFixture	tests/unit-tests/data.t.cpp	/^  TestDataFixture()$/;"	f	class:ndn::tests::TestDataFixture
TestDataFixture	tests/unit-tests/data.t.cpp	/^class TestDataFixture$/;"	c	namespace:ndn::tests	file:
TestDigestComponent	tests/unit-tests/name.t.cpp	/^static const uint8_t TestDigestComponent[] = {$/;"	m	namespace:ndn::tests	file:
TestFibEntry	tests/unit-tests/management/nfd-fib-entry.t.cpp	/^const uint8_t TestFibEntry[] =$/;"	m	namespace:ndn::nfd::tests	file:
TestFibEntryNoNextHops	tests/unit-tests/management/nfd-fib-entry.t.cpp	/^const uint8_t TestFibEntryNoNextHops[] =$/;"	m	namespace:ndn::nfd::tests	file:
TestHomeEnvironmentFixture	tests/unit-tests/util/test-home-environment-fixture.hpp	/^  TestHomeEnvironmentFixture()$/;"	f	class:ndn::util::TestHomeEnvironmentFixture
TestHomeEnvironmentFixture	tests/unit-tests/util/test-home-environment-fixture.hpp	/^class TestHomeEnvironmentFixture$/;"	c	namespace:ndn::util
TestName	tests/unit-tests/name.t.cpp	/^static const uint8_t TestName[] = {$/;"	m	namespace:ndn::tests	file:
TestNameComponent	tests/unit-tests/name.t.cpp	/^static const uint8_t TestNameComponent[] = {$/;"	m	namespace:ndn::tests	file:
TestNextHopRecord	tests/unit-tests/management/nfd-fib-entry.t.cpp	/^const uint8_t TestNextHopRecord[] =$/;"	m	namespace:ndn::nfd::tests	file:
TestTag	tests/unit-tests/tag-host.t.cpp	/^class TestTag : public Tag$/;"	c	namespace:ndn::tests	file:
TestTag2	tests/unit-tests/tag-host.t.cpp	/^class TestTag2 : public Tag$/;"	c	namespace:ndn::tests	file:
TimePoint	src/security/validity-period.hpp	/^  typedef boost::chrono::time_point<time::system_clock, time::seconds> TimePoint;$/;"	t	class:ndn::security::ValidityPeriod
TimePoint	src/util/time.hpp	/^  typedef time_point TimePoint;$/;"	t	class:ndn::time::steady_clock
TimePoint	src/util/time.hpp	/^  typedef time_point TimePoint;$/;"	t	class:ndn::time::system_clock
TimeoutCallback	src/face.hpp	/^typedef function<void(const Interest&)> TimeoutCallback;$/;"	t	namespace:ndn
Timestamp	tests/unit-tests/name.t.cpp	/^  Timestamp()$/;"	f	class:ndn::tests::Timestamp
Timestamp	tests/unit-tests/name.t.cpp	/^class Timestamp$/;"	c	namespace:ndn::tests	file:
TlvType	src/lp/detail/field-decl.hpp	/^  typedef std::integral_constant<uint64_t, TYPE> TlvType;$/;"	t	class:ndn::lp::detail::FieldDecl
TopPrefixEntry	src/mgmt/dispatcher.hpp	/^  struct TopPrefixEntry$/;"	s	class:ndn::mgmt::Dispatcher
TpmCreateFunc	src/security/key-chain.hpp	/^  typedef function<unique_ptr<SecTpm>(const std::string&)> TpmCreateFunc;$/;"	t	class:ndn::security::KeyChain
TpmFactory	src/security/key-chain.cpp	/^typedef Factory<KeyChain::TpmCreateFunc> TpmFactory;$/;"	t	namespace:ndn::security	file:
TransmissionQueue	src/transport/stream-transport.hpp	/^  typedef std::list<BlockSequence> TransmissionQueue;$/;"	t	class:ndn::StreamTransportImpl
Transport	src/transport/transport.hpp	/^Transport::Transport()$/;"	f	class:ndn::Transport
Transport	src/transport/transport.hpp	/^class Transport : noncopyable$/;"	c	namespace:ndn
Transport	src/util/dummy-client-face.cpp	/^class DummyClientFace::Transport : public ndn::Transport$/;"	c	class:ndn::util::DummyClientFace	file:
TransportFixture	tests/unit-tests/transport/transport-fixture.hpp	/^class TransportFixture : public util::TestHomeEnvironmentFixture$/;"	c	namespace:ndn
TrustAnchorContainer	src/security/validator-config.hpp	/^    TrustAnchorContainer()$/;"	f	class:ndn::ValidatorConfig::TrustAnchorContainer
TrustAnchorContainer	src/security/validator-config.hpp	/^  class TrustAnchorContainer$/;"	c	class:ndn::ValidatorConfig
Type	src/key-locator.hpp	/^  enum Type {$/;"	g	class:ndn::KeyLocator
Type	src/util/signal-signal.hpp	/^    typedef T Type;$/;"	t	struct:ndn::util::signal::Signal::TypeWrapper
TypeWrapper	src/util/signal-signal.hpp	/^  struct TypeWrapper$/;"	s	class:ndn::util::signal::Signal
UdpCanonizeProvider	src/util/face-uri.cpp	/^  UdpCanonizeProvider()$/;"	f	class:ndn::util::UdpCanonizeProvider
UdpCanonizeProvider	src/util/face-uri.cpp	/^class UdpCanonizeProvider : public IpHostCanonizeProvider<boost::asio::ip::udp>$/;"	c	namespace:ndn::util	file:
UnitTestClock	src/util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::UnitTestClock(const nanoseconds& startTime)$/;"	f	class:ndn::time::UnitTestClock
UnitTestClock	src/util/time-unit-test-clock.hpp	/^class UnitTestClock : public CustomClock<BaseClock>$/;"	c	namespace:ndn::time
UnitTestClockTraits	src/util/time-unit-test-clock.hpp	/^class UnitTestClockTraits$/;"	c	namespace:ndn::time
UnitTestClockTraits	src/util/time-unit-test-clock.hpp	/^class UnitTestClockTraits<system_clock>$/;"	c	namespace:ndn::time
UnitTestSteadyClock	src/util/time-unit-test-clock.hpp	/^typedef UnitTestClock<steady_clock> UnitTestSteadyClock;$/;"	t	namespace:ndn::time
UnitTestSystemClock	src/util/time-unit-test-clock.hpp	/^typedef UnitTestClock<system_clock> UnitTestSystemClock;$/;"	t	namespace:ndn::time
UnitTestTimeFixture	tests/unit-tests/unit-test-time-fixture.hpp	/^  UnitTestTimeFixture()$/;"	f	class:ndn::tests::UnitTestTimeFixture
UnitTestTimeFixture	tests/unit-tests/unit-test-time-fixture.hpp	/^class UnitTestTimeFixture$/;"	c	namespace:ndn::tests
UnitTestTimeFixture	tests/unit-tests/util/time-unit-test-clock.t.cpp	/^  UnitTestTimeFixture()$/;"	f	class:ndn::tests::UnitTestTimeFixture
UnitTestTimeFixture	tests/unit-tests/util/time-unit-test-clock.t.cpp	/^class UnitTestTimeFixture$/;"	c	namespace:ndn::tests	file:
UnixTransport	src/transport/unix-transport.cpp	/^UnixTransport::UnixTransport(const std::string& unixSocket)$/;"	f	class:ndn::UnixTransport
UnixTransport	src/transport/unix-transport.hpp	/^class UnixTransport : public Transport$/;"	c	namespace:ndn
UnregisterPrefixFailureCallback	src/face.hpp	/^typedef function<void(const std::string&)> UnregisterPrefixFailureCallback;$/;"	t	namespace:ndn
UnregisterPrefixSuccessCallback	src/face.hpp	/^typedef function<void()> UnregisterPrefixSuccessCallback;$/;"	t	namespace:ndn
Uri	src/encoding/tlv-nfd.hpp	/^  Uri                 = 114,$/;"	e	enum:ndn::tlv::nfd::__anon2
UriScheme	src/encoding/tlv-nfd.hpp	/^  UriScheme             = 131,$/;"	e	enum:ndn::tlv::nfd::__anon2
VALUE_OFFSET	src/security/additional-description.cpp	/^static const size_t VALUE_OFFSET = 1;$/;"	m	namespace:ndn::security	file:
VERSION	waf	/^VERSION="1.8.9"$/;"	v
VERSION_MARKER	src/name-component.hpp	/^static const uint8_t VERSION_MARKER = 0xFD;$/;"	m	namespace:ndn::name
VP1	tests/unit-tests/security/validity-period.t.cpp	/^const uint8_t VP1[] = {$/;"	m	namespace:ndn::security::test	file:
VP_E1	tests/unit-tests/security/validity-period.t.cpp	/^const uint8_t VP_E1[] = {$/;"	m	namespace:ndn::security::test	file:
VP_E2	tests/unit-tests/security/validity-period.t.cpp	/^const uint8_t VP_E2[] = {$/;"	m	namespace:ndn::security::test	file:
VP_E3	tests/unit-tests/security/validity-period.t.cpp	/^const uint8_t VP_E3[] = {$/;"	m	namespace:ndn::security::test	file:
VP_E4	tests/unit-tests/security/validity-period.t.cpp	/^const uint8_t VP_E4[] = {$/;"	m	namespace:ndn::security::test	file:
VP_E5	tests/unit-tests/security/validity-period.t.cpp	/^const uint8_t VP_E5[] = {$/;"	m	namespace:ndn::security::test	file:
VP_E6	tests/unit-tests/security/validity-period.t.cpp	/^const uint8_t VP_E6[] = {$/;"	m	namespace:ndn::security::test	file:
ValidateParameters	src/mgmt/dispatcher.hpp	/^typedef std::function<bool(const ControlParameters& params)> ValidateParameters;$/;"	t	namespace:ndn::mgmt
ValidationRequest	src/security/validation-request.hpp	/^  ValidationRequest(const Interest& interest,$/;"	f	class:ndn::ValidationRequest
ValidationRequest	src/security/validation-request.hpp	/^class ValidationRequest$/;"	c	namespace:ndn
Validator	src/security/validator.cpp	/^Validator::Validator(Face& face)$/;"	f	class:ndn::Validator
Validator	src/security/validator.cpp	/^Validator::Validator(Face* face)$/;"	f	class:ndn::Validator
Validator	src/security/validator.hpp	/^class Validator$/;"	c	namespace:ndn
ValidatorConfig	src/security/validator-config.cpp	/^ValidatorConfig::ValidatorConfig(Face& face,$/;"	f	class:ndn::ValidatorConfig
ValidatorConfig	src/security/validator-config.cpp	/^ValidatorConfig::ValidatorConfig(Face* face,$/;"	f	class:ndn::ValidatorConfig
ValidatorConfig	src/security/validator-config.hpp	/^class ValidatorConfig : public Validator$/;"	c	namespace:ndn
ValidatorNull	src/security/validator-null.hpp	/^class ValidatorNull : public Validator$/;"	c	namespace:ndn
ValidatorRegex	src/security/validator-regex.cpp	/^ValidatorRegex::ValidatorRegex(Face& face,$/;"	f	class:ndn::ValidatorRegex
ValidatorRegex	src/security/validator-regex.cpp	/^ValidatorRegex::ValidatorRegex(Face* face,$/;"	f	class:ndn::ValidatorRegex
ValidatorRegex	src/security/validator-regex.hpp	/^class ValidatorRegex : public Validator$/;"	c	namespace:ndn
ValidityPeriod	src/encoding/tlv.hpp	/^  ValidityPeriod = 253,$/;"	e	enum:ndn::tlv::__anon5
ValidityPeriod	src/security/validity-period.cpp	/^ValidityPeriod::ValidityPeriod(const Block& block)$/;"	f	class:ndn::security::ValidityPeriod
ValidityPeriod	src/security/validity-period.cpp	/^ValidityPeriod::ValidityPeriod(const time::system_clock::TimePoint& notBefore,$/;"	f	class:ndn::security::ValidityPeriod
ValidityPeriod	src/security/validity-period.hpp	/^class ValidityPeriod$/;"	c	namespace:ndn::security
ValueType	src/lp/detail/field-decl.hpp	/^  typedef VALUE ValueType;$/;"	t	class:ndn::lp::detail::FieldDecl
VerifySegment	src/util/segment-fetcher.hpp	/^  typedef function<bool (const Data& data)> VerifySegment;$/;"	t	class:ndn::util::SegmentFetcher
VoidParameters	tests/unit-tests/mgmt/dispatcher.t.cpp	/^  VoidParameters(const Block& wire)$/;"	f	class:ndn::mgmt::tests::VoidParameters
VoidParameters	tests/unit-tests/mgmt/dispatcher.t.cpp	/^class VoidParameters : public mgmt::ControlParameters$/;"	c	namespace:ndn::mgmt::tests	file:
WAF	waf	/^WAF='waf'$/;"	v
WITH_EXAMPLES	build/c4che/_cache.py	/^WITH_EXAMPLES = False$/;"	v
WITH_OSX_KEYCHAIN	build/c4che/_cache.py	/^WITH_OSX_KEYCHAIN = False$/;"	v
WITH_PCH	build/c4che/_cache.py	/^WITH_PCH = True$/;"	v
WITH_TESTS	build/c4che/_cache.py	/^WITH_TESTS = False$/;"	v
WITH_TOOLS	build/c4che/_cache.py	/^WITH_TOOLS = True$/;"	v
WRONG_CERT	tests/unit-tests/security/certificate.t.cpp	/^const uint8_t WRONG_CERT[] = { \/\/ first byte is wrong and an error will be thrown out$/;"	m	namespace:ndn	file:
W_SRC_NDN_CXX_CONFIG_HPP_WAF	build/src/ndn-cxx-config.hpp	4;"	d
WireDecodable	src/util/concepts.hpp	/^class WireDecodable$/;"	c	namespace:ndn
WireDecodableType	tests/unit-tests/util/concepts.t.cpp	/^class WireDecodableType$/;"	c	namespace:ndn::tests	file:
WireEncodable	src/util/concepts.hpp	/^class WireEncodable$/;"	c	namespace:ndn
WireEncodableType	tests/unit-tests/util/concepts.t.cpp	/^class WireEncodableType$/;"	c	namespace:ndn::tests	file:
WireEncodableType2	tests/unit-tests/util/concepts.t.cpp	/^class WireEncodableType2$/;"	c	namespace:ndn::tests	file:
WireEncodableWithEncodingBuffer	src/util/concepts.hpp	/^class WireEncodableWithEncodingBuffer$/;"	c	namespace:ndn
accumulator	tools/ndnsec/util.hpp	/^AccumulatorType<T>* accumulator()$/;"	f
accumulator	tools/ndnsec/util.hpp	/^AccumulatorType<T>* accumulator(T* store)$/;"	f
add	src/lp/packet.hpp	/^  add(const typename FIELD::ValueType& value)$/;"	f	class:ndn::lp::Packet
add	src/security/validator-config.hpp	/^    add(shared_ptr<IdentityCertificate> certificate)$/;"	f	class:ndn::ValidatorConfig::TrustAnchorContainer
add	src/util/monotonic_deadline_timer.hpp	/^  add(const time_type& time, const duration_type& duration)$/;"	f	struct:boost::asio::time_traits
addAppMetaInfo	src/meta-info.cpp	/^MetaInfo::addAppMetaInfo(const Block& block)$/;"	f	class:ndn::MetaInfo
addAppToAcl	src/security/key-chain.hpp	/^  addAppToAcl(const Name& keyName, KeyClass keyClass, const std::string& appPath, AclType acl)$/;"	f	class:ndn::security::KeyChain
addAppToAcl	src/security/sec-tpm-file.hpp	/^  addAppToAcl(const Name& keyName, KeyClass keyClass, const std::string& appPath, AclType acl)$/;"	f	class:ndn::SecTpmFile
addAppToAcl	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::addAppToAcl(const Name& keyName, KeyClass keyClass, const string& appPath, AclType acl)$/;"	f	class:ndn::SecTpmOsx
addAppToAcl	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::addAppToAcl(const Name& keyName, KeyClass keyClass, const std::string& appPath,$/;"	f	class:ndn::security::DummyTpm
addCertificate	src/security/key-chain.hpp	/^  addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::KeyChain
addCertificate	src/security/key.cpp	/^Key::addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::Key
addCertificate	src/security/pib-memory.cpp	/^PibMemory::addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::PibMemory
addCertificate	src/security/pib-sqlite3.cpp	/^PibSqlite3::addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::PibSqlite3
addCertificate	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::SecPublicInfoSqlite3
addCertificate	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::DummyPublicInfo
addCertificateAsIdentityDefault	src/security/key-chain.hpp	/^  addCertificateAsIdentityDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::KeyChain
addCertificateAsIdentityDefault	src/security/sec-public-info.cpp	/^SecPublicInfo::addCertificateAsIdentityDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::SecPublicInfo
addCertificateAsKeyDefault	src/security/key-chain.hpp	/^  addCertificateAsKeyDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::KeyChain
addCertificateAsKeyDefault	src/security/sec-public-info.cpp	/^SecPublicInfo::addCertificateAsKeyDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::SecPublicInfo
addCertificateAsSystemDefault	src/security/key-chain.hpp	/^  addCertificateAsSystemDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::KeyChain
addCertificateAsSystemDefault	src/security/sec-public-info.cpp	/^SecPublicInfo::addCertificateAsSystemDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::SecPublicInfo
addChecker	src/security/conf/rule.hpp	/^  addChecker(const shared_ptr<Checker>& checker)$/;"	f	class:ndn::security::conf::Rule
addControlCommand	src/mgmt/dispatcher.hpp	/^Dispatcher::addControlCommand(const PartialName& relPrefix,$/;"	f	class:ndn::mgmt::Dispatcher
addDataVerificationRule	src/security/validator-regex.cpp	/^ValidatorRegex::addDataVerificationRule(shared_ptr<SecRuleRelative> rule)$/;"	f	class:ndn::ValidatorRegex
addDelegation	src/link.cpp	/^Link::addDelegation(uint32_t preference, const Name& name)$/;"	f	class:ndn::Link
addExtension	src/security/certificate.hpp	/^  addExtension(const CertificateExtension& extension)$/;"	f	class:ndn::Certificate
addExtensionIfExists	docs/conf.py	/^def addExtensionIfExists(extension):$/;"	f
addFilter	src/security/conf/rule.hpp	/^  addFilter(const shared_ptr<Filter>& filter)$/;"	f	class:ndn::security::conf::Rule
addIdentity	src/security/key-chain.hpp	/^  addIdentity(const Name& identityName)$/;"	f	class:ndn::security::KeyChain
addIdentity	src/security/pib-memory.cpp	/^PibMemory::addIdentity(const Name& identity)$/;"	f	class:ndn::security::PibMemory
addIdentity	src/security/pib-sqlite3.cpp	/^PibSqlite3::addIdentity(const Name& identity)$/;"	f	class:ndn::security::PibSqlite3
addIdentity	src/security/pib.cpp	/^Pib::addIdentity(const Name& identity)$/;"	f	class:ndn::security::Pib
addIdentity	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::addIdentity(const Name& identityName)$/;"	f	class:ndn::SecPublicInfoSqlite3
addIdentity	tests/identity-management-fixture.cpp	/^IdentityManagementFixture::addIdentity(const Name& identity, const KeyParams& params)$/;"	f	class:ndn::security::IdentityManagementFixture
addIdentity	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::addIdentity(const Name& identityName)$/;"	f	class:ndn::security::DummyPublicInfo
addInterestBypassRule	src/util/command-interest-validator.hpp	/^CommandInterestValidator::addInterestBypassRule(const std::string& regex)$/;"	f	class:ndn::CommandInterestValidator
addInterestRule	src/util/command-interest-validator.hpp	/^CommandInterestValidator::addInterestRule(const std::string& regex,$/;"	f	class:ndn::CommandInterestValidator
addKey	src/security/identity.cpp	/^Identity::addKey(const PublicKey& publicKey, const name::Component& keyId)$/;"	f	class:ndn::security::Identity
addKey	src/security/key-chain.hpp	/^  addKey(const Name& keyName, const PublicKey& publicKeyDer)$/;"	f	class:ndn::security::KeyChain
addKey	src/security/pib-memory.cpp	/^PibMemory::addKey(const Name& identity, const name::Component& keyId, const PublicKey& publicKey)$/;"	f	class:ndn::security::PibMemory
addKey	src/security/pib-sqlite3.cpp	/^PibSqlite3::addKey(const Name& identity, const name::Component& keyId, const PublicKey& publicKey)$/;"	f	class:ndn::security::PibSqlite3
addKey	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::addKey(const Name& keyName,$/;"	f	class:ndn::SecPublicInfoSqlite3
addKey	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::addKey(const Name& keyName, const PublicKey& publicKey)$/;"	f	class:ndn::security::DummyPublicInfo
addNextHopRecord	src/management/nfd-fib-entry.cpp	/^FibEntry::addNextHopRecord(const NextHopRecord& nextHopRecord)$/;"	f	class:ndn::nfd::FibEntry
addNotificationStream	src/mgmt/dispatcher.cpp	/^Dispatcher::addNotificationStream(const PartialName& relPrefix)$/;"	f	class:ndn::mgmt::Dispatcher
addPublicKey	src/security/key-chain.hpp	/^  addPublicKey(const Name& keyName, KeyType keyType, const PublicKey& publicKeyDer)$/;"	f	class:ndn::security::KeyChain
addPublicKey	src/security/sec-public-info.cpp	/^SecPublicInfo::addPublicKey(const Name& keyName, KeyType keyType, const PublicKey& publicKey)$/;"	f	class:ndn::SecPublicInfo
addRoute	src/management/nfd-rib-entry.hpp	/^  addRoute(const Route& route)$/;"	f	class:ndn::nfd::RibEntry
addStatusDataset	src/mgmt/dispatcher.cpp	/^Dispatcher::addStatusDataset(const PartialName& relPrefix,$/;"	f	class:ndn::mgmt::Dispatcher
addSubjectDescription	src/security/certificate.hpp	/^  addSubjectDescription(const CertificateSubjectDescription& description)$/;"	f	class:ndn::Certificate
addTest	tests/unit-tests/util/face-uri.t.cpp	/^CanonizeFixture::addTest(const std::string& request,$/;"	f	class:ndn::util::tests::CanonizeFixture
addTopPrefix	src/mgmt/dispatcher.cpp	/^Dispatcher::addTopPrefix(const Name& prefix,$/;"	f	class:ndn::mgmt::Dispatcher
addTrustAnchor	src/security/validator-regex.cpp	/^ValidatorRegex::addTrustAnchor(shared_ptr<IdentityCertificate> certificate)$/;"	f	class:ndn::ValidatorRegex
advance	src/util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::advance(const nanoseconds& duration)$/;"	f	class:ndn::time::UnitTestClock
advanceClocks	tests/unit-tests/unit-test-time-fixture.hpp	/^  advanceClocks(const time::nanoseconds& tick, size_t nTicks = 1)$/;"	f	class:ndn::tests::UnitTestTimeFixture
afterAccess	src/util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::afterAccess(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLfu
afterAccess	src/util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::afterAccess(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLru
afterAccess	src/util/in-memory-storage.cpp	/^InMemoryStorage::afterAccess(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorage
afterAuthorizationRejected	src/mgmt/dispatcher.cpp	/^Dispatcher::afterAuthorizationRejected(RejectReply act, const Interest& interest)$/;"	f	class:ndn::mgmt::Dispatcher
afterCheckPolicy	src/security/validator.cpp	/^Validator::afterCheckPolicy(const std::vector<shared_ptr<ValidationRequest> >& nextSteps,$/;"	f	class:ndn::Validator
afterDecodeError	tests/unit-tests/util/notification-subscriber.t.cpp	/^  afterDecodeError(const Data& data)$/;"	f	class:ndn::util::tests::EndToEndFixture
afterInsert	src/util/in-memory-storage-fifo.cpp	/^InMemoryStorageFifo::afterInsert(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageFifo
afterInsert	src/util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::afterInsert(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLfu
afterInsert	src/util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::afterInsert(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLru
afterInsert	src/util/in-memory-storage.cpp	/^InMemoryStorage::afterInsert(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorage
afterNotification	tests/unit-tests/util/notification-subscriber.t.cpp	/^  afterNotification(const SimpleNotification& notification)$/;"	f	class:ndn::util::tests::EndToEndFixture
afterNotificationCenterEvent	src/util/network-monitor.cpp	/^  afterNotificationCenterEvent(CFNotificationCenterRef center, void *observer, CFStringRef name,$/;"	f	class:ndn::util::NetworkMonitor::Impl
afterPrefixRegistered	src/detail/face-impl.hpp	/^  afterPrefixRegistered(const shared_ptr<RegisteredPrefix>& registeredPrefix,$/;"	f	class:ndn::Face::Impl
afterReceiveData	src/util/notification-subscriber.hpp	/^  afterReceiveData(const Data& data)$/;"	f	class:ndn::util::NotificationSubscriber
afterTimeout	src/util/notification-subscriber.hpp	/^  afterTimeout()$/;"	f	class:ndn::util::NotificationSubscriber
afterTimeout	tests/unit-tests/util/notification-subscriber.t.cpp	/^  afterTimeout()$/;"	f	class:ndn::util::tests::EndToEndFixture
allocator_type	src/name.hpp	/^  typedef void                    allocator_type;$/;"	t	class:ndn::Name
append	src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::append(const Block& block)$/;"	f	class:ndn::mgmt::StatusDatasetContext
append	src/name.cpp	/^Name::append(const PartialName& name)$/;"	f	class:ndn::Name
append	src/name.hpp	/^  append(Iterator first, Iterator last)$/;"	f	class:ndn::Name
append	src/name.hpp	/^  append(const Block& value)$/;"	f	class:ndn::Name
append	src/name.hpp	/^  append(const Component& value)$/;"	f	class:ndn::Name
append	src/name.hpp	/^  append(const char* value)$/;"	f	class:ndn::Name
append	src/name.hpp	/^  append(const uint8_t* value, size_t valueLength)$/;"	f	class:ndn::Name
appendBlock	src/encoding/encoder.cpp	/^Encoder::appendBlock(const Block& block)$/;"	f	class:ndn::encoding::Encoder
appendBlock	src/encoding/estimator.cpp	/^Estimator::appendBlock(const Block& block)$/;"	f	class:ndn::encoding::Estimator
appendByte	src/encoding/encoder.cpp	/^Encoder::appendByte(uint8_t value)$/;"	f	class:ndn::encoding::Encoder
appendByte	src/encoding/estimator.cpp	/^Estimator::appendByte(uint8_t value)$/;"	f	class:ndn::encoding::Estimator
appendByteArray	src/encoding/encoder.cpp	/^Encoder::appendByteArray(const uint8_t* array, size_t length)$/;"	f	class:ndn::encoding::Encoder
appendByteArray	src/encoding/estimator.cpp	/^Estimator::appendByteArray(const uint8_t* array, size_t length)$/;"	f	class:ndn::encoding::Estimator
appendByteArrayBlock	src/encoding/encoder.cpp	/^Encoder::appendByteArrayBlock(uint32_t type, const uint8_t* array, size_t arraySize)$/;"	f	class:ndn::encoding::Encoder
appendByteArrayBlock	src/encoding/estimator.cpp	/^Estimator::appendByteArrayBlock(uint32_t type, const uint8_t* array, size_t arraySize)$/;"	f	class:ndn::encoding::Estimator
appendExclude	src/exclude.hpp	/^Exclude::appendExclude(const name::Component& name, bool any)$/;"	f	class:ndn::Exclude
appendImplicitSha256Digest	src/name.cpp	/^Name::appendImplicitSha256Digest(const ConstBufferPtr& digest)$/;"	f	class:ndn::Name
appendImplicitSha256Digest	src/name.cpp	/^Name::appendImplicitSha256Digest(const uint8_t* digest, size_t digestSize)$/;"	f	class:ndn::Name
appendNonNegativeInteger	src/encoding/encoder.cpp	/^Encoder::appendNonNegativeInteger(uint64_t varNumber)$/;"	f	class:ndn::encoding::Encoder
appendNonNegativeInteger	src/encoding/estimator.cpp	/^Estimator::appendNonNegativeInteger(uint64_t varNumber)$/;"	f	class:ndn::encoding::Estimator
appendNumber	src/name.cpp	/^Name::appendNumber(uint64_t number)$/;"	f	class:ndn::Name
appendNumberWithMarker	src/name.cpp	/^Name::appendNumberWithMarker(uint8_t marker, uint64_t number)$/;"	f	class:ndn::Name
appendRange	src/encoding/encoder.hpp	/^Encoder::appendRange(Iterator first, Iterator last)$/;"	f	class:ndn::encoding::Encoder
appendRange	src/encoding/estimator.hpp	/^Estimator::appendRange(Iterator first, Iterator last)$/;"	f	class:ndn::encoding::Estimator
appendSegment	src/name.cpp	/^Name::appendSegment(uint64_t segmentNo)$/;"	f	class:ndn::Name
appendSegmentOffset	src/name.cpp	/^Name::appendSegmentOffset(uint64_t offset)$/;"	f	class:ndn::Name
appendSequenceNumber	src/name.cpp	/^Name::appendSequenceNumber(uint64_t seqNo)$/;"	f	class:ndn::Name
appendTimestamp	src/name.cpp	/^Name::appendTimestamp(const time::system_clock::TimePoint& timePoint)$/;"	f	class:ndn::Name
appendTypeSpecificTlv	src/signature-info.cpp	/^SignatureInfo::appendTypeSpecificTlv(const Block& block)$/;"	f	class:ndn::SignatureInfo
appendVarNumber	src/encoding/encoder.cpp	/^Encoder::appendVarNumber(uint64_t varNumber)$/;"	f	class:ndn::encoding::Encoder
appendVarNumber	src/encoding/estimator.cpp	/^Estimator::appendVarNumber(uint64_t varNumber)$/;"	f	class:ndn::encoding::Estimator
appendVersion	src/name.cpp	/^Name::appendVersion()$/;"	f	class:ndn::Name
appendVersion	src/name.cpp	/^Name::appendVersion(uint64_t version)$/;"	f	class:ndn::Name
applyDefaultsToRequest	src/management/nfd-control-command.cpp	/^ControlCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::ControlCommand
applyDefaultsToRequest	src/management/nfd-control-command.cpp	/^FaceCreateCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceCreateCommand
applyDefaultsToRequest	src/management/nfd-control-command.cpp	/^FibAddNextHopCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FibAddNextHopCommand
applyDefaultsToRequest	src/management/nfd-control-command.cpp	/^FibRemoveNextHopCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FibRemoveNextHopCommand
applyDefaultsToRequest	src/management/nfd-control-command.cpp	/^RibRegisterCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::RibRegisterCommand
applyDefaultsToRequest	src/management/nfd-control-command.cpp	/^RibUnregisterCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::RibUnregisterCommand
applyDefaultsToResponse	src/management/nfd-control-command.cpp	/^ControlCommand::applyDefaultsToResponse(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::ControlCommand
asio	src/encoding/block.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	src/face.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	src/transport/tcp-transport.hpp	/^namespace boost { namespace asio { namespace ip { class tcp; } } }$/;"	n	namespace:boost
asio	src/transport/unix-transport.hpp	/^namespace boost { namespace asio { namespace local { class stream_protocol; } } }$/;"	n	namespace:boost
asio	src/util/monotonic_deadline_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
asyncExpressInterest	src/detail/face-impl.hpp	/^  asyncExpressInterest(shared_ptr<const Interest> interest,$/;"	f	class:ndn::Face::Impl
asyncPutData	src/detail/face-impl.hpp	/^  asyncPutData(const shared_ptr<const Data>& data)$/;"	f	class:ndn::Face::Impl
asyncPutNack	src/detail/face-impl.hpp	/^  asyncPutNack(shared_ptr<const lp::Nack> nack)$/;"	f	class:ndn::Face::Impl
asyncRemovePendingInterest	src/detail/face-impl.hpp	/^  asyncRemovePendingInterest(const PendingInterestId* pendingInterestId)$/;"	f	class:ndn::Face::Impl
asyncResolve	src/util/dns.cpp	/^  asyncResolve(const std::string& host,$/;"	f	class:ndn::dns::Resolver
asyncResolve	src/util/dns.cpp	/^asyncResolve(const std::string& host,$/;"	f	namespace:ndn::dns
asyncSetInterestFilter	src/detail/face-impl.hpp	/^  asyncSetInterestFilter(const shared_ptr<InterestFilterRecord>& interestFilterRecord)$/;"	f	class:ndn::Face::Impl
asyncShutdown	src/face.cpp	/^Face::asyncShutdown()$/;"	f	class:ndn::Face
asyncUnregisterPrefix	src/detail/face-impl.hpp	/^  asyncUnregisterPrefix(const RegisteredPrefixId* registeredPrefixId,$/;"	f	class:ndn::Face::Impl
asyncUnsetInterestFilter	src/detail/face-impl.hpp	/^  asyncUnsetInterestFilter(const InterestFilterId* interestFilterId)$/;"	f	class:ndn::Face::Impl
at	src/name.hpp	/^  at(ssize_t i) const$/;"	f	class:ndn::Name
b	waf	/^	def b(x):$/;"	f	function:b
b	waf	/^def b(x):$/;"	f
base_steady_clock	src/util/time.cpp	/^  typedef boost::chrono::steady_clock base_steady_clock;$/;"	t	namespace:ndn::time	file:
base_steady_clock	src/util/time.cpp	/^  typedef boost::chrono::system_clock base_steady_clock;$/;"	t	namespace:ndn::time	file:
be16toh	src/encoding/endian.hpp	44;"	d
be32toh	src/encoding/endian.hpp	48;"	d
be64toh	src/encoding/endian.hpp	52;"	d
beforeErase	src/util/in-memory-storage-fifo.cpp	/^InMemoryStorageFifo::beforeErase(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageFifo
beforeErase	src/util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::beforeErase(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLfu
beforeErase	src/util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::beforeErase(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLru
beforeErase	src/util/in-memory-storage.cpp	/^InMemoryStorage::beforeErase(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorage
begin	src/detail/container-with-on-empty-signal.hpp	/^  begin()$/;"	f	class:ndn::ContainerWithOnEmptySignal
begin	src/encoding/block.cpp	/^Block::begin() const$/;"	f	class:ndn::Block
begin	src/encoding/encoder.hpp	/^Encoder::begin() const$/;"	f	class:ndn::encoding::Encoder
begin	src/encoding/encoder.hpp	/^Encoder::begin()$/;"	f	class:ndn::encoding::Encoder
begin	src/exclude.hpp	/^Exclude::begin() const$/;"	f	class:ndn::Exclude
begin	src/management/nfd-rib-entry.hpp	/^RibEntry::begin() const$/;"	f	class:ndn::nfd::RibEntry
begin	src/name.hpp	/^  begin() const$/;"	f	class:ndn::Name
begin	src/security/additional-description.cpp	/^AdditionalDescription::begin() const$/;"	f	class:ndn::security::AdditionalDescription
begin	src/security/additional-description.cpp	/^AdditionalDescription::begin()$/;"	f	class:ndn::security::AdditionalDescription
begin	src/security/certificate-container.cpp	/^CertificateContainer::begin() const$/;"	f	class:ndn::security::CertificateContainer
begin	src/security/identity-container.cpp	/^IdentityContainer::begin() const$/;"	f	class:ndn::security::IdentityContainer
begin	src/security/key-container.cpp	/^KeyContainer::begin() const$/;"	f	class:ndn::security::KeyContainer
begin	src/util/in-memory-storage.cpp	/^InMemoryStorage::begin() const$/;"	f	class:ndn::util::InMemoryStorage
bind	src/util/sqlite3-statement.cpp	/^Sqlite3Statement::bind(int index, const Block& block, void(*destructor)(void*))$/;"	f	class:ndn::util::Sqlite3Statement
bind	src/util/sqlite3-statement.cpp	/^Sqlite3Statement::bind(int index, const char* value, size_t size, void(*destructor)(void*))$/;"	f	class:ndn::util::Sqlite3Statement
bind	src/util/sqlite3-statement.cpp	/^Sqlite3Statement::bind(int index, const std::string& value, void(*destructor)(void*))$/;"	f	class:ndn::util::Sqlite3Statement
bind	src/util/sqlite3-statement.cpp	/^Sqlite3Statement::bind(int index, const void* buf, size_t size, void(*destructor)(void*))$/;"	f	class:ndn::util::Sqlite3Statement
bind	src/util/sqlite3-statement.cpp	/^Sqlite3Statement::bind(int index, int number)$/;"	f	class:ndn::util::Sqlite3Statement
block	src/encoding/encoder.cpp	/^Encoder::block(bool verifyLength\/* = true*\/) const$/;"	f	class:ndn::encoding::Encoder
blockFromValue	src/encoding/block.cpp	/^Block::blockFromValue() const$/;"	f	class:ndn::Block
booleanBlock	src/encoding/block-helpers.hpp	/^booleanBlock(uint32_t type)$/;"	f	namespace:ndn::encoding
boost	src/common.hpp	/^namespace boost {$/;"	n
boost	src/encoding/block.hpp	/^namespace boost {$/;"	n
boost	src/face.hpp	/^namespace boost {$/;"	n
boost	src/transport/tcp-transport.hpp	/^namespace boost { namespace asio { namespace ip { class tcp; } } }$/;"	n
boost	src/transport/unix-transport.hpp	/^namespace boost { namespace asio { namespace local { class stream_protocol; } } }$/;"	n
boost	src/util/monotonic_deadline_timer.hpp	/^namespace boost {$/;"	n
boost	src/util/time.cpp	/^namespace boost {$/;"	n	file:
boost	src/util/time.hpp	/^namespace boost {$/;"	n
buf	src/encoding/buffer-stream.hpp	/^  buf()$/;"	f	class:ndn::OBufferStream
buf	src/encoding/buffer.hpp	/^  buf() const$/;"	f	class:ndn::Buffer
buf	src/encoding/buffer.hpp	/^  buf()$/;"	f	class:ndn::Buffer
buf	src/encoding/encoder.hpp	/^Encoder::buf() const$/;"	f	class:ndn::encoding::Encoder
buf	src/encoding/encoder.hpp	/^Encoder::buf()$/;"	f	class:ndn::encoding::Encoder
buffer	tests/unit-tests/encoding/block.t.cpp	/^  EncodingBuffer buffer;$/;"	m	class:ndn::tests::BasicBlockFixture	file:
buffer_append_device	src/encoding/buffer-stream.hpp	/^  buffer_append_device(Buffer& container)$/;"	f	class:ndn::iostreams::buffer_append_device
buffer_append_device	src/encoding/buffer-stream.hpp	/^class buffer_append_device$/;"	c	namespace:ndn::iostreams
cache	tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^  shared_ptr<CertificateCacheTtl> cache;$/;"	m	class:ndn::tests::CertificateCacheFixture	file:
canCanonize	src/util/face-uri.cpp	/^FaceUri::canCanonize(const std::string& scheme)$/;"	f	class:ndn::util::FaceUri
canIgnore	src/lp/detail/field-info.hpp	/^  bool canIgnore;$/;"	m	class:ndn::lp::detail::FieldInfo
cancel	src/util/scheduler-scoped-event-id.cpp	/^ScopedEventId::cancel()$/;"	f	class:ndn::util::scheduler::ScopedEventId
cancelAllEvents	src/util/scheduler.cpp	/^Scheduler::cancelAllEvents()$/;"	f	class:ndn::util::scheduler::Scheduler
cancelEvent	src/util/scheduler.cpp	/^Scheduler::cancelEvent(const EventId& eventId)$/;"	f	class:ndn::util::scheduler::Scheduler
canonicalName	src/security/key-chain.cpp	/^  std::string canonicalName;$/;"	m	struct:ndn::security::Factory	file:
canonize	src/util/face-uri.cpp	/^  canonize(const FaceUri& faceUri,$/;"	f	class:ndn::util::EtherCanonizeProvider
canonize	src/util/face-uri.cpp	/^  canonize(const FaceUri& faceUri,$/;"	f	class:ndn::util::IpHostCanonizeProvider
canonize	src/util/face-uri.cpp	/^FaceUri::canonize(const CanonizeSuccessCallback& onSuccess,$/;"	f	class:ndn::util::FaceUri
capacity	src/encoding/encoder.hpp	/^Encoder::capacity() const$/;"	f	class:ndn::encoding::Encoder
category	src/encoding/buffer-stream.hpp	/^  typedef boost::iostreams::sink_tag category;$/;"	t	class:ndn::iostreams::buffer_append_device
cert1	tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^  shared_ptr<IdentityCertificate> cert1;$/;"	m	class:ndn::tests::CertificateCacheFixture	file:
cert2	tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^  shared_ptr<IdentityCertificate> cert2;$/;"	m	class:ndn::tests::CertificateCacheFixture	file:
certDirPath	tests/unit-tests/security/validator-config.t.cpp	/^  boost::filesystem::path certDirPath;$/;"	m	struct:ndn::tests::DirTestFixture	file:
certName	tests/unit-tests/data.t.cpp	/^  Name certName;$/;"	m	class:ndn::tests::DataIdentityFixture	file:
certificateNameToPublicKeyName	src/security/identity-certificate.cpp	/^IdentityCertificate::certificateNameToPublicKeyName(const Name& certificateName)$/;"	f	class:ndn::IdentityCertificate
cfLoopEvent	src/util/network-monitor.cpp	/^  scheduler::ScopedEventId cfLoopEvent;$/;"	m	class:ndn::util::NetworkMonitor::Impl	file:
cfg_files	build/c4che/_cache.py	/^cfg_files = ['\/home\/zzfan\/Documents\/NDN\/ndn-cxx\/build\/src\/ndn-cxx-config.hpp']$/;"	v
char_type	src/encoding/buffer-stream.hpp	/^  typedef char char_type;$/;"	t	class:ndn::iostreams::buffer_append_device
check	src/security/conf/checker.hpp	/^  check(const Data& data,$/;"	f	class:ndn::security::conf::CustomizedChecker
check	src/security/conf/checker.hpp	/^  check(const Data& data,$/;"	f	class:ndn::security::conf::FixedSignerChecker
check	src/security/conf/checker.hpp	/^  check(const Interest& interest,$/;"	f	class:ndn::security::conf::CustomizedChecker
check	src/security/conf/checker.hpp	/^  check(const Interest& interest,$/;"	f	class:ndn::security::conf::FixedSignerChecker
check	src/security/conf/checker.hpp	/^  check(const Packet& packet, const Signature& signature,$/;"	f	class:ndn::security::conf::CustomizedChecker
check	src/security/conf/checker.hpp	/^  check(const Packet& packet, const Signature& signature,$/;"	f	class:ndn::security::conf::FixedSignerChecker
check	src/security/conf/key-locator-checker.hpp	/^  check(const Data& data,$/;"	f	class:ndn::security::conf::KeyLocatorChecker
check	src/security/conf/key-locator-checker.hpp	/^  check(const Interest& interest,$/;"	f	class:ndn::security::conf::KeyLocatorChecker
check	src/security/conf/key-locator-checker.hpp	/^  check(const Name& packetName,$/;"	f	class:ndn::security::conf::HyperKeyLocatorNameChecker
check	src/security/conf/key-locator-checker.hpp	/^  check(const Name& packetName,$/;"	f	class:ndn::security::conf::RegexKeyLocatorNameChecker
check	src/security/conf/key-locator-checker.hpp	/^  check(const Name& packetName,$/;"	f	class:ndn::security::conf::RelationKeyLocatorNameChecker
check	src/security/conf/rule.hpp	/^  check(const Packet& packet,$/;"	f	class:ndn::security::conf::Rule
checkAddress	src/util/face-uri.cpp	/^  checkAddress(const dns::IpAddress& ipAddress) const$/;"	f	class:ndn::util::IpHostCanonizeProvider	file:
checkAddress	src/util/face-uri.cpp	/^  checkAddress(const dns::IpAddress& ipAddress) const$/;"	f	class:ndn::util::TcpCanonizeProvider
checkFace	tests/unit-tests/security/validator-config.t.cpp	/^  checkFace(std::vector<Packet>& receivedPackets,$/;"	f	struct:ndn::tests::FacesFixture
checkKeySize	src/security/key-params.cpp	/^AesKeyParamsInfo::checkKeySize(uint32_t size)$/;"	f	class:ndn::AesKeyParamsInfo
checkKeySize	src/security/key-params.cpp	/^EcdsaKeyParamsInfo::checkKeySize(uint32_t size)$/;"	f	class:ndn::EcdsaKeyParamsInfo
checkKeySize	src/security/key-params.cpp	/^RsaKeyParamsInfo::checkKeySize(uint32_t size)$/;"	f	class:ndn::RsaKeyParamsInfo
checkPolicy	src/security/validator-config.cpp	/^ValidatorConfig::checkPolicy(const Data& data,$/;"	f	class:ndn::ValidatorConfig
checkPolicy	src/security/validator-config.cpp	/^ValidatorConfig::checkPolicy(const Interest& interest,$/;"	f	class:ndn::ValidatorConfig
checkPolicy	src/security/validator-null.hpp	/^  checkPolicy(const Data& data,$/;"	f	class:ndn::ValidatorNull
checkPolicy	src/security/validator-null.hpp	/^  checkPolicy(const Interest& interest,$/;"	f	class:ndn::ValidatorNull
checkPolicy	src/security/validator-regex.cpp	/^ValidatorRegex::checkPolicy(const Data& data,$/;"	f	class:ndn::ValidatorRegex
checkPolicy	src/security/validator-regex.hpp	/^  checkPolicy(const Interest& interest,$/;"	f	class:ndn::ValidatorRegex
checkPolicy	src/util/command-interest-validator.hpp	/^  checkPolicy(const Data& data,$/;"	f	class:ndn::CommandInterestValidator
checkPolicy	src/util/command-interest-validator.hpp	/^CommandInterestValidator::checkPolicy(const Interest& interest,$/;"	f	class:ndn::CommandInterestValidator
checkPrefix	tests/integrated/face.cpp	/^  checkPrefix(bool doesExist)$/;"	f	class:ndn::tests::FacesFixture2
checkRelation	src/security/conf/key-locator-checker.hpp	/^  checkRelation(const Relation& relation, const Name& name1, const Name& name2)$/;"	f	class:ndn::security::conf::KeyLocatorChecker
checkSignature	src/security/validator-config.cpp	/^ValidatorConfig::checkSignature(const Packet& packet,$/;"	f	class:ndn::ValidatorConfig
checkTimestamp	src/security/validator-config.cpp	/^ValidatorConfig::checkTimestamp(const shared_ptr<const Interest>& interest,$/;"	f	class:ndn::ValidatorConfig
chrono	src/util/time.cpp	/^namespace chrono {$/;"	n	namespace:boost	file:
chrono	src/util/time.hpp	/^namespace chrono {$/;"	n	namespace:boost
cleanOldKeys	src/security/validator-config.cpp	/^ValidatorConfig::cleanOldKeys()$/;"	f	class:ndn::ValidatorConfig
clear	src/detail/container-with-on-empty-signal.hpp	/^  clear()$/;"	f	class:ndn::ContainerWithOnEmptySignal
clear	src/exclude.hpp	/^Exclude::clear()$/;"	f	class:ndn::Exclude
clear	src/key-locator.cpp	/^KeyLocator::clear()$/;"	f	class:ndn::KeyLocator
clear	src/lp/packet.hpp	/^  clear()$/;"	f	class:ndn::lp::Packet
clear	src/name.hpp	/^  clear()$/;"	f	class:ndn::Name
clearRoutes	src/management/nfd-rib-entry.hpp	/^  clearRoutes()$/;"	f	class:ndn::nfd::RibEntry
clock_string	src/util/time.hpp	/^struct clock_string<ndn::time::steady_clock, CharT>$/;"	s	namespace:boost::chrono
clock_string	src/util/time.hpp	/^struct clock_string<ndn::time::system_clock, CharT>$/;"	s	namespace:boost::chrono
close	src/transport/stream-transport.hpp	/^  close()$/;"	f	class:ndn::StreamTransportImpl
close	src/transport/tcp-transport.cpp	/^TcpTransport::close()$/;"	f	class:ndn::TcpTransport
close	src/transport/unix-transport.cpp	/^UnixTransport::close()$/;"	f	class:ndn::UnixTransport
close	src/util/config-file.cpp	/^ConfigFile::close()$/;"	f	class:ndn::ConfigFile
close	src/util/dummy-client-face.cpp	/^  close()$/;"	f	class:ndn::util::DummyClientFace::Transport
commandFailCallback	tests/unit-tests/management/nfd-controller.t.cpp	/^  Controller::CommandFailCallback commandFailCallback;$/;"	m	class:ndn::nfd::tests::CommandFixture	file:
commandFailHistory	tests/unit-tests/management/nfd-controller.t.cpp	/^  std::vector<CommandFailArgs> commandFailHistory;$/;"	m	class:ndn::nfd::tests::CommandFixture	file:
commandSucceedCallback	tests/unit-tests/management/nfd-controller.t.cpp	/^  Controller::CommandSucceedCallback commandSucceedCallback;$/;"	m	class:ndn::nfd::tests::CommandFixture	file:
commandSucceedHistory	tests/unit-tests/management/nfd-controller.t.cpp	/^  std::vector<CommandSucceedArgs> commandSucceedHistory;$/;"	m	class:ndn::nfd::tests::CommandFixture	file:
compare	src/name-component.cpp	/^Component::compare(const Component& other) const$/;"	f	class:ndn::name::Component
compare	src/name.cpp	/^Name::compare(size_t pos1, size_t count1, const Name& other, size_t pos2, size_t count2) const$/;"	f	class:ndn::Name
compare	src/name.hpp	/^  compare(const Name& other) const$/;"	f	class:ndn::Name
compare	src/security/sec-rule-relative.cpp	/^SecRuleRelative::compare(const Name& dataName, const Name& signerName)$/;"	f	class:ndn::SecRuleRelative
compareDynamicContainer	src/security/validator-config.hpp	/^  compareDynamicContainer(const DynamicTrustAnchorContainer& containerA,$/;"	f	class:ndn::ValidatorConfig
compareFieldSortOrder	src/lp/detail/field-info.hpp	/^compareFieldSortOrder(const FieldInfo& first, const FieldInfo& second)$/;"	f	namespace:ndn::lp::detail
comparePos	src/lp/packet.cpp	/^Packet::comparePos(const Block& first, const uint64_t second)$/;"	f	class:ndn::lp::Packet
compile	src/util/regex/regex-backref-matcher.hpp	/^RegexBackrefMatcher::compile()$/;"	f	class:ndn::RegexBackrefMatcher
compile	src/util/regex/regex-component-matcher.hpp	/^RegexComponentMatcher::compile()$/;"	f	class:ndn::RegexComponentMatcher
compile	src/util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::compile()$/;"	f	class:ndn::RegexComponentSetMatcher
compile	src/util/regex/regex-pattern-list-matcher.hpp	/^RegexPatternListMatcher::compile()$/;"	f	class:ndn::RegexPatternListMatcher
compile	src/util/regex/regex-pseudo-matcher.hpp	/^  compile()$/;"	f	class:ndn::RegexPseudoMatcher
compile	src/util/regex/regex-repeat-matcher.hpp	/^RegexRepeatMatcher::compile()$/;"	f	class:ndn::RegexRepeatMatcher
compile	src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::compile()$/;"	f	class:ndn::RegexTopMatcher
compileMultipleComponents	src/util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::compileMultipleComponents(size_t start, size_t lastIndex)$/;"	f	class:ndn::RegexComponentSetMatcher
compileSingleComponent	src/util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::compileSingleComponent()$/;"	f	class:ndn::RegexComponentSetMatcher
component_container	src/name.hpp	/^  typedef std::vector<Component>  component_container;$/;"	t	class:ndn::Name
computeDigest	src/security/public-key.cpp	/^PublicKey::computeDigest() const$/;"	f	class:ndn::PublicKey
computeDigest	src/util/digest.cpp	/^Digest<Hash>::computeDigest()$/;"	f	class:ndn::util::Digest
computeDigest	src/util/digest.cpp	/^Digest<Hash>::computeDigest(const uint8_t* buffer, size_t size)$/;"	f	class:ndn::util::Digest
concatenate	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^  concatenate()$/;"	f	class:ndn::mgmt::tests::StatusDatasetContextFixture
conf	src/security/conf/checker.hpp	/^namespace conf {$/;"	n	namespace:ndn::security
conf	src/security/conf/common.hpp	/^namespace conf {$/;"	n	namespace:ndn::security
conf	src/security/conf/filter.hpp	/^namespace conf {$/;"	n	namespace:ndn::security
conf	src/security/conf/key-locator-checker.hpp	/^namespace conf {$/;"	n	namespace:ndn::security
conf	src/security/conf/rule.hpp	/^namespace conf {$/;"	n	namespace:ndn::security
conf	tests/unit-tests/security/conf/checker.t.cpp	/^namespace conf {$/;"	n	namespace:ndn::security	file:
connect	src/transport/stream-transport.hpp	/^  connect(const typename Protocol::endpoint& endpoint)$/;"	f	class:ndn::StreamTransportImpl
connect	src/transport/stream-transport.hpp	/^  connect(const typename Protocol::resolver::query& query)$/;"	f	class:ndn::StreamTransportWithResolverImpl
connect	src/transport/tcp-transport.cpp	/^TcpTransport::connect(boost::asio::io_service& ioService,$/;"	f	class:ndn::TcpTransport
connect	src/transport/transport.hpp	/^Transport::connect(boost::asio::io_service& ioService,$/;"	f	class:ndn::Transport
connect	src/transport/unix-transport.cpp	/^UnixTransport::connect(boost::asio::io_service& ioService,$/;"	f	class:ndn::UnixTransport
connect	src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::connect(const Handler& handler)$/;"	f	class:ndn::util::signal::Signal
connectHandler	src/transport/stream-transport.hpp	/^  connectHandler(const boost::system::error_code& error)$/;"	f	class:ndn::StreamTransportImpl
connectSingleShot	src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::connectSingleShot(const Handler& handler)$/;"	f	class:ndn::util::signal::Signal
connectTimeoutHandler	src/transport/stream-transport.hpp	/^  connectTimeoutHandler(const boost::system::error_code& error)$/;"	f	class:ndn::StreamTransportImpl
const_iterator	src/encoding/encoder.hpp	/^  typedef Buffer::const_iterator const_iterator;$/;"	t	class:ndn::encoding::Encoder
const_iterator	src/exclude.hpp	/^  typedef exclude_type::const_iterator const_iterator;$/;"	t	class:ndn::Exclude
const_iterator	src/name.hpp	/^  typedef const Component*        const_iterator;$/;"	t	class:ndn::Name
const_iterator	src/security/additional-description.hpp	/^  typedef std::map<std::string, std::string>::const_iterator const_iterator;$/;"	t	class:ndn::security::AdditionalDescription
const_iterator	src/security/certificate-container.cpp	/^CertificateContainer::const_iterator::const_iterator(std::set<Name>::const_iterator it,$/;"	f	class:ndn::security::CertificateContainer::const_iterator
const_iterator	src/security/certificate-container.hpp	/^  class const_iterator$/;"	c	class:ndn::security::CertificateContainer
const_iterator	src/security/identity-container.cpp	/^IdentityContainer::const_iterator::const_iterator(std::set<Name>::const_iterator it,$/;"	f	class:ndn::security::IdentityContainer::const_iterator
const_iterator	src/security/identity-container.hpp	/^  class const_iterator$/;"	c	class:ndn::security::IdentityContainer
const_iterator	src/security/key-container.cpp	/^KeyContainer::const_iterator::const_iterator(const Name& identity,$/;"	f	class:ndn::security::KeyContainer::const_iterator
const_iterator	src/security/key-container.hpp	/^  class const_iterator$/;"	c	class:ndn::security::KeyContainer
const_iterator	src/util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::const_iterator(const Data* ptr, const Cache* cache,$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
const_iterator	src/util/in-memory-storage.hpp	/^  class const_iterator : public std::iterator<std::input_iterator_tag, const Data>$/;"	c	class:ndn::util::InMemoryStorage
const_pointer	src/name.hpp	/^  typedef const Component*        const_pointer;$/;"	t	class:ndn::Name
const_reference	src/name.hpp	/^  typedef const Component         const_reference;$/;"	t	class:ndn::Name
const_reverse_iterator	src/exclude.hpp	/^  typedef exclude_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:ndn::Exclude
const_reverse_iterator	src/name.hpp	/^  typedef boost::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:ndn::Name
construct	src/encoding/oid.cpp	/^OID::construct(const std::string& oid)$/;"	f	class:ndn::OID
construct	src/face.cpp	/^Face::construct(KeyChain& keyChain)$/;"	f	class:ndn::Face
construct	src/face.cpp	/^Face::construct(shared_ptr<Transport> transport, KeyChain& keyChain)$/;"	f	class:ndn::Face
construct	src/name.cpp	/^Name::construct(const char* uriOrig)$/;"	f	class:ndn::Name
construct	src/util/dummy-client-face.cpp	/^DummyClientFace::construct(const Options& options)$/;"	f	class:ndn::util::DummyClientFace
contentBlock	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^  Block contentBlock;$/;"	m	class:ndn::mgmt::tests::StatusDatasetContextFixture	file:
context	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^  mgmt::StatusDatasetContext context;$/;"	m	class:ndn::mgmt::tests::StatusDatasetContextFixture	file:
controller	tests/unit-tests/management/nfd-controller.t.cpp	/^  Controller controller;$/;"	m	class:ndn::nfd::tests::CommandFixture	file:
convertSpecialChar	src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::convertSpecialChar(const std::string& str)$/;"	f	class:ndn::RegexTopMatcher
copyright	docs/conf.py	/^copyright = u'Copyright (c) 2013-2015 Regents of the University of California.'$/;"	v
count	src/lp/packet.hpp	/^  count() const$/;"	f	class:ndn::lp::Packet
count	tests/unit-tests/util/scheduler.t.cpp	/^  size_t count;$/;"	m	class:ndn::util::scheduler::tests::SelfRescheduleFixture	file:
count	tests/unit-tests/util/scheduler.t.cpp	/^  uint32_t count;$/;"	m	struct:ndn::util::scheduler::tests::CancelAllFixture	file:
countDelegationsFromWire	src/link.cpp	/^Link::countDelegationsFromWire(const Block& block)$/;"	f	class:ndn::Link
create	src/security/conf/checker.hpp	/^  create(const ConfigSection& configSection, const std::string& configFilename)$/;"	f	class:ndn::security::conf::CheckerFactory
create	src/security/conf/filter.hpp	/^  create(const ConfigSection& configSection)$/;"	f	class:ndn::security::conf::FilterFactory
create	src/security/conf/key-locator-checker.hpp	/^  create(const ConfigSection& configSection, const std::string& filename)$/;"	f	class:ndn::security::conf::KeyLocatorCheckerFactory
create	src/security/key-chain.cpp	/^  T create;$/;"	m	struct:ndn::security::Factory	file:
create	src/transport/tcp-transport.cpp	/^TcpTransport::create(const ConfigFile& config)$/;"	f	class:ndn::TcpTransport
create	src/transport/unix-transport.cpp	/^UnixTransport::create(const ConfigFile& config)$/;"	f	class:ndn::UnixTransport
createCustomizedChecker	src/security/conf/checker.hpp	/^  createCustomizedChecker(const ConfigSection& configSection,$/;"	f	class:ndn::security::conf::CheckerFactory
createFixedSignerChecker	src/security/conf/checker.hpp	/^  createFixedSignerChecker(const ConfigSection& configSection,$/;"	f	class:ndn::security::conf::CheckerFactory
createHierarchicalChecker	src/security/conf/checker.hpp	/^  createHierarchicalChecker(const ConfigSection& configSection,$/;"	f	class:ndn::security::conf::CheckerFactory
createIdentity	src/security/key-chain.cpp	/^KeyChain::createIdentity(const Name& identityName, const KeyParams& params)$/;"	f	class:ndn::security::KeyChain
createKeyLocatorNameChecker	src/security/conf/key-locator-checker.hpp	/^  createKeyLocatorNameChecker(const ConfigSection& configSection,$/;"	f	class:ndn::security::conf::KeyLocatorCheckerFactory
createNameFilter	src/security/conf/filter.hpp	/^  createNameFilter(const ConfigSection& configSection)$/;"	f	class:ndn::security::conf::FilterFactory
createPib	src/security/key-chain.cpp	/^KeyChain::createPib(const std::string& pibLocator)$/;"	f	class:ndn::security::KeyChain
createTpm	src/security/key-chain.cpp	/^KeyChain::createTpm(const std::string& tpmLocator)$/;"	f	class:ndn::security::KeyChain
crypto	src/util/crypto.cpp	/^namespace crypto {$/;"	n	namespace:ndn	file:
crypto	src/util/crypto.hpp	/^namespace crypto {$/;"	n	namespace:ndn
cwd	waf	/^cwd = os.getcwd()$/;"	v
cxxprogram_PATTERN	build/c4che/_cache.py	/^cxxprogram_PATTERN = '%s'$/;"	v
cxxshlib_PATTERN	build/c4che/_cache.py	/^cxxshlib_PATTERN = 'lib%s.so'$/;"	v
cxxstlib_PATTERN	build/c4che/_cache.py	/^cxxstlib_PATTERN = 'lib%s.a'$/;"	v
dataBlock	src/encoding/block-helpers.hpp	/^dataBlock(uint32_t type, Iterator first, Iterator last)$/;"	f	namespace:ndn::encoding
dataBlock	src/encoding/block-helpers.hpp	/^dataBlock(uint32_t type, const char* data, size_t dataSize)$/;"	f	namespace:ndn::encoding
dataBlock	src/encoding/block-helpers.hpp	/^dataBlock(uint32_t type, const uint8_t* data, size_t dataSize)$/;"	f	namespace:ndn::encoding
dataCheckFailed	tests/unit-tests/security/conf/checker.t.cpp	/^dataCheckFailed(const shared_ptr<const Data>& interest,$/;"	f	namespace:ndn::security::conf::tests
dataCheckFailedFalse	tests/unit-tests/security/conf/checker.t.cpp	/^dataCheckFailedFalse(const shared_ptr<const Data>& interest,$/;"	f	namespace:ndn::security::conf::tests
dataChecked	tests/unit-tests/security/conf/checker.t.cpp	/^dataChecked(const shared_ptr<const Data>& interest)$/;"	f	namespace:ndn::security::conf::tests
dataCheckedFalse	tests/unit-tests/security/conf/checker.t.cpp	/^dataCheckedFalse(const shared_ptr<const Data>& interest)$/;"	f	namespace:ndn::security::conf::tests
dataSize	tests/unit-tests/util/segment-fetcher.t.cpp	/^  size_t dataSize;$/;"	m	class:ndn::util::tests::Fixture	file:
dataset	tests/unit-tests/name.t.cpp	/^  Dataset dataset;$/;"	m	class:ndn::tests::Numeric	file:
dataset	tests/unit-tests/name.t.cpp	/^  Dataset dataset;$/;"	m	class:ndn::tests::Timestamp	file:
days	src/util/time.hpp	/^typedef duration<boost::int_least32_t, boost::ratio<86400> > days;$/;"	t	namespace:ndn::time
db	tests/unit-tests/util/sqlite3-statement.t.cpp	/^  sqlite3* db;$/;"	m	class:ndn::util::tests::Sqlite3StatementTestFixture	file:
decode	src/encoding/oid.cpp	/^OID::decode(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::OID
decode	src/lp/detail/field-decl.hpp	/^  decode(const Block& wire)$/;"	f	class:ndn::lp::detail::FieldDecl
decode	src/lp/detail/field-decl.hpp	/^  decode(const Block& wire)$/;"	f	struct:ndn::lp::detail::DecodeHelper
decode	src/security/certificate-extension.cpp	/^CertificateExtension::decode(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::CertificateExtension
decode	src/security/certificate-subject-description.cpp	/^CertificateSubjectDescription::decode(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::CertificateSubjectDescription
decode	src/security/certificate.cpp	/^Certificate::decode()$/;"	f	class:ndn::Certificate
decode	src/security/public-key.cpp	/^PublicKey::decode(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::PublicKey
decodeContent	src/link.cpp	/^Link::decodeContent()$/;"	f	class:ndn::Link
decodeValue	src/encoding/oid.cpp	/^decodeValue(CryptoPP::BufferedTransformation& bt, CryptoPP::word32& v)$/;"	f	namespace:ndn
decryptInTpm	src/security/key-chain.hpp	/^  decryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName, bool isSymmetric)$/;"	f	class:ndn::security::KeyChain
decryptInTpm	src/security/sec-tpm-file.cpp	/^SecTpmFile::decryptInTpm(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::SecTpmFile
decryptInTpm	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::decryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName, bool sym)$/;"	f	class:ndn::SecTpmOsx
decryptInTpm	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::decryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName,$/;"	f	class:ndn::security::DummyTpm
defaultCertificate	src/security/sec-public-info.cpp	/^SecPublicInfo::defaultCertificate()$/;"	f	class:ndn::SecPublicInfo
define_key	build/c4che/_cache.py	/^define_key = []$/;"	v
delayedInterest	examples/consumer-with-timer.cpp	/^  delayedInterest()$/;"	f	class:ndn::examples::ConsumerWithTimer	file:
deleteCertificate	src/security/key-chain.cpp	/^KeyChain::deleteCertificate(const Name& certificateName)$/;"	f	class:ndn::security::KeyChain
deleteCertificateInfo	src/security/key-chain.hpp	/^  deleteCertificateInfo(const Name& certificateName)$/;"	f	class:ndn::security::KeyChain
deleteCertificateInfo	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::deleteCertificateInfo(const Name& certName)$/;"	f	class:ndn::SecPublicInfoSqlite3
deleteCertificateInfo	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::deleteCertificateInfo(const Name& certificateName)$/;"	f	class:ndn::security::DummyPublicInfo
deleteIdentity	src/security/key-chain.cpp	/^KeyChain::deleteIdentity(const Name& identity)$/;"	f	class:ndn::security::KeyChain
deleteIdentityInfo	src/security/key-chain.hpp	/^  deleteIdentityInfo(const Name& identity)$/;"	f	class:ndn::security::KeyChain
deleteIdentityInfo	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::deleteIdentityInfo(const Name& identityName)$/;"	f	class:ndn::SecPublicInfoSqlite3
deleteIdentityInfo	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::deleteIdentityInfo(const Name& identity)$/;"	f	class:ndn::security::DummyPublicInfo
deleteKey	src/security/key-chain.cpp	/^KeyChain::deleteKey(const Name& keyName)$/;"	f	class:ndn::security::KeyChain
deleteKeyPairInTpm	src/security/key-chain.hpp	/^  deleteKeyPairInTpm(const Name& keyName)$/;"	f	class:ndn::security::KeyChain
deleteKeyPairInTpm	src/security/sec-tpm-file.cpp	/^SecTpmFile::deleteKeyPairInTpm(const Name& keyName)$/;"	f	class:ndn::SecTpmFile
deleteKeyPairInTpm	src/security/sec-tpm-osx.hpp	/^  deleteKeyPairInTpm(const Name& keyName)$/;"	f	class:ndn::SecTpmOsx
deleteKeyPairInTpm	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::deleteKeyPairInTpm(const Name& keyName)$/;"	f	class:ndn::security::DummyTpm
deleteKeyPairInTpmInternal	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::deleteKeyPairInTpmInternal(const Name& keyName, bool needRetry)$/;"	f	class:ndn::SecTpmOsx
deletePublicKeyInfo	src/security/key-chain.hpp	/^  deletePublicKeyInfo(const Name& keyName)$/;"	f	class:ndn::security::KeyChain
deletePublicKeyInfo	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::deletePublicKeyInfo(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
deletePublicKeyInfo	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::deletePublicKeyInfo(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
deleteTable	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::deleteTable(const string& tableName)$/;"	f	class:ndn::SecPublicInfoSqlite3
deliverNotification	tests/unit-tests/util/notification-subscriber.t.cpp	/^  deliverNotification(const std::string& msg)$/;"	f	class:ndn::util::tests::EndToEndFixture
description	tests/unit-tests/security/additional-info.t.cpp	/^static const uint8_t description[] = {$/;"	m	namespace:ndn::security::tests	file:
detail	src/lp/detail/field-decl.hpp	/^namespace detail {$/;"	n	namespace:ndn::lp
detail	src/lp/detail/field-info.cpp	/^namespace detail {$/;"	n	namespace:ndn::lp	file:
detail	src/lp/detail/field-info.hpp	/^namespace detail {$/;"	n	namespace:ndn::lp
detect	tests/unit-tests/network-configuration-detector.cpp	/^NetworkConfigurationDetector::detect()$/;"	f	class:ndn::tests::NetworkConfigurationDetector
difference_type	src/name.hpp	/^  typedef component_container::difference_type difference_type;$/;"	t	class:ndn::Name
disconnect	src/util/signal-connection.cpp	/^Connection::disconnect()$/;"	f	class:ndn::util::signal::Connection
disconnect	src/util/signal-scoped-connection.cpp	/^ScopedConnection::disconnect()$/;"	f	class:ndn::util::signal::ScopedConnection
disconnect	src/util/signal-signal.hpp	/^    shared_ptr<function<void()>> disconnect;$/;"	m	struct:ndn::util::signal::Signal::Slot
disconnect	src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::disconnect(typename SlotList::iterator it)$/;"	f	class:ndn::util::signal::Signal
dispatcher	tests/unit-tests/mgmt/dispatcher.t.cpp	/^  mgmt::Dispatcher dispatcher;$/;"	m	class:ndn::mgmt::tests::DispatcherFixture	file:
dns	src/util/dns.cpp	/^namespace dns {$/;"	n	namespace:ndn	file:
dns	src/util/dns.hpp	/^namespace dns {$/;"	n	namespace:ndn
doesCertificateExist	src/security/key-chain.hpp	/^  doesCertificateExist(const Name& certificateName) const$/;"	f	class:ndn::security::KeyChain
doesCertificateExist	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::doesCertificateExist(const Name& certificateName)$/;"	f	class:ndn::SecPublicInfoSqlite3
doesCertificateExist	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::doesCertificateExist(const Name& certificateName)$/;"	f	class:ndn::security::DummyPublicInfo
doesIdentityExist	src/security/key-chain.hpp	/^  doesIdentityExist(const Name& identityName) const$/;"	f	class:ndn::security::KeyChain
doesIdentityExist	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::doesIdentityExist(const Name& identityName)$/;"	f	class:ndn::SecPublicInfoSqlite3
doesIdentityExist	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::doesIdentityExist(const Name& identityName)$/;"	f	class:ndn::security::DummyPublicInfo
doesKeyExistInTpm	src/security/key-chain.hpp	/^  doesKeyExistInTpm(const Name& keyName, KeyClass keyClass) const$/;"	f	class:ndn::security::KeyChain
doesKeyExistInTpm	src/security/sec-tpm-file.cpp	/^SecTpmFile::doesKeyExistInTpm(const Name& keyName, KeyClass keyClass)$/;"	f	class:ndn::SecTpmFile
doesKeyExistInTpm	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::doesKeyExistInTpm(const Name& keyName, KeyClass keyClass)$/;"	f	class:ndn::SecTpmOsx
doesKeyExistInTpm	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::doesKeyExistInTpm(const Name& keyName, KeyClass keyClass)$/;"	f	class:ndn::security::DummyTpm
doesMatch	src/detail/interest-filter-record.hpp	/^  doesMatch(const Name& name) const$/;"	f	class:ndn::InterestFilterRecord
doesMatch	src/interest-filter.cpp	/^InterestFilter::doesMatch(const Name& name) const$/;"	f	class:ndn::InterestFilter
doesPublicKeyExist	src/security/key-chain.hpp	/^  doesPublicKeyExist(const Name& keyName) const$/;"	f	class:ndn::security::KeyChain
doesPublicKeyExist	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::doesPublicKeyExist(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
doesPublicKeyExist	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::doesPublicKeyExist(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
doesTableExist	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::doesTableExist(const string& tableName)$/;"	f	class:ndn::SecPublicInfoSqlite3
doxylink	docs/conf.py	/^doxylink = {$/;"	v
duration	src/util/time.hpp	/^  typedef BOOST_SYSTEM_CLOCK_DURATION      duration;$/;"	t	class:ndn::time::system_clock
duration	src/util/time.hpp	/^  typedef nanoseconds      duration;$/;"	t	class:ndn::time::steady_clock
duration_type	src/util/monotonic_deadline_timer.hpp	/^  typedef ndn::time::steady_clock::Duration  duration_type;$/;"	t	struct:boost::asio::time_traits
ecdsaSigInfo	tests/unit-tests/security/validator.t.cpp	/^const uint8_t ecdsaSigInfo[] = {$/;"	m	namespace:ndn::tests	file:
ecdsaSigValue	tests/unit-tests/security/validator.t.cpp	/^const uint8_t ecdsaSigValue[] = {$/;"	m	namespace:ndn::tests	file:
element_const_iterator	src/encoding/block.hpp	/^  typedef element_container::const_iterator  element_const_iterator;$/;"	t	class:ndn::Block
element_container	src/encoding/block.hpp	/^  typedef std::vector<Block>                 element_container;$/;"	t	class:ndn::Block
element_iterator	src/encoding/block.hpp	/^  typedef element_container::iterator        element_iterator;$/;"	t	class:ndn::Block
elements	src/encoding/block.hpp	/^Block::elements() const$/;"	f	class:ndn::Block
elements_begin	src/encoding/block.cpp	/^Block::elements_begin() const$/;"	f	class:ndn::Block
elements_end	src/encoding/block.cpp	/^Block::elements_end() const$/;"	f	class:ndn::Block
elements_size	src/encoding/block.cpp	/^Block::elements_size() const$/;"	f	class:ndn::Block
emitSignal	src/util/signal-emit.hpp	76;"	d
emitTestSignal	tests/unit-tests/util/signal.t.cpp	/^  emitTestSignal()$/;"	f	class:ndn::util::signal::tests::SignalEmitter1
empty	src/detail/container-with-on-empty-signal.hpp	/^  empty()$/;"	f	class:ndn::ContainerWithOnEmptySignal
empty	src/encoding/block.cpp	/^Block::empty() const$/;"	f	class:ndn::Block
empty	src/exclude.hpp	/^Exclude::empty() const$/;"	f	class:ndn::Exclude
empty	src/key-locator.hpp	/^  empty() const$/;"	f	class:ndn::KeyLocator
empty	src/management/nfd-local-control-header.hpp	/^  empty(uint8_t encodeMask) const$/;"	f	class:ndn::nfd::LocalControlHeader
empty	src/name-component.hpp	/^  empty() const$/;"	f	class:ndn::name::Component
empty	src/name.hpp	/^  empty() const$/;"	f	class:ndn::Name
empty	src/selectors.cpp	/^Selectors::empty() const$/;"	f	class:ndn::Selectors
empty	src/util/digest.hpp	/^  empty() const$/;"	f	class:ndn::util::Digest
enableOutput	tools/ndncatchunks3.cpp	/^  enableOutput()$/;"	f	class:ndn::Consumer
enablePacketLogging	src/util/dummy-client-face.cpp	/^DummyClientFace::enablePacketLogging()$/;"	f	class:ndn::util::DummyClientFace
enablePacketLogging	src/util/dummy-client-face.hpp	/^    bool enablePacketLogging;$/;"	m	struct:ndn::util::DummyClientFace::Options
enableRegistrationReply	src/util/dummy-client-face.cpp	/^DummyClientFace::enableRegistrationReply()$/;"	f	class:ndn::util::DummyClientFace
enableRegistrationReply	src/util/dummy-client-face.hpp	/^    bool enableRegistrationReply;$/;"	m	struct:ndn::util::DummyClientFace::Options
enable_shared	build/c4che/_cache.py	/^enable_shared = True$/;"	v
enable_static	build/c4che/_cache.py	/^enable_static = True$/;"	v
encode	src/encoding/block.cpp	/^Block::encode()$/;"	f	class:ndn::Block
encode	src/encoding/oid.cpp	/^OID::encode(CryptoPP::BufferedTransformation& out) const$/;"	f	class:ndn::OID
encode	src/lp/detail/field-decl.hpp	/^  encode(EncodingImpl<TAG>& encoder, const T& value)$/;"	f	class:ndn::lp::detail::FieldDecl
encode	src/lp/detail/field-decl.hpp	/^  encode(EncodingImpl<TAG>& encoder, const T& value)$/;"	f	struct:ndn::lp::detail::EncodeHelper
encode	src/lp/detail/field-decl.hpp	/^  encode(EncodingImpl<TAG>& encoder, const std::pair<Buffer::const_iterator, Buffer::const_iterator>& value)$/;"	f	struct:ndn::lp::detail::EncodeHelper
encode	src/lp/detail/field-decl.hpp	/^  encode(EncodingImpl<TAG>& encoder, const uint64_t value)$/;"	f	struct:ndn::lp::detail::EncodeHelper
encode	src/security/certificate-extension.cpp	/^CertificateExtension::encode(CryptoPP::BufferedTransformation& out) const$/;"	f	class:ndn::CertificateExtension
encode	src/security/certificate-subject-description.cpp	/^CertificateSubjectDescription::encode(CryptoPP::BufferedTransformation& out) const$/;"	f	class:ndn::CertificateSubjectDescription
encode	src/security/certificate.cpp	/^Certificate::encode()$/;"	f	class:ndn::Certificate
encode	src/security/public-key.cpp	/^PublicKey::encode(CryptoPP::BufferedTransformation& out) const$/;"	f	class:ndn::PublicKey
encodeContent	src/link.cpp	/^Link::encodeContent()$/;"	f	class:ndn::Link
encodeContent	src/link.cpp	/^Link::encodeContent(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::Link
encodeValue	src/encoding/oid.cpp	/^encodeValue(CryptoPP::BufferedTransformation& bt, CryptoPP::word32 v)$/;"	f	namespace:ndn
encoding	src/encoding/block-helpers.cpp	/^namespace encoding {$/;"	n	namespace:ndn	file:
encoding	src/encoding/block-helpers.hpp	/^namespace encoding {$/;"	n	namespace:ndn
encoding	src/encoding/encoder.cpp	/^namespace encoding {$/;"	n	namespace:ndn	file:
encoding	src/encoding/encoder.hpp	/^namespace encoding {$/;"	n	namespace:ndn
encoding	src/encoding/encoding-buffer-fwd.hpp	/^namespace encoding {$/;"	n	namespace:ndn
encoding	src/encoding/encoding-buffer.hpp	/^namespace encoding {$/;"	n	namespace:ndn
encoding	src/encoding/estimator.cpp	/^namespace encoding {$/;"	n	namespace:ndn	file:
encoding	src/encoding/estimator.hpp	/^namespace encoding {$/;"	n	namespace:ndn
encoding	tests/unit-tests/encoding/block-helpers.t.cpp	/^namespace encoding {$/;"	n	namespace:ndn	file:
encoding	tests/unit-tests/encoding/encoder.t.cpp	/^namespace encoding {$/;"	n	namespace:ndn	file:
encoding	tests/unit-tests/encoding/estimator.t.cpp	/^namespace encoding {$/;"	n	namespace:ndn	file:
encryptInTpm	src/security/key-chain.hpp	/^  encryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName, bool isSymmetric)$/;"	f	class:ndn::security::KeyChain
encryptInTpm	src/security/sec-tpm-file.cpp	/^SecTpmFile::encryptInTpm(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::SecTpmFile
encryptInTpm	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::encryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName, bool sym)$/;"	f	class:ndn::SecTpmOsx
encryptInTpm	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::encryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName,$/;"	f	class:ndn::security::DummyTpm
end	src/detail/container-with-on-empty-signal.hpp	/^  end()$/;"	f	class:ndn::ContainerWithOnEmptySignal
end	src/encoding/block.cpp	/^Block::end() const$/;"	f	class:ndn::Block
end	src/encoding/encoder.hpp	/^Encoder::end() const$/;"	f	class:ndn::encoding::Encoder
end	src/encoding/encoder.hpp	/^Encoder::end()$/;"	f	class:ndn::encoding::Encoder
end	src/exclude.hpp	/^Exclude::end() const$/;"	f	class:ndn::Exclude
end	src/management/nfd-rib-entry.hpp	/^RibEntry::end() const$/;"	f	class:ndn::nfd::RibEntry
end	src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::end()$/;"	f	class:ndn::mgmt::StatusDatasetContext
end	src/name.hpp	/^  end() const$/;"	f	class:ndn::Name
end	src/security/additional-description.cpp	/^AdditionalDescription::end() const$/;"	f	class:ndn::security::AdditionalDescription
end	src/security/additional-description.cpp	/^AdditionalDescription::end()$/;"	f	class:ndn::security::AdditionalDescription
end	src/security/certificate-container.cpp	/^CertificateContainer::end() const$/;"	f	class:ndn::security::CertificateContainer
end	src/security/identity-container.cpp	/^IdentityContainer::end() const$/;"	f	class:ndn::security::IdentityContainer
end	src/security/key-container.cpp	/^KeyContainer::end() const$/;"	f	class:ndn::security::KeyContainer
end	src/util/in-memory-storage.cpp	/^InMemoryStorage::end() const$/;"	f	class:ndn::util::InMemoryStorage
ensureConnected	src/detail/face-impl.hpp	/^  ensureConnected(bool wantResume)$/;"	f	class:ndn::Face::Impl
entry	src/util/in-memory-storage-lfu.hpp	/^    InMemoryStorageEntry* entry;$/;"	m	struct:ndn::util::InMemoryStorageLfu::CleanupEntry
equal	src/encoding/oid.cpp	/^OID::equal(const OID& oid) const$/;"	f	class:ndn::OID
equals	src/name-component.hpp	/^  equals(const Component& other) const$/;"	f	class:ndn::name::Component
equals	src/name.cpp	/^Name::equals(const Name& name) const$/;"	f	class:ndn::Name
erase	src/detail/container-with-on-empty-signal.hpp	/^  erase(iterator item)$/;"	f	class:ndn::ContainerWithOnEmptySignal
erase	src/encoding/block.cpp	/^Block::erase(Block::element_const_iterator first, Block::element_const_iterator last)$/;"	f	class:ndn::Block
erase	src/encoding/block.cpp	/^Block::erase(Block::element_const_iterator position)$/;"	f	class:ndn::Block
erase	src/util/in-memory-storage.cpp	/^InMemoryStorage::erase(const Name& prefix, const bool isPrefix)$/;"	f	class:ndn::util::InMemoryStorage
eraseImpl	src/util/in-memory-storage.cpp	/^InMemoryStorage::eraseImpl(const Name& name)$/;"	f	class:ndn::util::InMemoryStorage
err	waf	/^def err(m):$/;"	f
estimator	tests/unit-tests/encoding/block.t.cpp	/^  EncodingEstimator estimator;$/;"	m	class:ndn::tests::BasicBlockFixture	file:
ethernet	src/util/ethernet.cpp	/^namespace ethernet {$/;"	n	namespace:ndn::util	file:
ethernet	src/util/ethernet.hpp	/^namespace ethernet {$/;"	n	namespace:ndn::util
event	tests/unit-tests/util/scheduler.t.cpp	/^  event()$/;"	f	struct:ndn::util::scheduler::tests::CancelAllFixture
evictItem	src/util/in-memory-storage-fifo.cpp	/^InMemoryStorageFifo::evictItem()$/;"	f	class:ndn::util::InMemoryStorageFifo
evictItem	src/util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::evictItem()$/;"	f	class:ndn::util::InMemoryStorageLfu
evictItem	src/util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::evictItem()$/;"	f	class:ndn::util::InMemoryStorageLru
evictItem	src/util/in-memory-storage-persistent.cpp	/^InMemoryStoragePersistent::evictItem()$/;"	f	class:ndn::util::InMemoryStoragePersistent
examples	examples/consumer-with-timer.cpp	/^namespace examples {$/;"	n	namespace:ndn	file:
examples	examples/consumer.cpp	/^namespace examples {$/;"	n	namespace:ndn	file:
examples	examples/producer.cpp	/^namespace examples {$/;"	n	namespace:ndn	file:
excludeAfter	src/exclude.cpp	/^Exclude::excludeAfter(const name::Component& from)$/;"	f	class:ndn::Exclude
excludeBefore	src/exclude.hpp	/^Exclude::excludeBefore(const name::Component& to)$/;"	f	class:ndn::Exclude
excludeOne	src/exclude.cpp	/^Exclude::excludeOne(const name::Component& comp)$/;"	f	class:ndn::Exclude
excludeRange	src/exclude.cpp	/^Exclude::excludeRange(const name::Component& from, const name::Component& to)$/;"	f	class:ndn::Exclude
exclude_patterns	docs/conf.py	/^exclude_patterns = []$/;"	v
exclude_type	src/exclude.hpp	/^  typedef std::map< name::Component, bool \/*any*\/, std::greater<name::Component> > exclude_type;$/;"	t	class:ndn::Exclude
expand	src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::expand(const std::string& expandStr)$/;"	f	class:ndn::RegexTopMatcher
expiresFromNow	src/util/scheduler.cpp	/^Scheduler::EventInfo::expiresFromNow() const$/;"	f	class:ndn::util::scheduler::Scheduler::EventInfo
exportIdentity	src/security/key-chain.cpp	/^KeyChain::exportIdentity(const Name& identity, const std::string& passwordStr)$/;"	f	class:ndn::security::KeyChain
exportPrivateKeyPkcs5FromTpm	src/security/key-chain.hpp	/^  exportPrivateKeyPkcs5FromTpm(const Name& keyName, const std::string& password)$/;"	f	class:ndn::security::KeyChain
exportPrivateKeyPkcs5FromTpm	src/security/sec-tpm.cpp	/^SecTpm::exportPrivateKeyPkcs5FromTpm(const Name& keyName, const string& passwordStr)$/;"	f	class:ndn::SecTpm
exportPrivateKeyPkcs8FromTpm	src/security/sec-tpm-file.cpp	/^SecTpmFile::exportPrivateKeyPkcs8FromTpm(const Name& keyName)$/;"	f	class:ndn::SecTpmFile
exportPrivateKeyPkcs8FromTpm	src/security/sec-tpm-osx.hpp	/^  exportPrivateKeyPkcs8FromTpm(const Name& keyName)$/;"	f	class:ndn::SecTpmOsx
exportPrivateKeyPkcs8FromTpm	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::exportPrivateKeyPkcs8FromTpm(const Name& keyName)$/;"	f	class:ndn::security::DummyTpm
exportPrivateKeyPkcs8FromTpmInternal	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::exportPrivateKeyPkcs8FromTpmInternal(const Name& keyName, bool needRetry)$/;"	f	class:ndn::SecTpmOsx
expressInterest	src/face.cpp	/^Face::expressInterest(const Interest& interest,$/;"	f	class:ndn::Face
expressInterest	src/face.cpp	/^Face::expressInterest(const Name& name,$/;"	f	class:ndn::Face
expressInterest	tests/integrated/face.cpp	/^  expressInterest(Face& face, const Name& name)$/;"	f	class:ndn::tests::FacesFixture
extensions	docs/conf.py	/^extensions = [$/;"	v
extractComponent	src/util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::extractComponent(size_t index)$/;"	f	class:ndn::RegexComponentSetMatcher
extractLpLocalFields	src/face.cpp	/^extractLpLocalFields(NETPKT& netPacket, const lp::Packet& lpPacket)$/;"	f	namespace:ndn
extractPattern	src/util/regex/regex-pattern-list-matcher.hpp	/^RegexPatternListMatcher::extractPattern(size_t index, size_t* next)$/;"	f	class:ndn::RegexPatternListMatcher
extractRepetition	src/util/regex/regex-pattern-list-matcher.hpp	/^RegexPatternListMatcher::extractRepetition(size_t index)$/;"	f	class:ndn::RegexPatternListMatcher
extractSubPattern	src/util/regex/regex-pattern-list-matcher.hpp	/^RegexPatternListMatcher::extractSubPattern(const char left, const char right, size_t index)$/;"	f	class:ndn::RegexPatternListMatcher
face	tests/unit-tests/face.t.cpp	/^  shared_ptr<DummyClientFace> face;$/;"	m	class:ndn::tests::FaceFixture	file:
face	tests/unit-tests/management/nfd-controller.t.cpp	/^  shared_ptr<DummyClientFace> face;$/;"	m	class:ndn::nfd::tests::CommandFixture	file:
face	tests/unit-tests/mgmt/dispatcher.t.cpp	/^  shared_ptr<util::DummyClientFace> face;$/;"	m	class:ndn::mgmt::tests::DispatcherFixture	file:
face	tests/unit-tests/security/validator-config.t.cpp	/^  shared_ptr<util::DummyClientFace> face;$/;"	m	struct:ndn::tests::DirTestFixture	file:
face	tests/unit-tests/util/segment-fetcher.t.cpp	/^  shared_ptr<DummyClientFace> face;$/;"	m	class:ndn::util::tests::Fixture	file:
face1	tests/unit-tests/security/validator-config.t.cpp	/^  shared_ptr<util::DummyClientFace> face1;$/;"	m	struct:ndn::tests::FacesFixture	file:
face2	tests/unit-tests/security/validator-config.t.cpp	/^  shared_ptr<util::DummyClientFace> face2;$/;"	m	struct:ndn::tests::FacesFixture	file:
failValidation	tests/unit-tests/util/segment-fetcher.t.cpp	/^failValidation(const Data& data)$/;"	f	namespace:ndn::util::tests
fetch	src/util/segment-fetcher.cpp	/^SegmentFetcher::fetch(Face& face,$/;"	f	class:ndn::util::SegmentFetcher
fetchFirstSegment	src/util/segment-fetcher.cpp	/^SegmentFetcher::fetchFirstSegment(const Interest& baseInterest,$/;"	f	class:ndn::util::SegmentFetcher
fetchNextSegment	src/util/segment-fetcher.cpp	/^SegmentFetcher::fetchNextSegment(const Interest& origInterest, const Name& dataName,$/;"	f	class:ndn::util::SegmentFetcher
field_location_tags	src/lp/field.hpp	/^namespace field_location_tags {$/;"	n	namespace:ndn::lp
finalize	src/util/digest.cpp	/^Digest<Hash>::finalize()$/;"	f	class:ndn::util::Digest
finalizeUnregisterPrefix	src/detail/face-impl.hpp	/^  finalizeUnregisterPrefix(RegisteredPrefixTable::iterator item,$/;"	f	class:ndn::Face::Impl
find	src/encoding/block.cpp	/^Block::find(uint32_t type) const$/;"	f	class:ndn::Block
find	src/security/certificate-container.cpp	/^CertificateContainer::find(const Name& certName) const$/;"	f	class:ndn::security::CertificateContainer
find	src/security/identity-container.cpp	/^IdentityContainer::find(const Name& identity) const$/;"	f	class:ndn::security::IdentityContainer
find	src/security/key-container.cpp	/^KeyContainer::find(const name::Component& keyId) const$/;"	f	class:ndn::security::KeyContainer
find	src/util/in-memory-storage.cpp	/^InMemoryStorage::find(const Interest& interest)$/;"	f	class:ndn::util::InMemoryStorage
find	src/util/in-memory-storage.cpp	/^InMemoryStorage::find(const Name& name)$/;"	f	class:ndn::util::InMemoryStorage
find	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^  find()$/;"	f	class:ndn::util::FindFixture
findAppMetaInfo	src/meta-info.cpp	/^MetaInfo::findAppMetaInfo(uint32_t tlvType) const$/;"	f	class:ndn::MetaInfo
findConfigFile	src/util/config-file.cpp	/^ConfigFile::findConfigFile()$/;"	f	class:ndn::ConfigFile
findDelegationFromWire	src/link.cpp	/^Link::findDelegationFromWire(const Block& block, const Name& delegationName)$/;"	f	class:ndn::Link
find_lib	waf	/^def find_lib():$/;"	f
firstCert	tests/unit-tests/security/validator-config.t.cpp	/^  shared_ptr<IdentityCertificate> firstCert;$/;"	m	struct:ndn::tests::DirTestFixture	file:
firstCertPath	tests/unit-tests/security/validator-config.t.cpp	/^  boost::filesystem::path firstCertPath;$/;"	m	struct:ndn::tests::DirTestFixture	file:
firstIdentity	tests/unit-tests/security/validator-config.t.cpp	/^  Name firstIdentity;$/;"	m	struct:ndn::tests::DirTestFixture	file:
freeEntry	src/util/in-memory-storage.cpp	/^InMemoryStorage::freeEntry(Cache::iterator it)$/;"	f	class:ndn::util::InMemoryStorage
frequency	src/util/in-memory-storage-lfu.hpp	/^    uint64_t frequency;\/\/could potentially be overflowed$/;"	m	struct:ndn::util::InMemoryStorageLfu::CleanupEntry
fromBuffer	src/encoding/block.cpp	/^Block::fromBuffer(ConstBufferPtr buffer, size_t offset)$/;"	f	class:ndn::Block
fromBuffer	src/encoding/block.cpp	/^Block::fromBuffer(const uint8_t* buffer, size_t maxSize)$/;"	f	class:ndn::Block
fromDev	src/util/face-uri.cpp	/^FaceUri::fromDev(const std::string& ifname)$/;"	f	class:ndn::util::FaceUri
fromEscapedString	src/name-component.cpp	/^Component::fromEscapedString(const char* escapedString, size_t beginOffset, size_t endOffset)$/;"	f	class:ndn::name::Component
fromEscapedString	src/name-component.hpp	/^  fromEscapedString(const char* escapedString)$/;"	f	class:ndn::name::Component
fromEscapedString	src/name-component.hpp	/^  fromEscapedString(const std::string& escapedString)$/;"	f	class:ndn::name::Component
fromFd	src/util/face-uri.cpp	/^FaceUri::fromFd(int fd)$/;"	f	class:ndn::util::FaceUri
fromHex	src/util/string-helper.cpp	/^fromHex(const std::string& hexString)$/;"	f	namespace:ndn
fromHexChar	src/util/string-helper.cpp	/^fromHexChar(uint8_t c)$/;"	f	namespace:ndn
fromImplicitSha256Digest	src/name-component.cpp	/^Component::fromImplicitSha256Digest(const ConstBufferPtr& digest)$/;"	f	class:ndn::name::Component
fromImplicitSha256Digest	src/name-component.cpp	/^Component::fromImplicitSha256Digest(const uint8_t* digest, size_t digestSize)$/;"	f	class:ndn::name::Component
fromIsoString	src/util/time.cpp	/^fromIsoString(const std::string& isoString)$/;"	f	namespace:ndn::time
fromName	src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::fromName(const Name& name, bool hasAnchor)$/;"	f	class:ndn::RegexTopMatcher
fromNumber	src/name-component.cpp	/^Component::fromNumber(uint64_t number)$/;"	f	class:ndn::name::Component
fromNumberWithMarker	src/name-component.cpp	/^Component::fromNumberWithMarker(uint8_t marker, uint64_t number)$/;"	f	class:ndn::name::Component
fromSegment	src/name-component.cpp	/^Component::fromSegment(uint64_t segmentNo)$/;"	f	class:ndn::name::Component
fromSegmentOffset	src/name-component.cpp	/^Component::fromSegmentOffset(uint64_t offset)$/;"	f	class:ndn::name::Component
fromSequenceNumber	src/name-component.cpp	/^Component::fromSequenceNumber(uint64_t seqNo)$/;"	f	class:ndn::name::Component
fromStream	src/encoding/block.cpp	/^Block::fromStream(std::istream& is)$/;"	f	class:ndn::Block
fromString	src/util/ethernet.cpp	/^Address::fromString(const std::string& str)$/;"	f	class:ndn::util::ethernet::Address
fromString	src/util/time.cpp	/^fromString(const std::string& formattedTimePoint,$/;"	f	namespace:ndn::time
fromTimestamp	src/name-component.cpp	/^Component::fromTimestamp(const time::system_clock::TimePoint& timePoint)$/;"	f	class:ndn::name::Component
fromUnixTimestamp	src/util/time.cpp	/^fromUnixTimestamp(const milliseconds& duration)$/;"	f	namespace:ndn::time
fromVersion	src/name-component.cpp	/^Component::fromVersion(uint64_t version)$/;"	f	class:ndn::name::Component
g_steadyClock	src/util/time.cpp	/^static shared_ptr<CustomSteadyClock> g_steadyClock;$/;"	m	namespace:ndn::time	file:
g_systemClock	src/util/time.cpp	/^static shared_ptr<CustomSystemClock> g_systemClock;$/;"	m	namespace:ndn::time	file:
generate	src/util/command-interest-generator.hpp	/^CommandInterestGenerator::generate(Interest& interest,$/;"	f	class:ndn::CommandInterestGenerator
generate	tests/unit-tests/util/random.t.cpp	/^  generate()$/;"	f	class:ndn::tests::PseudoRandomWord32
generate	tests/unit-tests/util/random.t.cpp	/^  generate()$/;"	f	class:ndn::tests::PseudoRandomWord64
generate	tests/unit-tests/util/random.t.cpp	/^  generate()$/;"	f	class:ndn::tests::SecureRandomWord32
generate	tests/unit-tests/util/random.t.cpp	/^  generate()$/;"	f	class:ndn::tests::SecureRandomWord64
generateEcdsaKeyPair	src/security/key-chain.cpp	/^KeyChain::generateEcdsaKeyPair(const Name& identityName, bool isKsk, uint32_t keySize)$/;"	f	class:ndn::security::KeyChain
generateEcdsaKeyPairAsDefault	src/security/key-chain.cpp	/^KeyChain::generateEcdsaKeyPairAsDefault(const Name& identityName, bool isKsk, uint32_t keySize)$/;"	f	class:ndn::security::KeyChain
generateKeyPair	src/security/key-chain.cpp	/^KeyChain::generateKeyPair(const Name& identityName, bool isKsk, const KeyParams& params)$/;"	f	class:ndn::security::KeyChain
generateKeyPairInTpm	src/security/key-chain.hpp	/^  generateKeyPairInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::security::KeyChain
generateKeyPairInTpm	src/security/sec-tpm-file.cpp	/^SecTpmFile::generateKeyPairInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::SecTpmFile
generateKeyPairInTpm	src/security/sec-tpm-osx.hpp	/^  generateKeyPairInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::SecTpmOsx
generateKeyPairInTpm	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::generateKeyPairInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::security::DummyTpm
generateKeyPairInTpmInternal	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::generateKeyPairInTpmInternal(const Name& keyName,$/;"	f	class:ndn::SecTpmOsx
generateRandomBlock	src/security/key-chain.hpp	/^  generateRandomBlock(uint8_t* res, size_t size) const$/;"	f	class:ndn::security::KeyChain
generateRandomBlock	src/security/sec-tpm-file.cpp	/^SecTpmFile::generateRandomBlock(uint8_t* res, size_t size)$/;"	f	class:ndn::SecTpmFile
generateRandomBlock	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::generateRandomBlock(uint8_t* res, size_t size)$/;"	f	class:ndn::SecTpmOsx
generateRandomBlock	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::generateRandomBlock(uint8_t* res, size_t size)$/;"	f	class:ndn::security::DummyTpm
generateRsaKeyPair	src/security/key-chain.cpp	/^KeyChain::generateRsaKeyPair(const Name& identityName, bool isKsk, uint32_t keySize)$/;"	f	class:ndn::security::KeyChain
generateRsaKeyPairAsDefault	src/security/key-chain.cpp	/^KeyChain::generateRsaKeyPairAsDefault(const Name& identityName, bool isKsk, uint32_t keySize)$/;"	f	class:ndn::security::KeyChain
generateSecureWord32	src/util/random.cpp	/^generateSecureWord32()$/;"	f	namespace:ndn::random
generateSecureWord64	src/util/random.cpp	/^generateSecureWord64()$/;"	f	namespace:ndn::random
generateSymmetricKeyInTpm	src/security/key-chain.hpp	/^  generateSymmetricKeyInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::security::KeyChain
generateSymmetricKeyInTpm	src/security/sec-tpm-file.cpp	/^SecTpmFile::generateSymmetricKeyInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::SecTpmFile
generateSymmetricKeyInTpm	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::generateSymmetricKeyInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::SecTpmOsx
generateSymmetricKeyInTpm	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::generateSymmetricKeyInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::security::DummyTpm
generateWithIdentity	src/util/command-interest-generator.hpp	/^CommandInterestGenerator::generateWithIdentity(Interest& interest, const Name& identity)$/;"	f	class:ndn::CommandInterestGenerator
generateWord32	src/util/random.cpp	/^generateWord32()$/;"	f	namespace:ndn::random
generateWord64	src/util/random.cpp	/^generateWord64()$/;"	f	namespace:ndn::random
get	src/encoding/block.cpp	/^Block::get(uint32_t type) const$/;"	f	class:ndn::Block
get	src/encoding/buffer.hpp	/^  get() const$/;"	f	class:ndn::Buffer
get	src/encoding/buffer.hpp	/^  get()$/;"	f	class:ndn::Buffer
get	src/lp/packet.hpp	/^  get(size_t index = 0) const$/;"	f	class:ndn::lp::Packet
get	src/name.hpp	/^  get(ssize_t i) const$/;"	f	class:ndn::Name
get	src/security/additional-description.cpp	/^AdditionalDescription::get(const std::string& key) const$/;"	f	class:ndn::security::AdditionalDescription
get	src/security/public-key.hpp	/^  get() const$/;"	f	class:ndn::PublicKey
get	src/security/sec-tpm-osx.cpp	/^  get() const$/;"	f	class:ndn::CFReleaser
get	src/security/sec-tpm-osx.cpp	/^  get()$/;"	f	class:ndn::CFReleaser
getAll	src/security/validator-config.hpp	/^    getAll() const$/;"	f	class:ndn::ValidatorConfig::TrustAnchorContainer
getAllCertificateNames	src/security/key-chain.hpp	/^  getAllCertificateNames(std::vector<Name>& nameList, bool isDefault) const$/;"	f	class:ndn::security::KeyChain
getAllCertificateNames	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getAllCertificateNames(vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::SecPublicInfoSqlite3
getAllCertificateNames	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getAllCertificateNames(std::vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::security::DummyPublicInfo
getAllCertificateNamesOfKey	src/security/key-chain.hpp	/^  getAllCertificateNamesOfKey(const Name& keyName,$/;"	f	class:ndn::security::KeyChain
getAllCertificateNamesOfKey	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getAllCertificateNamesOfKey(const Name& keyName,$/;"	f	class:ndn::SecPublicInfoSqlite3
getAllCertificateNamesOfKey	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getAllCertificateNamesOfKey(const Name& keyName, std::vector<Name>& nameList,$/;"	f	class:ndn::security::DummyPublicInfo
getAllIdentities	src/security/key-chain.hpp	/^  getAllIdentities(std::vector<Name>& nameList, bool isDefault) const$/;"	f	class:ndn::security::KeyChain
getAllIdentities	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getAllIdentities(vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::SecPublicInfoSqlite3
getAllIdentities	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getAllIdentities(std::vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::security::DummyPublicInfo
getAllKeyNames	src/security/key-chain.hpp	/^  getAllKeyNames(std::vector<Name>& nameList, bool isDefault) const$/;"	f	class:ndn::security::KeyChain
getAllKeyNames	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getAllKeyNames(vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::SecPublicInfoSqlite3
getAllKeyNames	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getAllKeyNames(std::vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::security::DummyPublicInfo
getAllKeyNamesOfIdentity	src/security/key-chain.hpp	/^  getAllKeyNamesOfIdentity(const Name& identity, std::vector<Name>& nameList, bool isDefault) const$/;"	f	class:ndn::security::KeyChain
getAllKeyNamesOfIdentity	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getAllKeyNamesOfIdentity(const Name& identity,$/;"	f	class:ndn::SecPublicInfoSqlite3
getAllKeyNamesOfIdentity	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getAllKeyNamesOfIdentity(const Name& identity, std::vector<Name>& nameList,$/;"	f	class:ndn::security::DummyPublicInfo
getAppMetaInfo	src/meta-info.cpp	/^MetaInfo::getAppMetaInfo() const$/;"	f	class:ndn::MetaInfo
getAsymKeyType	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getAsymKeyType(KeyType keyType)$/;"	f	class:ndn::SecTpmOsx::Impl
getBackref	src/util/regex/regex-backref-manager.hpp	/^RegexBackrefManager::getBackref(size_t backrefNo)$/;"	f	class:ndn::RegexBackrefManager
getBlob	src/util/sqlite3-statement.cpp	/^Sqlite3Statement::getBlob(int column)$/;"	f	class:ndn::util::Sqlite3Statement
getBlock	src/util/sqlite3-statement.cpp	/^Sqlite3Statement::getBlock(int column)$/;"	f	class:ndn::util::Sqlite3Statement
getBody	src/mgmt/control-response.hpp	/^ControlResponse::getBody() const$/;"	f	class:ndn::mgmt::ControlResponse
getBroadcastAddress	src/util/ethernet.cpp	/^getBroadcastAddress()$/;"	f	namespace:ndn::util::ethernet
getBuffer	src/encoding/block.hpp	/^Block::getBuffer() const$/;"	f	class:ndn::Block
getBuffer	src/encoding/encoder.hpp	/^Encoder::getBuffer()$/;"	f	class:ndn::encoding::Encoder
getCachingPolicy	src/data.hpp	/^Data::getCachingPolicy() const$/;"	f	class:ndn::Data
getCachingPolicy	src/management/nfd-local-control-header.hpp	/^  getCachingPolicy() const$/;"	f	class:ndn::nfd::LocalControlHeader
getCanonicalPibLocator	src/security/key-chain.cpp	/^getCanonicalPibLocator(const std::string& pibLocator)$/;"	f	namespace:ndn::security
getCanonicalTpmLocator	src/security/key-chain.cpp	/^getCanonicalTpmLocator(const std::string& tpmLocator)$/;"	f	namespace:ndn::security
getCanonizeProvider	src/util/face-uri.cpp	/^getCanonizeProvider(const std::string& scheme)$/;"	f	namespace:ndn::util
getCapacity	src/util/in-memory-storage.hpp	/^  getCapacity() const$/;"	f	class:ndn::util::InMemoryStorage
getCertificate	src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::getCertificate(const Name& certificateName)$/;"	f	class:ndn::CertificateCacheTtl
getCertificate	src/security/key-chain.hpp	/^  getCertificate(const Name& certificateName) const$/;"	f	class:ndn::security::KeyChain
getCertificate	src/security/key.cpp	/^Key::getCertificate(const Name& certName) const$/;"	f	class:ndn::security::Key
getCertificate	src/security/pib-memory.cpp	/^PibMemory::getCertificate(const Name& certName) const$/;"	f	class:ndn::security::PibMemory
getCertificate	src/security/pib-sqlite3.cpp	/^PibSqlite3::getCertificate(const Name& certName) const$/;"	f	class:ndn::security::PibSqlite3
getCertificate	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getCertificate(const Name& certificateName)$/;"	f	class:ndn::SecPublicInfoSqlite3
getCertificate	src/security/secured-bag.hpp	/^  getCertificate() const$/;"	f	class:ndn::SecuredBag
getCertificate	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getCertificate(const Name& certificateName)$/;"	f	class:ndn::security::DummyPublicInfo
getCertificateHttp	tools/ndnsec/cert-install.hpp	/^getCertificateHttp(const std::string& host, const std::string& port, const std::string& path)$/;"	f
getCertificates	src/security/key.cpp	/^Key::getCertificates() const$/;"	f	class:ndn::security::Key
getCertificatesOfKey	src/security/pib-memory.cpp	/^PibMemory::getCertificatesOfKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibMemory
getCertificatesOfKey	src/security/pib-sqlite3.cpp	/^PibSqlite3::getCertificatesOfKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibSqlite3
getChildSelector	src/interest.hpp	/^  getChildSelector() const$/;"	f	class:ndn::Interest
getChildSelector	src/selectors.hpp	/^  getChildSelector() const$/;"	f	class:ndn::Selectors
getCode	src/mgmt/control-response.hpp	/^ControlResponse::getCode() const$/;"	f	class:ndn::mgmt::ControlResponse
getCommandOptions	src/detail/registered-prefix.hpp	/^  getCommandOptions() const$/;"	f	class:ndn::RegisteredPrefix
getContent	src/data.cpp	/^Data::getContent() const$/;"	f	class:ndn::Data
getContentType	src/data.hpp	/^Data::getContentType() const$/;"	f	class:ndn::Data
getCost	src/management/nfd-control-parameters.hpp	/^  getCost() const$/;"	f	class:ndn::nfd::ControlParameters
getCost	src/management/nfd-fib-entry.hpp	/^  getCost() const$/;"	f	class:ndn::nfd::NextHopRecord
getCost	src/management/nfd-rib-entry.hpp	/^  getCost() const$/;"	f	class:ndn::nfd::Route
getCurrentTimestamp	src/management/nfd-forwarder-status.hpp	/^  getCurrentTimestamp() const$/;"	f	class:ndn::nfd::ForwarderStatus
getData	src/util/in-memory-storage-entry.hpp	/^  getData() const$/;"	f	class:ndn::util::InMemoryStorageEntry
getDefaultCertificate	src/security/key-chain.hpp	/^  getDefaultCertificate() const$/;"	f	class:ndn::security::KeyChain
getDefaultCertificate	src/security/key.cpp	/^Key::getDefaultCertificate() const$/;"	f	class:ndn::security::Key
getDefaultCertificate	src/security/sec-public-info.cpp	/^SecPublicInfo::getDefaultCertificate()$/;"	f	class:ndn::SecPublicInfo
getDefaultCertificateName	src/security/key-chain.hpp	/^  getDefaultCertificateName() const$/;"	f	class:ndn::security::KeyChain
getDefaultCertificateName	src/security/sec-public-info.cpp	/^SecPublicInfo::getDefaultCertificateName()$/;"	f	class:ndn::SecPublicInfo
getDefaultCertificateNameForIdentity	src/security/key-chain.hpp	/^  getDefaultCertificateNameForIdentity(const Name& identityName) const$/;"	f	class:ndn::security::KeyChain
getDefaultCertificateNameForIdentity	src/security/sec-public-info.cpp	/^SecPublicInfo::getDefaultCertificateNameForIdentity(const Name& identityName)$/;"	f	class:ndn::SecPublicInfo
getDefaultCertificateNameForKey	src/security/key-chain.hpp	/^  getDefaultCertificateNameForKey(const Name& keyName) const$/;"	f	class:ndn::security::KeyChain
getDefaultCertificateNameForKey	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getDefaultCertificateNameForKey(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
getDefaultCertificateNameForKey	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getDefaultCertificateNameForKey(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
getDefaultCertificateOfKey	src/security/pib-memory.cpp	/^PibMemory::getDefaultCertificateOfKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibMemory
getDefaultCertificateOfKey	src/security/pib-sqlite3.cpp	/^PibSqlite3::getDefaultCertificateOfKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibSqlite3
getDefaultIdentity	src/security/key-chain.hpp	/^  getDefaultIdentity() const$/;"	f	class:ndn::security::KeyChain
getDefaultIdentity	src/security/pib-memory.cpp	/^PibMemory::getDefaultIdentity() const$/;"	f	class:ndn::security::PibMemory
getDefaultIdentity	src/security/pib-sqlite3.cpp	/^PibSqlite3::getDefaultIdentity() const$/;"	f	class:ndn::security::PibSqlite3
getDefaultIdentity	src/security/pib.cpp	/^Pib::getDefaultIdentity() const$/;"	f	class:ndn::security::Pib
getDefaultIdentity	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getDefaultIdentity()$/;"	f	class:ndn::SecPublicInfoSqlite3
getDefaultIdentity	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getDefaultIdentity()$/;"	f	class:ndn::security::DummyPublicInfo
getDefaultKey	src/security/identity.cpp	/^Identity::getDefaultKey() const$/;"	f	class:ndn::security::Identity
getDefaultKeyNameForIdentity	src/security/key-chain.hpp	/^  getDefaultKeyNameForIdentity(const Name& identityName) const$/;"	f	class:ndn::security::KeyChain
getDefaultKeyNameForIdentity	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getDefaultKeyNameForIdentity(const Name& identityName)$/;"	f	class:ndn::SecPublicInfoSqlite3
getDefaultKeyNameForIdentity	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getDefaultKeyNameForIdentity(const Name& identityName)$/;"	f	class:ndn::security::DummyPublicInfo
getDefaultKeyOfIdentity	src/security/pib-memory.cpp	/^PibMemory::getDefaultKeyOfIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibMemory
getDefaultKeyOfIdentity	src/security/pib-sqlite3.cpp	/^PibSqlite3::getDefaultKeyOfIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibSqlite3
getDefaultKeySize	src/security/key-params.hpp	/^  getDefaultKeySize() const$/;"	f	class:ndn::SimplePublicKeyParams
getDefaultKeySize	src/security/key-params.hpp	/^  getDefaultKeySize() const$/;"	f	class:ndn::SimpleSymmetricKeyParams
getDefaultMulticastAddress	src/util/ethernet.cpp	/^getDefaultMulticastAddress()$/;"	f	namespace:ndn::util::ethernet
getDefaultPibLocator	src/security/key-chain.cpp	/^KeyChain::getDefaultPibLocator()$/;"	f	class:ndn::security::KeyChain
getDefaultRefreshPeriod	src/security/validator-config.cpp	/^ValidatorConfig::getDefaultRefreshPeriod()$/;"	f	class:ndn::ValidatorConfig
getDefaultSize	src/security/key-params.cpp	/^AesKeyParamsInfo::getDefaultSize()$/;"	f	class:ndn::AesKeyParamsInfo
getDefaultSize	src/security/key-params.cpp	/^EcdsaKeyParamsInfo::getDefaultSize()$/;"	f	class:ndn::EcdsaKeyParamsInfo
getDefaultSize	src/security/key-params.cpp	/^RsaKeyParamsInfo::getDefaultSize()$/;"	f	class:ndn::RsaKeyParamsInfo
getDefaultSocketHostAndPort	src/transport/tcp-transport.cpp	/^TcpTransport::getDefaultSocketHostAndPort(const ConfigFile& config)$/;"	f	class:ndn::TcpTransport
getDefaultSocketName	src/transport/unix-transport.cpp	/^UnixTransport::getDefaultSocketName(const ConfigFile& config)$/;"	f	class:ndn::UnixTransport
getDefaultStartTime	src/util/time-unit-test-clock.hpp	/^  getDefaultStartTime()$/;"	f	class:ndn::time::UnitTestClockTraits
getDefaultTpmLocator	src/security/key-chain.cpp	/^KeyChain::getDefaultTpmLocator()$/;"	f	class:ndn::security::KeyChain
getDelegationFromWire	src/link.cpp	/^Link::getDelegationFromWire(const Block& block, size_t index)$/;"	f	class:ndn::Link
getDelegations	src/link.cpp	/^Link::getDelegations() const$/;"	f	class:ndn::Link
getDigestAlgorithm	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getDigestAlgorithm(DigestAlgorithm digestAlgo)$/;"	f	class:ndn::SecTpmOsx::Impl
getDigestAlgorithm	src/security/signing-info.hpp	/^  getDigestAlgorithm() const$/;"	f	class:ndn::security::SigningInfo
getDigestSize	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getDigestSize(DigestAlgorithm digestAlgo)$/;"	f	class:ndn::SecTpmOsx::Impl
getExclude	src/interest.hpp	/^  getExclude() const$/;"	f	class:ndn::Interest
getExclude	src/selectors.hpp	/^  getExclude() const$/;"	f	class:ndn::Selectors
getExpirationPeriod	src/management/nfd-control-parameters.hpp	/^  getExpirationPeriod() const$/;"	f	class:ndn::nfd::ControlParameters
getExpirationPeriod	src/management/nfd-face-status.hpp	/^  getExpirationPeriod() const$/;"	f	class:ndn::nfd::FaceStatus
getExpirationPeriod	src/management/nfd-rib-entry.hpp	/^  getExpirationPeriod() const$/;"	f	class:ndn::nfd::Route
getExpiry	src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::getExpiry() const$/;"	f	class:ndn::mgmt::StatusDatasetContext
getExpr	src/util/regex/regex-matcher.hpp	/^  getExpr() const$/;"	f	class:ndn::RegexMatcher
getExtensionList	src/security/certificate.hpp	/^  getExtensionList() const$/;"	f	class:ndn::Certificate
getExtensionList	src/security/certificate.hpp	/^  getExtensionList()$/;"	f	class:ndn::Certificate
getFaceId	src/management/nfd-control-parameters.hpp	/^  getFaceId() const$/;"	f	class:ndn::nfd::ControlParameters
getFaceId	src/management/nfd-face-query-filter.hpp	/^  getFaceId() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getFaceId	src/management/nfd-face-traits.hpp	/^  getFaceId() const$/;"	f	class:ndn::nfd::FaceTraits
getFaceId	src/management/nfd-fib-entry.hpp	/^  getFaceId() const$/;"	f	class:ndn::nfd::NextHopRecord
getFaceId	src/management/nfd-rib-entry.hpp	/^  getFaceId() const$/;"	f	class:ndn::nfd::Route
getFacePersistency	src/management/nfd-control-parameters.hpp	/^  getFacePersistency() const$/;"	f	class:ndn::nfd::ControlParameters
getFacePersistency	src/management/nfd-face-query-filter.hpp	/^  getFacePersistency() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getFacePersistency	src/management/nfd-face-traits.hpp	/^  getFacePersistency() const$/;"	f	class:ndn::nfd::FaceTraits
getFaceScope	src/management/nfd-face-query-filter.hpp	/^  getFaceScope() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getFaceScope	src/management/nfd-face-traits.hpp	/^  getFaceScope() const$/;"	f	class:ndn::nfd::FaceTraits
getFilter	src/detail/interest-filter-record.hpp	/^  getFilter() const$/;"	f	class:ndn::InterestFilterRecord
getFilter	src/detail/registered-prefix.hpp	/^  getFilter() const$/;"	f	class:ndn::RegisteredPrefix
getFinalBlockId	src/data.hpp	/^Data::getFinalBlockId() const$/;"	f	class:ndn::Data
getFinalBlockId	src/meta-info.hpp	/^MetaInfo::getFinalBlockId() const$/;"	f	class:ndn::MetaInfo
getFlags	src/management/nfd-control-parameters.hpp	/^  getFlags() const$/;"	f	class:ndn::nfd::ControlParameters
getFlags	src/management/nfd-rib-entry.hpp	/^  getFlags() const$/;"	f	class:ndn::nfd::Route
getFreshnessPeriod	src/data.hpp	/^Data::getFreshnessPeriod() const$/;"	f	class:ndn::Data
getFreshnessPeriod	src/meta-info.hpp	/^MetaInfo::getFreshnessPeriod() const$/;"	f	class:ndn::MetaInfo
getFullName	src/data.cpp	/^Data::getFullName() const$/;"	f	class:ndn::Data
getFullName	src/util/in-memory-storage-entry.hpp	/^  getFullName() const$/;"	f	class:ndn::util::InMemoryStorageEntry
getHeader	src/lp/nack.hpp	/^  getHeader() const$/;"	f	class:ndn::lp::Nack
getHeader	src/lp/nack.hpp	/^  getHeader()$/;"	f	class:ndn::lp::Nack
getHost	src/util/face-uri.hpp	/^  getHost() const$/;"	f	class:ndn::util::FaceUri
getId	src/security/conf/rule.hpp	/^  getId()$/;"	f	class:ndn::security::conf::Rule
getIdentities	src/security/pib-memory.cpp	/^PibMemory::getIdentities() const$/;"	f	class:ndn::security::PibMemory
getIdentities	src/security/pib-sqlite3.cpp	/^PibSqlite3::getIdentities() const$/;"	f	class:ndn::security::PibSqlite3
getIdentities	src/security/pib.cpp	/^Pib::getIdentities() const$/;"	f	class:ndn::security::Pib
getIdentity	src/security/key.cpp	/^Key::getIdentity() const$/;"	f	class:ndn::security::Key
getIdentity	src/security/pib.cpp	/^Pib::getIdentity(const Name& identity) const$/;"	f	class:ndn::security::Pib
getIdentityCertificate	tools/ndnsec/util.hpp	/^getIdentityCertificate(const std::string& fileName)$/;"	f
getImpExpPassWord	src/security/sec-tpm.cpp	/^SecTpm::getImpExpPassWord(std::string& password, const std::string& prompt)$/;"	f	class:ndn::SecTpm
getImpl	src/security/pib.hpp	/^  getImpl()$/;"	f	class:ndn::security::Pib
getInTerminal	src/security/key-chain.hpp	/^  getInTerminal() const$/;"	f	class:ndn::security::KeyChain
getInTerminal	src/security/sec-tpm-file.hpp	/^  getInTerminal() const$/;"	f	class:ndn::SecTpmFile
getInTerminal	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::getInTerminal() const$/;"	f	class:ndn::SecTpmOsx
getInTerminal	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::getInTerminal() const$/;"	f	class:ndn::security::DummyTpm
getIncomingFaceId	src/data.hpp	/^Data::getIncomingFaceId() const$/;"	f	class:ndn::Data
getIncomingFaceId	src/interest.hpp	/^  getIncomingFaceId() const$/;"	f	class:ndn::Interest
getIncomingFaceId	src/management/nfd-local-control-header.hpp	/^  getIncomingFaceId() const$/;"	f	class:ndn::nfd::LocalControlHeader
getInfo	src/signature.hpp	/^  getInfo() const$/;"	f	class:ndn::Signature
getInt	src/util/sqlite3-statement.cpp	/^Sqlite3Statement::getInt(int column)$/;"	f	class:ndn::util::Sqlite3Statement
getIntegerList	src/encoding/oid.hpp	/^  getIntegerList() const$/;"	f	class:ndn::OID
getInterest	src/detail/pending-interest.hpp	/^  getInterest() const$/;"	f	class:ndn::PendingInterest
getInterest	src/lp/nack.hpp	/^  getInterest() const$/;"	f	class:ndn::lp::Nack
getInterest	src/lp/nack.hpp	/^  getInterest()$/;"	f	class:ndn::lp::Nack
getInterestLifetime	src/interest.hpp	/^  getInterestLifetime() const$/;"	f	class:ndn::Interest
getInterestLifetime	src/util/notification-subscriber.hpp	/^  getInterestLifetime() const$/;"	f	class:ndn::util::NotificationSubscriber
getIoService	src/face.hpp	/^  getIoService()$/;"	f	class:ndn::Face
getIoService	src/util/dummy-client-face.cpp	/^  getIoService()$/;"	f	class:ndn::util::DummyClientFace::Transport
getIsCritical	src/security/certificate-extension.hpp	/^  getIsCritical() const$/;"	f	class:ndn::CertificateExtension
getItemFromExpand	src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::getItemFromExpand(const std::string& expand, size_t& offset)$/;"	f	class:ndn::RegexTopMatcher
getKey	src/security/identity.cpp	/^Identity::getKey(const name::Component& keyId) const$/;"	f	class:ndn::security::Identity
getKey	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getKey(const Name& keyName, KeyClass keyClass)$/;"	f	class:ndn::SecTpmOsx::Impl
getKey	src/security/secured-bag.hpp	/^  getKey() const$/;"	f	class:ndn::SecuredBag
getKeyBits	src/security/pib-memory.cpp	/^PibMemory::getKeyBits(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibMemory
getKeyBits	src/security/pib-sqlite3.cpp	/^PibSqlite3::getKeyBits(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibSqlite3
getKeyClass	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getKeyClass(KeyClass keyClass)$/;"	f	class:ndn::SecTpmOsx::Impl
getKeyDigest	src/key-locator.cpp	/^KeyLocator::getKeyDigest() const$/;"	f	class:ndn::KeyLocator
getKeyId	src/security/key.cpp	/^Key::getKeyId() const$/;"	f	class:ndn::security::Key
getKeyLocator	src/signature-info.cpp	/^SignatureInfo::getKeyLocator() const$/;"	f	class:ndn::SignatureInfo
getKeyLocator	src/signature.hpp	/^  getKeyLocator() const$/;"	f	class:ndn::Signature
getKeyName	src/security/pib-memory.cpp	/^PibMemory::getKeyName(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibMemory
getKeyName	src/security/pib-sqlite3.cpp	/^getKeyName(const Name& identity, const name::Component& keyId)$/;"	f	namespace:ndn::security
getKeySize	src/security/key-params.hpp	/^  getKeySize() const$/;"	f	class:ndn::SimplePublicKeyParams
getKeySize	src/security/key-params.hpp	/^  getKeySize() const$/;"	f	class:ndn::SimpleSymmetricKeyParams
getKeyType	src/security/key-params.hpp	/^  getKeyType() const$/;"	f	class:ndn::KeyParams
getKeyType	src/security/public-key.hpp	/^  getKeyType() const$/;"	f	class:ndn::PublicKey
getKeys	src/security/identity.cpp	/^Identity::getKeys() const$/;"	f	class:ndn::security::Identity
getKeysOfIdentity	src/security/pib-memory.cpp	/^PibMemory::getKeysOfIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibMemory
getKeysOfIdentity	src/security/pib-sqlite3.cpp	/^PibSqlite3::getKeysOfIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibSqlite3
getKind	src/management/nfd-face-event-notification.hpp	/^  getKind() const$/;"	f	class:ndn::nfd::FaceEventNotification
getLastRefresh	src/security/validator-config.hpp	/^    getLastRefresh() const$/;"	f	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
getLimit	src/util/in-memory-storage.hpp	/^  getLimit() const$/;"	f	class:ndn::util::InMemoryStorage
getLink	src/interest.cpp	/^Interest::getLink() const$/;"	f	class:ndn::Interest
getLinkType	src/management/nfd-face-query-filter.hpp	/^  getLinkType() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getLinkType	src/management/nfd-face-traits.hpp	/^  getLinkType() const$/;"	f	class:ndn::nfd::FaceTraits
getLocalControlFeature	src/management/nfd-control-parameters.hpp	/^  getLocalControlFeature() const$/;"	f	class:ndn::nfd::ControlParameters
getLocalControlHeader	src/data.hpp	/^Data::getLocalControlHeader() const$/;"	f	class:ndn::Data
getLocalControlHeader	src/data.hpp	/^Data::getLocalControlHeader()$/;"	f	class:ndn::Data
getLocalControlHeader	src/interest.hpp	/^  getLocalControlHeader() const$/;"	f	class:ndn::Interest
getLocalControlHeader	src/interest.hpp	/^  getLocalControlHeader()$/;"	f	class:ndn::Interest
getLocalControlHeader	src/lp/nack.hpp	/^  getLocalControlHeader() const$/;"	f	class:ndn::lp::Nack
getLocalControlHeader	src/lp/nack.hpp	/^  getLocalControlHeader()$/;"	f	class:ndn::lp::Nack
getLocalUri	src/management/nfd-channel-status.hpp	/^  getLocalUri() const$/;"	f	class:ndn::nfd::ChannelStatus
getLocalUri	src/management/nfd-face-query-filter.hpp	/^  getLocalUri() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getLocalUri	src/management/nfd-face-traits.hpp	/^  getLocalUri() const$/;"	f	class:ndn::nfd::FaceTraits
getLocationSortOrder	src/lp/detail/field-info.hpp	/^getLocationSortOrder<field_location_tags::Fragment>()$/;"	f	namespace:ndn::lp::detail
getLocationSortOrder	src/lp/detail/field-info.hpp	/^getLocationSortOrder<field_location_tags::Header>()$/;"	f	namespace:ndn::lp::detail
getMatchResult	src/util/regex/regex-matcher.hpp	/^  getMatchResult() const$/;"	f	class:ndn::RegexMatcher
getMaxSuffixComponents	src/interest.hpp	/^  getMaxSuffixComponents() const$/;"	f	class:ndn::Interest
getMaxSuffixComponents	src/selectors.hpp	/^  getMaxSuffixComponents() const$/;"	f	class:ndn::Selectors
getMessage	tests/unit-tests/util/simple-notification.hpp	/^  getMessage() const$/;"	f	class:ndn::util::tests::SimpleNotification
getMetaInfo	src/data.hpp	/^Data::getMetaInfo() const$/;"	f	class:ndn::Data
getMinSuffixComponents	src/interest.hpp	/^  getMinSuffixComponents() const$/;"	f	class:ndn::Interest
getMinSuffixComponents	src/selectors.hpp	/^  getMinSuffixComponents() const$/;"	f	class:ndn::Selectors
getMustBeFresh	src/interest.hpp	/^  getMustBeFresh() const$/;"	f	class:ndn::Interest
getMustBeFresh	src/selectors.hpp	/^  getMustBeFresh() const$/;"	f	class:ndn::Selectors
getNCsEntries	src/management/nfd-forwarder-status.hpp	/^  getNCsEntries() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNFibEntries	src/management/nfd-forwarder-status.hpp	/^  getNFibEntries() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNInBytes	src/management/nfd-face-status.hpp	/^  getNInBytes() const$/;"	f	class:ndn::nfd::FaceStatus
getNInDatas	src/management/nfd-face-status.hpp	/^  getNInDatas() const$/;"	f	class:ndn::nfd::FaceStatus
getNInDatas	src/management/nfd-forwarder-status.hpp	/^  getNInDatas() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNInInterests	src/management/nfd-face-status.hpp	/^  getNInInterests() const$/;"	f	class:ndn::nfd::FaceStatus
getNInInterests	src/management/nfd-forwarder-status.hpp	/^  getNInInterests() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNInNacks	src/management/nfd-face-status.hpp	/^  getNInNacks() const$/;"	f	class:ndn::nfd::FaceStatus
getNInNacks	src/management/nfd-forwarder-status.hpp	/^  getNInNacks() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNMeasurementsEntries	src/management/nfd-forwarder-status.hpp	/^  getNMeasurementsEntries() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNNameTreeEntries	src/management/nfd-forwarder-status.hpp	/^  getNNameTreeEntries() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNOutBytes	src/management/nfd-face-status.hpp	/^  getNOutBytes() const$/;"	f	class:ndn::nfd::FaceStatus
getNOutDatas	src/management/nfd-face-status.hpp	/^  getNOutDatas() const$/;"	f	class:ndn::nfd::FaceStatus
getNOutDatas	src/management/nfd-forwarder-status.hpp	/^  getNOutDatas() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNOutInterests	src/management/nfd-face-status.hpp	/^  getNOutInterests() const$/;"	f	class:ndn::nfd::FaceStatus
getNOutInterests	src/management/nfd-forwarder-status.hpp	/^  getNOutInterests() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNOutNacks	src/management/nfd-face-status.hpp	/^  getNOutNacks() const$/;"	f	class:ndn::nfd::FaceStatus
getNOutNacks	src/management/nfd-forwarder-status.hpp	/^  getNOutNacks() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNPendingInterests	src/face.cpp	/^Face::getNPendingInterests() const$/;"	f	class:ndn::Face
getNPitEntries	src/management/nfd-forwarder-status.hpp	/^  getNPitEntries() const$/;"	f	class:ndn::nfd::ForwarderStatus
getName	src/data.hpp	/^Data::getName() const$/;"	f	class:ndn::Data
getName	src/interest.hpp	/^  getName() const$/;"	f	class:ndn::Interest
getName	src/key-locator.cpp	/^KeyLocator::getName() const$/;"	f	class:ndn::KeyLocator
getName	src/management/nfd-control-parameters.hpp	/^  getName() const$/;"	f	class:ndn::nfd::ControlParameters
getName	src/management/nfd-rib-entry.hpp	/^  getName() const$/;"	f	class:ndn::nfd::RibEntry
getName	src/management/nfd-strategy-choice.hpp	/^  getName() const$/;"	f	class:ndn::nfd::StrategyChoice
getName	src/security/identity.cpp	/^Identity::getName() const$/;"	f	class:ndn::security::Identity
getName	src/security/key.cpp	/^Key::getName() const$/;"	f	class:ndn::security::Key
getName	src/util/in-memory-storage-entry.hpp	/^  getName() const$/;"	f	class:ndn::util::InMemoryStorageEntry
getNewKeyName	src/security/key-chain.hpp	/^  getNewKeyName(const Name& identityName, bool useKsk)$/;"	f	class:ndn::security::KeyChain
getNewKeyName	src/security/sec-public-info.cpp	/^SecPublicInfo::getNewKeyName(const Name& identityName, bool useKsk)$/;"	f	class:ndn::SecPublicInfo
getNextHopFaceId	src/interest.hpp	/^  getNextHopFaceId() const$/;"	f	class:ndn::Interest
getNextHopFaceId	src/management/nfd-local-control-header.hpp	/^  getNextHopFaceId() const$/;"	f	class:ndn::nfd::LocalControlHeader
getNextHopRecords	src/management/nfd-fib-entry.hpp	/^  getNextHopRecords() const$/;"	f	class:ndn::nfd::FibEntry
getNfdVersion	src/management/nfd-forwarder-status.hpp	/^  getNfdVersion() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNonce	src/interest.cpp	/^Interest::getNonce() const$/;"	f	class:ndn::Interest
getNotAfter	src/security/certificate.hpp	/^  getNotAfter() const$/;"	f	class:ndn::Certificate
getNotAfter	src/security/certificate.hpp	/^  getNotAfter()$/;"	f	class:ndn::Certificate
getNotBefore	src/security/certificate.hpp	/^  getNotBefore() const$/;"	f	class:ndn::Certificate
getNotBefore	src/security/certificate.hpp	/^  getNotBefore()$/;"	f	class:ndn::Certificate
getNow	src/util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::getNow() const$/;"	f	class:ndn::time::UnitTestClock
getOid	src/security/certificate-extension.hpp	/^  getOid() const$/;"	f	class:ndn::CertificateExtension
getOidString	src/security/certificate-subject-description.hpp	/^  getOidString() const$/;"	f	class:ndn::CertificateSubjectDescription
getOrigin	src/management/nfd-control-parameters.hpp	/^  getOrigin() const$/;"	f	class:ndn::nfd::ControlParameters
getOrigin	src/management/nfd-rib-entry.hpp	/^  getOrigin() const$/;"	f	class:ndn::nfd::Route
getParsedConfiguration	src/util/config-file.hpp	/^ConfigFile::getParsedConfiguration() const$/;"	f	class:ndn::ConfigFile
getPassword	tools/ndnsec/util.hpp	/^getPassword(std::string& password, const std::string& prompt)$/;"	f
getPath	src/util/config-file.hpp	/^ConfigFile::getPath() const$/;"	f	class:ndn::ConfigFile
getPath	src/util/face-uri.hpp	/^  getPath() const$/;"	f	class:ndn::util::FaceUri
getPayload	src/management/nfd-local-control-header.hpp	/^LocalControlHeader::getPayload(const Block& wire)$/;"	f	class:ndn::nfd::LocalControlHeader
getPeriod	src/security/validity-period.cpp	/^ValidityPeriod::getPeriod() const$/;"	f	class:ndn::security::ValidityPeriod
getPib	src/security/key-chain.hpp	/^  getPib() const$/;"	f	class:ndn::security::KeyChain
getPib	src/security/key-chain.hpp	/^  getPib()$/;"	f	class:ndn::security::KeyChain
getPibFactories	src/security/key-chain.cpp	/^getPibFactories()$/;"	f	namespace:ndn::security
getPibLocator	src/security/pib.cpp	/^Pib::getPibLocator() const$/;"	f	class:ndn::security::Pib
getPibLocator	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getPibLocator()$/;"	f	class:ndn::SecPublicInfoSqlite3
getPibLocator	src/security/sec-public-info.cpp	/^SecPublicInfo::getPibLocator()$/;"	f	class:ndn::SecPublicInfo
getPolicy	src/lp/cache-policy.cpp	/^CachePolicy::getPolicy() const$/;"	f	class:ndn::lp::CachePolicy
getPort	src/util/face-uri.hpp	/^  getPort() const$/;"	f	class:ndn::util::FaceUri
getPrefix	src/detail/registered-prefix.hpp	/^  getPrefix() const$/;"	f	class:ndn::RegisteredPrefix
getPrefix	src/interest-filter.hpp	/^  getPrefix() const$/;"	f	class:ndn::InterestFilter
getPrefix	src/management/nfd-command-options.hpp	/^  getPrefix() const$/;"	f	class:ndn::nfd::CommandOptions
getPrefix	src/management/nfd-fib-entry.hpp	/^  getPrefix() const$/;"	f	class:ndn::nfd::FibEntry
getPrefix	src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::getPrefix() const$/;"	f	class:ndn::mgmt::StatusDatasetContext
getPrefix	src/name.hpp	/^  getPrefix(ssize_t nComponents) const$/;"	f	class:ndn::Name
getPresentFields	src/management/nfd-control-parameters.hpp	/^  getPresentFields() const$/;"	f	class:ndn::nfd::ControlParameters
getPublicKey	src/security/key-chain.hpp	/^  getPublicKey(const Name& keyName) const$/;"	f	class:ndn::security::KeyChain
getPublicKey	src/security/key.cpp	/^Key::getPublicKey() const$/;"	f	class:ndn::security::Key
getPublicKey	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getPublicKey(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
getPublicKey	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getPublicKey(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
getPublicKeyFromTpm	src/security/key-chain.hpp	/^  getPublicKeyFromTpm(const Name& keyName) const$/;"	f	class:ndn::security::KeyChain
getPublicKeyFromTpm	src/security/sec-tpm-file.cpp	/^SecTpmFile::getPublicKeyFromTpm(const Name&  keyName)$/;"	f	class:ndn::SecTpmFile
getPublicKeyFromTpm	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::getPublicKeyFromTpm(const Name& keyName)$/;"	f	class:ndn::SecTpmOsx
getPublicKeyFromTpm	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::getPublicKeyFromTpm(const Name& keyName)$/;"	f	class:ndn::security::DummyTpm
getPublicKeyInfo	src/security/certificate.hpp	/^  getPublicKeyInfo() const$/;"	f	class:ndn::Certificate
getPublicKeyInfo	src/security/certificate.hpp	/^  getPublicKeyInfo()$/;"	f	class:ndn::Certificate
getPublicKeyName	src/security/identity-certificate.hpp	/^  getPublicKeyName() const$/;"	f	class:ndn::IdentityCertificate
getPublicKeyType	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getPublicKeyType(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
getPublicKeyType	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getPublicKeyType(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
getPublisherPublicKeyLocator	src/interest.hpp	/^  getPublisherPublicKeyLocator() const$/;"	f	class:ndn::Interest
getPublisherPublicKeyLocator	src/selectors.hpp	/^  getPublisherPublicKeyLocator() const$/;"	f	class:ndn::Selectors
getRandomGenerator	src/util/random.cpp	/^getRandomGenerator()$/;"	f	namespace:ndn::random
getReason	src/lp/nack-header.cpp	/^NackHeader::getReason() const$/;"	f	class:ndn::lp::NackHeader
getReason	src/lp/nack.hpp	/^  getReason() const$/;"	f	class:ndn::lp::Nack
getRefreshPeriod	src/security/validator-config.cpp	/^ValidatorConfig::getRefreshPeriod(std::string inputString)$/;"	f	class:ndn::ValidatorConfig
getRefreshPeriod	src/security/validator-config.hpp	/^    getRefreshPeriod() const$/;"	f	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
getRegexFilter	src/interest-filter.hpp	/^  getRegexFilter() const$/;"	f	class:ndn::InterestFilter
getRemoteUri	src/management/nfd-face-query-filter.hpp	/^  getRemoteUri() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getRemoteUri	src/management/nfd-face-traits.hpp	/^  getRemoteUri() const$/;"	f	class:ndn::nfd::FaceTraits
getRequestName	src/management/nfd-control-command.cpp	/^ControlCommand::getRequestName(const Name& commandPrefix,$/;"	f	class:ndn::nfd::ControlCommand
getRequestSeqNo	tests/unit-tests/util/notification-subscriber.t.cpp	/^  getRequestSeqNo() const$/;"	f	class:ndn::util::tests::EndToEndFixture
getRoutes	src/management/nfd-rib-entry.hpp	/^  getRoutes() const$/;"	f	class:ndn::nfd::RibEntry
getScheme	src/security/pib.hpp	/^  getScheme() const$/;"	f	class:ndn::security::Pib
getScheme	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getScheme()$/;"	f	class:ndn::SecPublicInfoSqlite3
getScheme	src/security/sec-tpm-file.cpp	/^SecTpmFile::getScheme()$/;"	f	class:ndn::SecTpmFile
getScheme	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::getScheme()$/;"	f	class:ndn::SecTpmOsx
getScheme	src/util/face-uri.hpp	/^  getScheme() const$/;"	f	class:ndn::util::FaceUri
getScheme	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getScheme()$/;"	f	class:ndn::security::DummyPublicInfo
getScheme	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::getScheme()$/;"	f	class:ndn::security::DummyTpm
getSchemes	src/util/face-uri.cpp	/^  getSchemes() const$/;"	f	class:ndn::util::EtherCanonizeProvider
getSchemes	src/util/face-uri.cpp	/^  getSchemes() const$/;"	f	class:ndn::util::IpHostCanonizeProvider
getSecureRandomGenerator	src/util/random.cpp	/^getSecureRandomGenerator()$/;"	f	namespace:ndn::random
getSelectedDelegation	src/interest.cpp	/^Interest::getSelectedDelegation() const$/;"	f	class:ndn::Interest
getSelectors	src/interest.hpp	/^  getSelectors() const$/;"	f	class:ndn::Interest
getSha256DigestUriPrefix	src/name-component.cpp	/^getSha256DigestUriPrefix()$/;"	f	namespace:ndn::name
getSigType	src/security/conf/checker.hpp	/^  getSigType(const std::string& sigType)$/;"	f	class:ndn::security::conf::CheckerFactory
getSignature	src/data.hpp	/^Data::getSignature() const$/;"	f	class:ndn::Data
getSignatureInfo	src/security/signing-info.hpp	/^  getSignatureInfo() const$/;"	f	class:ndn::security::SigningInfo
getSignatureType	src/security/key-chain.cpp	/^KeyChain::getSignatureType(KeyType keyType, DigestAlgorithm digestAlgorithm)$/;"	f	class:ndn::security::KeyChain
getSignatureType	src/signature-info.hpp	/^  getSignatureType() const$/;"	f	class:ndn::SignatureInfo
getSigner	src/security/conf/checker.hpp	/^  getSigner(const ConfigSection& configSection, const std::string& configFilename)$/;"	f	class:ndn::security::conf::CheckerFactory
getSignerName	src/security/signing-info.hpp	/^  getSignerName() const$/;"	f	class:ndn::security::SigningInfo
getSignerType	src/security/signing-info.hpp	/^  getSignerType() const$/;"	f	class:ndn::security::SigningInfo
getSigningCertificate	src/management/nfd-command-options.cpp	/^CommandOptions::getSigningCertificate() const$/;"	f	class:ndn::nfd::CommandOptions
getSigningIdentity	src/management/nfd-command-options.cpp	/^CommandOptions::getSigningIdentity() const$/;"	f	class:ndn::nfd::CommandOptions
getSigningInfo	src/management/nfd-command-options.hpp	/^  getSigningInfo() const$/;"	f	class:ndn::nfd::CommandOptions
getSigningParamsKind	src/management/nfd-command-options.cpp	/^CommandOptions::getSigningParamsKind() const$/;"	f	class:ndn::nfd::CommandOptions
getSince	src/util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::getSince() const$/;"	f	class:ndn::time::UnitTestClock
getSize	src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::getSize()$/;"	f	class:ndn::CertificateCacheTtl
getSize	src/util/sqlite3-statement.cpp	/^Sqlite3Statement::getSize(int column)$/;"	f	class:ndn::util::Sqlite3Statement
getStartTimestamp	src/management/nfd-forwarder-status.hpp	/^  getStartTimestamp() const$/;"	f	class:ndn::nfd::ForwarderStatus
getStrategy	src/management/nfd-control-parameters.hpp	/^  getStrategy() const$/;"	f	class:ndn::nfd::ControlParameters
getStrategy	src/management/nfd-strategy-choice.hpp	/^  getStrategy() const$/;"	f	class:ndn::nfd::StrategyChoice
getString	src/util/sqlite3-statement.cpp	/^Sqlite3Statement::getString(int column)$/;"	f	class:ndn::util::Sqlite3Statement
getSubName	src/name.cpp	/^Name::getSubName(ssize_t iStartComponent, size_t nComponents) const$/;"	f	class:ndn::Name
getSubjectDescriptionList	src/security/certificate.hpp	/^  getSubjectDescriptionList() const$/;"	f	class:ndn::Certificate
getSubjectDescriptionList	src/security/certificate.hpp	/^  getSubjectDescriptionList()$/;"	f	class:ndn::Certificate
getSuccessor	src/name-component.cpp	/^Component::getSuccessor() const$/;"	f	class:ndn::name::Component
getSuccessor	src/name.cpp	/^Name::getSuccessor() const$/;"	f	class:ndn::Name
getSymKeyType	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getSymKeyType(KeyType keyType)$/;"	f	class:ndn::SecTpmOsx::Impl
getTag	src/tag-host.hpp	/^TagHost::getTag() const$/;"	f	class:ndn::TagHost
getText	src/mgmt/control-response.hpp	/^ControlResponse::getText() const$/;"	f	class:ndn::mgmt::ControlResponse
getTimeout	src/management/nfd-command-options.hpp	/^  getTimeout() const$/;"	f	class:ndn::nfd::CommandOptions
getTimestampMapSize	src/security/validator-config.hpp	/^  getTimestampMapSize()$/;"	f	class:ndn::ValidatorConfig
getTpm	src/security/key-chain.hpp	/^  getTpm() const$/;"	f	class:ndn::security::KeyChain
getTpm	src/security/key-chain.hpp	/^  getTpm()$/;"	f	class:ndn::security::KeyChain
getTpmFactories	src/security/key-chain.cpp	/^getTpmFactories()$/;"	f	namespace:ndn::security
getTpmLocator	src/security/pib-memory.cpp	/^PibMemory::getTpmLocator() const$/;"	f	class:ndn::security::PibMemory
getTpmLocator	src/security/pib-sqlite3.cpp	/^PibSqlite3::getTpmLocator() const$/;"	f	class:ndn::security::PibSqlite3
getTpmLocator	src/security/pib.cpp	/^Pib::getTpmLocator() const$/;"	f	class:ndn::security::Pib
getTpmLocator	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getTpmLocator()$/;"	f	class:ndn::SecPublicInfoSqlite3
getTpmLocator	src/security/sec-tpm.cpp	/^SecTpm::getTpmLocator()$/;"	f	class:ndn::SecTpm
getTpmLocator	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getTpmLocator()$/;"	f	class:ndn::security::DummyPublicInfo
getType	src/key-locator.hpp	/^  getType() const$/;"	f	class:ndn::KeyLocator
getType	src/meta-info.hpp	/^MetaInfo::getType() const$/;"	f	class:ndn::MetaInfo
getType	src/security/key-params.hpp	/^  getType()$/;"	f	class:ndn::AesKeyParamsInfo
getType	src/security/key-params.hpp	/^  getType()$/;"	f	class:ndn::EcdsaKeyParamsInfo
getType	src/security/key-params.hpp	/^  getType()$/;"	f	class:ndn::RsaKeyParamsInfo
getType	src/signature.hpp	/^  getType() const$/;"	f	class:ndn::Signature
getTypeId	src/tag.hpp	/^  getTypeId()$/;"	f	class:ndn::Tag
getTypeId	tests/unit-tests/tag-host.t.cpp	/^  getTypeId()$/;"	f	class:ndn::tests::TestTag
getTypeId	tests/unit-tests/tag-host.t.cpp	/^  getTypeId()$/;"	f	class:ndn::tests::TestTag2
getTypeSpecificTlv	src/signature-info.cpp	/^SignatureInfo::getTypeSpecificTlv(uint32_t type) const$/;"	f	class:ndn::SignatureInfo
getUnixEpoch	src/util/time.cpp	/^getUnixEpoch()$/;"	f	namespace:ndn::time
getUri	src/management/nfd-control-parameters.hpp	/^  getUri() const$/;"	f	class:ndn::nfd::ControlParameters
getUriScheme	src/management/nfd-face-query-filter.hpp	/^  getUriScheme() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getValidityPeriod	src/signature-info.cpp	/^SignatureInfo::getValidityPeriod() const$/;"	f	class:ndn::SignatureInfo
getValue	src/security/certificate-extension.hpp	/^  getValue() const$/;"	f	class:ndn::CertificateExtension
getValue	src/security/certificate-subject-description.hpp	/^  getValue() const$/;"	f	class:ndn::CertificateSubjectDescription
getValue	src/signature.hpp	/^  getValue() const$/;"	f	class:ndn::Signature
handleAsyncReceive	src/transport/stream-transport.hpp	/^  handleAsyncReceive(const boost::system::error_code& error, std::size_t nBytesRecvd)$/;"	f	class:ndn::StreamTransportImpl
handleAsyncWrite	src/transport/stream-transport.hpp	/^  handleAsyncWrite(const boost::system::error_code& error,$/;"	f	class:ndn::StreamTransportImpl
handler	src/util/signal-signal.hpp	/^    Handler handler;$/;"	m	struct:ndn::util::signal::Signal::Slot
has	src/lp/packet.hpp	/^  has() const$/;"	f	class:ndn::lp::Packet
has	src/security/additional-description.cpp	/^AdditionalDescription::has(const std::string& key) const$/;"	f	class:ndn::security::AdditionalDescription
hasCachingPolicy	src/management/nfd-local-control-header.hpp	/^  hasCachingPolicy() const$/;"	f	class:ndn::nfd::LocalControlHeader
hasCertificate	src/security/pib-memory.cpp	/^PibMemory::hasCertificate(const Name& certName) const$/;"	f	class:ndn::security::PibMemory
hasCertificate	src/security/pib-sqlite3.cpp	/^PibSqlite3::hasCertificate(const Name& certName) const$/;"	f	class:ndn::security::PibSqlite3
hasCost	src/management/nfd-control-parameters.hpp	/^  hasCost() const$/;"	f	class:ndn::nfd::ControlParameters
hasExpirationPeriod	src/management/nfd-control-parameters.hpp	/^  hasExpirationPeriod() const$/;"	f	class:ndn::nfd::ControlParameters
hasExpirationPeriod	src/management/nfd-face-status.hpp	/^  hasExpirationPeriod() const$/;"	f	class:ndn::nfd::FaceStatus
hasFaceId	src/management/nfd-control-parameters.hpp	/^  hasFaceId() const$/;"	f	class:ndn::nfd::ControlParameters
hasFaceId	src/management/nfd-face-query-filter.hpp	/^  hasFaceId() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasFacePersistency	src/management/nfd-control-parameters.hpp	/^  hasFacePersistency() const$/;"	f	class:ndn::nfd::ControlParameters
hasFacePersistency	src/management/nfd-face-query-filter.hpp	/^  hasFacePersistency() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasFaceScope	src/management/nfd-face-query-filter.hpp	/^  hasFaceScope() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasFlags	src/management/nfd-control-parameters.hpp	/^  hasFlags() const$/;"	f	class:ndn::nfd::ControlParameters
hasIdentity	src/security/pib-memory.cpp	/^PibMemory::hasIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibMemory
hasIdentity	src/security/pib-sqlite3.cpp	/^PibSqlite3::hasIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibSqlite3
hasIncomingFaceId	src/management/nfd-local-control-header.hpp	/^  hasIncomingFaceId() const$/;"	f	class:ndn::nfd::LocalControlHeader
hasInfiniteExpirationPeriod	src/management/nfd-rib-entry.hpp	/^  hasInfiniteExpirationPeriod() const$/;"	f	class:ndn::nfd::Route
hasInitialRequest	tests/unit-tests/util/notification-subscriber.t.cpp	/^  hasInitialRequest() const$/;"	f	class:ndn::util::tests::EndToEndFixture
hasIpv4	tests/unit-tests/network-configuration-detector.cpp	/^NetworkConfigurationDetector::hasIpv4()$/;"	f	class:ndn::tests::NetworkConfigurationDetector
hasIpv6	tests/unit-tests/network-configuration-detector.cpp	/^NetworkConfigurationDetector::hasIpv6()$/;"	f	class:ndn::tests::NetworkConfigurationDetector
hasKey	src/security/pib-memory.cpp	/^PibMemory::hasKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibMemory
hasKey	src/security/pib-sqlite3.cpp	/^PibSqlite3::hasKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibSqlite3
hasKeyLocator	src/signature-info.hpp	/^  hasKeyLocator() const$/;"	f	class:ndn::SignatureInfo
hasKeyLocator	src/signature.hpp	/^  hasKeyLocator() const$/;"	f	class:ndn::Signature
hasLink	src/interest.cpp	/^Interest::hasLink() const$/;"	f	class:ndn::Interest
hasLinkType	src/management/nfd-face-query-filter.hpp	/^  hasLinkType() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasLocalControlFeature	src/management/nfd-control-parameters.hpp	/^  hasLocalControlFeature() const$/;"	f	class:ndn::nfd::ControlParameters
hasLocalUri	src/management/nfd-face-query-filter.hpp	/^  hasLocalUri() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasName	src/management/nfd-control-parameters.hpp	/^  hasName() const$/;"	f	class:ndn::nfd::ControlParameters
hasNextHopFaceId	src/management/nfd-local-control-header.hpp	/^  hasNextHopFaceId() const$/;"	f	class:ndn::nfd::LocalControlHeader
hasNonce	src/interest.hpp	/^  hasNonce() const$/;"	f	class:ndn::Interest
hasOrigin	src/management/nfd-control-parameters.hpp	/^  hasOrigin() const$/;"	f	class:ndn::nfd::ControlParameters
hasRegexFilter	src/interest-filter.hpp	/^  hasRegexFilter() const$/;"	f	class:ndn::InterestFilter
hasRemoteUri	src/management/nfd-face-query-filter.hpp	/^  hasRemoteUri() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasSelectedDelegation	src/interest.cpp	/^Interest::hasSelectedDelegation() const$/;"	f	class:ndn::Interest
hasSelectors	src/interest.hpp	/^  hasSelectors() const$/;"	f	class:ndn::Interest
hasStrategy	src/management/nfd-control-parameters.hpp	/^  hasStrategy() const$/;"	f	class:ndn::nfd::ControlParameters
hasTimeout	tests/unit-tests/util/notification-subscriber.t.cpp	/^  bool hasTimeout;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
hasUri	src/management/nfd-control-parameters.hpp	/^  hasUri() const$/;"	f	class:ndn::nfd::ControlParameters
hasUriScheme	src/management/nfd-face-query-filter.hpp	/^  hasUriScheme() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasValue	src/encoding/block.cpp	/^Block::hasValue() const$/;"	f	class:ndn::Block
hasWire	src/data.hpp	/^Data::hasWire() const$/;"	f	class:ndn::Data
hasWire	src/encoding/block.cpp	/^Block::hasWire() const$/;"	f	class:ndn::Block
hasWire	src/interest.hpp	/^  hasWire() const$/;"	f	class:ndn::Interest
hasWire	src/name.hpp	/^Name::hasWire() const$/;"	f	class:ndn::Name
hash	src/name.hpp	/^struct hash<ndn::Name>$/;"	s	namespace:std
hash	src/util/ethernet.hpp	/^struct hash<ndn::util::ethernet::Address>$/;"	s	namespace:std
html_file_suffix	docs/conf.py	/^html_file_suffix = ".html"$/;"	v
html_static_path	docs/conf.py	/^html_static_path = ['_static']$/;"	v
html_theme	docs/conf.py	/^html_theme = 'named_data_theme'$/;"	v
html_theme_path	docs/conf.py	/^html_theme_path = ['.\/']$/;"	v
htmlhelp_basename	docs/conf.py	/^htmlhelp_basename = 'ndn-cxx-docs'$/;"	v
htobe16	src/encoding/endian.hpp	42;"	d
htobe32	src/encoding/endian.hpp	46;"	d
htobe64	src/encoding/endian.hpp	50;"	d
htole16	src/encoding/endian.hpp	43;"	d
htole32	src/encoding/endian.hpp	47;"	d
htole64	src/encoding/endian.hpp	51;"	d
id1	tests/unit-tests/security/pib-data-fixture.hpp	/^  Name id1;$/;"	m	class:ndn::security::PibDataFixture
id1Key1	tests/unit-tests/security/pib-data-fixture.hpp	/^  PublicKey id1Key1;$/;"	m	class:ndn::security::PibDataFixture
id1Key1Cert1	tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id1Key1Cert1;$/;"	m	class:ndn::security::PibDataFixture
id1Key1Cert2	tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id1Key1Cert2;$/;"	m	class:ndn::security::PibDataFixture
id1Key1Name	tests/unit-tests/security/pib-data-fixture.hpp	/^  Name id1Key1Name;$/;"	m	class:ndn::security::PibDataFixture
id1Key2	tests/unit-tests/security/pib-data-fixture.hpp	/^  PublicKey id1Key2;$/;"	m	class:ndn::security::PibDataFixture
id1Key2Cert1	tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id1Key2Cert1;$/;"	m	class:ndn::security::PibDataFixture
id1Key2Cert2	tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id1Key2Cert2;$/;"	m	class:ndn::security::PibDataFixture
id1Key2Name	tests/unit-tests/security/pib-data-fixture.hpp	/^  Name id1Key2Name;$/;"	m	class:ndn::security::PibDataFixture
id2	tests/unit-tests/security/pib-data-fixture.hpp	/^  Name id2;$/;"	m	class:ndn::security::PibDataFixture
id2Key1	tests/unit-tests/security/pib-data-fixture.hpp	/^  PublicKey id2Key1;$/;"	m	class:ndn::security::PibDataFixture
id2Key1Cert1	tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id2Key1Cert1;$/;"	m	class:ndn::security::PibDataFixture
id2Key1Cert2	tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id2Key1Cert2;$/;"	m	class:ndn::security::PibDataFixture
id2Key1Name	tests/unit-tests/security/pib-data-fixture.hpp	/^  Name id2Key1Name;$/;"	m	class:ndn::security::PibDataFixture
id2Key2	tests/unit-tests/security/pib-data-fixture.hpp	/^  PublicKey id2Key2;$/;"	m	class:ndn::security::PibDataFixture
id2Key2Cert1	tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id2Key2Cert1;$/;"	m	class:ndn::security::PibDataFixture
id2Key2Cert2	tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id2Key2Cert2;$/;"	m	class:ndn::security::PibDataFixture
id2Key2Name	tests/unit-tests/security/pib-data-fixture.hpp	/^  Name id2Key2Name;$/;"	m	class:ndn::security::PibDataFixture
identity	tests/unit-tests/data.t.cpp	/^  Name identity;$/;"	m	class:ndn::tests::DataIdentityFixture	file:
impl	tests/unit-tests/security/pib-impl.t.cpp	/^  PibMemory impl;$/;"	m	class:ndn::security::tests::PibMemoryWrapper	file:
impl	tests/unit-tests/security/pib-impl.t.cpp	/^  PibSqlite3 impl;$/;"	m	class:ndn::security::tests::PibSqlite3Wrapper	file:
impl	tests/unit-tests/security/pib-sqlite3.t.cpp	/^  PibSqlite3 impl;$/;"	m	class:ndn::security::tests::PibSqlite3TestFixture	file:
importIdentity	src/security/key-chain.cpp	/^KeyChain::importIdentity(const SecuredBag& securedBag, const std::string& passwordStr)$/;"	f	class:ndn::security::KeyChain
importPrivateKeyPkcs5IntoTpm	src/security/key-chain.hpp	/^  importPrivateKeyPkcs5IntoTpm(const Name& keyName,$/;"	f	class:ndn::security::KeyChain
importPrivateKeyPkcs5IntoTpm	src/security/sec-tpm.cpp	/^SecTpm::importPrivateKeyPkcs5IntoTpm(const Name& keyName,$/;"	f	class:ndn::SecTpm
importPrivateKeyPkcs8IntoTpm	src/security/sec-tpm-file.cpp	/^SecTpmFile::importPrivateKeyPkcs8IntoTpm(const Name& keyName, const uint8_t* buf, size_t size)$/;"	f	class:ndn::SecTpmFile
importPrivateKeyPkcs8IntoTpm	src/security/sec-tpm-osx.hpp	/^  importPrivateKeyPkcs8IntoTpm(const Name& keyName, const uint8_t* buf, size_t size)$/;"	f	class:ndn::SecTpmOsx
importPrivateKeyPkcs8IntoTpm	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::importPrivateKeyPkcs8IntoTpm(const Name& keyName, const uint8_t* buffer,$/;"	f	class:ndn::security::DummyTpm
importPrivateKeyPkcs8IntoTpmInternal	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::importPrivateKeyPkcs8IntoTpmInternal(const Name& keyName,$/;"	f	class:ndn::SecTpmOsx
importPublicKeyPkcs1IntoTpm	src/security/sec-tpm-file.cpp	/^SecTpmFile::importPublicKeyPkcs1IntoTpm(const Name& keyName, const uint8_t* buf, size_t size)$/;"	f	class:ndn::SecTpmFile
importPublicKeyPkcs1IntoTpm	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::importPublicKeyPkcs1IntoTpm(const Name& keyName, const uint8_t* buf, size_t size)$/;"	f	class:ndn::SecTpmOsx
importPublicKeyPkcs1IntoTpm	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::importPublicKeyPkcs1IntoTpm(const Name& keyName, const uint8_t* buffer, size_t bufferSize)$/;"	f	class:ndn::security::DummyTpm
incrementFrequency	src/util/in-memory-storage-lfu.hpp	/^  incrementFrequency(CleanupEntry& cleanupEntry)$/;"	f	class:ndn::util::InMemoryStorageLfu
initialize	src/security/key-chain.cpp	/^KeyChain::initialize(const std::string& pibLocator,$/;"	f	class:ndn::security::KeyChain
initializeConfig	tests/unit-tests/transport/transport-fixture.hpp	/^  initializeConfig(const char* path)$/;"	f	class:ndn::TransportFixture
initializeTable	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::initializeTable(const string& tableName, const string& initCommand)$/;"	f	class:ndn::SecPublicInfoSqlite3
insert	src/detail/container-with-on-empty-signal.hpp	/^  insert(const value_type& value)$/;"	f	class:ndn::ContainerWithOnEmptySignal
insert	src/encoding/block.cpp	/^Block::insert(Block::element_const_iterator pos, const Block& element)$/;"	f	class:ndn::Block
insert	src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::insert(shared_ptr<const IdentityCertificate> certificate)$/;"	f	class:ndn::CertificateCacheTtl
insert	src/util/in-memory-storage.cpp	/^InMemoryStorage::insert(const Data& data)$/;"	f	class:ndn::util::InMemoryStorage
insert	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^  insert(uint32_t id, const Name& name)$/;"	f	class:ndn::util::FindFixture
insertCertificate	src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::insertCertificate(shared_ptr<const IdentityCertificate> certificate)$/;"	f	class:ndn::CertificateCacheTtl
interest	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^  shared_ptr<Interest> interest;$/;"	m	class:ndn::mgmt::tests::StatusDatasetContextFixture	file:
interestCheckFailed	tests/unit-tests/security/conf/checker.t.cpp	/^interestCheckFailed(const shared_ptr<const Interest>& interest,$/;"	f	namespace:ndn::security::conf::tests
interestCheckFailedFalse	tests/unit-tests/security/conf/checker.t.cpp	/^interestCheckFailedFalse(const shared_ptr<const Interest>& interest,$/;"	f	namespace:ndn::security::conf::tests
interestChecked	tests/unit-tests/security/conf/checker.t.cpp	/^interestChecked(const shared_ptr<const Interest>& interest)$/;"	f	namespace:ndn::security::conf::tests
interestCheckedFalse	tests/unit-tests/security/conf/checker.t.cpp	/^interestCheckedFalse(const shared_ptr<const Interest>& interest)$/;"	f	namespace:ndn::security::conf::tests
interestFilters	src/mgmt/dispatcher.hpp	/^    std::vector<const ndn::InterestFilterId*> interestFilters;$/;"	m	struct:ndn::mgmt::Dispatcher::TopPrefixEntry
invalidate	src/util/scheduler.cpp	/^  invalidate()$/;"	f	struct:ndn::util::scheduler::EventIdImpl
invokeDataCallback	src/detail/pending-interest.hpp	/^  invokeDataCallback(const Data& data)$/;"	f	class:ndn::PendingInterest
invokeInterestCallback	src/detail/interest-filter-record.hpp	/^  invokeInterestCallback(const Interest& interest) const$/;"	f	class:ndn::InterestFilterRecord
invokeNackCallback	src/detail/pending-interest.hpp	/^  invokeNackCallback(const lp::Nack& nack)$/;"	f	class:ndn::PendingInterest
invokeTimeoutCallback	src/detail/pending-interest.hpp	/^  invokeTimeoutCallback()$/;"	f	class:ndn::PendingInterest
io	src/util/io.hpp	/^namespace io {$/;"	n	namespace:ndn
io	tests/unit-tests/unit-test-time-fixture.hpp	/^  boost::asio::io_service io;$/;"	m	class:ndn::tests::UnitTestTimeFixture
iostreams	src/encoding/buffer-stream.hpp	/^namespace iostreams$/;"	n	namespace:ndn
ip	src/transport/tcp-transport.hpp	/^namespace boost { namespace asio { namespace ip { class tcp; } } }$/;"	n	namespace:boost::asio
isBroadcast	src/util/ethernet.cpp	/^Address::isBroadcast() const$/;"	f	class:ndn::util::ethernet::Address
isCanonical	src/util/face-uri.cpp	/^  isCanonical(const FaceUri& faceUri) const$/;"	f	class:ndn::util::EtherCanonizeProvider
isCanonical	src/util/face-uri.cpp	/^  isCanonical(const FaceUri& faceUri) const$/;"	f	class:ndn::util::IpHostCanonizeProvider
isCanonical	src/util/face-uri.cpp	/^FaceUri::isCanonical() const$/;"	f	class:ndn::util::FaceUri
isChildInherit	src/management/nfd-rib-flags.hpp	/^  isChildInherit() const$/;"	f	class:ndn::nfd::RibFlagsTraits
isConnected	src/transport/transport.hpp	/^Transport::isConnected()$/;"	f	class:ndn::Transport
isConnected	src/util/signal-connection.cpp	/^Connection::isConnected() const$/;"	f	class:ndn::util::signal::Connection
isConnected	src/util/signal-scoped-connection.cpp	/^ScopedConnection::isConnected() const$/;"	f	class:ndn::util::signal::ScopedConnection
isCorrectName	src/security/identity-certificate.cpp	/^IdentityCertificate::isCorrectName(const Name& name)$/;"	f	class:ndn::IdentityCertificate
isEmpty	src/security/certificate-cache.hpp	/^  isEmpty()$/;"	f	class:ndn::CertificateCache
isEmpty	src/security/validator-config.cpp	/^ValidatorConfig::isEmpty()$/;"	f	class:ndn::ValidatorConfig
isEmpty	src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::isEmpty() const$/;"	f	class:ndn::util::signal::Signal
isExcluded	src/exclude.cpp	/^Exclude::isExcluded(const name::Component& comp) const$/;"	f	class:ndn::Exclude
isExempted	src/security/sec-rule-specific.hpp	/^  isExempted() const$/;"	f	class:ndn::SecRuleSpecific
isExpectingData	src/transport/transport.hpp	/^Transport::isExpectingData()$/;"	f	class:ndn::Transport
isFull	src/util/in-memory-storage.hpp	/^  isFull() const$/;"	f	class:ndn::util::InMemoryStorage
isGeneric	src/name-component.cpp	/^Component::isGeneric() const$/;"	f	class:ndn::name::Component
isIdentityCertificate	src/security/identity-certificate.cpp	/^IdentityCertificate::isIdentityCertificate(const Certificate& certificate)$/;"	f	class:ndn::IdentityCertificate
isImplicitSha256Digest	src/name-component.cpp	/^Component::isImplicitSha256Digest() const$/;"	f	class:ndn::name::Component
isLocked	src/security/key-chain.hpp	/^  isLocked() const$/;"	f	class:ndn::security::KeyChain
isLocked	src/security/sec-tpm-file.hpp	/^  isLocked()$/;"	f	class:ndn::SecTpmFile
isLocked	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::isLocked()$/;"	f	class:ndn::SecTpmOsx
isLocked	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::isLocked()$/;"	f	class:ndn::security::DummyTpm
isMulticast	src/util/ethernet.cpp	/^Address::isMulticast() const$/;"	f	class:ndn::util::ethernet::Address
isNull	src/util/ethernet.cpp	/^Address::isNull() const$/;"	f	class:ndn::util::ethernet::Address
isNumber	src/name-component.cpp	/^Component::isNumber() const$/;"	f	class:ndn::name::Component
isNumberWithMarker	src/name-component.cpp	/^Component::isNumberWithMarker(uint8_t marker) const$/;"	f	class:ndn::name::Component
isOverlappedWithOthers	src/mgmt/dispatcher.cpp	/^Dispatcher::isOverlappedWithOthers(const PartialName& relPrefix)$/;"	f	class:ndn::mgmt::Dispatcher
isPositive	src/security/sec-rule.hpp	/^SecRule::isPositive()$/;"	f	class:ndn::SecRule
isPrefixOf	src/name.cpp	/^Name::isPrefixOf(const Name& name) const$/;"	f	class:ndn::Name
isRecognized	src/lp/detail/field-info.hpp	/^  bool isRecognized;$/;"	m	class:ndn::lp::detail::FieldInfo
isRepeatable	src/lp/detail/field-info.hpp	/^  bool isRepeatable;$/;"	m	class:ndn::lp::detail::FieldInfo
isRibCapture	src/management/nfd-rib-flags.hpp	/^  isRibCapture() const$/;"	f	class:ndn::nfd::RibFlagsTraits
isRunning	src/util/notification-subscriber.hpp	/^  isRunning() const$/;"	f	class:ndn::util::NotificationSubscriber
isSegment	src/name-component.cpp	/^Component::isSegment() const$/;"	f	class:ndn::name::Component
isSegmentOffset	src/name-component.cpp	/^Component::isSegmentOffset() const$/;"	f	class:ndn::name::Component
isSequenceNumber	src/name-component.cpp	/^Component::isSequenceNumber() const$/;"	f	class:ndn::name::Component
isSigEmpty	tests/unit-tests/util/signal.t.cpp	/^  isSigEmpty()$/;"	f	class:ndn::util::signal::tests::SignalOwner0
isTimestamp	src/name-component.cpp	/^Component::isTimestamp() const$/;"	f	class:ndn::name::Component
isTooEarly	src/security/certificate.cpp	/^Certificate::isTooEarly()$/;"	f	class:ndn::Certificate
isTooLate	src/security/certificate.cpp	/^Certificate::isTooLate()$/;"	f	class:ndn::Certificate
isValid	src/security/validity-period.cpp	/^ValidityPeriod::isValid(const time::system_clock::TimePoint& now) const$/;"	f	class:ndn::security::ValidityPeriod
isValid	src/util/scheduler.cpp	/^  isValid() const$/;"	f	struct:ndn::util::scheduler::EventIdImpl
isVersion	src/name-component.cpp	/^Component::isVersion() const$/;"	f	class:ndn::name::Component
is_steady	src/util/time.hpp	/^  static constexpr bool is_steady = false;$/;"	m	class:ndn::time::system_clock
is_steady	src/util/time.hpp	/^  static constexpr bool is_steady = true;$/;"	m	class:ndn::time::steady_clock
iterator	src/detail/container-with-on-empty-signal.hpp	/^  typedef typename Base::iterator iterator;$/;"	t	class:ndn::ContainerWithOnEmptySignal
iterator	src/encoding/encoder.hpp	/^  typedef Buffer::iterator iterator;$/;"	t	class:ndn::encoding::Encoder
iterator	src/exclude.hpp	/^  typedef exclude_type::iterator iterator;$/;"	t	class:ndn::Exclude
iterator	src/management/nfd-rib-entry.hpp	/^  typedef RouteList::const_iterator iterator;$/;"	t	class:ndn::nfd::RibEntry
iterator	src/name.hpp	/^  typedef Component*              iterator;$/;"	t	class:ndn::Name
iterator	src/security/additional-description.hpp	/^  typedef std::map<std::string, std::string>::iterator iterator;$/;"	t	class:ndn::security::AdditionalDescription
iterator	src/security/certificate-container.hpp	/^  typedef const_iterator iterator;$/;"	t	class:ndn::security::CertificateContainer
iterator	src/security/identity-container.hpp	/^  typedef const_iterator iterator;$/;"	t	class:ndn::security::IdentityContainer
iterator	src/security/key-container.hpp	/^  typedef const_iterator iterator;$/;"	t	class:ndn::security::KeyContainer
j	src/util/concepts.hpp	/^  X j;$/;"	m	class:ndn::WireEncodable
j	src/util/concepts.hpp	/^  X j;$/;"	m	class:ndn::WireEncodableWithEncodingBuffer
join	waf	/^join = os.path.join$/;"	v
keyChain	tests/unit-tests/data.t.cpp	/^  KeyChain keyChain;$/;"	m	class:ndn::tests::DataIdentityFixture	file:
keyChain	tests/unit-tests/management/nfd-controller.t.cpp	/^  KeyChain keyChain;$/;"	m	class:ndn::nfd::tests::CommandFixture	file:
keyChain	tests/unit-tests/util/segment-fetcher.t.cpp	/^  KeyChain keyChain;$/;"	m	class:ndn::util::tests::Fixture	file:
lastDecodeErrorData	tests/unit-tests/util/notification-subscriber.t.cpp	/^  Data lastDecodeErrorData;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
lastDeliveredSeqNo	tests/unit-tests/util/notification-subscriber.t.cpp	/^  uint64_t lastDeliveredSeqNo;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
lastError	tests/unit-tests/util/segment-fetcher.t.cpp	/^  uint32_t lastError;$/;"	m	class:ndn::util::tests::Fixture	file:
lastNotification	tests/unit-tests/util/notification-subscriber.t.cpp	/^  SimpleNotification lastNotification;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
lateCompile	src/util/regex/regex-backref-matcher.hpp	/^  lateCompile()$/;"	f	class:ndn::RegexBackrefMatcher
latex_documents	docs/conf.py	/^latex_documents = [$/;"	v
latex_elements	docs/conf.py	/^latex_elements = {$/;"	v
le16toh	src/encoding/endian.hpp	45;"	d
le32toh	src/encoding/endian.hpp	49;"	d
le64toh	src/encoding/endian.hpp	53;"	d
less_than	src/util/monotonic_deadline_timer.hpp	/^  less_than(const time_type& timeLhs, const time_type& timeRhs)$/;"	f	struct:boost::asio::time_traits
list	src/lp/packet.hpp	/^  list() const$/;"	f	class:ndn::lp::Packet
load	src/security/validator-config.cpp	/^ValidatorConfig::load(const security::conf::ConfigSection& configSection,$/;"	f	class:ndn::ValidatorConfig
load	src/security/validator-config.cpp	/^ValidatorConfig::load(const std::string& filename)$/;"	f	class:ndn::ValidatorConfig
load	src/security/validator-config.cpp	/^ValidatorConfig::load(const std::string& input, const std::string& filename)$/;"	f	class:ndn::ValidatorConfig
load	src/security/validator-config.cpp	/^ValidatorConfig::load(std::istream& input, const std::string& filename)$/;"	f	class:ndn::ValidatorConfig
load	src/util/io.hpp	/^load(const std::string& file, IoEncoding encoding = BASE_64)$/;"	f	namespace:ndn::io
load	src/util/io.hpp	/^load(std::istream& is, IoEncoding encoding = BASE_64)$/;"	f	namespace:ndn::io
local	src/transport/unix-transport.hpp	/^namespace boost { namespace asio { namespace local { class stream_protocol; } } }$/;"	n	namespace:boost::asio
locationSortOrder	src/lp/detail/field-info.hpp	/^  int locationSortOrder;$/;"	m	class:ndn::lp::detail::FieldInfo
lp	src/lp/cache-policy.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	src/lp/cache-policy.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	src/lp/detail/field-decl.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	src/lp/detail/field-info.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	src/lp/detail/field-info.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	src/lp/field.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	src/lp/fields.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	src/lp/nack-header.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	src/lp/nack-header.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	src/lp/nack.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	src/lp/nack.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	src/lp/packet.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	src/lp/packet.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	src/lp/sequence.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	src/lp/tlv.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	tests/unit-tests/lp/cache-policy.t.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	tests/unit-tests/lp/nack-header.t.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	tests/unit-tests/lp/nack.t.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	tests/unit-tests/lp/packet.t.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
m_HOME	tests/unit-tests/security/identity-fixture.cpp	/^  std::string m_HOME;$/;"	m	class:ndn::security::IdentityFixture	file:
m_HOME	tests/unit-tests/security/sec-tpm-osx.t.cpp	/^  std::string m_HOME;$/;"	m	class:ndn::tests::OsxKeyChainTestFixture	file:
m_HOME	tests/unit-tests/transport/transport-fixture.hpp	/^  std::string m_HOME;$/;"	m	class:ndn::TransportFixture
m_HOME	tests/unit-tests/util/test-home-environment-fixture.hpp	/^  std::string m_HOME;$/;"	m	class:ndn::util::TestHomeEnvironmentFixture
m_OLD_HOME	tests/unit-tests/security/identity-fixture.cpp	/^  std::string m_OLD_HOME;$/;"	m	class:ndn::security::IdentityFixture	file:
m_addressSelector	src/util/dns.cpp	/^  ndn::dns::AddressSelector m_addressSelector;$/;"	m	class:ndn::dns::Resolver	file:
m_afterInterest	src/detail/interest-filter-record.hpp	/^  InterestCallback m_afterInterest;$/;"	m	class:ndn::InterestFilterRecord
m_anchors	src/security/validator-config.hpp	/^  AnchorList m_anchors;$/;"	m	class:ndn::ValidatorConfig
m_appMetaInfo	src/meta-info.hpp	/^  std::list<Block> m_appMetaInfo;$/;"	m	class:ndn::MetaInfo
m_backrefManager	src/util/regex/regex-matcher.hpp	/^  shared_ptr<RegexBackrefManager> m_backrefManager;$/;"	m	class:ndn::RegexMatcher
m_backrefs	src/util/regex/regex-backref-manager.hpp	/^  std::vector<shared_ptr<RegexMatcher> > m_backrefs;$/;"	m	class:ndn::RegexBackrefManager
m_baseScheme	src/util/face-uri.cpp	/^  std::string m_baseScheme;$/;"	m	class:ndn::util::IpHostCanonizeProvider	file:
m_begin	src/encoding/block.hpp	/^  Buffer::const_iterator m_begin;$/;"	m	class:ndn::Block
m_begin	src/encoding/encoder.hpp	/^  iterator m_begin;$/;"	m	class:ndn::encoding::Encoder
m_body	src/mgmt/control-response.hpp	/^  Block m_body;$/;"	m	class:ndn::mgmt::ControlResponse
m_buffer	src/encoding/block.hpp	/^  shared_ptr<const Buffer> m_buffer;$/;"	m	class:ndn::Block
m_buffer	src/encoding/buffer-stream.hpp	/^  BufferPtr m_buffer;$/;"	m	class:ndn::OBufferStream
m_buffer	src/encoding/encoder.hpp	/^  shared_ptr<Buffer> m_buffer;$/;"	m	class:ndn::encoding::Encoder
m_buffer	src/mgmt/status-dataset-context.hpp	/^  shared_ptr<EncodingBuffer> m_buffer;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_buffer	src/util/digest.hpp	/^  BufferPtr m_buffer;$/;"	m	class:ndn::util::Digest
m_buffer	src/util/indented-stream.hpp	/^  StreamBuf m_buffer;$/;"	m	class:ndn::util::IndentedStream
m_buffer	src/util/segment-fetcher.hpp	/^  shared_ptr<OBufferStream> m_buffer;$/;"	m	class:ndn::util::SegmentFetcher
m_cache	src/security/certificate-cache-ttl.hpp	/^  Cache m_cache;$/;"	m	class:ndn::CertificateCacheTtl
m_cache	src/util/in-memory-storage.hpp	/^    const Cache* m_cache;$/;"	m	class:ndn::util::InMemoryStorage::const_iterator
m_cache	src/util/in-memory-storage.hpp	/^  Cache m_cache;$/;"	m	class:ndn::util::InMemoryStorage
m_cachingPolicy	src/management/nfd-local-control-header.hpp	/^  CachingPolicy m_cachingPolicy;$/;"	m	class:ndn::nfd::LocalControlHeader
m_capacity	src/util/in-memory-storage.hpp	/^  size_t m_capacity;$/;"	m	class:ndn::util::InMemoryStorage
m_cert	src/security/secured-bag.hpp	/^  IdentityCertificate m_cert;$/;"	m	class:ndn::SecuredBag
m_certNames	src/security/certificate-container.hpp	/^  std::set<Name> m_certNames;$/;"	m	class:ndn::security::CertificateContainer
m_certificateCache	src/security/validator-config.hpp	/^  shared_ptr<CertificateCache> m_certificateCache;$/;"	m	class:ndn::ValidatorConfig
m_certificateCache	src/security/validator-regex.hpp	/^  shared_ptr<CertificateCache> m_certificateCache;$/;"	m	class:ndn::ValidatorRegex
m_certificates	src/security/key.hpp	/^  mutable CertificateContainer m_certificates;$/;"	m	class:ndn::security::Key
m_certificates	src/security/validator-config.hpp	/^    std::list<shared_ptr<IdentityCertificate> > m_certificates;$/;"	m	class:ndn::ValidatorConfig::TrustAnchorContainer
m_certs	src/security/pib-memory.hpp	/^  std::map<Name, IdentityCertificate> m_certs;$/;"	m	class:ndn::security::PibMemory
m_checkers	src/security/conf/rule.hpp	/^  CheckerList m_checkers;$/;"	m	class:ndn::security::conf::Rule
m_childSelector	src/selectors.hpp	/^  int m_childSelector;$/;"	m	class:ndn::Selectors
m_cleanupIndex	src/util/in-memory-storage-fifo.hpp	/^  CleanupIndex m_cleanupIndex;$/;"	m	class:ndn::util::InMemoryStorageFifo
m_cleanupIndex	src/util/in-memory-storage-lfu.hpp	/^  CleanupIndex m_cleanupIndex;$/;"	m	class:ndn::util::InMemoryStorageLfu
m_cleanupIndex	src/util/in-memory-storage-lru.hpp	/^  CleanupIndex m_cleanupIndex;$/;"	m	class:ndn::util::InMemoryStorageLru
m_code	src/mgmt/control-response.hpp	/^  uint32_t m_code;$/;"	m	class:ndn::mgmt::ControlResponse
m_completeCallback	src/util/segment-fetcher.hpp	/^  CompleteCallback m_completeCallback;$/;"	m	class:ndn::util::SegmentFetcher
m_componentRegex	src/util/regex/regex-component-matcher.hpp	/^  boost::regex m_componentRegex;$/;"	m	class:ndn::RegexComponentMatcher
m_components	src/util/regex/regex-component-set-matcher.hpp	/^  ComponentsSet m_components;$/;"	m	class:ndn::RegexComponentSetMatcher
m_config	src/util/config-file.hpp	/^  Parsed m_config;$/;"	m	class:ndn::ConfigFile
m_config	tests/unit-tests/transport/transport-fixture.hpp	/^  unique_ptr<ConfigFile> m_config;$/;"	m	class:ndn::TransportFixture
m_connectTimer	src/transport/stream-transport.hpp	/^  boost::asio::deadline_timer m_connectTimer;$/;"	m	class:ndn::StreamTransportImpl
m_connection	src/util/signal-scoped-connection.cpp	/^  : m_connection(other.m_connection)$/;"	f	namespace:ndn::util::signal
m_connection	src/util/signal-scoped-connection.hpp	/^  Connection m_connection;$/;"	m	class:ndn::util::signal::ScopedConnection
m_connectionInProgress	src/transport/stream-transport.hpp	/^  bool m_connectionInProgress;$/;"	m	class:ndn::StreamTransportImpl
m_container	src/detail/container-with-on-empty-signal.hpp	/^  Base m_container;$/;"	m	class:ndn::ContainerWithOnEmptySignal
m_container	src/encoding/buffer-stream.hpp	/^  Buffer& m_container;$/;"	m	class:ndn::iostreams::buffer_append_device
m_content	src/data.hpp	/^  mutable Block m_content;$/;"	m	class:ndn::Data
m_cost	src/management/nfd-control-parameters.hpp	/^  uint64_t            m_cost;$/;"	m	class:ndn::nfd::ControlParameters
m_cost	src/management/nfd-fib-entry.hpp	/^  uint64_t m_cost;$/;"	m	class:ndn::nfd::NextHopRecord
m_cost	src/management/nfd-rib-entry.hpp	/^  uint64_t m_cost;$/;"	m	class:ndn::nfd::Route
m_currentSlot	src/util/signal-signal.hpp	/^  typename SlotList::iterator m_currentSlot;$/;"	m	class:ndn::util::signal::Signal
m_currentTime	src/util/time-unit-test-clock.hpp	/^  nanoseconds m_currentTime;$/;"	m	class:ndn::time::UnitTestClock
m_currentTimestamp	src/management/nfd-forwarder-status.hpp	/^  time::system_clock::TimePoint m_currentTimestamp;$/;"	m	class:ndn::nfd::ForwarderStatus
m_dataCallback	src/detail/pending-interest.hpp	/^  DataCallback m_dataCallback;$/;"	m	class:ndn::PendingInterest
m_dataExpand	src/security/sec-rule-relative.hpp	/^  const std::string m_dataExpand;$/;"	m	class:ndn::SecRuleRelative
m_dataName	tools/ndncatchunks3.cpp	/^  Name m_dataName;$/;"	m	class:ndn::Consumer	file:
m_dataNameRegex	src/security/sec-rule-relative.hpp	/^  Regex m_dataNameRegex;$/;"	m	class:ndn::SecRuleRelative
m_dataPacket	src/util/in-memory-storage-entry.hpp	/^  shared_ptr<const Data> m_dataPacket;$/;"	m	class:ndn::util::InMemoryStorageEntry
m_dataRegex	src/security/sec-rule-relative.hpp	/^  const std::string m_dataRegex;$/;"	m	class:ndn::SecRuleRelative
m_dataRegex	src/security/sec-rule-specific.hpp	/^  shared_ptr<Regex> m_dataRegex;$/;"	m	class:ndn::SecRuleSpecific
m_dataRules	src/security/validator-config.hpp	/^  DataRuleList m_dataRules;$/;"	m	class:ndn::ValidatorConfig
m_dataSender	src/mgmt/status-dataset-context.hpp	/^  DataSender m_dataSender;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_database	src/security/pib-sqlite3.hpp	/^  sqlite3* m_database;$/;"	m	class:ndn::security::PibSqlite3
m_database	src/security/sec-public-info-sqlite3.hpp	/^  sqlite3* m_database;$/;"	m	class:ndn::SecPublicInfoSqlite3
m_deadlineTimer	src/util/scheduler.hpp	/^  monotonic_deadline_timer m_deadlineTimer;$/;"	m	class:ndn::util::scheduler::Scheduler
m_default	tools/ndnsec/util.hpp	/^    T m_default;$/;"	m	class:AccumulatorType
m_defaultCert	src/security/pib-memory.hpp	/^  std::map<Name, Name> m_defaultCert;$/;"	m	class:ndn::security::PibMemory
m_defaultCertificate	src/security/key.hpp	/^  mutable IdentityCertificate m_defaultCertificate;$/;"	m	class:ndn::security::Key
m_defaultCertificate	src/security/sec-public-info.hpp	/^  shared_ptr<IdentityCertificate> m_defaultCertificate;$/;"	m	class:ndn::SecPublicInfo
m_defaultIdentity	src/security/pib-memory.hpp	/^  Name m_defaultIdentity;$/;"	m	class:ndn::security::PibMemory
m_defaultIdentity	src/security/pib.hpp	/^  mutable Identity m_defaultIdentity;$/;"	m	class:ndn::security::Pib
m_defaultKey	src/security/identity.hpp	/^  mutable Key m_defaultKey;$/;"	m	class:ndn::security::Identity
m_defaultKey	src/security/pib-memory.hpp	/^  std::map<Name, Name> m_defaultKey;$/;"	m	class:ndn::security::PibMemory
m_defaultMulticastPort	src/util/face-uri.cpp	/^  uint32_t m_defaultMulticastPort;$/;"	m	class:ndn::util::IpHostCanonizeProvider	file:
m_defaultTtl	src/security/certificate-cache-ttl.hpp	/^  time::seconds m_defaultTtl;$/;"	m	class:ndn::CertificateCacheTtl
m_defaultUnicastPort	src/util/face-uri.cpp	/^  uint32_t m_defaultUnicastPort;$/;"	m	class:ndn::util::IpHostCanonizeProvider	file:
m_delegations	src/link.hpp	/^  DelegationSet m_delegations;$/;"	m	class:ndn::Link
m_deleter	src/detail/pending-interest.hpp	/^  std::function<void()> m_deleter;$/;"	m	class:ndn::PendingInterest
m_device	src/encoding/buffer-stream.hpp	/^  iostreams::buffer_append_device m_device;$/;"	m	class:ndn::OBufferStream
m_digest	src/security/public-key.hpp	/^  mutable Block m_digest;$/;"	m	class:ndn::PublicKey
m_digestAlgorithm	src/security/signing-info.hpp	/^  DigestAlgorithm m_digestAlgorithm;$/;"	m	class:ndn::security::SigningInfo
m_disconnect	src/util/signal-connection.hpp	/^  weak_ptr<function<void()>> m_disconnect;$/;"	m	class:ndn::util::signal::Connection
m_dynamicContainers	src/security/validator-config.hpp	/^  DynamicContainers m_dynamicContainers;$/;"	m	class:ndn::ValidatorConfig
m_end	src/encoding/block.hpp	/^  Buffer::const_iterator m_end;$/;"	m	class:ndn::Block
m_end	src/encoding/encoder.hpp	/^  iterator m_end;$/;"	m	class:ndn::encoding::Encoder
m_errorCallback	src/util/segment-fetcher.hpp	/^  ErrorCallback m_errorCallback;$/;"	m	class:ndn::util::SegmentFetcher
m_event	src/util/scheduler-scoped-event-id.cpp	/^  , m_event(other.m_event)$/;"	f	namespace:ndn::util::scheduler
m_event	src/util/scheduler-scoped-event-id.hpp	/^  EventId m_event;$/;"	m	class:ndn::util::scheduler::ScopedEventId
m_event	src/util/scheduler.cpp	/^  Scheduler::EventQueue::iterator m_event;$/;"	m	struct:ndn::util::scheduler::EventIdImpl	file:
m_event	src/util/scheduler.hpp	/^    Event m_event;$/;"	m	struct:ndn::util::scheduler::Scheduler::EventInfo
m_eventId	src/util/scheduler.hpp	/^    mutable EventId m_eventId;$/;"	m	struct:ndn::util::scheduler::Scheduler::EventInfo
m_events	src/util/scheduler.hpp	/^  EventQueue m_events;$/;"	m	class:ndn::util::scheduler::Scheduler
m_exclude	src/exclude.hpp	/^  exclude_type m_exclude;$/;"	m	class:ndn::Exclude
m_exclude	src/selectors.hpp	/^  Exclude m_exclude;$/;"	m	class:ndn::Selectors
m_expand	src/util/regex/regex-top-matcher.hpp	/^  const std::string m_expand;$/;"	m	class:ndn::RegexTopMatcher
m_expectedUri	tests/unit-tests/util/face-uri.t.cpp	/^    std::string m_expectedUri;$/;"	m	class:ndn::util::tests::CanonizeFixture::CanonizeTestCase	file:
m_expirationPeriod	src/management/nfd-control-parameters.hpp	/^  time::milliseconds  m_expirationPeriod;$/;"	m	class:ndn::nfd::ControlParameters
m_expirationPeriod	src/management/nfd-face-status.hpp	/^  time::milliseconds m_expirationPeriod;$/;"	m	class:ndn::nfd::FaceStatus
m_expirationPeriod	src/management/nfd-rib-entry.hpp	/^  time::milliseconds m_expirationPeriod;$/;"	m	class:ndn::nfd::Route
m_expiry	src/mgmt/status-dataset-context.hpp	/^  time::milliseconds m_expiry;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_expr	src/util/regex/regex-matcher.hpp	/^  const std::string m_expr;$/;"	m	class:ndn::RegexMatcher
m_extensionId	src/security/certificate-extension.hpp	/^  OID m_extensionId;$/;"	m	class:ndn::CertificateExtension
m_extensionList	src/security/certificate.hpp	/^  ExtensionList m_extensionList;$/;"	m	class:ndn::Certificate
m_extensionValue	src/security/certificate-extension.hpp	/^  Buffer m_extensionValue;$/;"	m	class:ndn::CertificateExtension
m_face	examples/consumer-with-timer.cpp	/^  Face m_face;$/;"	m	class:ndn::examples::ConsumerWithTimer	file:
m_face	examples/consumer.cpp	/^  Face m_face;$/;"	m	class:ndn::examples::Consumer	file:
m_face	examples/producer.cpp	/^  Face m_face;$/;"	m	class:ndn::examples::Producer	file:
m_face	src/detail/face-impl.hpp	/^  Face& m_face;$/;"	m	class:ndn::Face::Impl
m_face	src/management/nfd-controller.hpp	/^  Face& m_face;$/;"	m	class:ndn::nfd::Controller
m_face	src/mgmt/dispatcher.hpp	/^  Face& m_face;$/;"	m	class:ndn::mgmt::Dispatcher
m_face	src/security/validator.hpp	/^  Face* m_face;$/;"	m	class:ndn::Validator
m_face	src/util/notification-stream.hpp	/^  Face& m_face;$/;"	m	class:ndn::util::NotificationStream
m_face	src/util/notification-subscriber.hpp	/^  Face& m_face;$/;"	m	class:ndn::util::NotificationSubscriber
m_face	src/util/segment-fetcher.hpp	/^  Face& m_face;$/;"	m	class:ndn::util::SegmentFetcher
m_face	tools/ndncatchunks3.cpp	/^  Face m_face;$/;"	m	class:ndn::Consumer	file:
m_face	tools/ndnputchunks3.cpp	/^  Face m_face;$/;"	m	class:ndn::Producer	file:
m_faceId	src/management/nfd-control-parameters.hpp	/^  uint64_t            m_faceId;$/;"	m	class:ndn::nfd::ControlParameters
m_faceId	src/management/nfd-face-query-filter.hpp	/^  uint64_t m_faceId;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_faceId	src/management/nfd-face-traits.hpp	/^  uint64_t m_faceId;$/;"	m	class:ndn::nfd::FaceTraits
m_faceId	src/management/nfd-fib-entry.hpp	/^  uint64_t m_faceId;$/;"	m	class:ndn::nfd::NextHopRecord
m_faceId	src/management/nfd-rib-entry.hpp	/^  uint64_t m_faceId;$/;"	m	class:ndn::nfd::Route
m_facePersistency	src/management/nfd-control-parameters.hpp	/^  FacePersistency     m_facePersistency;$/;"	m	class:ndn::nfd::ControlParameters
m_facePersistency	src/management/nfd-face-query-filter.hpp	/^  FacePersistency m_facePersistency;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_facePersistency	src/management/nfd-face-traits.hpp	/^  FacePersistency  m_facePersistency;$/;"	m	class:ndn::nfd::FaceTraits
m_faceScope	src/management/nfd-face-query-filter.hpp	/^  FaceScope m_faceScope;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_faceScope	src/management/nfd-face-traits.hpp	/^  FaceScope m_faceScope;$/;"	m	class:ndn::nfd::FaceTraits
m_filter	src/detail/interest-filter-record.hpp	/^  InterestFilter m_filter;$/;"	m	class:ndn::InterestFilterRecord
m_filter	src/detail/registered-prefix.hpp	/^  shared_ptr<InterestFilterRecord> m_filter;$/;"	m	class:ndn::RegisteredPrefix
m_filters	src/security/conf/rule.hpp	/^  FilterList m_filters;$/;"	m	class:ndn::security::conf::Rule
m_finalBlockId	src/meta-info.hpp	/^  name::Component m_finalBlockId;$/;"	m	class:ndn::MetaInfo
m_flags	src/management/nfd-control-parameters.hpp	/^  uint64_t            m_flags;$/;"	m	class:ndn::nfd::ControlParameters
m_flags	src/management/nfd-rib-entry.hpp	/^  uint64_t m_flags;$/;"	m	class:ndn::nfd::Route
m_freeEntries	src/util/in-memory-storage.hpp	/^  std::stack<InMemoryStorageEntry*> m_freeEntries;$/;"	m	class:ndn::util::InMemoryStorage
m_freshnessPeriod	src/meta-info.hpp	/^  time::milliseconds m_freshnessPeriod;$/;"	m	class:ndn::MetaInfo
m_fullName	src/data.hpp	/^  mutable Name m_fullName;$/;"	m	class:ndn::Data
m_graceInterval	src/security/validator-config.hpp	/^  time::milliseconds m_graceInterval;$/;"	m	class:ndn::ValidatorConfig
m_graceInterval	src/util/command-interest-validator.hpp	/^  time::milliseconds m_graceInterval; \/\/ms$/;"	m	class:ndn::CommandInterestValidator
m_handlers	src/mgmt/dispatcher.hpp	/^  HandlerMap m_handlers;$/;"	m	class:ndn::mgmt::Dispatcher
m_hasDefaultCertificate	src/security/key.hpp	/^  mutable bool m_hasDefaultCertificate;$/;"	m	class:ndn::security::Key
m_hasDefaultIdentity	src/security/pib-memory.hpp	/^  bool m_hasDefaultIdentity;$/;"	m	class:ndn::security::PibMemory
m_hasDefaultIdentity	src/security/pib.hpp	/^  mutable bool m_hasDefaultIdentity;$/;"	m	class:ndn::security::Pib
m_hasDefaultKey	src/security/identity.hpp	/^  mutable bool m_hasDefaultKey;$/;"	m	class:ndn::security::Identity
m_hasExpirationPeriod	src/management/nfd-face-status.hpp	/^  bool m_hasExpirationPeriod;$/;"	m	class:ndn::nfd::FaceStatus
m_hasFaceId	src/management/nfd-face-query-filter.hpp	/^  bool m_hasFaceId;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasFacePersistency	src/management/nfd-face-query-filter.hpp	/^  bool m_hasFacePersistency;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasFaceScope	src/management/nfd-face-query-filter.hpp	/^  bool m_hasFaceScope;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasFields	src/management/nfd-control-parameters.hpp	/^  std::vector<bool>   m_hasFields;$/;"	m	class:ndn::nfd::ControlParameters
m_hasInfiniteExpirationPeriod	src/management/nfd-rib-entry.hpp	/^  bool m_hasInfiniteExpirationPeriod;$/;"	m	class:ndn::nfd::Route
m_hasIpv4	tests/unit-tests/network-configuration-detector.cpp	/^bool NetworkConfigurationDetector::m_hasIpv4 = false;$/;"	m	class:ndn::tests::NetworkConfigurationDetector	file:
m_hasIpv4	tests/unit-tests/network-configuration-detector.hpp	/^  static bool m_hasIpv4;$/;"	m	class:ndn::tests::NetworkConfigurationDetector
m_hasIpv6	tests/unit-tests/network-configuration-detector.cpp	/^bool NetworkConfigurationDetector::m_hasIpv6 = false;$/;"	m	class:ndn::tests::NetworkConfigurationDetector	file:
m_hasIpv6	tests/unit-tests/network-configuration-detector.hpp	/^  static bool m_hasIpv6;$/;"	m	class:ndn::tests::NetworkConfigurationDetector
m_hasKeyLocator	src/signature-info.hpp	/^  bool m_hasKeyLocator;$/;"	m	class:ndn::SignatureInfo
m_hasLinkType	src/management/nfd-face-query-filter.hpp	/^  bool m_hasLinkType;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasLocalUri	src/management/nfd-face-query-filter.hpp	/^  bool m_hasLocalUri;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasOldDefaultIdentity	tests/unit-tests/security/identity-fixture.cpp	/^  bool m_hasOldDefaultIdentity;$/;"	m	class:ndn::security::IdentityFixture	file:
m_hasRemoteUri	src/management/nfd-face-query-filter.hpp	/^  bool m_hasRemoteUri;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasUriScheme	src/management/nfd-face-query-filter.hpp	/^  bool m_hasUriScheme;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hash	src/util/digest.hpp	/^  Hash m_hash;$/;"	m	class:ndn::util::Digest
m_header	src/lp/nack.hpp	/^  NackHeader m_header;$/;"	m	class:ndn::lp::Nack
m_host	src/transport/tcp-transport.hpp	/^  std::string m_host;$/;"	m	class:ndn::TcpTransport
m_host	src/util/face-uri.hpp	/^  std::string m_host;$/;"	m	class:ndn::util::FaceUri
m_hyperKRegex	src/security/conf/key-locator-checker.hpp	/^  shared_ptr<Regex> m_hyperKRegex;$/;"	m	class:ndn::security::conf::HyperKeyLocatorNameChecker
m_hyperPRegex	src/security/conf/key-locator-checker.hpp	/^  shared_ptr<Regex> m_hyperPRegex;$/;"	m	class:ndn::security::conf::HyperKeyLocatorNameChecker
m_hyperRelation	src/security/conf/key-locator-checker.hpp	/^  Relation m_hyperRelation;$/;"	m	class:ndn::security::conf::HyperKeyLocatorNameChecker
m_id	src/detail/interest-filter-record.hpp	/^  const InterestFilterId* m_id;$/;"	m	class:ndn::MatchInterestFilterId
m_id	src/detail/pending-interest.hpp	/^  const PendingInterestId* m_id;$/;"	m	class:ndn::MatchPendingInterestId
m_id	src/detail/registered-prefix.hpp	/^  const RegisteredPrefixId* m_id;$/;"	m	class:ndn::MatchRegisteredPrefixId
m_id	src/security/conf/rule.hpp	/^  std::string m_id;$/;"	m	class:ndn::security::conf::Rule
m_id	src/security/key.hpp	/^  Name m_id;$/;"	m	class:ndn::security::Key
m_identities	src/security/identity-container.hpp	/^  std::set<Name> m_identities;$/;"	m	class:ndn::security::IdentityContainer
m_identities	src/security/pib-memory.hpp	/^  std::set<Name> m_identities;$/;"	m	class:ndn::security::PibMemory
m_identities	src/security/pib.hpp	/^  mutable IdentityContainer m_identities;$/;"	m	class:ndn::security::Pib
m_identities	tests/identity-management-fixture.hpp	/^  std::vector<Name> m_identities;$/;"	m	class:ndn::security::IdentityManagementFixture
m_identity	src/security/identity-container.hpp	/^    Name m_identity;$/;"	m	class:ndn::security::IdentityContainer::const_iterator
m_identity	src/security/key-container.hpp	/^    Name m_identity;$/;"	m	class:ndn::security::KeyContainer::const_iterator
m_identity	src/security/key-container.hpp	/^  Name m_identity;$/;"	m	class:ndn::security::KeyContainer
m_impl	src/face.hpp	/^  unique_ptr<Impl> m_impl;$/;"	m	class:ndn::Face
m_impl	src/security/certificate-container.hpp	/^    shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::CertificateContainer::const_iterator
m_impl	src/security/certificate-container.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::CertificateContainer
m_impl	src/security/identity-container.hpp	/^    shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::IdentityContainer::const_iterator
m_impl	src/security/identity-container.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::IdentityContainer
m_impl	src/security/identity.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::Identity
m_impl	src/security/key-container.hpp	/^    shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::KeyContainer::const_iterator
m_impl	src/security/key-container.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::KeyContainer
m_impl	src/security/key.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::Key
m_impl	src/security/pib.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::Pib
m_impl	src/security/sec-tpm-file.hpp	/^  unique_ptr<Impl> m_impl;$/;"	m	class:ndn::SecTpmFile
m_impl	src/security/sec-tpm-osx.hpp	/^  shared_ptr<Impl> m_impl;$/;"	m	class:ndn::SecTpmOsx
m_impl	src/transport/tcp-transport.hpp	/^  shared_ptr< Impl > m_impl;$/;"	m	class:ndn::TcpTransport
m_impl	src/transport/unix-transport.hpp	/^  shared_ptr< Impl > m_impl;$/;"	m	class:ndn::UnixTransport
m_impl	src/util/network-monitor.hpp	/^  std::unique_ptr<Impl> m_impl;$/;"	m	class:ndn::util::NetworkMonitor
m_ims	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^  InMemoryStoragePersistent m_ims;$/;"	m	class:ndn::util::FindFixture	file:
m_inTerminal	src/security/sec-tpm-file.hpp	/^  bool m_inTerminal;$/;"	m	class:ndn::SecTpmFile
m_inTerminal	src/security/sec-tpm-osx.cpp	/^  bool m_inTerminal;$/;"	m	class:ndn::SecTpmOsx::Impl	file:
m_incomingFaceId	src/management/nfd-local-control-header.hpp	/^  uint64_t m_incomingFaceId;$/;"	m	class:ndn::nfd::LocalControlHeader
m_indent	src/util/indented-stream.hpp	/^    std::string m_indent;$/;"	m	class:ndn::util::IndentedStream::StreamBuf
m_indicator	src/util/regex/regex-repeat-matcher.hpp	/^  size_t m_indicator;$/;"	m	class:ndn::RegexRepeatMatcher
m_info	src/security/additional-description.hpp	/^  std::map<std::string, std::string> m_info;$/;"	m	class:ndn::security::AdditionalDescription
m_info	src/security/signing-info.hpp	/^  SignatureInfo m_info;$/;"	m	class:ndn::security::SigningInfo
m_info	src/signature.hpp	/^  SignatureInfo m_info;$/;"	m	class:ndn::Signature
m_input	src/util/config-file.hpp	/^  std::ifstream m_input;$/;"	m	class:ndn::ConfigFile
m_inputBuffer	src/transport/stream-transport.hpp	/^  uint8_t m_inputBuffer[MAX_NDN_PACKET_SIZE];$/;"	m	class:ndn::StreamTransportImpl
m_inputBufferSize	src/transport/stream-transport.hpp	/^  size_t m_inputBufferSize;$/;"	m	class:ndn::StreamTransportImpl
m_interest	src/detail/pending-interest.hpp	/^  shared_ptr<const Interest> m_interest;$/;"	m	class:ndn::PendingInterest
m_interest	src/lp/nack.hpp	/^  Interest m_interest;$/;"	m	class:ndn::lp::Nack
m_interest	src/mgmt/status-dataset-context.hpp	/^  const Interest& m_interest;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_interest	src/security/validation-request.hpp	/^  Interest m_interest;$/;"	m	class:ndn::ValidationRequest
m_interest	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^  shared_ptr<Interest> m_interest;$/;"	m	class:ndn::util::FindFixture	file:
m_interestFilterTable	src/detail/face-impl.hpp	/^  InterestFilterTable m_interestFilterTable;$/;"	m	class:ndn::Face::Impl
m_interestLifetime	src/interest.hpp	/^  time::milliseconds m_interestLifetime;$/;"	m	class:ndn::Interest
m_interestLifetime	src/util/notification-subscriber.hpp	/^  time::milliseconds m_interestLifetime;$/;"	m	class:ndn::util::NotificationSubscriber
m_interestRules	src/security/validator-config.hpp	/^  InterestRuleList m_interestRules;$/;"	m	class:ndn::ValidatorConfig
m_internalIoService	src/face.hpp	/^  unique_ptr<boost::asio::io_service> m_internalIoService;$/;"	m	class:ndn::Face
m_internalKeyChain	src/face.hpp	/^  unique_ptr<KeyChain> m_internalKeyChain;$/;"	m	class:ndn::Face
m_interval	tools/ndnsec/util.hpp	/^    T m_interval;$/;"	m	class:AccumulatorType
m_io	src/security/certificate-cache-ttl.hpp	/^  boost::asio::io_service& m_io;$/;"	m	class:ndn::CertificateCacheTtl
m_io	tests/unit-tests/util/face-uri.t.cpp	/^  boost::asio::io_service m_io;$/;"	m	class:ndn::util::tests::CanonizeFixture	file:
m_ioService	examples/consumer-with-timer.cpp	/^  boost::asio::io_service m_ioService;$/;"	m	class:ndn::examples::ConsumerWithTimer	file:
m_ioService	src/face.hpp	/^  boost::asio::io_service& m_ioService;$/;"	m	class:ndn::Face
m_ioService	src/transport/transport.hpp	/^  boost::asio::io_service* m_ioService;$/;"	m	class:ndn::Transport
m_ioService	tests/unit-tests/util/dns.t.cpp	/^  boost::asio::io_service m_ioService;$/;"	m	class:ndn::util::tests::DnsFixture	file:
m_ioServiceWork	src/detail/face-impl.hpp	/^  unique_ptr<boost::asio::io_service::work> m_ioServiceWork; \/\/ if thread needs to be preserved$/;"	m	class:ndn::Face::Impl
m_isCompleted	tests/unit-tests/util/face-uri.t.cpp	/^    bool m_isCompleted;$/;"	m	class:ndn::util::tests::CanonizeFixture::CanonizeTestCase	file:
m_isConnected	src/transport/transport.hpp	/^  bool m_isConnected;$/;"	m	class:ndn::Transport
m_isCritical	src/security/certificate-extension.hpp	/^  bool m_isCritical;$/;"	m	class:ndn::CertificateExtension
m_isDir	src/security/validator-config.hpp	/^    bool m_isDir;$/;"	m	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
m_isEventExecuting	src/util/scheduler.hpp	/^  bool m_isEventExecuting;$/;"	m	class:ndn::util::scheduler::Scheduler
m_isExactMatch	src/util/regex/regex-component-matcher.hpp	/^  bool m_isExactMatch;$/;"	m	class:ndn::RegexComponentMatcher
m_isExecuting	src/util/signal-signal.hpp	/^  bool m_isExecuting;$/;"	m	class:ndn::util::signal::Signal
m_isExempted	src/security/sec-rule-specific.hpp	/^  bool m_isExempted;$/;"	m	class:ndn::SecRuleSpecific
m_isExpectingData	src/transport/transport.hpp	/^  bool m_isExpectingData;$/;"	m	class:ndn::Transport
m_isFinalized	src/util/digest.hpp	/^  bool m_isFinalized;$/;"	m	class:ndn::util::Digest
m_isInProcess	src/util/digest.hpp	/^  bool m_isInProcess;$/;"	m	class:ndn::util::Digest
m_isInclusion	src/util/regex/regex-component-set-matcher.hpp	/^  bool m_isInclusion;$/;"	m	class:ndn::RegexComponentSetMatcher
m_isInitialized	tests/unit-tests/network-configuration-detector.cpp	/^bool NetworkConfigurationDetector::m_isInitialized = false;$/;"	m	class:ndn::tests::NetworkConfigurationDetector	file:
m_isInitialized	tests/unit-tests/network-configuration-detector.hpp	/^  static bool m_isInitialized;$/;"	m	class:ndn::tests::NetworkConfigurationDetector
m_isOutputEnabled	tools/ndncatchunks3.cpp	/^  bool m_isOutputEnabled;  \/\/ set to false by default$/;"	m	class:ndn::Consumer	file:
m_isPositive	src/security/sec-rule.hpp	/^  bool m_isPositive;$/;"	m	class:ndn::SecRule
m_isRunning	src/util/notification-subscriber.hpp	/^  bool m_isRunning;$/;"	m	class:ndn::util::NotificationSubscriber
m_isSecondaryUsed	src/util/regex/regex-top-matcher.hpp	/^  bool m_isSecondaryUsed;$/;"	m	class:ndn::RegexTopMatcher
m_isV6	src/util/face-uri.hpp	/^  bool m_isV6;$/;"	m	class:ndn::util::FaceUri
m_isValid	src/util/scheduler.cpp	/^  bool m_isValid;$/;"	m	struct:ndn::util::scheduler::EventIdImpl	file:
m_isVerbose	tools/ndnputchunks3.cpp	/^  bool m_isVerbose;$/;"	m	class:ndn::Producer	file:
m_it	src/security/certificate-container.hpp	/^    std::set<Name>::const_iterator m_it;$/;"	m	class:ndn::security::CertificateContainer::const_iterator
m_it	src/security/identity-container.hpp	/^    std::set<Name>::const_iterator m_it;$/;"	m	class:ndn::security::IdentityContainer::const_iterator
m_it	src/security/key-container.hpp	/^    std::set<name::Component>::const_iterator m_it;$/;"	m	class:ndn::security::KeyContainer::const_iterator
m_it	src/util/in-memory-storage.hpp	/^    Cache::index<byFullName>::type::iterator m_it;$/;"	m	class:ndn::util::InMemoryStorage::const_iterator
m_key	src/security/certificate.hpp	/^  PublicKey m_key;$/;"	m	class:ndn::Certificate
m_key	src/security/key.hpp	/^  PublicKey m_key;$/;"	m	class:ndn::security::Key
m_key	src/security/public-key.hpp	/^  Buffer m_key;$/;"	m	class:ndn::PublicKey
m_key	src/security/secured-bag.hpp	/^  ConstBufferPtr m_key;$/;"	m	class:ndn::SecuredBag
m_keyChain	examples/producer.cpp	/^  KeyChain m_keyChain;$/;"	m	class:ndn::examples::Producer	file:
m_keyChain	src/management/nfd-controller.hpp	/^  KeyChain& m_keyChain;$/;"	m	class:ndn::nfd::Controller
m_keyChain	src/mgmt/dispatcher.hpp	/^  security::KeyChain& m_keyChain;$/;"	m	class:ndn::mgmt::Dispatcher
m_keyChain	src/util/command-interest-generator.hpp	/^  KeyChain m_keyChain;$/;"	m	class:ndn::CommandInterestGenerator
m_keyChain	src/util/notification-stream.hpp	/^  KeyChain& m_keyChain;$/;"	m	class:ndn::util::NotificationStream
m_keyChain	tests/identity-management-fixture.hpp	/^  KeyChain m_keyChain;$/;"	m	class:ndn::security::IdentityManagementFixture
m_keyChainRef	src/security/sec-tpm-osx.cpp	/^  SecKeychainRef m_keyChainRef;$/;"	m	class:ndn::SecTpmOsx::Impl	file:
m_keyDigest	src/key-locator.hpp	/^  Block m_keyDigest;$/;"	m	class:ndn::KeyLocator
m_keyId	src/security/key.hpp	/^  name::Component m_keyId;$/;"	m	class:ndn::security::Key
m_keyIds	src/security/key-container.hpp	/^  std::set<name::Component> m_keyIds;$/;"	m	class:ndn::security::KeyContainer
m_keyLocator	src/signature-info.hpp	/^  KeyLocator m_keyLocator;$/;"	m	class:ndn::SignatureInfo
m_keyLocatorChecker	src/security/conf/checker.hpp	/^  shared_ptr<KeyLocatorChecker> m_keyLocatorChecker;$/;"	m	class:ndn::security::conf::CustomizedChecker
m_keyName	src/security/key.hpp	/^  Name m_keyName;$/;"	m	class:ndn::security::Key
m_keyTimestampTtl	src/security/validator-config.hpp	/^  const time::system_clock::Duration& m_keyTimestampTtl;$/;"	m	class:ndn::ValidatorConfig
m_keyType	src/security/key-params.hpp	/^  KeyType m_keyType;$/;"	m	class:ndn::KeyParams
m_keychain	tools/ndnputchunks3.cpp	/^  KeyChain m_keychain;$/;"	m	class:ndn::Producer	file:
m_keys	src/security/identity.hpp	/^  mutable KeyContainer m_keys;$/;"	m	class:ndn::security::Identity
m_keys	src/security/pib-memory.hpp	/^  std::map<Name, PublicKey> m_keys;$/;"	m	class:ndn::security::PibMemory
m_keystorePath	src/security/sec-tpm-file.cpp	/^  boost::filesystem::path m_keystorePath;$/;"	m	class:ndn::SecTpmFile::Impl	file:
m_kind	src/management/nfd-face-event-notification.hpp	/^  FaceEventKind m_kind;$/;"	m	class:ndn::nfd::FaceEventNotification
m_lastInterestId	src/util/notification-subscriber.hpp	/^  const PendingInterestId* m_lastInterestId;$/;"	m	class:ndn::util::NotificationSubscriber
m_lastRefresh	src/security/validator-config.hpp	/^    time::system_clock::TimePoint m_lastRefresh;$/;"	m	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
m_lastSequenceNo	src/util/notification-subscriber.hpp	/^  uint64_t m_lastSequenceNo;$/;"	m	class:ndn::util::NotificationSubscriber
m_lastTimestamp	src/security/key-chain.hpp	/^  time::milliseconds m_lastTimestamp;$/;"	m	class:ndn::security::KeyChain
m_lastTimestamp	src/security/validator-config.hpp	/^  LastTimestampMap m_lastTimestamp;$/;"	m	class:ndn::ValidatorConfig
m_lastTimestamp	src/util/command-interest-generator.hpp	/^  time::milliseconds m_lastTimestamp;$/;"	m	class:ndn::CommandInterestGenerator
m_lastTimestamp	src/util/command-interest-validator.hpp	/^  LastTimestampMap m_lastTimestamp;$/;"	m	class:ndn::CommandInterestValidator
m_limit	src/util/in-memory-storage.hpp	/^  size_t m_limit;$/;"	m	class:ndn::util::InMemoryStorage
m_link	src/interest.hpp	/^  mutable Block m_link;$/;"	m	class:ndn::Interest
m_linkCached	src/interest.hpp	/^  mutable shared_ptr<Link> m_linkCached;$/;"	m	class:ndn::Interest
m_linkType	src/management/nfd-face-query-filter.hpp	/^  LinkType m_linkType;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_linkType	src/management/nfd-face-traits.hpp	/^  LinkType m_linkType;$/;"	m	class:ndn::nfd::FaceTraits
m_localControlFeature	src/management/nfd-control-parameters.hpp	/^  LocalControlFeature m_localControlFeature;$/;"	m	class:ndn::nfd::ControlParameters
m_localControlHeader	src/data.hpp	/^  nfd::LocalControlHeader m_localControlHeader;$/;"	m	class:ndn::Data
m_localControlHeader	src/interest.hpp	/^  nfd::LocalControlHeader m_localControlHeader;$/;"	m	class:ndn::Interest
m_localUri	src/management/nfd-channel-status.hpp	/^  std::string m_localUri;$/;"	m	class:ndn::nfd::ChannelStatus
m_localUri	src/management/nfd-face-query-filter.hpp	/^  std::string m_localUri;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_localUri	src/management/nfd-face-traits.hpp	/^  std::string m_localUri;$/;"	m	class:ndn::nfd::FaceTraits
m_location	src/security/pib.hpp	/^  std::string m_location;$/;"	m	class:ndn::security::Pib
m_location	src/security/sec-public-info.hpp	/^  std::string m_location;$/;"	m	class:ndn::SecPublicInfo
m_location	src/security/sec-tpm.hpp	/^  std::string m_location;$/;"	m	class:ndn::SecTpm
m_matchResult	src/util/regex/regex-matcher.hpp	/^  std::vector<name::Component> m_matchResult;$/;"	m	class:ndn::RegexMatcher
m_matchers	src/util/regex/regex-matcher.hpp	/^  std::vector<shared_ptr<RegexMatcher> > m_matchers;$/;"	m	class:ndn::RegexMatcher
m_maxSuffixComponents	src/selectors.hpp	/^  int m_maxSuffixComponents;$/;"	m	class:ndn::Selectors
m_maxTrackedKeys	src/security/validator-config.hpp	/^  size_t m_maxTrackedKeys;$/;"	m	class:ndn::ValidatorConfig
m_message	tests/unit-tests/util/face-uri.t.cpp	/^    std::string m_message;$/;"	m	class:ndn::util::tests::CanonizeFixture::CanonizeTestCase	file:
m_message	tests/unit-tests/util/simple-notification.hpp	/^  std::string m_message;$/;"	m	class:ndn::util::tests::SimpleNotification
m_metaInfo	src/data.hpp	/^  MetaInfo m_metaInfo;$/;"	m	class:ndn::Data
m_minSuffixComponents	src/selectors.hpp	/^  int m_minSuffixComponents;$/;"	m	class:ndn::Selectors
m_module	src/management/nfd-control-command.hpp	/^  name::Component m_module;$/;"	m	class:ndn::nfd::ControlCommand
m_mustBeFresh	src/selectors.hpp	/^  bool m_mustBeFresh;$/;"	m	class:ndn::Selectors
m_mustBeFresh	tools/ndncatchunks3.cpp	/^  bool m_mustBeFresh;$/;"	m	class:ndn::Consumer	file:
m_mustFailVerify	src/security/validator-regex.hpp	/^  RuleList m_mustFailVerify;$/;"	m	class:ndn::ValidatorRegex
m_nCsEntries	src/management/nfd-forwarder-status.hpp	/^  size_t m_nCsEntries;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nFailures	tests/unit-tests/util/dns.t.cpp	/^  uint32_t m_nFailures;$/;"	m	class:ndn::util::tests::DnsFixture	file:
m_nFibEntries	src/management/nfd-forwarder-status.hpp	/^  size_t m_nFibEntries;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nInBytes	src/management/nfd-face-status.hpp	/^  uint64_t m_nInBytes;$/;"	m	class:ndn::nfd::FaceStatus
m_nInDatas	src/management/nfd-face-status.hpp	/^  uint64_t m_nInDatas;$/;"	m	class:ndn::nfd::FaceStatus
m_nInDatas	src/management/nfd-forwarder-status.hpp	/^  uint64_t m_nInDatas;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nInInterests	src/management/nfd-face-status.hpp	/^  uint64_t m_nInInterests;$/;"	m	class:ndn::nfd::FaceStatus
m_nInInterests	src/management/nfd-forwarder-status.hpp	/^  uint64_t m_nInInterests;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nInNacks	src/management/nfd-face-status.hpp	/^  uint64_t m_nInNacks;$/;"	m	class:ndn::nfd::FaceStatus
m_nInNacks	src/management/nfd-forwarder-status.hpp	/^  uint64_t m_nInNacks;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nMeasurementsEntries	src/management/nfd-forwarder-status.hpp	/^  size_t m_nMeasurementsEntries;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nNameTreeEntries	src/management/nfd-forwarder-status.hpp	/^  size_t m_nNameTreeEntries;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nOutBytes	src/management/nfd-face-status.hpp	/^  uint64_t m_nOutBytes;$/;"	m	class:ndn::nfd::FaceStatus
m_nOutDatas	src/management/nfd-face-status.hpp	/^  uint64_t m_nOutDatas;$/;"	m	class:ndn::nfd::FaceStatus
m_nOutDatas	src/management/nfd-forwarder-status.hpp	/^  uint64_t m_nOutDatas;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nOutInterests	src/management/nfd-face-status.hpp	/^  uint64_t m_nOutInterests;$/;"	m	class:ndn::nfd::FaceStatus
m_nOutInterests	src/management/nfd-forwarder-status.hpp	/^  uint64_t m_nOutInterests;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nOutNacks	src/management/nfd-face-status.hpp	/^  uint64_t m_nOutNacks;$/;"	m	class:ndn::nfd::FaceStatus
m_nOutNacks	src/management/nfd-forwarder-status.hpp	/^  uint64_t m_nOutNacks;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nPackets	src/util/in-memory-storage.hpp	/^  size_t m_nPackets;$/;"	m	class:ndn::util::InMemoryStorage
m_nPending	tests/unit-tests/util/face-uri.t.cpp	/^  ssize_t m_nPending;$/;"	m	class:ndn::util::tests::CanonizeFixture	file:
m_nPitEntries	src/management/nfd-forwarder-status.hpp	/^  size_t m_nPitEntries;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nRetries	src/security/validation-request.hpp	/^  int m_nRetries;$/;"	m	class:ndn::ValidationRequest
m_nSteps	src/security/validation-request.hpp	/^  int m_nSteps;$/;"	m	class:ndn::ValidationRequest
m_nSuccesses	tests/unit-tests/util/dns.t.cpp	/^  uint32_t m_nSuccesses;$/;"	m	class:ndn::util::tests::DnsFixture	file:
m_nTotalSegments	tools/ndncatchunks3.cpp	/^  size_t m_nTotalSegments;$/;"	m	class:ndn::Consumer	file:
m_nackCallback	src/detail/pending-interest.hpp	/^  NackCallback m_nackCallback;$/;"	m	class:ndn::PendingInterest
m_name	src/data.hpp	/^  Name m_name;$/;"	m	class:ndn::Data
m_name	src/interest.hpp	/^  Name m_name;$/;"	m	class:ndn::Interest
m_name	src/key-locator.hpp	/^  Name m_name;$/;"	m	class:ndn::KeyLocator
m_name	src/management/nfd-control-parameters.hpp	/^  Name                m_name;$/;"	m	class:ndn::nfd::ControlParameters
m_name	src/management/nfd-strategy-choice.hpp	/^  Name m_name; \/\/ namespace$/;"	m	class:ndn::nfd::StrategyChoice
m_name	src/security/conf/filter.hpp	/^  Name m_name;$/;"	m	class:ndn::security::conf::RelationNameFilter
m_name	src/security/conf/key-locator-checker.hpp	/^  Name m_name;$/;"	m	class:ndn::security::conf::RelationKeyLocatorNameChecker
m_name	src/security/identity.hpp	/^  Name m_name;$/;"	m	class:ndn::security::Identity
m_name	src/security/signing-info.hpp	/^  Name m_name;$/;"	m	class:ndn::security::SigningInfo
m_name	tools/ndnputchunks3.cpp	/^  Name m_name;$/;"	m	class:ndn::Producer	file:
m_nameBlock	src/name.hpp	/^  mutable Block m_nameBlock;$/;"	m	class:ndn::Name
m_needRefreshCerts	src/security/key.hpp	/^  mutable bool m_needRefreshCerts;$/;"	m	class:ndn::security::Key
m_needRefreshIdentities	src/security/pib.hpp	/^  mutable bool m_needRefreshIdentities;$/;"	m	class:ndn::security::Pib
m_needRefreshKeys	src/security/identity.hpp	/^  mutable bool m_needRefreshKeys;$/;"	m	class:ndn::security::Identity
m_newIdentity	tests/unit-tests/security/identity-fixture.cpp	/^  Name m_newIdentity;$/;"	m	class:ndn::security::IdentityFixture	file:
m_nextHopFaceId	src/management/nfd-local-control-header.hpp	/^  uint64_t m_nextHopFaceId;$/;"	m	class:ndn::nfd::LocalControlHeader
m_nextHopRecords	src/management/nfd-fib-entry.hpp	/^  std::list<NextHopRecord> m_nextHopRecords;$/;"	m	class:ndn::nfd::FibEntry
m_nextSegment	tools/ndncatchunks3.cpp	/^  size_t m_nextSegment;$/;"	m	class:ndn::Consumer	file:
m_nfdController	src/face.hpp	/^  unique_ptr<nfd::Controller> m_nfdController;$/;"	m	class:ndn::Face
m_nfdVersion	src/management/nfd-forwarder-status.hpp	/^  std::string m_nfdVersion;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nonce	src/interest.hpp	/^  mutable Block m_nonce;$/;"	m	class:ndn::Interest
m_notAfter	src/security/certificate.hpp	/^  time::system_clock::TimePoint m_notAfter;$/;"	m	class:ndn::Certificate
m_notAfter	src/security/validity-period.hpp	/^  TimePoint m_notAfter;$/;"	m	class:ndn::security::ValidityPeriod
m_notBefore	src/security/certificate.hpp	/^  time::system_clock::TimePoint m_notBefore;$/;"	m	class:ndn::Certificate
m_notBefore	src/security/validity-period.hpp	/^  TimePoint m_notBefore;$/;"	m	class:ndn::security::ValidityPeriod
m_oid	src/encoding/oid.hpp	/^  std::vector<int> m_oid;$/;"	m	class:ndn::OID
m_oid	src/security/certificate-subject-description.hpp	/^  OID m_oid;$/;"	m	class:ndn::CertificateSubjectDescription
m_oldDefaultIdentity	tests/unit-tests/security/identity-fixture.cpp	/^  Name m_oldDefaultIdentity;$/;"	m	class:ndn::security::IdentityFixture	file:
m_onDataValidated	src/security/validation-request.hpp	/^  OnDataValidated m_onDataValidated;$/;"	m	class:ndn::ValidationRequest
m_onDataValidationFailed	src/security/validation-request.hpp	/^  OnDataValidationFailed m_onDataValidationFailed;$/;"	m	class:ndn::ValidationRequest
m_onError	src/util/dns.cpp	/^  ErrorCallback m_onError;$/;"	m	class:ndn::dns::Resolver	file:
m_onSuccess	src/util/dns.cpp	/^  SuccessCallback m_onSuccess;$/;"	m	class:ndn::dns::Resolver	file:
m_op	src/security/sec-rule-relative.hpp	/^  const std::string m_op;$/;"	m	class:ndn::SecRuleRelative
m_optional	src/management/nfd-control-command.hpp	/^    std::vector<bool> m_optional;$/;"	m	class:ndn::nfd::ControlCommand::FieldValidator
m_options	src/detail/registered-prefix.hpp	/^  nfd::CommandOptions m_options;$/;"	m	class:ndn::RegisteredPrefix
m_origin	src/management/nfd-control-parameters.hpp	/^  uint64_t            m_origin;$/;"	m	class:ndn::nfd::ControlParameters
m_origin	src/management/nfd-rib-entry.hpp	/^  uint64_t m_origin;$/;"	m	class:ndn::nfd::Route
m_otherTlvs	src/signature-info.hpp	/^  std::list<Block> m_otherTlvs;$/;"	m	class:ndn::SignatureInfo
m_output	src/util/indented-stream.hpp	/^    std::ostream& m_output;$/;"	m	class:ndn::util::IndentedStream::StreamBuf
m_password	src/security/sec-tpm-osx.cpp	/^  string m_password;$/;"	m	class:ndn::SecTpmOsx::Impl	file:
m_passwordSet	src/security/sec-tpm-osx.cpp	/^  bool m_passwordSet;$/;"	m	class:ndn::SecTpmOsx::Impl	file:
m_path	src/security/validator-config.hpp	/^    boost::filesystem::path m_path;$/;"	m	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
m_path	src/util/config-file.hpp	/^  boost::filesystem::path m_path; \/\/ absolute path to active configuration file (if any)$/;"	m	class:ndn::ConfigFile
m_path	src/util/face-uri.hpp	/^  std::string m_path;$/;"	m	class:ndn::util::FaceUri
m_path	tests/unit-tests/security/pib-sqlite3.t.cpp	/^  boost::filesystem::path m_path;$/;"	m	class:ndn::security::tests::PibSqlite3TestFixture	file:
m_path	tests/unit-tests/util/sqlite3-statement.t.cpp	/^  boost::filesystem::path m_path;$/;"	m	class:ndn::util::tests::Sqlite3StatementTestFixture	file:
m_pendingInterestTable	src/detail/face-impl.hpp	/^  PendingInterestTable m_pendingInterestTable;$/;"	m	class:ndn::Face::Impl
m_pib	src/security/key-chain.hpp	/^  std::unique_ptr<SecPublicInfo> m_pib;$/;"	m	class:ndn::security::KeyChain
m_pipeSize	tools/ndncatchunks3.cpp	/^  size_t m_pipeSize;$/;"	m	class:ndn::Consumer	file:
m_policy	src/lp/cache-policy.hpp	/^  CachePolicyType m_policy;$/;"	m	class:ndn::lp::CachePolicyType::CachePolicy
m_port	src/transport/tcp-transport.hpp	/^  std::string m_port;$/;"	m	class:ndn::TcpTransport
m_port	src/util/face-uri.hpp	/^  std::string m_port;$/;"	m	class:ndn::util::FaceUri
m_prefix	src/detail/registered-prefix.hpp	/^  Name m_prefix;$/;"	m	class:ndn::RegisteredPrefix
m_prefix	src/interest-filter.hpp	/^  Name m_prefix;$/;"	m	class:ndn::InterestFilter
m_prefix	src/management/nfd-command-options.hpp	/^  Name m_prefix;$/;"	m	class:ndn::nfd::CommandOptions
m_prefix	src/management/nfd-fib-entry.hpp	/^  Name m_prefix;$/;"	m	class:ndn::nfd::FibEntry
m_prefix	src/management/nfd-rib-entry.hpp	/^  Name m_prefix;$/;"	m	class:ndn::nfd::RibEntry
m_prefix	src/mgmt/status-dataset-context.hpp	/^  Name m_prefix;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_prefix	src/util/notification-stream.hpp	/^  const Name m_prefix;$/;"	m	class:ndn::util::NotificationStream
m_prefix	src/util/notification-subscriber.hpp	/^  Name m_prefix;$/;"	m	class:ndn::util::NotificationSubscriber
m_primaryBackrefManager	src/util/regex/regex-top-matcher.hpp	/^  shared_ptr<RegexBackrefManager> m_primaryBackrefManager;$/;"	m	class:ndn::RegexTopMatcher
m_primaryMatcher	src/util/regex/regex-top-matcher.hpp	/^  shared_ptr<RegexPatternListMatcher> m_primaryMatcher;$/;"	m	class:ndn::RegexTopMatcher
m_processEventsTimeoutEvent	src/detail/face-impl.hpp	/^  util::scheduler::ScopedEventId m_processEventsTimeoutEvent;$/;"	m	class:ndn::Face::Impl
m_providerTable	src/util/face-uri.cpp	/^  CanonizeProviderTable& m_providerTable;$/;"	m	class:ndn::util::CanonizeProviderTableInitializer	file:
m_pseudoMatchers	src/util/regex/regex-component-matcher.hpp	/^  std::vector<shared_ptr<RegexPseudoMatcher> > m_pseudoMatchers;$/;"	m	class:ndn::RegexComponentMatcher
m_ptr	src/util/in-memory-storage.hpp	/^    const Data* m_ptr;$/;"	m	class:ndn::util::InMemoryStorage::const_iterator
m_publicKeyName	src/security/identity-certificate.hpp	/^  Name m_publicKeyName;$/;"	m	class:ndn::IdentityCertificate
m_publisherPublicKeyLocator	src/selectors.hpp	/^  KeyLocator m_publisherPublicKeyLocator;$/;"	m	class:ndn::Selectors
m_reason	src/lp/nack-header.hpp	/^  NackReason m_reason;$/;"	m	class:ndn::lp::NackReason::NackHeader
m_receiveCallback	src/transport/transport.hpp	/^  ReceiveCallback m_receiveCallback;$/;"	m	class:ndn::Transport
m_refreshPeriod	src/security/validator-config.hpp	/^    time::nanoseconds m_refreshPeriod;$/;"	m	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
m_regex	src/security/conf/filter.hpp	/^  Regex m_regex;$/;"	m	class:ndn::security::conf::RegexNameFilter
m_regex	src/security/conf/key-locator-checker.hpp	/^  Regex m_regex;$/;"	m	class:ndn::security::conf::RegexKeyLocatorNameChecker
m_regexFilter	src/interest-filter.hpp	/^  shared_ptr<RegexPatternListMatcher> m_regexFilter;$/;"	m	class:ndn::InterestFilter
m_registeredPrefixTable	src/detail/face-impl.hpp	/^  RegisteredPrefixTable m_registeredPrefixTable;$/;"	m	class:ndn::Face::Impl
m_relation	src/security/conf/filter.hpp	/^  Relation m_relation;$/;"	m	class:ndn::security::conf::RelationNameFilter
m_relation	src/security/conf/key-locator-checker.hpp	/^  KeyLocatorChecker::Relation m_relation;$/;"	m	class:ndn::security::conf::RelationKeyLocatorNameChecker
m_remoteUri	src/management/nfd-face-query-filter.hpp	/^  std::string m_remoteUri;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_remoteUri	src/management/nfd-face-traits.hpp	/^  std::string m_remoteUri;$/;"	m	class:ndn::nfd::FaceTraits
m_repeatMax	src/util/regex/regex-repeat-matcher.hpp	/^  size_t m_repeatMax;$/;"	m	class:ndn::RegexRepeatMatcher
m_repeatMin	src/util/regex/regex-repeat-matcher.hpp	/^  size_t m_repeatMin;$/;"	m	class:ndn::RegexRepeatMatcher
m_requestValidator	src/management/nfd-control-command.hpp	/^  FieldValidator m_requestValidator;$/;"	m	class:ndn::nfd::ControlCommand
m_required	src/management/nfd-control-command.hpp	/^    std::vector<bool> m_required;$/;"	m	class:ndn::nfd::ControlCommand::FieldValidator
m_resolveTimeout	src/util/dns.cpp	/^  EventId m_resolveTimeout;$/;"	m	class:ndn::dns::Resolver	file:
m_resolver	src/util/dns.cpp	/^  BoostResolver m_resolver;$/;"	m	class:ndn::dns::Resolver	file:
m_responseValidator	src/management/nfd-control-command.hpp	/^  FieldValidator m_responseValidator;$/;"	m	class:ndn::nfd::ControlCommand
m_routes	src/management/nfd-rib-entry.hpp	/^  RouteList m_routes;$/;"	m	class:ndn::nfd::RibEntry
m_scheduledEvent	src/util/scheduler.hpp	/^  EventQueue::iterator m_scheduledEvent;$/;"	m	class:ndn::util::scheduler::Scheduler
m_scheduledTime	src/util/scheduler.hpp	/^    time::steady_clock::TimePoint m_scheduledTime;$/;"	m	struct:ndn::util::scheduler::Scheduler::EventInfo
m_scheduler	examples/consumer-with-timer.cpp	/^  Scheduler m_scheduler;$/;"	m	class:ndn::examples::ConsumerWithTimer	file:
m_scheduler	src/detail/face-impl.hpp	/^  util::Scheduler m_scheduler;$/;"	m	class:ndn::Face::Impl
m_scheduler	src/security/certificate-cache-ttl.hpp	/^  Scheduler m_scheduler;$/;"	m	class:ndn::CertificateCacheTtl
m_scheduler	src/util/dns.cpp	/^  Scheduler m_scheduler;$/;"	m	class:ndn::dns::Resolver	file:
m_scheduler	src/util/scheduler-scoped-event-id.hpp	/^  Scheduler* m_scheduler; \/\/ pointer to allow move semantics$/;"	m	class:ndn::util::scheduler::ScopedEventId
m_scheme	src/security/pib.hpp	/^  std::string m_scheme;$/;"	m	class:ndn::security::Pib
m_scheme	src/util/face-uri.hpp	/^  std::string m_scheme;$/;"	m	class:ndn::util::FaceUri
m_secondaryBackrefManager	src/util/regex/regex-top-matcher.hpp	/^  shared_ptr<RegexBackrefManager> m_secondaryBackrefManager;$/;"	m	class:ndn::RegexTopMatcher
m_secondaryMatcher	src/util/regex/regex-top-matcher.hpp	/^  shared_ptr<RegexPatternListMatcher> m_secondaryMatcher;$/;"	m	class:ndn::RegexTopMatcher
m_segmentNo	src/mgmt/status-dataset-context.hpp	/^  uint64_t m_segmentNo;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_selectedDelegationIndex	src/interest.hpp	/^  size_t m_selectedDelegationIndex;$/;"	m	class:ndn::Interest
m_selectors	src/interest.hpp	/^  Selectors m_selectors;$/;"	m	class:ndn::Interest
m_sequenceNo	src/util/notification-stream.hpp	/^  uint64_t m_sequenceNo;$/;"	m	class:ndn::util::NotificationStream
m_shouldSucceed	tests/unit-tests/util/face-uri.t.cpp	/^    bool m_shouldSucceed;$/;"	m	class:ndn::util::tests::CanonizeFixture::CanonizeTestCase	file:
m_shouldValidate	src/security/validator-config.hpp	/^  bool m_shouldValidate;$/;"	m	class:ndn::ValidatorConfig
m_sigType	src/security/conf/checker.hpp	/^  uint32_t m_sigType;$/;"	m	class:ndn::security::conf::CustomizedChecker
m_sigType	src/security/conf/checker.hpp	/^  uint32_t m_sigType;$/;"	m	class:ndn::security::conf::FixedSignerChecker
m_signature	src/data.hpp	/^  Signature m_signature;$/;"	m	class:ndn::Data
m_signerExpand	src/security/sec-rule-relative.hpp	/^  const std::string m_signerExpand;$/;"	m	class:ndn::SecRuleRelative
m_signerNameRegex	src/security/sec-rule-relative.hpp	/^  Regex m_signerNameRegex;$/;"	m	class:ndn::SecRuleRelative
m_signerRegex	src/security/sec-rule-relative.hpp	/^  const std::string m_signerRegex;$/;"	m	class:ndn::SecRuleRelative
m_signerRegex	src/security/sec-rule-specific.hpp	/^  shared_ptr<Regex> m_signerRegex;$/;"	m	class:ndn::SecRuleSpecific
m_signers	src/security/conf/checker.hpp	/^  SignerList m_signers;$/;"	m	class:ndn::security::conf::FixedSignerChecker
m_signingInfo	src/management/nfd-command-options.hpp	/^  security::SigningInfo m_signingInfo;$/;"	m	class:ndn::nfd::CommandOptions
m_signingInfo	src/mgmt/dispatcher.hpp	/^  security::SigningInfo m_signingInfo;$/;"	m	class:ndn::mgmt::Dispatcher
m_size	src/encoding/block.hpp	/^  uint32_t m_size;$/;"	m	class:ndn::Block
m_size	src/security/key-params.hpp	/^  uint32_t m_size;$/;"	m	class:ndn::SimplePublicKeyParams
m_size	src/security/key-params.hpp	/^  uint32_t m_size;$/;"	m	class:ndn::SimpleSymmetricKeyParams
m_slots	src/util/signal-signal.hpp	/^  SlotList m_slots;$/;"	m	class:ndn::util::signal::Signal
m_socket	src/transport/stream-transport.hpp	/^  typename Protocol::socket m_socket;$/;"	m	class:ndn::StreamTransportImpl
m_startTimestamp	src/management/nfd-forwarder-status.hpp	/^  time::system_clock::TimePoint m_startTimestamp;$/;"	m	class:ndn::nfd::ForwarderStatus
m_state	src/mgmt/status-dataset-context.hpp	/^  State m_state;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_staticContainer	src/security/validator-config.hpp	/^  TrustAnchorContainer m_staticContainer;$/;"	m	class:ndn::ValidatorConfig
m_stepLimit	src/security/validator-config.hpp	/^  size_t m_stepLimit;$/;"	m	class:ndn::ValidatorConfig
m_stepLimit	src/security/validator-regex.hpp	/^  int m_stepLimit;$/;"	m	class:ndn::ValidatorRegex
m_stmt	src/util/sqlite3-statement.hpp	/^  sqlite3_stmt* m_stmt;$/;"	m	class:ndn::util::Sqlite3Statement
m_store	tools/ndnputchunks3.cpp	/^  std::vector< shared_ptr<Data> > m_store;$/;"	m	class:ndn::Producer	file:
m_store	tools/ndnsec/util.hpp	/^    T* m_store;$/;"	m	class:AccumulatorType
m_strategy	src/management/nfd-control-parameters.hpp	/^  Name                m_strategy;$/;"	m	class:ndn::nfd::ControlParameters
m_strategy	src/management/nfd-strategy-choice.hpp	/^  Name m_strategy; \/\/ strategy for the namespace$/;"	m	class:ndn::nfd::StrategyChoice
m_streams	src/mgmt/dispatcher.hpp	/^  std::unordered_map<Name, uint64_t> m_streams;$/;"	m	class:ndn::mgmt::Dispatcher
m_subBlocks	src/encoding/block.hpp	/^  mutable element_container m_subBlocks;$/;"	m	class:ndn::Block
m_subjectDescriptionList	src/security/certificate.hpp	/^  SubjectDescriptionList m_subjectDescriptionList;$/;"	m	class:ndn::Certificate
m_tags	src/tag-host.hpp	/^  mutable std::map<size_t, shared_ptr<Tag>> m_tags;$/;"	m	class:ndn::TagHost
m_text	src/mgmt/control-response.hpp	/^  std::string m_text;$/;"	m	class:ndn::mgmt::ControlResponse
m_timeout	src/management/nfd-command-options.hpp	/^  time::milliseconds m_timeout;$/;"	m	class:ndn::nfd::CommandOptions
m_timeoutCallback	src/detail/pending-interest.hpp	/^  TimeoutCallback m_timeoutCallback;$/;"	m	class:ndn::PendingInterest
m_timeoutEvent	src/detail/pending-interest.hpp	/^  util::scheduler::ScopedEventId m_timeoutEvent;$/;"	m	class:ndn::PendingInterest
m_topLevelPrefixes	src/mgmt/dispatcher.hpp	/^  std::unordered_map<Name, TopPrefixEntry> m_topLevelPrefixes;$/;"	m	class:ndn::mgmt::Dispatcher
m_totalSize	tools/ndncatchunks3.cpp	/^  size_t m_totalSize;$/;"	m	class:ndn::Consumer	file:
m_tpm	src/security/key-chain.hpp	/^  std::unique_ptr<SecTpm> m_tpm;$/;"	m	class:ndn::security::KeyChain
m_tpmLocator	tests/unit-tests/security/dummy-keychain.hpp	/^  std::string m_tpmLocator;$/;"	m	class:ndn::security::DummyPublicInfo
m_transmissionQueue	src/transport/stream-transport.hpp	/^  TransmissionQueue m_transmissionQueue;$/;"	m	class:ndn::StreamTransportImpl
m_transport	src/face.hpp	/^  shared_ptr<Transport> m_transport;$/;"	m	class:ndn::Face
m_transport	src/transport/stream-transport.hpp	/^  BaseTransport& m_transport;$/;"	m	class:ndn::StreamTransportImpl
m_transport	src/util/dummy-client-face.hpp	/^  shared_ptr<Transport> m_transport;$/;"	m	class:ndn::util::DummyClientFace
m_trustAnchors	src/security/validator-regex.hpp	/^  std::map<Name, shared_ptr<IdentityCertificate> > m_trustAnchors;$/;"	m	class:ndn::ValidatorRegex
m_trustAnchorsForInterest	src/util/command-interest-validator.hpp	/^  std::map<Name, PublicKey> m_trustAnchorsForInterest;$/;"	m	class:ndn::CommandInterestValidator
m_trustScopeForInterest	src/util/command-interest-validator.hpp	/^  std::list<SecRuleSpecific> m_trustScopeForInterest;$/;"	m	class:ndn::CommandInterestValidator
m_type	src/encoding/block.hpp	/^  uint32_t m_type;$/;"	m	class:ndn::Block
m_type	src/key-locator.hpp	/^  Type m_type;$/;"	m	class:ndn::KeyLocator
m_type	src/meta-info.hpp	/^  uint32_t m_type;$/;"	m	class:ndn::MetaInfo
m_type	src/security/public-key.hpp	/^  KeyType m_type;$/;"	m	class:ndn::PublicKey
m_type	src/security/signing-info.hpp	/^  SignerType m_type;$/;"	m	class:ndn::security::SigningInfo
m_type	src/signature-info.hpp	/^  int32_t m_type;$/;"	m	class:ndn::SignatureInfo
m_type	src/util/regex/regex-matcher.hpp	/^  const RegexExprType m_type;$/;"	m	class:ndn::RegexMatcher
m_typeRef	src/security/sec-tpm-osx.cpp	/^  T m_typeRef;$/;"	m	class:ndn::CFReleaser	file:
m_unixSocket	src/transport/unix-transport.hpp	/^  std::string m_unixSocket;$/;"	m	class:ndn::UnixTransport
m_uri	src/management/nfd-control-parameters.hpp	/^  std::string         m_uri;$/;"	m	class:ndn::nfd::ControlParameters
m_uriScheme	src/management/nfd-face-query-filter.hpp	/^  std::string m_uriScheme;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_v4Scheme	src/util/face-uri.cpp	/^  std::string m_v4Scheme;$/;"	m	class:ndn::util::IpHostCanonizeProvider	file:
m_v6Scheme	src/util/face-uri.cpp	/^  std::string m_v6Scheme;$/;"	m	class:ndn::util::IpHostCanonizeProvider	file:
m_value	src/security/certificate-subject-description.hpp	/^  std::string m_value;$/;"	m	class:ndn::CertificateSubjectDescription
m_value	src/signature.hpp	/^  mutable Block m_value;$/;"	m	class:ndn::Signature
m_value_begin	src/encoding/block.hpp	/^  Buffer::const_iterator m_value_begin;$/;"	m	class:ndn::Block
m_value_end	src/encoding/block.hpp	/^  Buffer::const_iterator m_value_end;$/;"	m	class:ndn::Block
m_verb	src/management/nfd-control-command.hpp	/^  name::Component m_verb;$/;"	m	class:ndn::nfd::ControlCommand
m_verifyPolicies	src/security/validator-regex.hpp	/^  RuleList m_verifyPolicies;$/;"	m	class:ndn::ValidatorRegex
m_verifySegment	src/util/segment-fetcher.hpp	/^  VerifySegment m_verifySegment;$/;"	m	class:ndn::util::SegmentFetcher
m_wire	src/data.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::Data
m_wire	src/exclude.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::Exclude
m_wire	src/interest.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::Interest
m_wire	src/key-locator.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::KeyLocator
m_wire	src/lp/cache-policy.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::lp::CachePolicyType::CachePolicy
m_wire	src/lp/nack-header.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::lp::NackReason::NackHeader
m_wire	src/lp/packet.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::lp::Packet
m_wire	src/management/nfd-channel-status.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::ChannelStatus
m_wire	src/management/nfd-control-parameters.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::ControlParameters
m_wire	src/management/nfd-face-event-notification.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::FaceEventNotification
m_wire	src/management/nfd-face-query-filter.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_wire	src/management/nfd-face-status.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::FaceStatus
m_wire	src/management/nfd-fib-entry.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::FibEntry
m_wire	src/management/nfd-fib-entry.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::NextHopRecord
m_wire	src/management/nfd-forwarder-status.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::ForwarderStatus
m_wire	src/management/nfd-rib-entry.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::RibEntry
m_wire	src/management/nfd-rib-entry.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::Route
m_wire	src/management/nfd-strategy-choice.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::StrategyChoice
m_wire	src/meta-info.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::MetaInfo
m_wire	src/mgmt/control-response.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::mgmt::ControlResponse
m_wire	src/security/additional-description.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::security::AdditionalDescription
m_wire	src/security/secured-bag.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::SecuredBag
m_wire	src/security/validity-period.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::security::ValidityPeriod
m_wire	src/selectors.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::Selectors
m_wire	src/signature-info.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::SignatureInfo
macbundle_PATTERN	build/c4che/_cache.py	/^macbundle_PATTERN = '%s.bundle'$/;"	v
main	examples/consumer-with-timer.cpp	/^main(int argc, char** argv)$/;"	f
main	examples/consumer.cpp	/^main(int argc, char** argv)$/;"	f
main	examples/producer.cpp	/^main(int argc, char** argv)$/;"	f
main	tools/ndncatchunks3.cpp	/^main(int argc, char** argv)$/;"	f
main	tools/ndncatchunks3.cpp	/^main(int argc, char** argv)$/;"	f	namespace:ndn
main	tools/ndnputchunks3.cpp	/^main(int argc, char** argv)$/;"	f
main	tools/ndnputchunks3.cpp	/^main(int argc, char** argv)$/;"	f	namespace:ndn
main	tools/ndnsec/main.cpp	/^main(int argc, char** argv)$/;"	f
main	tools/tlvdump.cpp	/^int main(int argc, const char *argv[])$/;"	f
maintainMapping	src/security/sec-tpm-file.cpp	/^  maintainMapping(const string& keyName)$/;"	f	class:ndn::SecTpmFile::Impl
makeAcceptAllAuthorization	src/mgmt/dispatcher.cpp	/^makeAcceptAllAuthorization()$/;"	f	namespace:ndn::mgmt
makeBinaryBlock	src/encoding/block-helpers.cpp	/^makeBinaryBlock(uint32_t type, const char* value, size_t length)$/;"	f	namespace:ndn::encoding
makeBinaryBlock	src/encoding/block-helpers.cpp	/^makeBinaryBlock(uint32_t type, const uint8_t* value, size_t length)$/;"	f	namespace:ndn::encoding
makeBinaryBlock	src/encoding/block-helpers.hpp	/^makeBinaryBlock(uint32_t type, Iterator first, Iterator last)$/;"	f	namespace:ndn::encoding
makeBlock	src/encoding/block-helpers.hpp	/^  makeBlock(uint32_t type, Iterator first, Iterator last)$/;"	f	class:ndn::encoding::DataBlockFast
makeBlock	src/encoding/block-helpers.hpp	/^  makeBlock(uint32_t type, Iterator first, Iterator last)$/;"	f	class:ndn::encoding::DataBlockSlow
makeData	tests/unit-tests/make-interest-data.hpp	/^makeData(const Name& name)$/;"	f	namespace:ndn::util
makeData	tests/unit-tests/util/segment-fetcher.t.cpp	/^  makeData(const Name& baseName, uint64_t segment, bool isFinal)$/;"	f	class:ndn::util::tests::Fixture
makeDummyClientFace	src/util/dummy-client-face.cpp	/^makeDummyClientFace(boost::asio::io_service& ioService,$/;"	f	namespace:ndn::util
makeDummyClientFace	src/util/dummy-client-face.cpp	/^makeDummyClientFace(const DummyClientFace::Options& options)$/;"	f	namespace:ndn::util
makeEmptyBlock	src/encoding/block-helpers.cpp	/^makeEmptyBlock(uint32_t type)$/;"	f	namespace:ndn::encoding
makeInterest	tests/unit-tests/make-interest-data.hpp	/^makeInterest(const Name& name)$/;"	f	namespace:ndn::util
makeNestedBlock	src/encoding/block-helpers.hpp	/^makeNestedBlock(uint32_t type, const U& value)$/;"	f	namespace:ndn::encoding
makeNonNegativeIntegerBlock	src/encoding/block-helpers.cpp	/^makeNonNegativeIntegerBlock(uint32_t type, uint64_t value)$/;"	f	namespace:ndn::encoding
makeSigningInfoFromIdentityCertificate	src/management/nfd-command-options.cpp	/^makeSigningInfoFromIdentityCertificate(const Name& certificateName)$/;"	f	namespace:ndn::nfd
makeStringBlock	src/encoding/block-helpers.cpp	/^makeStringBlock(uint32_t type, const std::string& value)$/;"	f	namespace:ndn::encoding
makeTestAuthorization	tests/unit-tests/mgmt/dispatcher.t.cpp	/^makeTestAuthorization()$/;"	f	namespace:ndn::mgmt::tests
make_link_node	docs/redmine_issue.py	/^def make_link_node(rawtext, app, type, slug, options):$/;"	f
man_pages	docs/conf.py	/^man_pages = [$/;"	v
man_show_urls	docs/conf.py	/^man_show_urls = True$/;"	v
master_doc	docs/conf.py	/^master_doc = 'index'$/;"	v
match	src/security/conf/filter.hpp	/^  match(const Data& data)$/;"	f	class:ndn::security::conf::Filter
match	src/security/conf/filter.hpp	/^  match(const Interest& interest)$/;"	f	class:ndn::security::conf::Filter
match	src/security/conf/rule.hpp	/^  match(const Packet& packet)$/;"	f	class:ndn::security::conf::Rule
match	src/util/regex/regex-component-matcher.hpp	/^RegexComponentMatcher::match(const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexComponentMatcher
match	src/util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::match(const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexComponentSetMatcher
match	src/util/regex/regex-matcher.hpp	/^RegexMatcher::match(const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexMatcher
match	src/util/regex/regex-repeat-matcher.hpp	/^RegexRepeatMatcher::match(const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexRepeatMatcher
match	src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::match(const Name& name)$/;"	f	class:ndn::RegexTopMatcher
match	src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::match(const Name& name, size_t, size_t)$/;"	f	class:ndn::RegexTopMatcher
matchDataName	src/security/sec-rule-relative.cpp	/^SecRuleRelative::matchDataName(const Data& data)$/;"	f	class:ndn::SecRuleRelative
matchDataName	src/security/sec-rule-specific.cpp	/^SecRuleSpecific::matchDataName(const Data& data)$/;"	f	class:ndn::SecRuleSpecific
matchName	src/security/conf/filter.hpp	/^  matchName(const Name& name)$/;"	f	class:ndn::security::conf::RegexNameFilter
matchName	src/security/conf/filter.hpp	/^  matchName(const Name& name)$/;"	f	class:ndn::security::conf::RelationNameFilter
matchSignerName	src/security/sec-rule-relative.cpp	/^SecRuleRelative::matchSignerName(const Data& data)$/;"	f	class:ndn::SecRuleRelative
matchSignerName	src/security/sec-rule-specific.cpp	/^SecRuleSpecific::matchSignerName(const Data& data)$/;"	f	class:ndn::SecRuleSpecific
matchesData	src/interest.cpp	/^Interest::matchesData(const Data& data) const$/;"	f	class:ndn::Interest
matchesName	src/interest.cpp	/^Interest::matchesName(const Name& name) const$/;"	f	class:ndn::Interest
mgmt	src/mgmt/control-parameters.hpp	/^namespace mgmt {$/;"	n	namespace:ndn
mgmt	src/mgmt/control-response.cpp	/^namespace mgmt {$/;"	n	namespace:ndn	file:
mgmt	src/mgmt/control-response.hpp	/^namespace mgmt {$/;"	n	namespace:ndn
mgmt	src/mgmt/dispatcher.cpp	/^namespace mgmt {$/;"	n	namespace:ndn	file:
mgmt	src/mgmt/dispatcher.hpp	/^namespace mgmt {$/;"	n	namespace:ndn
mgmt	src/mgmt/status-dataset-context.cpp	/^namespace mgmt {$/;"	n	namespace:ndn	file:
mgmt	src/mgmt/status-dataset-context.hpp	/^namespace mgmt {$/;"	n	namespace:ndn
mgmt	tests/unit-tests/mgmt/dispatcher.t.cpp	/^namespace mgmt {$/;"	n	namespace:ndn	file:
mgmt	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^namespace mgmt {$/;"	n	namespace:ndn	file:
monotonic_deadline_timer	src/util/monotonic_deadline_timer.hpp	/^typedef boost::asio::basic_deadline_timer<time::steady_clock> monotonic_deadline_timer;$/;"	t	namespace:ndn
nData	tests/integrated/face.cpp	/^  uint32_t nData;$/;"	m	class:ndn::tests::FacesFixture	file:
nDatas	tests/unit-tests/util/segment-fetcher.t.cpp	/^  uint32_t nDatas;$/;"	m	class:ndn::util::tests::Fixture	file:
nErrors	tests/unit-tests/util/segment-fetcher.t.cpp	/^  uint32_t nErrors;$/;"	m	class:ndn::util::tests::Fixture	file:
nInInterests	tests/integrated/face.cpp	/^  uint32_t nInInterests;$/;"	m	class:ndn::tests::FacesFixture	file:
nInInterests2	tests/integrated/face.cpp	/^  uint32_t nInInterests2;$/;"	m	class:ndn::tests::FacesFixture	file:
nRegFailures	tests/integrated/face.cpp	/^  uint32_t nRegFailures;$/;"	m	class:ndn::tests::FacesFixture	file:
nRegSuccesses	tests/integrated/face.cpp	/^  uint64_t nRegSuccesses;$/;"	m	class:ndn::tests::FacesFixture3	file:
nTimeouts	tests/integrated/face.cpp	/^  uint32_t nTimeouts;$/;"	m	class:ndn::tests::FacesFixture	file:
nUnregFailures	tests/integrated/face.cpp	/^  uint64_t nUnregFailures;$/;"	m	class:ndn::tests::FacesFixture3	file:
nUnregSuccesses	tests/integrated/face.cpp	/^  uint64_t nUnregSuccesses;$/;"	m	class:ndn::tests::FacesFixture3	file:
nackPendingInterests	src/detail/face-impl.hpp	/^  nackPendingInterests(const lp::Nack& nack)$/;"	f	class:ndn::Face::Impl
name	src/name-component.cpp	/^namespace name {$/;"	n	namespace:ndn	file:
name	src/name-component.hpp	/^namespace name {$/;"	n	namespace:ndn
name1	tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^  Name name1;$/;"	m	class:ndn::tests::CertificateCacheFixture	file:
name2	tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^  Name name2;$/;"	m	class:ndn::tests::CertificateCacheFixture	file:
ndn	build/src/version.hpp	/^namespace ndn {$/;"	n
ndn	examples/consumer-with-timer.cpp	/^namespace ndn {$/;"	n	file:
ndn	examples/consumer.cpp	/^namespace ndn {$/;"	n	file:
ndn	examples/producer.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/common.hpp	/^namespace ndn {$/;"	n
ndn	src/data.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/data.hpp	/^namespace ndn {$/;"	n
ndn	src/detail/container-with-on-empty-signal.hpp	/^namespace ndn {$/;"	n
ndn	src/detail/face-impl.hpp	/^namespace ndn {$/;"	n
ndn	src/detail/interest-filter-record.hpp	/^namespace ndn {$/;"	n
ndn	src/detail/pending-interest.hpp	/^namespace ndn {$/;"	n
ndn	src/detail/registered-prefix.hpp	/^namespace ndn {$/;"	n
ndn	src/encoding/block-helpers.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/encoding/block-helpers.hpp	/^namespace ndn {$/;"	n
ndn	src/encoding/block.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/encoding/block.hpp	/^namespace ndn {$/;"	n
ndn	src/encoding/buffer-stream.hpp	/^namespace ndn {$/;"	n
ndn	src/encoding/buffer.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/encoding/buffer.hpp	/^namespace ndn {$/;"	n
ndn	src/encoding/cryptopp/asn_ext.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/encoding/cryptopp/asn_ext.hpp	/^namespace ndn {$/;"	n
ndn	src/encoding/encoder.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/encoding/encoder.hpp	/^namespace ndn {$/;"	n
ndn	src/encoding/encoding-buffer-fwd.hpp	/^namespace ndn {$/;"	n
ndn	src/encoding/encoding-buffer.hpp	/^namespace ndn {$/;"	n
ndn	src/encoding/estimator.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/encoding/estimator.hpp	/^namespace ndn {$/;"	n
ndn	src/encoding/nfd-constants.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/encoding/nfd-constants.hpp	/^namespace ndn {$/;"	n
ndn	src/encoding/oid.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/encoding/oid.hpp	/^namespace ndn {$/;"	n
ndn	src/encoding/tlv-nfd.hpp	/^namespace ndn {$/;"	n
ndn	src/encoding/tlv-security.hpp	/^namespace ndn {$/;"	n
ndn	src/encoding/tlv.hpp	/^namespace ndn {$/;"	n
ndn	src/exclude.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/exclude.hpp	/^namespace ndn {$/;"	n
ndn	src/face.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/face.hpp	/^namespace ndn {$/;"	n
ndn	src/interest-filter.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/interest-filter.hpp	/^namespace ndn {$/;"	n
ndn	src/interest.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/interest.hpp	/^namespace ndn {$/;"	n
ndn	src/key-locator.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/key-locator.hpp	/^namespace ndn {$/;"	n
ndn	src/link.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/link.hpp	/^namespace ndn {$/;"	n
ndn	src/lp/cache-policy.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/lp/cache-policy.hpp	/^namespace ndn {$/;"	n
ndn	src/lp/detail/field-decl.hpp	/^namespace ndn {$/;"	n
ndn	src/lp/detail/field-info.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/lp/detail/field-info.hpp	/^namespace ndn {$/;"	n
ndn	src/lp/field.hpp	/^namespace ndn {$/;"	n
ndn	src/lp/fields.hpp	/^namespace ndn {$/;"	n
ndn	src/lp/nack-header.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/lp/nack-header.hpp	/^namespace ndn {$/;"	n
ndn	src/lp/nack.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/lp/nack.hpp	/^namespace ndn {$/;"	n
ndn	src/lp/packet.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/lp/packet.hpp	/^namespace ndn {$/;"	n
ndn	src/lp/sequence.hpp	/^namespace ndn {$/;"	n
ndn	src/lp/tlv.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-channel-status.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/management/nfd-channel-status.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-command-options.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/management/nfd-command-options.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-control-command.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/management/nfd-control-command.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-control-parameters.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/management/nfd-control-parameters.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-control-response.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-controller.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/management/nfd-controller.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-face-event-notification.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/management/nfd-face-event-notification.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-face-monitor.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-face-query-filter.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/management/nfd-face-query-filter.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-face-status.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/management/nfd-face-status.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-face-traits.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-fib-entry.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/management/nfd-fib-entry.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-forwarder-status.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/management/nfd-forwarder-status.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-local-control-header.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-rib-entry.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/management/nfd-rib-entry.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-rib-flags.hpp	/^namespace ndn {$/;"	n
ndn	src/management/nfd-strategy-choice.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/management/nfd-strategy-choice.hpp	/^namespace ndn {$/;"	n
ndn	src/meta-info.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/meta-info.hpp	/^namespace ndn {$/;"	n
ndn	src/mgmt/control-parameters.hpp	/^namespace ndn {$/;"	n
ndn	src/mgmt/control-response.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/mgmt/control-response.hpp	/^namespace ndn {$/;"	n
ndn	src/mgmt/dispatcher.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/mgmt/dispatcher.hpp	/^namespace ndn {$/;"	n
ndn	src/mgmt/status-dataset-context.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/mgmt/status-dataset-context.hpp	/^namespace ndn {$/;"	n
ndn	src/name-component.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/name-component.hpp	/^namespace ndn {$/;"	n
ndn	src/name.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/name.hpp	/^namespace ndn {$/;"	n
ndn	src/security/additional-description.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/additional-description.hpp	/^namespace ndn {$/;"	n
ndn	src/security/certificate-cache-ttl.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/certificate-cache-ttl.hpp	/^namespace ndn {$/;"	n
ndn	src/security/certificate-cache.hpp	/^namespace ndn {$/;"	n
ndn	src/security/certificate-container.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/certificate-container.hpp	/^namespace ndn {$/;"	n
ndn	src/security/certificate-extension.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/certificate-extension.hpp	/^namespace ndn {$/;"	n
ndn	src/security/certificate-subject-description.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/certificate-subject-description.hpp	/^namespace ndn {$/;"	n
ndn	src/security/certificate.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/certificate.hpp	/^namespace ndn {$/;"	n
ndn	src/security/conf/checker.hpp	/^namespace ndn {$/;"	n
ndn	src/security/conf/common.hpp	/^namespace ndn {$/;"	n
ndn	src/security/conf/filter.hpp	/^namespace ndn {$/;"	n
ndn	src/security/conf/key-locator-checker.hpp	/^namespace ndn {$/;"	n
ndn	src/security/conf/rule.hpp	/^namespace ndn {$/;"	n
ndn	src/security/digest-sha256.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/digest-sha256.hpp	/^namespace ndn {$/;"	n
ndn	src/security/identity-certificate.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/identity-certificate.hpp	/^namespace ndn {$/;"	n
ndn	src/security/identity-container.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/identity-container.hpp	/^namespace ndn {$/;"	n
ndn	src/security/identity.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/identity.hpp	/^namespace ndn {$/;"	n
ndn	src/security/key-chain.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/key-chain.hpp	/^namespace ndn {$/;"	n
ndn	src/security/key-container.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/key-container.hpp	/^namespace ndn {$/;"	n
ndn	src/security/key-params.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/key-params.hpp	/^namespace ndn {$/;"	n
ndn	src/security/key.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/key.hpp	/^namespace ndn {$/;"	n
ndn	src/security/pib-impl.hpp	/^namespace ndn {$/;"	n
ndn	src/security/pib-memory.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/pib-memory.hpp	/^namespace ndn {$/;"	n
ndn	src/security/pib-sqlite3.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/pib-sqlite3.hpp	/^namespace ndn {$/;"	n
ndn	src/security/pib.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/pib.hpp	/^namespace ndn {$/;"	n
ndn	src/security/public-key.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/public-key.hpp	/^namespace ndn {$/;"	n
ndn	src/security/sec-public-info-sqlite3.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/sec-public-info-sqlite3.hpp	/^namespace ndn {$/;"	n
ndn	src/security/sec-public-info.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/sec-public-info.hpp	/^namespace ndn {$/;"	n
ndn	src/security/sec-rule-relative.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/sec-rule-relative.hpp	/^namespace ndn {$/;"	n
ndn	src/security/sec-rule-specific.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/sec-rule-specific.hpp	/^namespace ndn {$/;"	n
ndn	src/security/sec-rule.hpp	/^namespace ndn {$/;"	n
ndn	src/security/sec-tpm-file.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/sec-tpm-file.hpp	/^namespace ndn {$/;"	n
ndn	src/security/sec-tpm-osx.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/sec-tpm-osx.hpp	/^namespace ndn {$/;"	n
ndn	src/security/sec-tpm.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/sec-tpm.hpp	/^namespace ndn {$/;"	n
ndn	src/security/secured-bag.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/secured-bag.hpp	/^namespace ndn {$/;"	n
ndn	src/security/security-common.hpp	/^namespace ndn {$/;"	n
ndn	src/security/signature-sha256-with-ecdsa.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/signature-sha256-with-ecdsa.hpp	/^namespace ndn {$/;"	n
ndn	src/security/signature-sha256-with-rsa.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/signature-sha256-with-rsa.hpp	/^namespace ndn {$/;"	n
ndn	src/security/signing-helpers.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/signing-helpers.hpp	/^namespace ndn {$/;"	n
ndn	src/security/signing-info.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/signing-info.hpp	/^namespace ndn {$/;"	n
ndn	src/security/validation-request.hpp	/^namespace ndn {$/;"	n
ndn	src/security/validator-config.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/validator-config.hpp	/^namespace ndn {$/;"	n
ndn	src/security/validator-null.hpp	/^namespace ndn {$/;"	n
ndn	src/security/validator-regex.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/validator-regex.hpp	/^namespace ndn {$/;"	n
ndn	src/security/validator.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/validator.hpp	/^namespace ndn {$/;"	n
ndn	src/security/validity-period.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/security/validity-period.hpp	/^namespace ndn {$/;"	n
ndn	src/selectors.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/selectors.hpp	/^namespace ndn {$/;"	n
ndn	src/signature-info.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/signature-info.hpp	/^namespace ndn {$/;"	n
ndn	src/signature.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/signature.hpp	/^namespace ndn {$/;"	n
ndn	src/tag-host.hpp	/^namespace ndn {$/;"	n
ndn	src/tag.hpp	/^namespace ndn {$/;"	n
ndn	src/transport/stream-transport.hpp	/^namespace ndn {$/;"	n
ndn	src/transport/tcp-transport.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/transport/tcp-transport.hpp	/^namespace ndn {$/;"	n
ndn	src/transport/transport.hpp	/^namespace ndn {$/;"	n
ndn	src/transport/unix-transport.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/transport/unix-transport.hpp	/^namespace ndn {$/;"	n
ndn	src/util/backports.hpp	/^namespace ndn {$/;"	n
ndn	src/util/command-interest-generator.hpp	/^namespace ndn {$/;"	n
ndn	src/util/command-interest-validator.hpp	/^namespace ndn {$/;"	n
ndn	src/util/concepts.hpp	/^namespace ndn {$/;"	n
ndn	src/util/config-file.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/config-file.hpp	/^namespace ndn {$/;"	n
ndn	src/util/crypto.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/crypto.hpp	/^namespace ndn {$/;"	n
ndn	src/util/digest.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/digest.hpp	/^namespace ndn {$/;"	n
ndn	src/util/dns.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/dns.hpp	/^namespace ndn {$/;"	n
ndn	src/util/dummy-client-face.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/dummy-client-face.hpp	/^namespace ndn {$/;"	n
ndn	src/util/ethernet.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/ethernet.hpp	/^namespace ndn {$/;"	n
ndn	src/util/face-uri.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/face-uri.hpp	/^namespace ndn {$/;"	n
ndn	src/util/in-memory-storage-entry.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/in-memory-storage-entry.hpp	/^namespace ndn {$/;"	n
ndn	src/util/in-memory-storage-fifo.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/in-memory-storage-fifo.hpp	/^namespace ndn {$/;"	n
ndn	src/util/in-memory-storage-lfu.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/in-memory-storage-lfu.hpp	/^namespace ndn {$/;"	n
ndn	src/util/in-memory-storage-lru.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/in-memory-storage-lru.hpp	/^namespace ndn {$/;"	n
ndn	src/util/in-memory-storage-persistent.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/in-memory-storage-persistent.hpp	/^namespace ndn {$/;"	n
ndn	src/util/in-memory-storage.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/in-memory-storage.hpp	/^namespace ndn {$/;"	n
ndn	src/util/indented-stream.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/indented-stream.hpp	/^namespace ndn {$/;"	n
ndn	src/util/io.hpp	/^namespace ndn {$/;"	n
ndn	src/util/monotonic_deadline_timer.hpp	/^namespace ndn {$/;"	n
ndn	src/util/network-monitor.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/network-monitor.hpp	/^namespace ndn {$/;"	n
ndn	src/util/notification-stream.hpp	/^namespace ndn {$/;"	n
ndn	src/util/notification-subscriber.hpp	/^namespace ndn {$/;"	n
ndn	src/util/random.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/random.hpp	/^namespace ndn {$/;"	n
ndn	src/util/regex.hpp	/^namespace ndn {$/;"	n
ndn	src/util/regex/regex-backref-manager.hpp	/^namespace ndn {$/;"	n
ndn	src/util/regex/regex-backref-matcher.hpp	/^namespace ndn {$/;"	n
ndn	src/util/regex/regex-component-matcher.hpp	/^namespace ndn {$/;"	n
ndn	src/util/regex/regex-component-set-matcher.hpp	/^namespace ndn {$/;"	n
ndn	src/util/regex/regex-matcher.hpp	/^namespace ndn {$/;"	n
ndn	src/util/regex/regex-pattern-list-matcher.hpp	/^namespace ndn {$/;"	n
ndn	src/util/regex/regex-pseudo-matcher.hpp	/^namespace ndn {$/;"	n
ndn	src/util/regex/regex-repeat-matcher.hpp	/^namespace ndn {$/;"	n
ndn	src/util/regex/regex-top-matcher.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/regex/regex-top-matcher.hpp	/^namespace ndn {$/;"	n
ndn	src/util/scheduler-scoped-event-id.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/scheduler-scoped-event-id.hpp	/^namespace ndn {$/;"	n
ndn	src/util/scheduler.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/scheduler.hpp	/^namespace ndn {$/;"	n
ndn	src/util/segment-fetcher.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/segment-fetcher.hpp	/^namespace ndn {$/;"	n
ndn	src/util/signal-connection.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/signal-connection.hpp	/^namespace ndn {$/;"	n
ndn	src/util/signal-emit.hpp	/^namespace ndn {$/;"	n
ndn	src/util/signal-scoped-connection.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/signal-scoped-connection.hpp	/^namespace ndn {$/;"	n
ndn	src/util/signal-signal.hpp	/^namespace ndn {$/;"	n
ndn	src/util/sqlite3-statement.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/sqlite3-statement.hpp	/^namespace ndn {$/;"	n
ndn	src/util/string-helper.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/string-helper.hpp	/^namespace ndn {$/;"	n
ndn	src/util/time-custom-clock.hpp	/^namespace ndn {$/;"	n
ndn	src/util/time-unit-test-clock.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/time-unit-test-clock.hpp	/^namespace ndn {$/;"	n
ndn	src/util/time.cpp	/^namespace ndn {$/;"	n	file:
ndn	src/util/time.hpp	/^namespace ndn {$/;"	n
ndn	tests/identity-management-fixture.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/identity-management-fixture.hpp	/^namespace ndn {$/;"	n
ndn	tests/integrated/face.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/integrated/network-monitor.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/data.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/encoding/block-helpers.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/encoding/block.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/encoding/encoder.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/encoding/estimator.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/encoding/tlv.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/exclude.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/face.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/identity-management-time-fixture.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/identity-management-time-fixture.hpp	/^namespace ndn {$/;"	n
ndn	tests/unit-tests/interest.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/key-locator.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/link.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/lp/cache-policy.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/lp/nack-header.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/lp/nack.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/lp/packet.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/make-interest-data.hpp	/^namespace ndn {$/;"	n
ndn	tests/unit-tests/management/nfd-channel-status.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/management/nfd-command-options.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/management/nfd-control-command.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/management/nfd-control-parameters.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/management/nfd-control-response.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/management/nfd-controller.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/management/nfd-face-event-notification.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/management/nfd-face-query-filter.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/management/nfd-face-status.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/management/nfd-fib-entry.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/management/nfd-forwarder-status.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/management/nfd-strategy-choice.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/meta-info.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/mgmt/dispatcher.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/name.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/ndebug.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/network-configuration-detector.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/network-configuration-detector.hpp	/^namespace ndn {$/;"	n
ndn	tests/unit-tests/security/additional-info.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/certificate-container.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/certificate.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/conf/checker.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/digest-sha256.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/dummy-keychain.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/dummy-keychain.hpp	/^namespace ndn {$/;"	n
ndn	tests/unit-tests/security/identity-container.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/identity-fixture.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/identity-management-fixture.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/identity.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/key-chain.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/key-container.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/key-params.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/key.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/pib-data-fixture.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/pib-data-fixture.hpp	/^namespace ndn {$/;"	n
ndn	tests/unit-tests/security/pib-impl.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/pib-memory.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/pib-sqlite3.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/pib.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/public-key.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/sec-rule-relative.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/sec-rule-specific.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/sec-tpm-file.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/sec-tpm-osx.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/signing-helpers.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/signing-info.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/validator-config.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/validator.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/security/validity-period.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/signature-info.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/tag-host.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/transport/tcp-transport.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/transport/transport-fixture.hpp	/^namespace ndn {$/;"	n
ndn	tests/unit-tests/transport/unix-transport.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/unit-test-time-fixture.hpp	/^namespace ndn {$/;"	n
ndn	tests/unit-tests/util/backports.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/concepts.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/config-file.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/digest.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/dns.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/ethernet.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/face-uri.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/in-memory-storage-fifo.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/in-memory-storage-lfu.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/in-memory-storage-lru.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/in-memory-storage-persistent.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/indented-stream.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/io.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/notification-stream.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/notification-subscriber.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/random.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/regex.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/scheduler.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/segment-fetcher.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/signal.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/simple-notification.hpp	/^namespace ndn {$/;"	n
ndn	tests/unit-tests/util/sqlite3-statement.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/string-helper.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/test-home-environment-fixture.hpp	/^namespace ndn {$/;"	n
ndn	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/time-unit-test-clock.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/util/time.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/version.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	tools/ndncatchunks3.cpp	/^namespace ndn {$/;"	n	file:
ndn	tools/ndnputchunks3.cpp	/^namespace ndn {$/;"	n	file:
ndn	tools/tlvdump.cpp	/^namespace ndn {$/;"	n	file:
ndn_digestSha256	src/util/crypto.cpp	/^void ndn_digestSha256(const uint8_t* data, size_t dataLength, uint8_t* digest)$/;"	f	namespace:ndn
ndnsec_cert_dump	tools/ndnsec/cert-dump.hpp	/^ndnsec_cert_dump(int argc, char** argv)$/;"	f
ndnsec_cert_gen	tools/ndnsec/cert-gen.hpp	/^ndnsec_cert_gen(int argc, char** argv)$/;"	f
ndnsec_cert_install	tools/ndnsec/cert-install.hpp	/^ndnsec_cert_install(int argc, char** argv)$/;"	f
ndnsec_cert_revoke	tools/ndnsec/cert-revoke.hpp	/^ndnsec_cert_revoke(int argc, char** argv)$/;"	f
ndnsec_delete	tools/ndnsec/delete.hpp	/^ndnsec_delete(int argc, char** argv)$/;"	f
ndnsec_dsk_gen	tools/ndnsec/dsk-gen.hpp	/^ndnsec_dsk_gen(int argc, char** argv)$/;"	f
ndnsec_export	tools/ndnsec/export.hpp	/^ndnsec_export(int argc, char** argv)$/;"	f
ndnsec_get_default	tools/ndnsec/get-default.hpp	/^ndnsec_get_default(int argc, char** argv)$/;"	f
ndnsec_import	tools/ndnsec/import.hpp	/^ndnsec_import(int argc, char** argv)$/;"	f
ndnsec_key_gen	tools/ndnsec/key-gen.hpp	/^ndnsec_key_gen(int argc, char** argv)$/;"	f
ndnsec_list	tools/ndnsec/list.hpp	/^ndnsec_list(int argc, char** argv)$/;"	f
ndnsec_op_tool	tools/ndnsec/op-tool.hpp	/^ndnsec_op_tool(int argc, char** argv)$/;"	f
ndnsec_set_acl	tools/ndnsec/set-acl.hpp	/^ndnsec_set_acl(int argc, char** argv)$/;"	f
ndnsec_set_default	tools/ndnsec/set-default.hpp	/^ndnsec_set_default(int argc, char** argv)$/;"	f
ndnsec_sig_verify	tools/ndnsec/sig-verify.hpp	/^ndnsec_sig_verify(int argc, char** argv)$/;"	f
ndnsec_sign_req	tools/ndnsec/sign-req.hpp	/^ndnsec_sign_req(int argc, char** argv)$/;"	f
ndnsec_unlock_tpm	tools/ndnsec/unlock-tpm.hpp	/^ndnsec_unlock_tpm(int argc, char** argv)$/;"	f
nestedBlock	src/encoding/block-helpers.hpp	/^nestedBlock(uint32_t type, const U& value)$/;"	f	namespace:ndn::encoding
nfd	src/encoding/nfd-constants.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	src/encoding/nfd-constants.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/encoding/tlv-nfd.hpp	/^namespace nfd {$/;"	n	namespace:ndn::tlv
nfd	src/face.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-channel-status.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	src/management/nfd-channel-status.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-command-options.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	src/management/nfd-command-options.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-control-command.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	src/management/nfd-control-command.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-control-parameters.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	src/management/nfd-control-parameters.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-control-response.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-controller.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	src/management/nfd-controller.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-face-event-notification.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	src/management/nfd-face-event-notification.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-face-monitor.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-face-query-filter.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	src/management/nfd-face-query-filter.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-face-status.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	src/management/nfd-face-status.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-face-traits.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-fib-entry.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	src/management/nfd-fib-entry.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-forwarder-status.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	src/management/nfd-forwarder-status.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-local-control-header.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-rib-entry.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	src/management/nfd-rib-entry.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-rib-flags.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	src/management/nfd-strategy-choice.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	src/management/nfd-strategy-choice.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	tests/unit-tests/management/nfd-channel-status.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	tests/unit-tests/management/nfd-command-options.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	tests/unit-tests/management/nfd-control-command.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	tests/unit-tests/management/nfd-control-parameters.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	tests/unit-tests/management/nfd-control-response.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	tests/unit-tests/management/nfd-controller.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	tests/unit-tests/management/nfd-face-event-notification.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	tests/unit-tests/management/nfd-face-query-filter.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	tests/unit-tests/management/nfd-face-status.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	tests/unit-tests/management/nfd-fib-entry.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	tests/unit-tests/management/nfd-forwarder-status.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	tests/unit-tests/management/nfd-strategy-choice.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
noexcept	src/util/ethernet.hpp	/^  operator()(const ndn::util::ethernet::Address& a) const noexcept;$/;"	m	struct:std::hash
noexcept	src/util/scheduler-scoped-event-id.hpp	/^  ScopedEventId(ScopedEventId&& other) noexcept;$/;"	m	class:ndn::util::scheduler::ScopedEventId
noexcept	src/util/signal-scoped-connection.hpp	/^  ScopedConnection(ScopedConnection&& other) noexcept;$/;"	m	class:ndn::util::signal::ScopedConnection
noexcept	src/util/time.hpp	/^  from_time_t(std::time_t t) noexcept;$/;"	m	class:ndn::time::system_clock
noexcept	src/util/time.hpp	/^  now() noexcept;$/;"	m	class:ndn::time::steady_clock
noexcept	src/util/time.hpp	/^  now() noexcept;$/;"	m	class:ndn::time::system_clock
noexcept	src/util/time.hpp	/^  to_time_t(const time_point& t) noexcept;$/;"	m	class:ndn::time::system_clock
nonNegativeIntegerBlock	src/encoding/block-helpers.hpp	/^nonNegativeIntegerBlock(uint32_t type, uint64_t value)$/;"	f	namespace:ndn::encoding
nop	src/util/face-uri.cpp	/^nop()$/;"	f	namespace:ndn::util
notificationConn	tests/unit-tests/util/notification-subscriber.t.cpp	/^  util::signal::Connection notificationConn;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
notificationStream	tests/unit-tests/util/notification-subscriber.t.cpp	/^  util::NotificationStream<SimpleNotification> notificationStream;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
now	src/util/monotonic_deadline_timer.hpp	/^  now()$/;"	f	struct:boost::asio::time_traits
npos	src/name.cpp	/^const size_t Name::npos = std::numeric_limits<size_t>::max();$/;"	m	class:ndn::Name	file:
npos	src/name.hpp	/^  static const size_t npos;$/;"	m	class:ndn::Name
oid	src/encoding/oid.cpp	/^namespace oid {$/;"	n	namespace:ndn	file:
oid	src/encoding/oid.hpp	/^namespace oid {$/;"	n	namespace:ndn
onCanonizeFailure	tests/unit-tests/util/face-uri.t.cpp	/^  onCanonizeFailure(shared_ptr<CanonizeTestCase> tc, const std::string& reason)$/;"	f	class:ndn::util::tests::CanonizeFixture	file:
onCanonizeSuccess	tests/unit-tests/util/face-uri.t.cpp	/^  onCanonizeSuccess(shared_ptr<CanonizeTestCase> tc, const FaceUri& canonicalUri)$/;"	f	class:ndn::util::tests::CanonizeFixture	file:
onCertFailed	src/security/validator-config.cpp	/^ValidatorConfig::onCertFailed(const shared_ptr<const Data>& signCertificate,$/;"	f	class:ndn::ValidatorConfig
onCertValidated	src/security/validator-config.cpp	/^ValidatorConfig::onCertValidated(const shared_ptr<const Data>& signCertificate,$/;"	f	class:ndn::ValidatorConfig
onCertificateValidated	src/security/validator-regex.cpp	/^ValidatorRegex::onCertificateValidated(const shared_ptr<const Data>& signCertificate,$/;"	f	class:ndn::ValidatorRegex
onCertificateValidationFailed	src/security/validator-regex.cpp	/^ValidatorRegex::onCertificateValidationFailed(const shared_ptr<const Data>& signCertificate,$/;"	f	class:ndn::ValidatorRegex
onChanged	src/data.cpp	/^Data::onChanged()$/;"	f	class:ndn::Data
onCommandFail	tests/unit-tests/management/nfd-controller.t.cpp	/^  onCommandFail(uint32_t code, const std::string& reason)$/;"	f	class:ndn::nfd::tests::CommandFixture	file:
onCommandSucceed	tests/unit-tests/management/nfd-controller.t.cpp	/^  onCommandSucceed(const ControlParameters& parameters)$/;"	f	class:ndn::nfd::tests::CommandFixture	file:
onConfigRule	src/security/validator-config.cpp	/^ValidatorConfig::onConfigRule(const security::conf::ConfigSection& configSection,$/;"	f	class:ndn::ValidatorConfig
onConfigTrustAnchor	src/security/validator-config.cpp	/^ValidatorConfig::onConfigTrustAnchor(const security::conf::ConfigSection& configSection,$/;"	f	class:ndn::ValidatorConfig
onData	examples/consumer-with-timer.cpp	/^  onData(const Interest& interest, const Data& data)$/;"	f	class:ndn::examples::ConsumerWithTimer	file:
onData	examples/consumer.cpp	/^  onData(const Interest& interest, const Data& data)$/;"	f	class:ndn::examples::Consumer	file:
onData	src/security/validator.cpp	/^Validator::onData(const Interest& interest,$/;"	f	class:ndn::Validator
onData	tests/integrated/face.cpp	/^  onData()$/;"	f	class:ndn::tests::FacesFixture
onData	tests/unit-tests/util/segment-fetcher.t.cpp	/^  onData(const ConstBufferPtr& data)$/;"	f	class:ndn::util::tests::Fixture
onData	tools/ndncatchunks3.cpp	/^Consumer::onData(Data& data)$/;"	f	class:ndn::Consumer
onDecodeError	src/util/notification-subscriber.hpp	/^  signal::Signal<NotificationSubscriber, Data> onDecodeError;$/;"	m	class:ndn::util::NotificationSubscriber
onDnsFailure	src/util/face-uri.cpp	/^  onDnsFailure(shared_ptr<FaceUri> faceUri, const FaceUri::CanonizeFailureCallback& onFailure,$/;"	f	class:ndn::util::IpHostCanonizeProvider	file:
onDnsSuccess	src/util/face-uri.cpp	/^  onDnsSuccess(shared_ptr<FaceUri> faceUri,$/;"	f	class:ndn::util::IpHostCanonizeProvider	file:
onEmpty	src/detail/container-with-on-empty-signal.hpp	/^  util::Signal<ContainerWithOnEmptySignal<T>> onEmpty;$/;"	m	class:ndn::ContainerWithOnEmptySignal
onEmptyPitOrNoRegisteredPrefixes	src/detail/face-impl.hpp	/^  onEmptyPitOrNoRegisteredPrefixes()$/;"	f	class:ndn::Face::Impl
onError	tests/unit-tests/util/segment-fetcher.t.cpp	/^  onError(uint32_t errorCode)$/;"	f	class:ndn::util::tests::Fixture
onEvent	src/util/scheduler.cpp	/^Scheduler::onEvent(const boost::system::error_code& error)$/;"	f	class:ndn::util::scheduler::Scheduler
onFailure	tests/unit-tests/util/dns.t.cpp	/^  onFailure(bool isValid)$/;"	f	class:ndn::util::tests::DnsFixture
onInterest	examples/producer.cpp	/^  onInterest(const InterestFilter& filter, const Interest& interest)$/;"	f	class:ndn::examples::Producer	file:
onInterest	tests/integrated/face.cpp	/^  onInterest(Face& face,$/;"	f	class:ndn::tests::FacesFixture
onInterest	tools/ndnputchunks3.cpp	/^  onInterest(const Interest& interest)$/;"	f	class:ndn::Producer
onInterest2	tests/integrated/face.cpp	/^  onInterest2(Face& face,$/;"	f	class:ndn::tests::FacesFixture
onInterestRegex	tests/integrated/face.cpp	/^  onInterestRegex(Face& face,$/;"	f	class:ndn::tests::FacesFixture
onInterestRegexError	tests/integrated/face.cpp	/^  onInterestRegexError(Face& face,$/;"	f	class:ndn::tests::FacesFixture
onNetworkStateChanged	src/util/network-monitor.hpp	/^  Signal<NetworkMonitor> onNetworkStateChanged;$/;"	m	class:ndn::util::NetworkMonitor
onNotification	src/util/notification-subscriber.hpp	/^  signal::Signal<NotificationSubscriber, Notification> onNotification;$/;"	m	class:ndn::util::NotificationSubscriber
onReceiveElement	src/face.cpp	/^Face::onReceiveElement(const Block& blockFromDaemon)$/;"	f	class:ndn::Face
onRegFailed	tests/integrated/face.cpp	/^  onRegFailed()$/;"	f	class:ndn::tests::FacesFixture
onRegSucceeded	tests/integrated/face.cpp	/^  onRegSucceeded()$/;"	f	class:ndn::tests::FacesFixture3
onRegisterFailed	examples/producer.cpp	/^  onRegisterFailed(const Name& prefix, const std::string& reason)$/;"	f	class:ndn::examples::Producer	file:
onRegisterFailed	tools/ndnputchunks3.cpp	/^  onRegisterFailed(const Name& prefix, const std::string& reason)$/;"	f	class:ndn::Producer
onResolveError	src/util/dns.cpp	/^  onResolveError(const std::string& errorInfo, const shared_ptr<Resolver>& self)$/;"	f	class:ndn::dns::Resolver
onResolveSuccess	src/util/dns.cpp	/^  onResolveSuccess(const boost::system::error_code& error,$/;"	f	class:ndn::dns::Resolver
onSegmentReceived	src/util/segment-fetcher.cpp	/^SegmentFetcher::onSegmentReceived(const Interest& origInterest,$/;"	f	class:ndn::util::SegmentFetcher
onSendBlock	src/util/dummy-client-face.cpp	/^  Signal<Transport, Block> onSendBlock;$/;"	m	class:ndn::util::DummyClientFace::Transport	file:
onSendData	src/util/dummy-client-face.hpp	/^  Signal<DummyClientFace, Data> onSendData;$/;"	m	class:ndn::util::DummyClientFace
onSendInterest	src/util/dummy-client-face.hpp	/^  Signal<DummyClientFace, Interest> onSendInterest;$/;"	m	class:ndn::util::DummyClientFace
onSendNack	src/util/dummy-client-face.hpp	/^  Signal<DummyClientFace, lp::Nack> onSendNack;$/;"	m	class:ndn::util::DummyClientFace
onSuccess	tests/unit-tests/util/dns.t.cpp	/^  onSuccess(const dns::IpAddress& resolvedAddress,$/;"	f	class:ndn::util::tests::DnsFixture
onTimeout	examples/consumer-with-timer.cpp	/^  onTimeout(const Interest& interest)$/;"	f	class:ndn::examples::ConsumerWithTimer	file:
onTimeout	examples/consumer.cpp	/^  onTimeout(const Interest& interest)$/;"	f	class:ndn::examples::Consumer	file:
onTimeout	src/security/validator.cpp	/^Validator::onTimeout(const Interest& interest,$/;"	f	class:ndn::Validator
onTimeout	src/util/notification-subscriber.hpp	/^  signal::Signal<NotificationSubscriber> onTimeout;$/;"	m	class:ndn::util::NotificationSubscriber
onTimeout	tests/integrated/face.cpp	/^  onTimeout()$/;"	f	class:ndn::tests::FacesFixture
onTimeout	tools/ndncatchunks3.cpp	/^Consumer::onTimeout(const Interest& interest)$/;"	f	class:ndn::Consumer
onUnregFailed	tests/integrated/face.cpp	/^  onUnregFailed()$/;"	f	class:ndn::tests::FacesFixture3
onUnregSucceeded	tests/integrated/face.cpp	/^  onUnregSucceeded()$/;"	f	class:ndn::tests::FacesFixture3
onValidated	tests/unit-tests/security/validator.t.cpp	/^onValidated(const shared_ptr<const Data>& data)$/;"	f	namespace:ndn::tests
onValidationFailed	tests/unit-tests/security/validator.t.cpp	/^onValidationFailed(const shared_ptr<const Data>& data, const string& failureInfo)$/;"	f	namespace:ndn::tests
open	src/util/config-file.cpp	/^ConfigFile::open()$/;"	f	class:ndn::ConfigFile
operator !	src/security/identity.cpp	/^Identity::operator!() const$/;"	f	class:ndn::security::Identity
operator !	src/security/key.cpp	/^Key::operator!() const$/;"	f	class:ndn::security::Key
operator !=	src/data.cpp	/^Data::operator!=(const Data& other) const$/;"	f	class:ndn::Data
operator !=	src/encoding/block.cpp	/^Block::operator!=(const Block& other) const$/;"	f	class:ndn::Block
operator !=	src/encoding/oid.hpp	/^  operator!=(const OID& oid) const$/;"	f	class:ndn::OID
operator !=	src/exclude.hpp	/^Exclude::operator!=(const Exclude& other) const$/;"	f	class:ndn::Exclude
operator !=	src/interest.hpp	/^  operator!=(const Interest& other) const$/;"	f	class:ndn::Interest
operator !=	src/key-locator.hpp	/^  operator!=(const KeyLocator& other) const$/;"	f	class:ndn::KeyLocator
operator !=	src/meta-info.hpp	/^MetaInfo::operator!=(const MetaInfo& other) const$/;"	f	class:ndn::MetaInfo
operator !=	src/name-component.hpp	/^  operator!=(const Component& other) const$/;"	f	class:ndn::name::Component
operator !=	src/name.hpp	/^  operator!=(const Name& name) const$/;"	f	class:ndn::Name
operator !=	src/security/additional-description.cpp	/^AdditionalDescription::operator!=(const AdditionalDescription& other) const$/;"	f	class:ndn::security::AdditionalDescription
operator !=	src/security/certificate-container.cpp	/^CertificateContainer::const_iterator::operator!=(const const_iterator& other)$/;"	f	class:ndn::security::CertificateContainer::const_iterator
operator !=	src/security/identity-container.cpp	/^IdentityContainer::const_iterator::operator!=(const const_iterator& other)$/;"	f	class:ndn::security::IdentityContainer::const_iterator
operator !=	src/security/key-container.cpp	/^KeyContainer::const_iterator::operator!=(const const_iterator& other)$/;"	f	class:ndn::security::KeyContainer::const_iterator
operator !=	src/security/public-key.hpp	/^  operator!=(const PublicKey& key) const$/;"	f	class:ndn::PublicKey
operator !=	src/security/validity-period.cpp	/^ValidityPeriod::operator!=(const ValidityPeriod& other) const$/;"	f	class:ndn::security::ValidityPeriod
operator !=	src/selectors.hpp	/^  operator!=(const Selectors& other) const$/;"	f	class:ndn::Selectors
operator !=	src/signature-info.hpp	/^  operator!=(const SignatureInfo& rhs) const$/;"	f	class:ndn::SignatureInfo
operator !=	src/signature.hpp	/^  operator!=(const Signature& other) const$/;"	f	class:ndn::Signature
operator !=	src/util/digest.hpp	/^  operator!=(Digest<Hash>& digest)$/;"	f	class:ndn::util::Digest
operator !=	src/util/face-uri.cpp	/^FaceUri::operator!=(const FaceUri& rhs) const$/;"	f	class:ndn::util::FaceUri
operator !=	src/util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator!=(const const_iterator& rhs)$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator !=	src/util/signal-connection.cpp	/^Connection::operator!=(const Connection& other) const$/;"	f	class:ndn::util::signal::Connection
operator ()	src/detail/interest-filter-record.hpp	/^  operator()(const shared_ptr<InterestFilterRecord>& interestFilterId) const$/;"	f	class:ndn::MatchInterestFilterId
operator ()	src/detail/pending-interest.hpp	/^  operator()(const shared_ptr<const PendingInterest>& pendingInterest) const$/;"	f	class:ndn::MatchPendingInterestId
operator ()	src/detail/registered-prefix.hpp	/^  operator()(const shared_ptr<RegisteredPrefix>& registeredPrefix) const$/;"	f	class:ndn::MatchRegisteredPrefixId
operator ()	src/lp/detail/field-info.cpp	/^  operator()(FieldInfo* info, T)$/;"	f	struct:ndn::lp::detail::ExtractFieldInfo
operator ()	src/name.cpp	/^hash<ndn::Name>::operator()(const ndn::Name& name) const$/;"	f	class:std::hash
operator ()	src/util/dns.hpp	/^  operator()(const boost::asio::ip::address& address)$/;"	f	struct:ndn::dns::AnyAddress
operator ()	src/util/dns.hpp	/^  operator()(const boost::asio::ip::address& address)$/;"	f	struct:ndn::dns::Ipv4Only
operator ()	src/util/dns.hpp	/^  operator()(const boost::asio::ip::address& address)$/;"	f	struct:ndn::dns::Ipv6Only
operator ()	src/util/face-uri.cpp	/^  operator()(CP*)$/;"	f	class:ndn::util::CanonizeProviderTableInitializer
operator ()	src/util/segment-fetcher.hpp	/^  operator()(const Data& data) const$/;"	f	class:ndn::util::DontVerifySegment
operator ()	src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::operator()(const TArgs&... args)$/;"	f	class:ndn::util::signal::Signal
operator ()	src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::operator()(const TArgs&... args, const DummyExtraArg&)$/;"	f	class:ndn::util::signal::Signal
operator *	src/security/certificate-container.cpp	/^CertificateContainer::const_iterator::operator*()$/;"	f	class:ndn::security::CertificateContainer::const_iterator
operator *	src/security/identity-container.cpp	/^IdentityContainer::const_iterator::operator*()$/;"	f	class:ndn::security::IdentityContainer::const_iterator
operator *	src/security/key-container.cpp	/^KeyContainer::const_iterator::operator*()$/;"	f	class:ndn::security::KeyContainer::const_iterator
operator *	src/util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator*()$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator ++	src/security/certificate-container.cpp	/^CertificateContainer::const_iterator::operator++()$/;"	f	class:ndn::security::CertificateContainer::const_iterator
operator ++	src/security/certificate-container.cpp	/^CertificateContainer::const_iterator::operator++(int)$/;"	f	class:ndn::security::CertificateContainer::const_iterator
operator ++	src/security/identity-container.cpp	/^IdentityContainer::const_iterator::operator++()$/;"	f	class:ndn::security::IdentityContainer::const_iterator
operator ++	src/security/identity-container.cpp	/^IdentityContainer::const_iterator::operator++(int)$/;"	f	class:ndn::security::IdentityContainer::const_iterator
operator ++	src/security/key-container.cpp	/^KeyContainer::const_iterator::operator++()$/;"	f	class:ndn::security::KeyContainer::const_iterator
operator ++	src/security/key-container.cpp	/^KeyContainer::const_iterator::operator++(int)$/;"	f	class:ndn::security::KeyContainer::const_iterator
operator ++	src/util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator++()$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator ++	src/util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator++(int)$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator ->	src/util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator->()$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator <	src/name-component.hpp	/^  operator<(const Component& other) const$/;"	f	class:ndn::name::Component
operator <	src/name.hpp	/^  operator<(const Name& other) const$/;"	f	class:ndn::Name
operator <	src/util/scheduler.hpp	/^    operator <(const EventInfo& other) const$/;"	f	struct:ndn::util::scheduler::Scheduler::EventInfo
operator <<	src/data.cpp	/^operator<<(std::ostream& os, const Data& data)$/;"	f	namespace:ndn
operator <<	src/encoding/nfd-constants.cpp	/^operator<<(std::ostream& os, FacePersistency facePersistency)$/;"	f	namespace:ndn::nfd
operator <<	src/encoding/nfd-constants.cpp	/^operator<<(std::ostream& os, FaceScope faceScope)$/;"	f	namespace:ndn::nfd
operator <<	src/encoding/nfd-constants.cpp	/^operator<<(std::ostream& os, LinkType linkType)$/;"	f	namespace:ndn::nfd
operator <<	src/exclude.cpp	/^operator<<(std::ostream& os, const Exclude& exclude)$/;"	f	namespace:ndn
operator <<	src/interest-filter.cpp	/^operator<<(std::ostream& os, const InterestFilter& filter)$/;"	f	namespace:ndn
operator <<	src/interest.cpp	/^operator<<(std::ostream& os, const Interest& interest)$/;"	f	namespace:ndn
operator <<	src/lp/cache-policy.cpp	/^operator<<(std::ostream& os, CachePolicyType policy)$/;"	f	namespace:ndn::lp
operator <<	src/lp/nack-header.cpp	/^operator<<(std::ostream& os, NackReason reason)$/;"	f	namespace:ndn::lp
operator <<	src/management/nfd-control-parameters.cpp	/^operator<<(std::ostream& os, const ControlParameters& parameters)$/;"	f	namespace:ndn::nfd
operator <<	src/management/nfd-face-event-notification.cpp	/^operator<<(std::ostream& os, const FaceEventNotification& notification)$/;"	f	namespace:ndn::nfd
operator <<	src/management/nfd-face-query-filter.cpp	/^operator<<(std::ostream& os, const FaceQueryFilter& filter)$/;"	f	namespace:ndn::nfd
operator <<	src/management/nfd-face-status.cpp	/^operator<<(std::ostream& os, const FaceStatus& status)$/;"	f	namespace:ndn::nfd
operator <<	src/management/nfd-rib-entry.cpp	/^operator<<(std::ostream& os, const RibEntry& entry)$/;"	f	namespace:ndn::nfd
operator <<	src/management/nfd-rib-entry.cpp	/^operator<<(std::ostream& os, const Route& route)$/;"	f	namespace:ndn::nfd
operator <<	src/meta-info.cpp	/^operator<<(std::ostream& os, const MetaInfo& info)$/;"	f	namespace:ndn
operator <<	src/mgmt/control-response.cpp	/^operator<<(std::ostream& os, const ControlResponse& response)$/;"	f	namespace:ndn::mgmt
operator <<	src/name-component.hpp	/^operator<<(std::ostream& os, const Component& component)$/;"	f	namespace:ndn::name
operator <<	src/name.cpp	/^operator<<(std::ostream& os, const Name& name)$/;"	f	namespace:ndn
operator <<	src/security/additional-description.cpp	/^operator<<(std::ostream& os, const AdditionalDescription& other)$/;"	f	namespace:ndn::security
operator <<	src/security/certificate.cpp	/^operator<<(std::ostream& os, const Certificate& cert)$/;"	f	namespace:ndn
operator <<	src/security/public-key.cpp	/^operator<<(std::ostream& os, const PublicKey& key)$/;"	f	namespace:ndn
operator <<	src/security/validity-period.cpp	/^operator<<(std::ostream& os, const ValidityPeriod& period)$/;"	f	namespace:ndn::security
operator <<	src/util/digest.cpp	/^Digest<Hash>::operator<<(Digest<Hash>& src)$/;"	f	class:ndn::util::Digest
operator <<	src/util/digest.cpp	/^Digest<Hash>::operator<<(const Block& block)$/;"	f	class:ndn::util::Digest
operator <<	src/util/digest.cpp	/^Digest<Hash>::operator<<(const std::string& str)$/;"	f	class:ndn::util::Digest
operator <<	src/util/digest.cpp	/^Digest<Hash>::operator<<(uint64_t value)$/;"	f	class:ndn::util::Digest
operator <<	src/util/digest.cpp	/^operator<<(std::ostream& os, Digest<Hash>& digest)$/;"	f	namespace:ndn::util
operator <<	src/util/ethernet.cpp	/^operator<<(std::ostream& o, const Address& a)$/;"	f	namespace:ndn::util::ethernet
operator <<	src/util/face-uri.cpp	/^operator<<(std::ostream& os, const FaceUri& uri)$/;"	f	namespace:ndn::util
operator <<	src/util/regex/regex-matcher.hpp	/^operator<<(std::ostream& os, const RegexMatcher& regex)$/;"	f	namespace:ndn
operator <=	src/name-component.hpp	/^  operator<=(const Component& other) const$/;"	f	class:ndn::name::Component
operator <=	src/name.hpp	/^  operator<=(const Name& other) const$/;"	f	class:ndn::Name
operator <=	src/util/scheduler.hpp	/^    operator <=(const EventInfo& other) const$/;"	f	struct:ndn::util::scheduler::Scheduler::EventInfo
operator =	src/security/sec-tpm-osx.cpp	/^  operator=(const CFReleaser& inReleaser)$/;"	f	class:ndn::CFReleaser
operator =	src/security/sec-tpm-osx.cpp	/^  operator=(const T& typeRef)$/;"	f	class:ndn::CFReleaser
operator =	src/util/scheduler-scoped-event-id.cpp	/^ScopedEventId::operator=(const EventId& event)$/;"	f	class:ndn::util::scheduler::ScopedEventId
operator =	src/util/signal-scoped-connection.cpp	/^ScopedConnection::operator=(const Connection& connection)$/;"	f	class:ndn::util::signal::ScopedConnection
operator ==	src/data.cpp	/^Data::operator==(const Data& other) const$/;"	f	class:ndn::Data
operator ==	src/encoding/block.cpp	/^Block::operator==(const Block& other) const$/;"	f	class:ndn::Block
operator ==	src/encoding/oid.hpp	/^  operator==(const OID& oid) const$/;"	f	class:ndn::OID
operator ==	src/exclude.cpp	/^Exclude::operator==(const Exclude& other) const$/;"	f	class:ndn::Exclude
operator ==	src/interest.hpp	/^  operator==(const Interest& other) const$/;"	f	class:ndn::Interest
operator ==	src/key-locator.cpp	/^KeyLocator::operator==(const KeyLocator& other) const$/;"	f	class:ndn::KeyLocator
operator ==	src/meta-info.hpp	/^MetaInfo::operator==(const MetaInfo& other) const$/;"	f	class:ndn::MetaInfo
operator ==	src/name-component.hpp	/^  operator==(const Component& other) const$/;"	f	class:ndn::name::Component
operator ==	src/name.hpp	/^  operator==(const Name& name) const$/;"	f	class:ndn::Name
operator ==	src/security/additional-description.cpp	/^AdditionalDescription::operator==(const AdditionalDescription& other) const$/;"	f	class:ndn::security::AdditionalDescription
operator ==	src/security/certificate-container.cpp	/^CertificateContainer::const_iterator::operator==(const const_iterator& other)$/;"	f	class:ndn::security::CertificateContainer::const_iterator
operator ==	src/security/identity-container.cpp	/^IdentityContainer::const_iterator::operator==(const const_iterator& other)$/;"	f	class:ndn::security::IdentityContainer::const_iterator
operator ==	src/security/key-container.cpp	/^KeyContainer::const_iterator::operator==(const const_iterator& other)$/;"	f	class:ndn::security::KeyContainer::const_iterator
operator ==	src/security/public-key.hpp	/^  operator==(const PublicKey& key) const$/;"	f	class:ndn::PublicKey
operator ==	src/security/validity-period.cpp	/^ValidityPeriod::operator==(const ValidityPeriod& other) const$/;"	f	class:ndn::security::ValidityPeriod
operator ==	src/selectors.cpp	/^Selectors::operator==(const Selectors& other) const$/;"	f	class:ndn::Selectors
operator ==	src/signature-info.cpp	/^SignatureInfo::operator==(const SignatureInfo& rhs) const$/;"	f	class:ndn::SignatureInfo
operator ==	src/signature.hpp	/^  operator==(const Signature& other) const$/;"	f	class:ndn::Signature
operator ==	src/util/digest.cpp	/^Digest<Hash>::operator==(Digest<Hash>& digest)$/;"	f	class:ndn::util::Digest
operator ==	src/util/face-uri.cpp	/^FaceUri::operator==(const FaceUri& rhs) const$/;"	f	class:ndn::util::FaceUri
operator ==	src/util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator==(const const_iterator& rhs)$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator ==	src/util/signal-connection.cpp	/^Connection::operator==(const Connection& other) const$/;"	f	class:ndn::util::signal::Connection
operator >	src/name-component.hpp	/^  operator>(const Component& other) const$/;"	f	class:ndn::name::Component
operator >	src/name.hpp	/^  operator>(const Name& other) const$/;"	f	class:ndn::Name
operator >=	src/name-component.hpp	/^  operator>=(const Component& other) const$/;"	f	class:ndn::name::Component
operator >=	src/name.hpp	/^  operator>=(const Name& other) const$/;"	f	class:ndn::Name
operator >>	src/name.cpp	/^operator>>(std::istream& is, Name& name)$/;"	f	namespace:ndn
operator []	src/name.hpp	/^  operator[](ssize_t i) const$/;"	f	class:ndn::Name
operator bool	src/security/identity.cpp	/^Identity::operator bool() const$/;"	f	class:ndn::security::Identity
operator bool	src/security/key.cpp	/^Key::operator bool() const$/;"	f	class:ndn::security::Key
operator bool	src/signature.hpp	/^  operator bool() const$/;"	f	class:ndn::Signature
operator boost::asio::const_buffer	src/encoding/block.cpp	/^Block::operator boost::asio::const_buffer() const$/;"	f	class:ndn::Block
operator const Name&	src/interest-filter.hpp	/^  operator const Name&() const$/;"	f	class:ndn::InterestFilter
operator const Scheduler::EventQueue::iterator&	src/util/scheduler.cpp	/^  operator const Scheduler::EventQueue::iterator&() const$/;"	f	struct:ndn::util::scheduler::EventIdImpl
operator sqlite3_stmt*	src/util/sqlite3-statement.cpp	/^Sqlite3Statement::operator sqlite3_stmt*()$/;"	f	class:ndn::util::Sqlite3Statement
optional	src/management/nfd-control-command.hpp	/^    optional(ControlParameterField field)$/;"	f	class:ndn::nfd::ControlCommand::FieldValidator
parse	src/encoding/block.cpp	/^Block::parse() const$/;"	f	class:ndn::Block
parse	src/util/config-file.cpp	/^ConfigFile::parse()$/;"	f	class:ndn::ConfigFile
parse	src/util/face-uri.cpp	/^FaceUri::parse(const std::string& uri)$/;"	f	class:ndn::util::FaceUri
parseBlocksFromStream	tools/tlvdump.cpp	/^parseBlocksFromStream(std::istream& is)$/;"	f	namespace:ndn
parseRepetition	src/util/regex/regex-repeat-matcher.hpp	/^RegexRepeatMatcher::parseRepetition()$/;"	f	class:ndn::RegexRepeatMatcher
parseUri	src/security/key-chain.cpp	/^parseUri(const std::string& uri)$/;"	f	namespace:ndn::security
passPacket	tests/unit-tests/security/validator-config.t.cpp	/^  passPacket()$/;"	f	struct:ndn::tests::FacesFixture
pause	src/transport/stream-transport.hpp	/^  pause()$/;"	f	class:ndn::StreamTransportImpl
pause	src/transport/tcp-transport.cpp	/^TcpTransport::pause()$/;"	f	class:ndn::TcpTransport
pause	src/transport/unix-transport.cpp	/^UnixTransport::pause()$/;"	f	class:ndn::UnixTransport
pause	src/util/dummy-client-face.cpp	/^  pause()$/;"	f	class:ndn::util::DummyClientFace::Transport
period	src/util/time.hpp	/^  typedef duration::period                 period;$/;"	t	class:ndn::time::system_clock
period	src/util/time.hpp	/^  typedef duration::period period;$/;"	t	class:ndn::time::steady_clock
placeholders2TestFunction	tests/unit-tests/util/placeholders2.t.cpp	/^placeholders2TestFunction(int i)$/;"	f
placeholders2TestMain	tests/unit-tests/util/placeholders2.t.cpp	/^placeholders2TestMain()$/;"	f
placeholdersTestFunction	tests/unit-tests/util/placeholders.t.cpp	/^placeholdersTestFunction(int i)$/;"	f
placeholdersTestMain	tests/unit-tests/util/placeholders.t.cpp	/^placeholdersTestMain()$/;"	f
pointer	src/name.hpp	/^  typedef Component*              pointer;$/;"	t	class:ndn::Name
pollCfLoop	src/util/network-monitor.cpp	/^  pollCfLoop()$/;"	f	class:ndn::util::NetworkMonitor::Impl	file:
popRef	src/util/regex/regex-backref-manager.hpp	/^RegexBackrefManager::popRef()$/;"	f	class:ndn::RegexBackrefManager
postNotification	src/mgmt/dispatcher.cpp	/^Dispatcher::postNotification(const Block& notification, const PartialName& relPrefix)$/;"	f	class:ndn::mgmt::Dispatcher
postNotification	src/util/notification-stream.hpp	/^  postNotification(const Notification& notification)$/;"	f	class:ndn::util::NotificationStream
preCertificateValidation	src/security/validator.hpp	/^  preCertificateValidation(const Data& data)$/;"	f	class:ndn::Validator
prepareSignatureInfo	src/security/key-chain.cpp	/^KeyChain::prepareSignatureInfo(const SigningInfo& params)$/;"	f	class:ndn::security::KeyChain
prepareUnsignedIdentityCertificate	src/security/key-chain.cpp	/^KeyChain::prepareUnsignedIdentityCertificate(const Name& keyName,$/;"	f	class:ndn::security::KeyChain
prependBlock	src/encoding/block-helpers.hpp	/^prependBlock(EncodingImpl<TAG>& encoder, const Block& block)$/;"	f	namespace:ndn::encoding
prependBlock	src/encoding/encoder.cpp	/^Encoder::prependBlock(const Block& block)$/;"	f	class:ndn::encoding::Encoder
prependBlock	src/encoding/estimator.cpp	/^Estimator::prependBlock(const Block& block)$/;"	f	class:ndn::encoding::Estimator
prependBooleanBlock	src/encoding/block-helpers.hpp	/^prependBooleanBlock(EncodingImpl<TAG>& encoder, uint32_t type)$/;"	f	namespace:ndn::encoding
prependByte	src/encoding/encoder.cpp	/^Encoder::prependByte(uint8_t value)$/;"	f	class:ndn::encoding::Encoder
prependByte	src/encoding/estimator.cpp	/^Estimator::prependByte(uint8_t value)$/;"	f	class:ndn::encoding::Estimator
prependByteArray	src/encoding/encoder.cpp	/^Encoder::prependByteArray(const uint8_t* array, size_t length)$/;"	f	class:ndn::encoding::Encoder
prependByteArray	src/encoding/estimator.cpp	/^Estimator::prependByteArray(const uint8_t* array, size_t length)$/;"	f	class:ndn::encoding::Estimator
prependByteArrayBlock	src/encoding/block-helpers.hpp	/^prependByteArrayBlock(EncodingImpl<TAG>& encoder,$/;"	f	namespace:ndn::encoding
prependByteArrayBlock	src/encoding/encoder.cpp	/^Encoder::prependByteArrayBlock(uint32_t type, const uint8_t* array, size_t arraySize)$/;"	f	class:ndn::encoding::Encoder
prependByteArrayBlock	src/encoding/estimator.cpp	/^Estimator::prependByteArrayBlock(uint32_t type, const uint8_t* array, size_t arraySize)$/;"	f	class:ndn::encoding::Estimator
prependEmptyBlock	src/encoding/block-helpers.cpp	/^prependEmptyBlock(EncodingImpl<TAG>& encoder, uint32_t type)$/;"	f	namespace:ndn::encoding
prependNestedBlock	src/encoding/block-helpers.hpp	/^prependNestedBlock(EncodingImpl<TAG>& encoder, uint32_t type, const U& value)$/;"	f	namespace:ndn::encoding
prependNonNegativeInteger	src/encoding/encoder.cpp	/^Encoder::prependNonNegativeInteger(uint64_t varNumber)$/;"	f	class:ndn::encoding::Encoder
prependNonNegativeInteger	src/encoding/estimator.cpp	/^Estimator::prependNonNegativeInteger(uint64_t varNumber)$/;"	f	class:ndn::encoding::Estimator
prependNonNegativeIntegerBlock	src/encoding/block-helpers.cpp	/^prependNonNegativeIntegerBlock(EncodingImpl<TAG>& encoder, uint32_t type, uint64_t value)$/;"	f	namespace:ndn::encoding
prependRange	src/encoding/encoder.hpp	/^Encoder::prependRange(Iterator first, Iterator last)$/;"	f	class:ndn::encoding::Encoder
prependRange	src/encoding/estimator.hpp	/^Estimator::prependRange(Iterator first, Iterator last)$/;"	f	class:ndn::encoding::Estimator
prependStringBlock	src/encoding/block-helpers.cpp	/^prependStringBlock(EncodingImpl<TAG>& encoder, uint32_t type, const std::string& value)$/;"	f	namespace:ndn::encoding
prependVarNumber	src/encoding/encoder.cpp	/^Encoder::prependVarNumber(uint64_t varNumber)$/;"	f	class:ndn::encoding::Encoder
prependVarNumber	src/encoding/estimator.cpp	/^Estimator::prependVarNumber(uint64_t varNumber)$/;"	f	class:ndn::encoding::Estimator
printCache	src/util/in-memory-storage.cpp	/^InMemoryStorage::printCache(std::ostream& os) const$/;"	f	class:ndn::util::InMemoryStorage
printCertificate	src/security/certificate.cpp	/^Certificate::printCertificate(std::ostream& oss, const std::string& indent) const$/;"	f	class:ndn::Certificate
printCertificate	tools/ndnsec/list.hpp	/^printCertificate(ndn::KeyChain& keyChain,$/;"	f
printHex	src/util/string-helper.cpp	/^printHex(std::ostream& os, const Buffer& buffer, bool isUpperCase\/* = true*\/)$/;"	f	namespace:ndn
printHex	src/util/string-helper.cpp	/^printHex(std::ostream& os, const uint8_t* buffer, size_t length, bool isUpperCase\/* = true*\/)$/;"	f	namespace:ndn
printIdentity	tools/ndnsec/list.hpp	/^printIdentity(ndn::KeyChain& keyChain,$/;"	f
printKey	tools/ndnsec/list.hpp	/^printKey(ndn::KeyChain& keyChain,$/;"	f
printTypeInfo	tools/tlvdump.cpp	/^printTypeInfo(uint32_t type)$/;"	f	namespace:ndn
privateKey_	tests/unit-tests/data.t.cpp	/^  CryptoPP::RSA::PrivateKey privateKey_;$/;"	m	class:ndn::tests::TestDataFixture	file:
processAll	src/transport/stream-transport.hpp	/^  processAll(uint8_t* buffer, size_t& offset, size_t nBytesAvailable)$/;"	f	class:ndn::StreamTransportImpl
processAuthorizedControlCommandInterest	src/mgmt/dispatcher.cpp	/^Dispatcher::processAuthorizedControlCommandInterest(const std::string& requester,$/;"	f	class:ndn::mgmt::Dispatcher
processAuthorizedStatusDatasetInterest	src/mgmt/dispatcher.cpp	/^Dispatcher::processAuthorizedStatusDatasetInterest(const std::string& requester,$/;"	f	class:ndn::mgmt::Dispatcher
processCommandResponse	src/management/nfd-controller.cpp	/^Controller::processCommandResponse(const Data& data,$/;"	f	class:ndn::nfd::Controller
processControlCommandInterest	src/mgmt/dispatcher.cpp	/^Dispatcher::processControlCommandInterest(const Name& prefix,$/;"	f	class:ndn::mgmt::Dispatcher
processEvents	src/face.cpp	/^Face::processEvents(const time::milliseconds& timeout\/* = time::milliseconds::zero()*\/,$/;"	f	class:ndn::Face
processInterestFilters	src/detail/face-impl.hpp	/^  processInterestFilters(Interest& interest)$/;"	f	class:ndn::Face::Impl
processStatusDatasetInterest	src/mgmt/dispatcher.cpp	/^Dispatcher::processStatusDatasetInterest(const Name& prefix,$/;"	f	class:ndn::mgmt::Dispatcher
project	docs/conf.py	/^project = u'ndn-cxx: NDN C++ library with eXperimental eXtensions'$/;"	v
publicKey_	tests/unit-tests/data.t.cpp	/^  CryptoPP::RSA::PublicKey  publicKey_;$/;"	m	class:ndn::tests::TestDataFixture	file:
publisherFace	tests/unit-tests/util/notification-subscriber.t.cpp	/^  shared_ptr<DummyClientFace> publisherFace;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
publisherKeyChain	tests/unit-tests/util/notification-subscriber.t.cpp	/^  ndn::KeyChain publisherKeyChain;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
pureSign	src/security/key-chain.cpp	/^KeyChain::pureSign(const uint8_t* buf, size_t size,$/;"	f	class:ndn::security::KeyChain
pushRef	src/util/regex/regex-backref-manager.hpp	/^RegexBackrefManager::pushRef(const shared_ptr<RegexMatcher>& matcher)$/;"	f	class:ndn::RegexBackrefManager
push_back	src/encoding/block.cpp	/^Block::push_back(const Block& element)$/;"	f	class:ndn::Block
push_back	src/name.hpp	/^  push_back(const T& component)$/;"	f	class:ndn::Name
put	src/face.cpp	/^Face::put(const Data& data)$/;"	f	class:ndn::Face
put	src/face.cpp	/^Face::put(const lp::Nack& nack)$/;"	f	class:ndn::Face
pygments_style	docs/conf.py	/^pygments_style = 'sphinx'$/;"	v
random	src/util/random.cpp	/^namespace random {$/;"	n	namespace:ndn	file:
random	src/util/random.hpp	/^namespace random {$/;"	n	namespace:ndn
rbegin	src/exclude.hpp	/^Exclude::rbegin() const$/;"	f	class:ndn::Exclude
rbegin	src/name.hpp	/^  rbegin() const$/;"	f	class:ndn::Name
readDataOffset1	tests/unit-tests/security/validator-config.t.cpp	/^  size_t readDataOffset1;$/;"	m	struct:ndn::tests::FacesFixture	file:
readDataOffset2	tests/unit-tests/security/validator-config.t.cpp	/^  size_t readDataOffset2;$/;"	m	struct:ndn::tests::FacesFixture	file:
readInterestOffset1	tests/unit-tests/security/validator-config.t.cpp	/^  size_t readInterestOffset1;$/;"	m	struct:ndn::tests::FacesFixture	file:
readInterestOffset2	tests/unit-tests/security/validator-config.t.cpp	/^  size_t readInterestOffset2;$/;"	m	struct:ndn::tests::FacesFixture	file:
readNonNegativeInteger	src/encoding/block-helpers.cpp	/^readNonNegativeInteger(const Block& block)$/;"	f	namespace:ndn::encoding
readNonNegativeInteger	src/encoding/tlv.hpp	/^readNonNegativeInteger(size_t size, InputIterator& begin, const InputIterator& end)$/;"	f	namespace:ndn::tlv
readNonNegativeInteger	src/encoding/tlv.hpp	/^readNonNegativeInteger<std::istream_iterator<uint8_t> >(size_t size,$/;"	f	namespace:ndn::tlv
readString	src/encoding/block-helpers.cpp	/^readString(const Block& block)$/;"	f	namespace:ndn::encoding
readType	src/encoding/tlv.hpp	/^readType(InputIterator& begin, const InputIterator& end)$/;"	f	namespace:ndn::tlv
readType	src/encoding/tlv.hpp	/^readType(InputIterator& begin, const InputIterator& end, uint32_t& type)$/;"	f	namespace:ndn::tlv
readVarNumber	src/encoding/tlv.hpp	/^readVarNumber(InputIterator& begin, const InputIterator& end)$/;"	f	namespace:ndn::tlv
readVarNumber	src/encoding/tlv.hpp	/^readVarNumber(InputIterator& begin, const InputIterator& end, uint64_t& number)$/;"	f	namespace:ndn::tlv
readVarNumber	src/encoding/tlv.hpp	/^readVarNumber<std::istream_iterator<uint8_t>>(std::istream_iterator<uint8_t>& begin,$/;"	f	namespace:ndn::tlv
receive	src/transport/transport.hpp	/^Transport::receive(const Block& wire)$/;"	f	class:ndn::Transport
receive	src/util/dummy-client-face.cpp	/^  receive(Block block)$/;"	f	class:ndn::util::DummyClientFace::Transport
receive	src/util/dummy-client-face.cpp	/^DummyClientFace::receive(const Packet& packet)$/;"	f	class:ndn::util::DummyClientFace
receive	src/util/dummy-client-face.cpp	/^DummyClientFace::receive<lp::Nack>(const lp::Nack& nack)$/;"	f	class:ndn::util::DummyClientFace
recursiveMatch	src/util/regex/regex-matcher.hpp	/^RegexMatcher::recursiveMatch(size_t matcherNo, const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexMatcher
recursiveMatch	src/util/regex/regex-repeat-matcher.hpp	/^RegexRepeatMatcher::recursiveMatch(size_t repeat, const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexRepeatMatcher
redmine_project_url	docs/conf.py	/^redmine_project_url = "http:\/\/redmine.named-data.net\/"$/;"	v
redmine_role	docs/redmine_issue.py	/^def redmine_role(name, rawtext, text, lineno, inliner, options={}, content=[]):$/;"	f
reference	src/name.hpp	/^  typedef Component&              reference;$/;"	t	class:ndn::Name
refresh	src/security/validator-config.cpp	/^ValidatorConfig::DynamicTrustAnchorContainer::refresh()$/;"	f	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
refreshAnchors	src/security/validator-config.cpp	/^ValidatorConfig::refreshAnchors()$/;"	f	class:ndn::ValidatorConfig
refreshDefaultCertificate	src/security/key-chain.hpp	/^  refreshDefaultCertificate()$/;"	f	class:ndn::security::KeyChain
refreshDefaultCertificate	src/security/sec-public-info.cpp	/^SecPublicInfo::refreshDefaultCertificate()$/;"	f	class:ndn::SecPublicInfo
refreshNonce	src/interest.cpp	/^Interest::refreshNonce()$/;"	f	class:ndn::Interest
regPrefixId	tests/integrated/face.cpp	/^  const RegisteredPrefixId* regPrefixId;$/;"	m	class:ndn::tests::FacesFixture	file:
regPrefixId2	tests/integrated/face.cpp	/^  const RegisteredPrefixId* regPrefixId2;$/;"	m	class:ndn::tests::FacesFixture	file:
registerPib	src/security/key-chain.hpp	/^KeyChain::registerPib(std::initializer_list<std::string> aliases)$/;"	f	class:ndn::security::KeyChain
registerPibImpl	src/security/key-chain.cpp	/^KeyChain::registerPibImpl(const std::string& canonicalName,$/;"	f	class:ndn::security::KeyChain
registerPrefix	src/detail/face-impl.hpp	/^  registerPrefix(const Name& prefix,$/;"	f	class:ndn::Face::Impl
registerPrefix	src/face.cpp	/^Face::registerPrefix(const Name& prefix,$/;"	f	class:ndn::Face
registerPrefixId	src/mgmt/dispatcher.hpp	/^    const ndn::RegisteredPrefixId* registerPrefixId;$/;"	m	struct:ndn::mgmt::Dispatcher::TopPrefixEntry
registerTpm	src/security/key-chain.hpp	/^KeyChain::registerTpm(std::initializer_list<std::string> aliases)$/;"	f	class:ndn::security::KeyChain
registerTpmImpl	src/security/key-chain.cpp	/^KeyChain::registerTpmImpl(const std::string& canonicalName,$/;"	f	class:ndn::security::KeyChain
reject	src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::reject(const ControlResponse& resp \/*= a ControlResponse with 400*\/)$/;"	f	class:ndn::mgmt::StatusDatasetContext
release	src/security/sec-tpm-osx.cpp	/^  void release()$/;"	f	class:ndn::CFReleaser
release	src/util/in-memory-storage-entry.cpp	/^InMemoryStorageEntry::release()$/;"	f	class:ndn::util::InMemoryStorageEntry
release	src/util/scheduler-scoped-event-id.cpp	/^ScopedEventId::release()$/;"	f	class:ndn::util::scheduler::ScopedEventId
release	src/util/signal-scoped-connection.cpp	/^ScopedConnection::release()$/;"	f	class:ndn::util::signal::ScopedConnection
remove	src/encoding/block.cpp	/^Block::remove(uint32_t type)$/;"	f	class:ndn::Block
remove	src/lp/packet.hpp	/^  remove(size_t index = 0)$/;"	f	class:ndn::lp::Packet
remove	src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::remove(const Name& certificateName)$/;"	f	class:ndn::CertificateCacheTtl
removeAll	src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::removeAll()$/;"	f	class:ndn::CertificateCacheTtl
removeAppMetaInfo	src/meta-info.cpp	/^MetaInfo::removeAppMetaInfo(uint32_t tlvType)$/;"	f	class:ndn::MetaInfo
removeCertificate	src/security/key.cpp	/^Key::removeCertificate(const Name& certName)$/;"	f	class:ndn::security::Key
removeCertificate	src/security/pib-memory.cpp	/^PibMemory::removeCertificate(const Name& certName)$/;"	f	class:ndn::security::PibMemory
removeCertificate	src/security/pib-sqlite3.cpp	/^PibSqlite3::removeCertificate(const Name& certName)$/;"	f	class:ndn::security::PibSqlite3
removeDelegation	src/link.cpp	/^Link::removeDelegation(const Name& name)$/;"	f	class:ndn::Link
removeDelegationNoEncode	src/link.cpp	/^Link::removeDelegationNoEncode(const Name& name)$/;"	f	class:ndn::Link
removeIdentity	src/security/pib-memory.cpp	/^PibMemory::removeIdentity(const Name& identity)$/;"	f	class:ndn::security::PibMemory
removeIdentity	src/security/pib-sqlite3.cpp	/^PibSqlite3::removeIdentity(const Name& identity)$/;"	f	class:ndn::security::PibSqlite3
removeIdentity	src/security/pib.cpp	/^Pib::removeIdentity(const Name& identity)$/;"	f	class:ndn::security::Pib
removeKey	src/security/identity.cpp	/^Identity::removeKey(const name::Component& keyId)$/;"	f	class:ndn::security::Identity
removeKey	src/security/pib-memory.cpp	/^PibMemory::removeKey(const Name& identity, const name::Component& keyId)$/;"	f	class:ndn::security::PibMemory
removeKey	src/security/pib-sqlite3.cpp	/^PibSqlite3::removeKey(const Name& identity, const name::Component& keyId)$/;"	f	class:ndn::security::PibSqlite3
removePendingInterest	src/face.cpp	/^Face::removePendingInterest(const PendingInterestId* pendingInterestId)$/;"	f	class:ndn::Face
removeTag	src/tag-host.hpp	/^TagHost::removeTag() const$/;"	f	class:ndn::TagHost
removeTopPrefix	src/mgmt/dispatcher.cpp	/^Dispatcher::removeTopPrefix(const Name& prefix)$/;"	f	class:ndn::mgmt::Dispatcher
remove_if	src/detail/container-with-on-empty-signal.hpp	/^  void remove_if(Predicate p)$/;"	f	class:ndn::ContainerWithOnEmptySignal
rend	src/exclude.hpp	/^Exclude::rend() const$/;"	f	class:ndn::Exclude
rend	src/name.hpp	/^  rend() const$/;"	f	class:ndn::Name
rep	src/util/time.hpp	/^  typedef duration::rep                    rep;$/;"	t	class:ndn::time::system_clock
rep	src/util/time.hpp	/^  typedef duration::rep    rep;$/;"	t	class:ndn::time::steady_clock
required	src/management/nfd-control-command.hpp	/^    required(ControlParameterField field)$/;"	f	class:ndn::nfd::ControlCommand::FieldValidator
reschedule	tests/unit-tests/util/scheduler.t.cpp	/^  reschedule()$/;"	f	class:ndn::util::scheduler::tests::SelfRescheduleFixture
reschedule2	tests/unit-tests/util/scheduler.t.cpp	/^  reschedule2()$/;"	f	class:ndn::util::scheduler::tests::SelfRescheduleFixture
reschedule3	tests/unit-tests/util/scheduler.t.cpp	/^  reschedule3()$/;"	f	class:ndn::util::scheduler::tests::SelfRescheduleFixture
reserve	src/encoding/encoder.cpp	/^Encoder::reserve(size_t size, bool addInFront)$/;"	f	class:ndn::encoding::Encoder
reserveBack	src/encoding/encoder.cpp	/^Encoder::reserveBack(size_t size)$/;"	f	class:ndn::encoding::Encoder
reserveFront	src/encoding/encoder.cpp	/^Encoder::reserveFront(size_t size)$/;"	f	class:ndn::encoding::Encoder
reset	src/encoding/block.cpp	/^Block::reset()$/;"	f	class:ndn::Block
reset	src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::reset()$/;"	f	class:ndn::CertificateCacheTtl
reset	src/security/validator-config.cpp	/^ValidatorConfig::reset()$/;"	f	class:ndn::ValidatorConfig
reset	src/util/command-interest-validator.hpp	/^CommandInterestValidator::reset()$/;"	f	class:ndn::CommandInterestValidator
reset	src/util/digest.cpp	/^Digest<Hash>::reset()$/;"	f	class:ndn::util::Digest
reset	src/util/scheduler.cpp	/^  reset(const Scheduler::EventQueue::iterator& newIterator)$/;"	f	struct:ndn::util::scheduler::EventIdImpl
resetMatchResult	src/util/regex/regex-pseudo-matcher.hpp	/^RegexPseudoMatcher::resetMatchResult()$/;"	f	class:ndn::RegexPseudoMatcher
resetTpmPassword	src/security/key-chain.hpp	/^  resetTpmPassword()$/;"	f	class:ndn::security::KeyChain
resetTpmPassword	src/security/sec-tpm-file.hpp	/^  resetTpmPassword()$/;"	f	class:ndn::SecTpmFile
resetTpmPassword	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::resetTpmPassword()$/;"	f	class:ndn::SecTpmOsx
resetTpmPassword	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::resetTpmPassword()$/;"	f	class:ndn::security::DummyTpm
resetWire	src/encoding/block.cpp	/^Block::resetWire()$/;"	f	class:ndn::Block
resolveHandler	src/transport/stream-transport.hpp	/^  resolveHandler(const boost::system::error_code& error,$/;"	f	class:ndn::StreamTransportWithResolverImpl
result_type	src/lp/detail/field-info.cpp	/^  typedef void result_type;$/;"	t	struct:ndn::lp::detail::ExtractFieldInfo	file:
resume	src/transport/stream-transport.hpp	/^  resume()$/;"	f	class:ndn::StreamTransportImpl
resume	src/transport/tcp-transport.cpp	/^TcpTransport::resume()$/;"	f	class:ndn::TcpTransport
resume	src/transport/unix-transport.cpp	/^UnixTransport::resume()$/;"	f	class:ndn::UnixTransport
resume	src/util/dummy-client-face.cpp	/^  resume()$/;"	f	class:ndn::util::DummyClientFace::Transport
retain	src/security/sec-tpm-osx.cpp	/^  retain(const T& typeRef)$/;"	f	class:ndn::CFReleaser
reverse_iterator	src/exclude.hpp	/^  typedef exclude_type::reverse_iterator reverse_iterator;$/;"	t	class:ndn::Exclude
reverse_iterator	src/name.hpp	/^  typedef boost::reverse_iterator<iterator>       reverse_iterator;$/;"	t	class:ndn::Name
revokeIdentity	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::revokeIdentity()$/;"	f	class:ndn::SecPublicInfoSqlite3
revokeIdentity	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::revokeIdentity()$/;"	f	class:ndn::security::DummyPublicInfo
rng_	tests/unit-tests/data.t.cpp	/^  CryptoPP::AutoSeededRandomPool rng_;$/;"	m	class:ndn::tests::TestDataFixture	file:
rsaSigInfo	tests/unit-tests/security/validator.t.cpp	/^const uint8_t rsaSigInfo[] = {$/;"	m	namespace:ndn::tests	file:
rsaSigValue	tests/unit-tests/security/validator.t.cpp	/^const uint8_t rsaSigValue[] = {$/;"	m	namespace:ndn::tests	file:
run	examples/consumer-with-timer.cpp	/^  run()$/;"	f	class:ndn::examples::ConsumerWithTimer
run	examples/consumer.cpp	/^  run()$/;"	f	class:ndn::examples::Consumer
run	examples/producer.cpp	/^  run()$/;"	f	class:ndn::examples::Producer
run	tools/ndncatchunks3.cpp	/^Consumer::run()$/;"	f	class:ndn::Consumer
run	tools/ndnputchunks3.cpp	/^  run()$/;"	f	class:ndn::Producer
runTests	tests/unit-tests/util/face-uri.t.cpp	/^  runTests()$/;"	f	class:ndn::util::tests::CanonizeFixture
s_copyCount	tests/unit-tests/util/signal.t.cpp	/^  static int s_copyCount;$/;"	m	class:ndn::util::signal::tests::RefObject	file:
s_copyCount	tests/unit-tests/util/signal.t.cpp	/^int RefObject::s_copyCount = 0;$/;"	m	class:ndn::util::signal::tests::RefObject	file:
satisfy	src/security/sec-rule-relative.cpp	/^SecRuleRelative::satisfy(const Data& data)$/;"	f	class:ndn::SecRuleRelative
satisfy	src/security/sec-rule-relative.cpp	/^SecRuleRelative::satisfy(const Name& dataName, const Name& signerName)$/;"	f	class:ndn::SecRuleRelative
satisfy	src/security/sec-rule-specific.cpp	/^SecRuleSpecific::satisfy(const Data& data)$/;"	f	class:ndn::SecRuleSpecific
satisfy	src/security/sec-rule-specific.cpp	/^SecRuleSpecific::satisfy(const Name& dataName, const Name& signerName)$/;"	f	class:ndn::SecRuleSpecific
satisfyPendingInterests	src/detail/face-impl.hpp	/^  satisfyPendingInterests(Data& data)$/;"	f	class:ndn::Face::Impl
save	src/util/io.hpp	/^save(const T& object, const std::string& file, IoEncoding encoding = BASE_64)$/;"	f	namespace:ndn::io
save	src/util/io.hpp	/^save(const T& object, std::ostream& os, IoEncoding encoding = BASE_64)$/;"	f	namespace:ndn::io
scheduleCfLoop	src/util/network-monitor.cpp	/^  scheduleCfLoop()$/;"	f	class:ndn::util::NetworkMonitor::Impl
scheduleEvent	src/util/scheduler.cpp	/^Scheduler::scheduleEvent(const time::nanoseconds& after,$/;"	f	class:ndn::util::scheduler::Scheduler
scheduler	src/util/network-monitor.cpp	/^  Scheduler scheduler;$/;"	m	class:ndn::util::NetworkMonitor::Impl	file:
scheduler	src/util/scheduler-scoped-event-id.cpp	/^namespace scheduler {$/;"	n	namespace:ndn::util	file:
scheduler	src/util/scheduler-scoped-event-id.hpp	/^namespace scheduler {$/;"	n	namespace:ndn::util
scheduler	src/util/scheduler.cpp	/^namespace scheduler {$/;"	n	namespace:ndn::util	file:
scheduler	src/util/scheduler.hpp	/^namespace scheduler {$/;"	n	namespace:ndn::util
scheduler	tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^  Scheduler scheduler;$/;"	m	class:ndn::tests::CertificateCacheFixture	file:
scheduler	tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^  Scheduler scheduler;$/;"	m	class:ndn::tests::SignatureSha256EcdsaTimeFixture	file:
scheduler	tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^  Scheduler scheduler;$/;"	m	class:ndn::tests::SignatureSha256RsaTimeFixture	file:
scheduler	tests/unit-tests/util/scheduler.t.cpp	/^  Scheduler scheduler;$/;"	m	class:ndn::util::scheduler::tests::ScopedEventFixture	file:
scheduler	tests/unit-tests/util/scheduler.t.cpp	/^  Scheduler scheduler;$/;"	m	class:ndn::util::scheduler::tests::SelfRescheduleFixture	file:
scheduler	tests/unit-tests/util/scheduler.t.cpp	/^  Scheduler scheduler;$/;"	m	struct:ndn::util::scheduler::tests::CancelAllFixture	file:
scheduler	tests/unit-tests/util/scheduler.t.cpp	/^namespace scheduler {$/;"	n	namespace:ndn::util	file:
secondCert	tests/unit-tests/security/validator-config.t.cpp	/^  shared_ptr<IdentityCertificate> secondCert;$/;"	m	struct:ndn::tests::DirTestFixture	file:
secondCertPath	tests/unit-tests/security/validator-config.t.cpp	/^  boost::filesystem::path secondCertPath;$/;"	m	struct:ndn::tests::DirTestFixture	file:
secondIdentity	tests/unit-tests/security/validator-config.t.cpp	/^  Name secondIdentity;$/;"	m	struct:ndn::tests::DirTestFixture	file:
security	src/encoding/tlv-security.hpp	/^namespace security {$/;"	n	namespace:ndn::tlv
security	src/face.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/additional-description.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	src/security/additional-description.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/certificate-container.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	src/security/certificate-container.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/conf/checker.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/conf/common.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/conf/filter.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/conf/key-locator-checker.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/conf/rule.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/identity-container.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	src/security/identity-container.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/identity.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	src/security/identity.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/key-chain.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	src/security/key-chain.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/key-container.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	src/security/key-container.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/key.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	src/security/key.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/pib-impl.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/pib-memory.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	src/security/pib-memory.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/pib-sqlite3.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	src/security/pib-sqlite3.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/pib.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	src/security/pib.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/signing-helpers.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	src/security/signing-helpers.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/signing-info.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	src/security/signing-info.hpp	/^namespace security {$/;"	n	namespace:ndn
security	src/security/validity-period.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	src/security/validity-period.hpp	/^namespace security {$/;"	n	namespace:ndn
security	tests/identity-management-fixture.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/identity-management-fixture.hpp	/^namespace security {$/;"	n	namespace:ndn
security	tests/unit-tests/identity-management-time-fixture.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/identity-management-time-fixture.hpp	/^namespace security {$/;"	n	namespace:ndn
security	tests/unit-tests/security/additional-info.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/certificate-container.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/conf/checker.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/dummy-keychain.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/dummy-keychain.hpp	/^namespace security {$/;"	n	namespace:ndn
security	tests/unit-tests/security/identity-container.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/identity-fixture.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/identity-management-fixture.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/identity.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/key-chain.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/key-container.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/key.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/pib-data-fixture.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/pib-data-fixture.hpp	/^namespace security {$/;"	n	namespace:ndn
security	tests/unit-tests/security/pib-impl.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/pib-memory.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/pib-sqlite3.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/pib.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/sec-rule-relative.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/sec-rule-specific.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/signing-helpers.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/signing-info.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	tests/unit-tests/security/validity-period.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
selectChild	src/util/in-memory-storage.cpp	/^InMemoryStorage::selectChild(const Interest& interest,$/;"	f	class:ndn::util::InMemoryStorage
selfEventId	tests/unit-tests/util/scheduler.t.cpp	/^  EventId selfEventId;$/;"	m	class:ndn::util::scheduler::tests::SelfRescheduleFixture	file:
selfSign	src/security/key-chain.cpp	/^KeyChain::selfSign(IdentityCertificate& cert)$/;"	f	class:ndn::security::KeyChain
selfSign	src/security/key-chain.cpp	/^KeyChain::selfSign(const Name& keyName)$/;"	f	class:ndn::security::KeyChain
send	src/transport/stream-transport.hpp	/^  send(const Block& header, const Block& payload)$/;"	f	class:ndn::StreamTransportImpl
send	src/transport/stream-transport.hpp	/^  send(const Block& wire)$/;"	f	class:ndn::StreamTransportImpl
send	src/transport/tcp-transport.cpp	/^TcpTransport::send(const Block& header, const Block& payload)$/;"	f	class:ndn::TcpTransport
send	src/transport/tcp-transport.cpp	/^TcpTransport::send(const Block& wire)$/;"	f	class:ndn::TcpTransport
send	src/transport/unix-transport.cpp	/^UnixTransport::send(const Block& header, const Block& payload)$/;"	f	class:ndn::UnixTransport
send	src/transport/unix-transport.cpp	/^UnixTransport::send(const Block& wire)$/;"	f	class:ndn::UnixTransport
send	src/util/dummy-client-face.cpp	/^  send(const Block& header, const Block& payload)$/;"	f	class:ndn::util::DummyClientFace::Transport
send	src/util/dummy-client-face.cpp	/^  send(const Block& wire)$/;"	f	class:ndn::util::DummyClientFace::Transport
sendControlResponse	src/mgmt/dispatcher.cpp	/^Dispatcher::sendControlResponse(const ControlResponse& resp, const Interest& interest,$/;"	f	class:ndn::mgmt::Dispatcher
sendData	src/mgmt/dispatcher.cpp	/^Dispatcher::sendData(const Name& dataName, const Block& content,$/;"	f	class:ndn::mgmt::Dispatcher
sendData	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^  sendData(const Name& dataName, const Block& content, const MetaInfo& info)$/;"	f	class:ndn::mgmt::tests::StatusDatasetContextFixture
sendInitialInterest	src/util/notification-subscriber.hpp	/^  sendInitialInterest()$/;"	f	class:ndn::util::NotificationSubscriber
sendNextInterest	src/util/notification-subscriber.hpp	/^  sendNextInterest()$/;"	f	class:ndn::util::NotificationSubscriber
sentData	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^  std::vector<Data> sentData;$/;"	m	class:ndn::mgmt::tests::StatusDatasetContextFixture	file:
sentDatas	src/util/dummy-client-face.hpp	/^  std::vector<Data> sentDatas;$/;"	m	class:ndn::util::DummyClientFace
sentInterests	src/util/dummy-client-face.hpp	/^  std::vector<Interest> sentInterests;$/;"	m	class:ndn::util::DummyClientFace
sentNacks	src/util/dummy-client-face.hpp	/^  std::vector<lp::Nack> sentNacks;$/;"	m	class:ndn::util::DummyClientFace
set	src/lp/packet.hpp	/^  set(const typename FIELD::ValueType& value)$/;"	f	class:ndn::lp::Packet
set	src/name.cpp	/^Name::set(const char* uri)$/;"	f	class:ndn::Name
set	src/name.cpp	/^Name::set(const std::string& uri)$/;"	f	class:ndn::Name
set	src/security/additional-description.cpp	/^AdditionalDescription::set(const std::string& key, const std::string& value)$/;"	f	class:ndn::security::AdditionalDescription
set	src/security/public-key.hpp	/^  set(const uint8_t* keyDerBuf, size_t keyDerSize)$/;"	f	class:ndn::PublicKey
setAppMetaInfo	src/meta-info.cpp	/^MetaInfo::setAppMetaInfo(const std::list<Block>& info)$/;"	f	class:ndn::MetaInfo
setBody	src/mgmt/control-response.hpp	/^ControlResponse::setBody(const Block& body)$/;"	f	class:ndn::mgmt::ControlResponse
setCachingPolicy	src/data.cpp	/^Data::setCachingPolicy(nfd::LocalControlHeader::CachingPolicy cachingPolicy)$/;"	f	class:ndn::Data
setCachingPolicy	src/management/nfd-local-control-header.hpp	/^  setCachingPolicy(CachingPolicy cachingPolicy)$/;"	f	class:ndn::nfd::LocalControlHeader
setCapacity	src/util/in-memory-storage.cpp	/^InMemoryStorage::setCapacity(size_t capacity)$/;"	f	class:ndn::util::InMemoryStorage
setChildSelector	src/interest.hpp	/^  setChildSelector(int childSelector)$/;"	f	class:ndn::Interest
setChildSelector	src/selectors.cpp	/^Selectors::setChildSelector(int childSelector)$/;"	f	class:ndn::Selectors
setCode	src/mgmt/control-response.hpp	/^ControlResponse::setCode(uint32_t code)$/;"	f	class:ndn::mgmt::ControlResponse
setContent	src/data.cpp	/^Data::setContent(const Block& content)$/;"	f	class:ndn::Data
setContent	src/data.cpp	/^Data::setContent(const ConstBufferPtr& contentValue)$/;"	f	class:ndn::Data
setContent	src/data.cpp	/^Data::setContent(const uint8_t* content, size_t contentLength)$/;"	f	class:ndn::Data
setContentType	src/data.cpp	/^Data::setContentType(uint32_t type)$/;"	f	class:ndn::Data
setCost	src/management/nfd-control-parameters.hpp	/^  setCost(uint64_t cost)$/;"	f	class:ndn::nfd::ControlParameters
setCost	src/management/nfd-fib-entry.cpp	/^NextHopRecord::setCost(uint64_t cost)$/;"	f	class:ndn::nfd::NextHopRecord
setCost	src/management/nfd-rib-entry.hpp	/^  setCost(uint64_t cost)$/;"	f	class:ndn::nfd::Route
setCurrentTimestamp	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setCurrentTimestamp(const time::system_clock::TimePoint& currentTimestamp)$/;"	f	class:ndn::nfd::ForwarderStatus
setCustomClocks	src/util/time.cpp	/^setCustomClocks(shared_ptr<CustomSteadyClock> steadyClock,$/;"	f	namespace:ndn::time
setData	src/util/in-memory-storage-entry.cpp	/^InMemoryStorageEntry::setData(const Data& data)$/;"	f	class:ndn::util::InMemoryStorageEntry
setDefaultCertificate	src/security/key.cpp	/^Key::setDefaultCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::Key
setDefaultCertificate	src/security/key.cpp	/^Key::setDefaultCertificate(const Name& certName)$/;"	f	class:ndn::security::Key
setDefaultCertificateInternal	src/security/key-chain.cpp	/^KeyChain::setDefaultCertificateInternal()$/;"	f	class:ndn::security::KeyChain
setDefaultCertificateNameForKey	src/security/key-chain.hpp	/^  setDefaultCertificateNameForKey(const Name& certificateName)$/;"	f	class:ndn::security::KeyChain
setDefaultCertificateNameForKey	src/security/sec-public-info.cpp	/^SecPublicInfo::setDefaultCertificateNameForKey(const Name& certificateName)$/;"	f	class:ndn::SecPublicInfo
setDefaultCertificateNameForKeyInternal	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::setDefaultCertificateNameForKeyInternal(const Name& certificateName)$/;"	f	class:ndn::SecPublicInfoSqlite3
setDefaultCertificateNameForKeyInternal	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::setDefaultCertificateNameForKeyInternal(const Name& certificateName)$/;"	f	class:ndn::security::DummyPublicInfo
setDefaultCertificateOfKey	src/security/pib-memory.cpp	/^PibMemory::setDefaultCertificateOfKey(const Name& identity, const name::Component& keyId, const Name& certName)$/;"	f	class:ndn::security::PibMemory
setDefaultCertificateOfKey	src/security/pib-sqlite3.cpp	/^PibSqlite3::setDefaultCertificateOfKey(const Name& identity, const name::Component& keyId,$/;"	f	class:ndn::security::PibSqlite3
setDefaultIdentity	src/security/key-chain.hpp	/^  setDefaultIdentity(const Name& identityName)$/;"	f	class:ndn::security::KeyChain
setDefaultIdentity	src/security/pib-memory.cpp	/^PibMemory::setDefaultIdentity(const Name& identityName)$/;"	f	class:ndn::security::PibMemory
setDefaultIdentity	src/security/pib-sqlite3.cpp	/^PibSqlite3::setDefaultIdentity(const Name& identityName)$/;"	f	class:ndn::security::PibSqlite3
setDefaultIdentity	src/security/pib.cpp	/^Pib::setDefaultIdentity(const Name& identityName)$/;"	f	class:ndn::security::Pib
setDefaultIdentity	src/security/sec-public-info.cpp	/^SecPublicInfo::setDefaultIdentity(const Name& identityName)$/;"	f	class:ndn::SecPublicInfo
setDefaultIdentityInternal	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::setDefaultIdentityInternal(const Name& identityName)$/;"	f	class:ndn::SecPublicInfoSqlite3
setDefaultIdentityInternal	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::setDefaultIdentityInternal(const Name& identityName)$/;"	f	class:ndn::security::DummyPublicInfo
setDefaultKey	src/security/identity.cpp	/^Identity::setDefaultKey(const PublicKey& publicKey, const name::Component& keyId)$/;"	f	class:ndn::security::Identity
setDefaultKey	src/security/identity.cpp	/^Identity::setDefaultKey(const name::Component& keyId)$/;"	f	class:ndn::security::Identity
setDefaultKeyNameForIdentity	src/security/key-chain.hpp	/^  setDefaultKeyNameForIdentity(const Name& keyName)$/;"	f	class:ndn::security::KeyChain
setDefaultKeyNameForIdentity	src/security/sec-public-info.cpp	/^SecPublicInfo::setDefaultKeyNameForIdentity(const Name& keyName)$/;"	f	class:ndn::SecPublicInfo
setDefaultKeyNameForIdentityInternal	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::setDefaultKeyNameForIdentityInternal(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
setDefaultKeyNameForIdentityInternal	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::setDefaultKeyNameForIdentityInternal(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
setDefaultKeyOfIdentity	src/security/pib-memory.cpp	/^PibMemory::setDefaultKeyOfIdentity(const Name& identity, const name::Component& keyId)$/;"	f	class:ndn::security::PibMemory
setDefaultKeyOfIdentity	src/security/pib-sqlite3.cpp	/^PibSqlite3::setDefaultKeyOfIdentity(const Name& identity, const name::Component& keyId)$/;"	f	class:ndn::security::PibSqlite3
setDefaultValue	tools/ndnsec/util.hpp	/^  setDefaultValue(const T& t)$/;"	f	class:AccumulatorType
setDeleter	src/detail/pending-interest.hpp	/^  setDeleter(const std::function<void()>& deleter)$/;"	f	class:ndn::PendingInterest
setDigestAlgorithm	src/security/signing-info.hpp	/^  setDigestAlgorithm(const DigestAlgorithm& algorithm)$/;"	f	class:ndn::security::SigningInfo
setExclude	src/interest.hpp	/^  setExclude(const Exclude& exclude)$/;"	f	class:ndn::Interest
setExclude	src/selectors.cpp	/^Selectors::setExclude(const Exclude& exclude)$/;"	f	class:ndn::Selectors
setExpirationPeriod	src/management/nfd-control-parameters.hpp	/^  setExpirationPeriod(const time::milliseconds& expirationPeriod)$/;"	f	class:ndn::nfd::ControlParameters
setExpirationPeriod	src/management/nfd-face-status.cpp	/^FaceStatus::setExpirationPeriod(const time::milliseconds& expirationPeriod)$/;"	f	class:ndn::nfd::FaceStatus
setExpirationPeriod	src/management/nfd-rib-entry.hpp	/^  setExpirationPeriod(const time::milliseconds& expirationPeriod)$/;"	f	class:ndn::nfd::Route
setExpiry	src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::setExpiry(const time::milliseconds& expiry)$/;"	f	class:ndn::mgmt::StatusDatasetContext
setFaceId	src/management/nfd-control-parameters.hpp	/^  setFaceId(uint64_t faceId)$/;"	f	class:ndn::nfd::ControlParameters
setFaceId	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setFaceId(uint64_t faceId)$/;"	f	class:ndn::nfd::FaceQueryFilter
setFaceId	src/management/nfd-face-traits.hpp	/^  setFaceId(uint64_t faceId)$/;"	f	class:ndn::nfd::FaceTraits
setFaceId	src/management/nfd-fib-entry.cpp	/^NextHopRecord::setFaceId(uint64_t faceId)$/;"	f	class:ndn::nfd::NextHopRecord
setFaceId	src/management/nfd-rib-entry.hpp	/^  setFaceId(uint64_t faceId)$/;"	f	class:ndn::nfd::Route
setFacePersistency	src/management/nfd-control-parameters.hpp	/^  setFacePersistency(FacePersistency persistency)$/;"	f	class:ndn::nfd::ControlParameters
setFacePersistency	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setFacePersistency(FacePersistency facePersistency)$/;"	f	class:ndn::nfd::FaceQueryFilter
setFacePersistency	src/management/nfd-face-traits.hpp	/^  setFacePersistency(FacePersistency facePersistency)$/;"	f	class:ndn::nfd::FaceTraits
setFaceScope	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setFaceScope(FaceScope faceScope)$/;"	f	class:ndn::nfd::FaceQueryFilter
setFaceScope	src/management/nfd-face-traits.hpp	/^  setFaceScope(FaceScope faceScope)$/;"	f	class:ndn::nfd::FaceTraits
setFinalBlockId	src/data.cpp	/^Data::setFinalBlockId(const name::Component& finalBlockId)$/;"	f	class:ndn::Data
setFinalBlockId	src/meta-info.cpp	/^MetaInfo::setFinalBlockId(const name::Component& finalBlockId)$/;"	f	class:ndn::MetaInfo
setFlags	src/management/nfd-control-parameters.hpp	/^  setFlags(uint64_t flags)$/;"	f	class:ndn::nfd::ControlParameters
setFlags	src/management/nfd-rib-entry.hpp	/^  setFlags(uint64_t flags)$/;"	f	class:ndn::nfd::Route
setFreshnessPeriod	src/data.cpp	/^Data::setFreshnessPeriod(const time::milliseconds& freshnessPeriod)$/;"	f	class:ndn::Data
setFreshnessPeriod	src/meta-info.cpp	/^MetaInfo::setFreshnessPeriod(const time::milliseconds& freshnessPeriod)$/;"	f	class:ndn::MetaInfo
setHeader	src/lp/nack.hpp	/^  setHeader(NackHeader&& header)$/;"	f	class:ndn::lp::Nack
setHeader	src/lp/nack.hpp	/^  setHeader(const NackHeader& header)$/;"	f	class:ndn::lp::Nack
setInTerminal	src/security/key-chain.hpp	/^  setInTerminal(bool inTerminal)$/;"	f	class:ndn::security::KeyChain
setInTerminal	src/security/sec-tpm-file.hpp	/^  setInTerminal(bool inTerminal)$/;"	f	class:ndn::SecTpmFile
setInTerminal	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::setInTerminal(bool inTerminal)$/;"	f	class:ndn::SecTpmOsx
setInTerminal	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::setInTerminal(bool inTerminal)$/;"	f	class:ndn::security::DummyTpm
setIncomingFaceId	src/data.cpp	/^Data::setIncomingFaceId(uint64_t incomingFaceId)$/;"	f	class:ndn::Data
setIncomingFaceId	src/interest.hpp	/^  setIncomingFaceId(uint64_t incomingFaceId)$/;"	f	class:ndn::Interest
setIncomingFaceId	src/management/nfd-local-control-header.hpp	/^  setIncomingFaceId(uint64_t incomingFaceId)$/;"	f	class:ndn::nfd::LocalControlHeader
setInfo	src/signature.cpp	/^Signature::setInfo(const Block& info)$/;"	f	class:ndn::Signature
setInfo	src/signature.hpp	/^  setInfo(const SignatureInfo& info)$/;"	f	class:ndn::Signature
setIntegerList	src/encoding/oid.hpp	/^  setIntegerList(const std::vector<int>& value)$/;"	f	class:ndn::OID
setInterestFilter	src/face.cpp	/^Face::setInterestFilter(const InterestFilter& interestFilter,$/;"	f	class:ndn::Face
setInterestLifetime	src/interest.hpp	/^  setInterestLifetime(const time::milliseconds& interestLifetime)$/;"	f	class:ndn::Interest
setInterval	tools/ndnsec/util.hpp	/^  setInterval(const T& t) {$/;"	f	class:AccumulatorType
setKeyDigest	src/key-locator.cpp	/^KeyLocator::setKeyDigest(const Block& keyDigest)$/;"	f	class:ndn::KeyLocator
setKeyDigest	src/key-locator.cpp	/^KeyLocator::setKeyDigest(const ConstBufferPtr& keyDigest)$/;"	f	class:ndn::KeyLocator
setKeyLocator	src/signature-info.cpp	/^SignatureInfo::setKeyLocator(const KeyLocator& keyLocator)$/;"	f	class:ndn::SignatureInfo
setKeyLocator	src/signature.hpp	/^  setKeyLocator(const KeyLocator& keyLocator)$/;"	f	class:ndn::Signature
setKeySize	src/security/key-params.hpp	/^  setKeySize(uint32_t size)$/;"	f	class:ndn::SimplePublicKeyParams
setKeySize	src/security/key-params.hpp	/^  setKeySize(uint32_t size)$/;"	f	class:ndn::SimpleSymmetricKeyParams
setKind	src/management/nfd-face-event-notification.cpp	/^FaceEventNotification::setKind(FaceEventKind kind)$/;"	f	class:ndn::nfd::FaceEventNotification
setLastRefresh	src/security/validator-config.hpp	/^    setLastRefresh(const time::system_clock::TimePoint& lastRefresh)$/;"	f	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
setLink	src/interest.cpp	/^Interest::setLink(const Block& link)$/;"	f	class:ndn::Interest
setLinkType	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setLinkType(LinkType linkType)$/;"	f	class:ndn::nfd::FaceQueryFilter
setLinkType	src/management/nfd-face-traits.hpp	/^  setLinkType(LinkType linkType)$/;"	f	class:ndn::nfd::FaceTraits
setLocalControlFeature	src/management/nfd-control-parameters.hpp	/^  setLocalControlFeature(LocalControlFeature localControlFeature)$/;"	f	class:ndn::nfd::ControlParameters
setLocalUri	src/management/nfd-channel-status.cpp	/^ChannelStatus::setLocalUri(const std::string localUri)$/;"	f	class:ndn::nfd::ChannelStatus
setLocalUri	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setLocalUri(const std::string& localUri)$/;"	f	class:ndn::nfd::FaceQueryFilter
setLocalUri	src/management/nfd-face-traits.hpp	/^  setLocalUri(const std::string& localUri)$/;"	f	class:ndn::nfd::FaceTraits
setMatchResult	src/util/regex/regex-pseudo-matcher.hpp	/^RegexPseudoMatcher::setMatchResult(const std::string& str)$/;"	f	class:ndn::RegexPseudoMatcher
setMaxSuffixComponents	src/interest.hpp	/^  setMaxSuffixComponents(int maxSuffixComponents)$/;"	f	class:ndn::Interest
setMaxSuffixComponents	src/selectors.cpp	/^Selectors::setMaxSuffixComponents(int maxSuffixComponents)$/;"	f	class:ndn::Selectors
setMessage	tests/unit-tests/util/simple-notification.hpp	/^  setMessage(const std::string& message)$/;"	f	class:ndn::util::tests::SimpleNotification
setMetaInfo	src/data.cpp	/^Data::setMetaInfo(const MetaInfo& metaInfo)$/;"	f	class:ndn::Data
setMinSuffixComponents	src/interest.hpp	/^  setMinSuffixComponents(int minSuffixComponents)$/;"	f	class:ndn::Interest
setMinSuffixComponents	src/selectors.cpp	/^Selectors::setMinSuffixComponents(int minSuffixComponents)$/;"	f	class:ndn::Selectors
setMustBeFresh	src/interest.hpp	/^  setMustBeFresh(bool mustBeFresh)$/;"	f	class:ndn::Interest
setMustBeFresh	src/selectors.cpp	/^Selectors::setMustBeFresh(bool mustBeFresh)$/;"	f	class:ndn::Selectors
setNCsEntries	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNCsEntries(size_t nCsEntries)$/;"	f	class:ndn::nfd::ForwarderStatus
setNFibEntries	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNFibEntries(size_t nFibEntries)$/;"	f	class:ndn::nfd::ForwarderStatus
setNInBytes	src/management/nfd-face-status.cpp	/^FaceStatus::setNInBytes(uint64_t nInBytes)$/;"	f	class:ndn::nfd::FaceStatus
setNInDatas	src/management/nfd-face-status.cpp	/^FaceStatus::setNInDatas(uint64_t nInDatas)$/;"	f	class:ndn::nfd::FaceStatus
setNInDatas	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNInDatas(uint64_t nInDatas)$/;"	f	class:ndn::nfd::ForwarderStatus
setNInInterests	src/management/nfd-face-status.cpp	/^FaceStatus::setNInInterests(uint64_t nInInterests)$/;"	f	class:ndn::nfd::FaceStatus
setNInInterests	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNInInterests(uint64_t nInInterests)$/;"	f	class:ndn::nfd::ForwarderStatus
setNInNacks	src/management/nfd-face-status.cpp	/^FaceStatus::setNInNacks(uint64_t nInNacks)$/;"	f	class:ndn::nfd::FaceStatus
setNInNacks	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNInNacks(uint64_t nInNacks)$/;"	f	class:ndn::nfd::ForwarderStatus
setNMeasurementsEntries	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNMeasurementsEntries(size_t nMeasurementsEntries)$/;"	f	class:ndn::nfd::ForwarderStatus
setNNameTreeEntries	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNNameTreeEntries(size_t nNameTreeEntries)$/;"	f	class:ndn::nfd::ForwarderStatus
setNOutBytes	src/management/nfd-face-status.cpp	/^FaceStatus::setNOutBytes(uint64_t nOutBytes)$/;"	f	class:ndn::nfd::FaceStatus
setNOutDatas	src/management/nfd-face-status.cpp	/^FaceStatus::setNOutDatas(uint64_t nOutDatas)$/;"	f	class:ndn::nfd::FaceStatus
setNOutDatas	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNOutDatas(uint64_t nOutDatas)$/;"	f	class:ndn::nfd::ForwarderStatus
setNOutInterests	src/management/nfd-face-status.cpp	/^FaceStatus::setNOutInterests(uint64_t nOutInterests)$/;"	f	class:ndn::nfd::FaceStatus
setNOutInterests	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNOutInterests(uint64_t nOutInterests)$/;"	f	class:ndn::nfd::ForwarderStatus
setNOutNacks	src/management/nfd-face-status.cpp	/^FaceStatus::setNOutNacks(uint64_t nOutNacks)$/;"	f	class:ndn::nfd::FaceStatus
setNOutNacks	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNOutNacks(uint64_t nOutNacks)$/;"	f	class:ndn::nfd::ForwarderStatus
setNPitEntries	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNPitEntries(size_t nPitEntries)$/;"	f	class:ndn::nfd::ForwarderStatus
setName	src/data.cpp	/^Data::setName(const Name& name)$/;"	f	class:ndn::Data
setName	src/interest.hpp	/^  setName(const Name& name)$/;"	f	class:ndn::Interest
setName	src/key-locator.cpp	/^KeyLocator::setName(const Name& name)$/;"	f	class:ndn::KeyLocator
setName	src/management/nfd-control-parameters.hpp	/^  setName(const Name& name)$/;"	f	class:ndn::nfd::ControlParameters
setName	src/management/nfd-rib-entry.hpp	/^  setName(const Name& prefix)$/;"	f	class:ndn::nfd::RibEntry
setName	src/management/nfd-strategy-choice.cpp	/^StrategyChoice::setName(const Name& name)$/;"	f	class:ndn::nfd::StrategyChoice
setName	src/security/identity-certificate.cpp	/^IdentityCertificate::setName(const Name& name)$/;"	f	class:ndn::IdentityCertificate
setNextHopFaceId	src/interest.hpp	/^  setNextHopFaceId(uint64_t nextHopFaceId)$/;"	f	class:ndn::Interest
setNextHopFaceId	src/management/nfd-local-control-header.hpp	/^  setNextHopFaceId(uint64_t nextHopFaceId)$/;"	f	class:ndn::nfd::LocalControlHeader
setNextHopRecords	src/management/nfd-fib-entry.hpp	/^  setNextHopRecords(const T& begin, const T& end)$/;"	f	class:ndn::nfd::FibEntry
setNfdVersion	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNfdVersion(const std::string& nfdVersion)$/;"	f	class:ndn::nfd::ForwarderStatus
setNonce	src/interest.cpp	/^Interest::setNonce(uint32_t nonce)$/;"	f	class:ndn::Interest
setNotAfter	src/security/certificate.hpp	/^  setNotAfter(const time::system_clock::TimePoint& notAfter)$/;"	f	class:ndn::Certificate
setNotBefore	src/security/certificate.hpp	/^  setNotBefore(const time::system_clock::TimePoint& notBefore)$/;"	f	class:ndn::Certificate
setNow	src/util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::setNow(const nanoseconds& timeSinceEpoch)$/;"	f	class:ndn::time::UnitTestClock
setOrigin	src/management/nfd-control-parameters.hpp	/^  setOrigin(uint64_t origin)$/;"	f	class:ndn::nfd::ControlParameters
setOrigin	src/management/nfd-rib-entry.hpp	/^  setOrigin(uint64_t origin)$/;"	f	class:ndn::nfd::Route
setPeriod	src/security/validity-period.cpp	/^ValidityPeriod::setPeriod(const time::system_clock::TimePoint& notBefore,$/;"	f	class:ndn::security::ValidityPeriod
setPolicy	src/lp/cache-policy.cpp	/^CachePolicy::setPolicy(CachePolicyType policy)$/;"	f	class:ndn::lp::CachePolicy
setPrefix	src/management/nfd-command-options.cpp	/^CommandOptions::setPrefix(const Name& prefix)$/;"	f	class:ndn::nfd::CommandOptions
setPrefix	src/management/nfd-fib-entry.cpp	/^FibEntry::setPrefix(const Name& prefix)$/;"	f	class:ndn::nfd::FibEntry
setPrefix	src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::setPrefix(const Name& prefix)$/;"	f	class:ndn::mgmt::StatusDatasetContext
setPublicKeyInfo	src/security/certificate.hpp	/^  setPublicKeyInfo(const PublicKey& key)$/;"	f	class:ndn::Certificate
setPublicKeyName	src/security/identity-certificate.cpp	/^IdentityCertificate::setPublicKeyName()$/;"	f	class:ndn::IdentityCertificate
setPublisherPublicKeyLocator	src/interest.hpp	/^  setPublisherPublicKeyLocator(const KeyLocator& keyLocator)$/;"	f	class:ndn::Interest
setPublisherPublicKeyLocator	src/selectors.cpp	/^Selectors::setPublisherPublicKeyLocator(const KeyLocator& keyLocator)$/;"	f	class:ndn::Selectors
setReason	src/lp/nack-header.cpp	/^NackHeader::setReason(NackReason reason)$/;"	f	class:ndn::lp::NackHeader
setReason	src/lp/nack.hpp	/^  setReason(NackReason reason)$/;"	f	class:ndn::lp::Nack
setRemoteUri	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setRemoteUri(const std::string& remoteUri)$/;"	f	class:ndn::nfd::FaceQueryFilter
setRemoteUri	src/management/nfd-face-traits.hpp	/^  setRemoteUri(const std::string& remoteUri)$/;"	f	class:ndn::nfd::FaceTraits
setSelectedDelegation	src/interest.cpp	/^Interest::setSelectedDelegation(const Name& delegationName)$/;"	f	class:ndn::Interest
setSelectedDelegation	src/interest.cpp	/^Interest::setSelectedDelegation(size_t delegationIndex)$/;"	f	class:ndn::Interest
setSelectors	src/interest.hpp	/^  setSelectors(const Selectors& selectors)$/;"	f	class:ndn::Interest
setSha256Signing	src/security/signing-info.cpp	/^SigningInfo::setSha256Signing()$/;"	f	class:ndn::security::SigningInfo
setSignature	src/data.cpp	/^Data::setSignature(const Signature& signature)$/;"	f	class:ndn::Data
setSignatureInfo	src/security/signing-info.cpp	/^SigningInfo::setSignatureInfo(const SignatureInfo& signatureInfo)$/;"	f	class:ndn::security::SigningInfo
setSignatureType	src/signature-info.cpp	/^SignatureInfo::setSignatureType(tlv::SignatureTypeValue type)$/;"	f	class:ndn::SignatureInfo
setSignatureValue	src/data.cpp	/^Data::setSignatureValue(const Block& value)$/;"	f	class:ndn::Data
setSigningCertName	src/security/signing-info.cpp	/^SigningInfo::setSigningCertName(const Name& certificateName)$/;"	f	class:ndn::security::SigningInfo
setSigningCertificate	src/management/nfd-command-options.cpp	/^CommandOptions::setSigningCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::nfd::CommandOptions
setSigningCertificate	src/management/nfd-command-options.cpp	/^CommandOptions::setSigningCertificate(const Name& certificateName)$/;"	f	class:ndn::nfd::CommandOptions
setSigningDefault	src/management/nfd-command-options.cpp	/^CommandOptions::setSigningDefault()$/;"	f	class:ndn::nfd::CommandOptions
setSigningIdentity	src/management/nfd-command-options.cpp	/^CommandOptions::setSigningIdentity(const Name& identityName)$/;"	f	class:ndn::nfd::CommandOptions
setSigningIdentity	src/security/signing-info.cpp	/^SigningInfo::setSigningIdentity(const Name& identity)$/;"	f	class:ndn::security::SigningInfo
setSigningInfo	src/management/nfd-command-options.cpp	/^CommandOptions::setSigningInfo(const security::SigningInfo& signingInfo)$/;"	f	class:ndn::nfd::CommandOptions
setSigningKeyName	src/security/signing-info.cpp	/^SigningInfo::setSigningKeyName(const Name& keyName)$/;"	f	class:ndn::security::SigningInfo
setStartTimestamp	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setStartTimestamp(const time::system_clock::TimePoint& startTimestamp)$/;"	f	class:ndn::nfd::ForwarderStatus
setStrategy	src/management/nfd-control-parameters.hpp	/^  setStrategy(const Name& strategy)$/;"	f	class:ndn::nfd::ControlParameters
setStrategy	src/management/nfd-strategy-choice.cpp	/^StrategyChoice::setStrategy(const Name& strategy)$/;"	f	class:ndn::nfd::StrategyChoice
setTag	src/tag-host.hpp	/^TagHost::setTag(shared_ptr<T> tag) const$/;"	f	class:ndn::TagHost
setText	src/mgmt/control-response.hpp	/^ControlResponse::setText(const std::string& text)$/;"	f	class:ndn::mgmt::ControlResponse
setTimeout	src/management/nfd-command-options.cpp	/^CommandOptions::setTimeout(const time::milliseconds& timeout)$/;"	f	class:ndn::nfd::CommandOptions
setTpmLocator	src/security/pib-memory.cpp	/^PibMemory::setTpmLocator(const std::string& tpmLocator)$/;"	f	class:ndn::security::PibMemory
setTpmLocator	src/security/pib-sqlite3.cpp	/^PibSqlite3::setTpmLocator(const std::string& tpmLocator)$/;"	f	class:ndn::security::PibSqlite3
setTpmLocator	src/security/pib.cpp	/^Pib::setTpmLocator(const std::string& tpmLocator)$/;"	f	class:ndn::security::Pib
setTpmLocator	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::setTpmLocator(const string& tpmLocator)$/;"	f	class:ndn::SecPublicInfoSqlite3
setTpmLocator	tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::setTpmLocator(const std::string& tpmLocator)$/;"	f	class:ndn::security::DummyPublicInfo
setTpmLocatorInternal	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::setTpmLocatorInternal(const string& tpmLocator, bool needReset)$/;"	f	class:ndn::SecPublicInfoSqlite3
setTpmPassword	src/security/key-chain.hpp	/^  setTpmPassword(const uint8_t* password, size_t passwordLength)$/;"	f	class:ndn::security::KeyChain
setTpmPassword	src/security/sec-tpm-file.hpp	/^  setTpmPassword(const uint8_t* password, size_t passwordLength)$/;"	f	class:ndn::SecTpmFile
setTpmPassword	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::setTpmPassword(const uint8_t* password, size_t passwordLength)$/;"	f	class:ndn::SecTpmOsx
setTpmPassword	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::setTpmPassword(const uint8_t* password, size_t passwordLength)$/;"	f	class:ndn::security::DummyTpm
setType	src/meta-info.cpp	/^MetaInfo::setType(uint32_t type)$/;"	f	class:ndn::MetaInfo
setUri	src/management/nfd-control-parameters.hpp	/^  setUri(const std::string& uri)$/;"	f	class:ndn::nfd::ControlParameters
setUriScheme	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setUriScheme(const std::string& uriScheme)$/;"	f	class:ndn::nfd::FaceQueryFilter
setValidityPeriod	src/signature-info.cpp	/^SignatureInfo::setValidityPeriod(const security::ValidityPeriod& validityPeriod)$/;"	f	class:ndn::SignatureInfo
setValue	src/signature.cpp	/^Signature::setValue(const Block& value)$/;"	f	class:ndn::Signature
setup	docs/redmine_issue.py	/^def setup(app):$/;"	f
sha256	src/util/crypto.cpp	/^sha256(const uint8_t* data, size_t dataLength)$/;"	f	namespace:ndn::crypto
shouldStop	src/util/notification-subscriber.hpp	/^  shouldStop()$/;"	f	class:ndn::util::NotificationSubscriber
shutdown	src/face.cpp	/^Face::shutdown()$/;"	f	class:ndn::Face
sig	tests/unit-tests/util/signal.t.cpp	/^  Signal<SignalOwner0> sig;$/;"	m	class:ndn::util::signal::tests::SignalOwner0	file:
sig	tests/unit-tests/util/signal.t.cpp	/^  Signal<SignalOwner1, int> sig;$/;"	m	class:ndn::util::signal::tests::SignalOwner1	file:
sigInfo	tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^const uint8_t sigInfo[] = {$/;"	m	namespace:ndn::tests	file:
sigInfo	tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^const uint8_t sigInfo[] = {$/;"	m	namespace:ndn::tests	file:
sigInfoRsa	tests/unit-tests/signature-info.t.cpp	/^const uint8_t sigInfoRsa[] = {$/;"	m	namespace:ndn::tests	file:
sigValue	tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^const uint8_t sigValue[] = {$/;"	m	namespace:ndn::tests	file:
sigValue	tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^const uint8_t sigValue[] = {$/;"	m	namespace:ndn::tests	file:
sign	src/security/key-chain.cpp	/^KeyChain::sign(Data& data, const SigningInfo& params)$/;"	f	class:ndn::security::KeyChain
sign	src/security/key-chain.cpp	/^KeyChain::sign(Interest& interest, const SigningInfo& params)$/;"	f	class:ndn::security::KeyChain
sign	src/security/key-chain.cpp	/^KeyChain::sign(const uint8_t* buffer, size_t bufferLength, const Name& certificateName)$/;"	f	class:ndn::security::KeyChain
sign	src/security/key-chain.cpp	/^KeyChain::sign(const uint8_t* buffer, size_t bufferLength, const SigningInfo& params)$/;"	f	class:ndn::security::KeyChain
sign	src/security/key-chain.hpp	/^KeyChain::sign(T& packet, const Name& certificateName)$/;"	f	class:ndn::security::KeyChain
signByIdentity	src/security/key-chain.cpp	/^KeyChain::signByIdentity(const uint8_t* buffer, size_t bufferLength, const Name& identityName)$/;"	f	class:ndn::security::KeyChain
signByIdentity	src/security/key-chain.hpp	/^KeyChain::signByIdentity(T& packet, const Name& identityName)$/;"	f	class:ndn::security::KeyChain
signData	tests/unit-tests/make-interest-data.hpp	/^signData(const shared_ptr<Data>& data)$/;"	f	namespace:ndn::util
signImpl	src/security/key-chain.hpp	/^KeyChain::signImpl(T& packet, const SigningInfo& params)$/;"	f	class:ndn::security::KeyChain
signInTpm	src/security/key-chain.hpp	/^  signInTpm(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::security::KeyChain
signInTpm	src/security/sec-tpm-file.cpp	/^SecTpmFile::signInTpm(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::SecTpmFile
signInTpm	src/security/sec-tpm-osx.hpp	/^  signInTpm(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::SecTpmOsx
signInTpm	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::signInTpm(const uint8_t* data, size_t dataLength, const Name& keyName,$/;"	f	class:ndn::security::DummyTpm
signInTpmInternal	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::signInTpmInternal(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::SecTpmOsx
signPacketWrapper	src/security/key-chain.cpp	/^KeyChain::signPacketWrapper(Data& data, const Signature& signature,$/;"	f	class:ndn::security::KeyChain
signPacketWrapper	src/security/key-chain.cpp	/^KeyChain::signPacketWrapper(Interest& interest, const Signature& signature,$/;"	f	class:ndn::security::KeyChain
signWithSha256	src/security/key-chain.cpp	/^KeyChain::signWithSha256(Data& data)$/;"	f	class:ndn::security::KeyChain
signWithSha256	src/security/key-chain.cpp	/^KeyChain::signWithSha256(Interest& interest)$/;"	f	class:ndn::security::KeyChain
signal	src/util/signal-connection.cpp	/^namespace signal {$/;"	n	namespace:ndn::util	file:
signal	src/util/signal-connection.hpp	/^namespace signal {$/;"	n	namespace:ndn::util
signal	src/util/signal-emit.hpp	/^namespace signal {$/;"	n	namespace:ndn::util
signal	src/util/signal-scoped-connection.cpp	/^namespace signal {$/;"	n	namespace:ndn::util	file:
signal	src/util/signal-scoped-connection.hpp	/^namespace signal {$/;"	n	namespace:ndn::util
signal	src/util/signal-signal.hpp	/^namespace signal {$/;"	n	namespace:ndn::util
signal	tests/unit-tests/util/signal.t.cpp	/^namespace signal {$/;"	n	namespace:ndn::util	file:
signed_interest	src/security/security-common.hpp	/^namespace signed_interest{$/;"	n	namespace:ndn
signingByCertificate	src/security/signing-helpers.cpp	/^signingByCertificate(const Name& certName)$/;"	f	namespace:ndn::security
signingByIdentity	src/security/signing-helpers.cpp	/^signingByIdentity(const Name& identity)$/;"	f	namespace:ndn::security
signingByKey	src/security/signing-helpers.cpp	/^signingByKey(const Name& keyName)$/;"	f	namespace:ndn::security
signingWithSha256	src/security/signing-helpers.cpp	/^signingWithSha256()$/;"	f	namespace:ndn::security
since	src/util/time.cpp	/^clock_string<ndn::time::steady_clock, CharT>::since()$/;"	f	class:boost::chrono::clock_string
since	src/util/time.cpp	/^clock_string<ndn::time::system_clock, CharT>::since()$/;"	f	class:boost::chrono::clock_string
size	src/detail/container-with-on-empty-signal.hpp	/^  size()$/;"	f	class:ndn::ContainerWithOnEmptySignal
size	src/encoding/block.cpp	/^Block::size() const$/;"	f	class:ndn::Block
size	src/encoding/encoder.hpp	/^Encoder::size() const$/;"	f	class:ndn::encoding::Encoder
size	src/exclude.hpp	/^Exclude::size() const$/;"	f	class:ndn::Exclude
size	src/name.hpp	/^  size() const$/;"	f	class:ndn::Name
size	src/security/additional-description.hpp	/^  size() const$/;"	f	class:ndn::security::AdditionalDescription
size	src/security/certificate-container.cpp	/^CertificateContainer::size() const$/;"	f	class:ndn::security::CertificateContainer
size	src/security/identity-container.cpp	/^IdentityContainer::size() const$/;"	f	class:ndn::security::IdentityContainer
size	src/security/key-container.cpp	/^KeyContainer::size() const$/;"	f	class:ndn::security::KeyContainer
size	src/util/in-memory-storage.hpp	/^  size() const$/;"	f	class:ndn::util::InMemoryStorage
size	src/util/regex/regex-backref-manager.hpp	/^RegexBackrefManager::size()$/;"	f	class:ndn::RegexBackrefManager
sizeOfNonNegativeInteger	src/encoding/tlv.hpp	/^sizeOfNonNegativeInteger(uint64_t varNumber)$/;"	f	namespace:ndn::tlv
sizeOfVarNumber	src/encoding/tlv.hpp	/^sizeOfVarNumber(uint64_t varNumber)$/;"	f	namespace:ndn::tlv
size_type	src/name.hpp	/^  typedef component_container::size_type       size_type;$/;"	t	class:ndn::Name
source_suffix	docs/conf.py	/^source_suffix = '.rst'$/;"	v
sqlite3_bind_string	src/security/sec-public-info-sqlite3.cpp	/^sqlite3_bind_string(sqlite3_stmt* statement,$/;"	f	namespace:ndn
sqlite3_column_string	src/security/sec-public-info-sqlite3.cpp	/^sqlite3_column_string(sqlite3_stmt* statement, int column)$/;"	f	namespace:ndn
start	src/management/nfd-controller.hpp	/^  start(const ControlParameters& parameters,$/;"	f	class:ndn::nfd::Controller
start	src/util/notification-subscriber.hpp	/^  start()$/;"	f	class:ndn::util::NotificationSubscriber
startCommand	src/management/nfd-controller.cpp	/^Controller::startCommand(const shared_ptr<ControlCommand>& command,$/;"	f	class:ndn::nfd::Controller
startInterest	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^  startInterest(const Name& name)$/;"	f	class:ndn::util::FindFixture
std	src/name.cpp	/^namespace std {$/;"	n	file:
std	src/name.hpp	/^namespace std {$/;"	n
std	src/util/ethernet.hpp	/^namespace std {$/;"	n
steadyClock	tests/unit-tests/unit-test-time-fixture.hpp	/^  shared_ptr<time::UnitTestSteadyClock> steadyClock;$/;"	m	class:ndn::tests::UnitTestTimeFixture
steadyClock	tests/unit-tests/util/time-unit-test-clock.t.cpp	/^  shared_ptr<time::UnitTestSteadyClock> steadyClock;$/;"	m	class:ndn::tests::UnitTestTimeFixture	file:
steady_clock	src/util/time.hpp	/^class steady_clock$/;"	c	namespace:ndn::time
step	src/util/sqlite3-statement.cpp	/^Sqlite3Statement::step()$/;"	f	class:ndn::util::Sqlite3Statement
stop	src/util/notification-subscriber.hpp	/^  stop()$/;"	f	class:ndn::util::NotificationSubscriber
streamPrefix	tests/unit-tests/util/notification-subscriber.t.cpp	/^  Name streamPrefix;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
subscriber	tests/unit-tests/util/notification-subscriber.t.cpp	/^  util::NotificationSubscriber<SimpleNotification> subscriber;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
subscriberFace	tests/unit-tests/util/notification-subscriber.t.cpp	/^  shared_ptr<DummyClientFace> subscriberFace;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
subtract	src/util/monotonic_deadline_timer.hpp	/^  subtract(const time_type& timeLhs, const time_type& timeRhs)$/;"	f	struct:boost::asio::time_traits
sync	src/util/indented-stream.cpp	/^IndentedStream::StreamBuf::sync()$/;"	f	class:ndn::util::IndentedStream::StreamBuf
syncResolve	src/util/dns.cpp	/^  syncResolve(BoostResolver::query query)$/;"	f	class:ndn::dns::Resolver
syncResolve	src/util/dns.cpp	/^syncResolve(const std::string& host, boost::asio::io_service& ioService,$/;"	f	namespace:ndn::dns
systemClock	tests/unit-tests/unit-test-time-fixture.hpp	/^  shared_ptr<time::UnitTestSystemClock> systemClock;$/;"	m	class:ndn::tests::UnitTestTimeFixture
systemClock	tests/unit-tests/util/time-unit-test-clock.t.cpp	/^  shared_ptr<time::UnitTestSystemClock> systemClock;$/;"	m	class:ndn::tests::UnitTestTimeFixture	file:
system_clock	src/util/time.hpp	/^class system_clock$/;"	c	namespace:ndn::time
templates_path	docs/conf.py	/^templates_path = ['_templates']$/;"	v
terminate	tests/integrated/face.cpp	/^  terminate(Face& face)$/;"	f	class:ndn::tests::FacesFixture
test	tests/unit-tests/security/validity-period.t.cpp	/^namespace test {$/;"	n	namespace:ndn::security	file:
test	tests/unit-tests/util/digest.t.cpp	/^namespace test {$/;"	n	namespace:ndn::util	file:
test	tests/unit-tests/util/string-helper.t.cpp	/^namespace test {$/;"	n	namespace:ndn::util	file:
test	waf	/^def test(dir):$/;"	f
tests	tests/integrated/face.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/data.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/encoding/block-helpers.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::encoding	file:
tests	tests/unit-tests/encoding/block.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/encoding/encoder.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::encoding	file:
tests	tests/unit-tests/encoding/estimator.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::encoding	file:
tests	tests/unit-tests/encoding/tlv.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::tlv	file:
tests	tests/unit-tests/exclude.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/face.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/interest.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/key-locator.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/link.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/lp/cache-policy.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::lp	file:
tests	tests/unit-tests/lp/nack-header.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::lp	file:
tests	tests/unit-tests/lp/nack.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::lp	file:
tests	tests/unit-tests/lp/packet.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::lp	file:
tests	tests/unit-tests/management/nfd-channel-status.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	tests/unit-tests/management/nfd-command-options.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	tests/unit-tests/management/nfd-control-command.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	tests/unit-tests/management/nfd-control-parameters.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	tests/unit-tests/management/nfd-control-response.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	tests/unit-tests/management/nfd-controller.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	tests/unit-tests/management/nfd-face-event-notification.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	tests/unit-tests/management/nfd-face-query-filter.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	tests/unit-tests/management/nfd-face-status.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	tests/unit-tests/management/nfd-fib-entry.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	tests/unit-tests/management/nfd-forwarder-status.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	tests/unit-tests/management/nfd-rib-entry.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	tests/unit-tests/management/nfd-strategy-choice.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	tests/unit-tests/meta-info.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/mgmt/dispatcher.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::mgmt	file:
tests	tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::mgmt	file:
tests	tests/unit-tests/name.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/ndebug.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/network-configuration-detector.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/network-configuration-detector.hpp	/^namespace tests {$/;"	n	namespace:ndn
tests	tests/unit-tests/security/additional-info.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/security/certificate-container.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/conf/checker.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security::conf	file:
tests	tests/unit-tests/security/digest-sha256.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/security/identity-container.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/identity-management-fixture.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/identity.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/key-chain.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/key-container.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/key-params.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/security/key.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/pib-impl.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/pib-memory.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/pib-sqlite3.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/pib.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/public-key.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/security/sec-rule-relative.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/sec-rule-specific.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/sec-tpm-file.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/security/sec-tpm-osx.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/security/signing-helpers.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/signing-info.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	tests/unit-tests/security/validator-config.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/security/validator.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/signature-info.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/tag-host.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/transport/tcp-transport.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/transport/unix-transport.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/unit-test-time-fixture.hpp	/^namespace tests {$/;"	n	namespace:ndn
tests	tests/unit-tests/util/backports.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/util/concepts.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/util/config-file.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/util/dns.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	tests/unit-tests/util/ethernet.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	tests/unit-tests/util/face-uri.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	tests/unit-tests/util/in-memory-storage-fifo.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	tests/unit-tests/util/in-memory-storage-lfu.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	tests/unit-tests/util/in-memory-storage-lru.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	tests/unit-tests/util/in-memory-storage-persistent.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	tests/unit-tests/util/indented-stream.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	tests/unit-tests/util/io.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/util/notification-stream.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	tests/unit-tests/util/notification-subscriber.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	tests/unit-tests/util/random.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/util/regex.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/util/scheduler.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util::scheduler	file:
tests	tests/unit-tests/util/segment-fetcher.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	tests/unit-tests/util/signal.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util::signal	file:
tests	tests/unit-tests/util/simple-notification.hpp	/^namespace tests {$/;"	n	namespace:ndn::util
tests	tests/unit-tests/util/sqlite3-statement.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	tests/unit-tests/util/time-unit-test-clock.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/util/time.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	tests/unit-tests/version.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
text	tests/unit-tests/security/additional-info.t.cpp	/^static const std::string text = "((key1:val1), (key2:val2))";$/;"	m	namespace:ndn::security::tests	file:
time	src/util/time-custom-clock.hpp	/^namespace time {$/;"	n	namespace:ndn
time	src/util/time-unit-test-clock.cpp	/^namespace time {$/;"	n	namespace:ndn	file:
time	src/util/time-unit-test-clock.hpp	/^namespace time {$/;"	n	namespace:ndn
time	src/util/time.cpp	/^namespace time {$/;"	n	namespace:ndn	file:
time	src/util/time.hpp	/^namespace time {$/;"	n	namespace:ndn
time_point	src/util/time.hpp	/^  typedef boost::chrono::time_point<steady_clock> time_point;$/;"	t	class:ndn::time::steady_clock
time_point	src/util/time.hpp	/^  typedef boost::chrono::time_point<system_clock> time_point;$/;"	t	class:ndn::time::system_clock
time_traits	src/util/monotonic_deadline_timer.hpp	/^struct time_traits<ndn::time::steady_clock>$/;"	s	namespace:boost::asio
time_type	src/util/monotonic_deadline_timer.hpp	/^  typedef ndn::time::steady_clock::TimePoint time_type;$/;"	t	struct:boost::asio::time_traits
tlv	src/encoding/tlv-nfd.hpp	/^namespace tlv {$/;"	n	namespace:ndn
tlv	src/encoding/tlv-security.hpp	/^namespace tlv {$/;"	n	namespace:ndn
tlv	src/encoding/tlv.hpp	/^namespace tlv {$/;"	n	namespace:ndn
tlv	src/lp/tlv.hpp	/^namespace tlv {$/;"	n	namespace:ndn::lp
tlv	tests/unit-tests/encoding/tlv.t.cpp	/^namespace tlv {$/;"	n	namespace:ndn	file:
tlvType	src/lp/detail/field-info.hpp	/^  uint64_t tlvType;$/;"	m	class:ndn::lp::detail::FieldInfo
tmpPath	tests/unit-tests/security/pib-impl.t.cpp	/^  boost::filesystem::path tmpPath;$/;"	m	class:ndn::security::tests::PibSqlite3Wrapper	file:
tmpPath	tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^  boost::filesystem::path tmpPath;$/;"	m	class:ndn::tests::PibTmpPathFixture	file:
toEscapedString	src/name-component.hpp	/^  toEscapedString() const)$/;"	f	class:ndn::name::Component
toHex	src/util/string-helper.cpp	/^toHex(const Buffer& buffer, bool isUpperCase\/* = true*\/)$/;"	f	namespace:ndn
toHex	src/util/string-helper.cpp	/^toHex(const uint8_t* buffer, size_t length, bool isUpperCase\/* = true*\/)$/;"	f	namespace:ndn
toInternalKeyName	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::toInternalKeyName(const Name& keyName, KeyClass keyClass)$/;"	f	class:ndn::SecTpmOsx::Impl
toIsoString	src/util/time.cpp	/^toIsoString(const system_clock::TimePoint& timePoint)$/;"	f	namespace:ndn::time
toNumber	src/name-component.cpp	/^Component::toNumber() const$/;"	f	class:ndn::name::Component
toNumberWithMarker	src/name-component.cpp	/^Component::toNumberWithMarker(uint8_t marker) const$/;"	f	class:ndn::name::Component
toPosixDuration	src/util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::toPosixDuration(const typename BaseClock::duration& duration) const$/;"	f	class:ndn::time::UnitTestClock
toSegment	src/name-component.cpp	/^Component::toSegment() const$/;"	f	class:ndn::name::Component
toSegmentOffset	src/name-component.cpp	/^Component::toSegmentOffset() const$/;"	f	class:ndn::name::Component
toSequenceNumber	src/name-component.cpp	/^Component::toSequenceNumber() const$/;"	f	class:ndn::name::Component
toString	src/encoding/oid.cpp	/^OID::toString() const$/;"	f	class:ndn::OID
toString	src/util/digest.cpp	/^Digest<Hash>::toString()$/;"	f	class:ndn::util::Digest
toString	src/util/ethernet.cpp	/^Address::toString(char sep) const$/;"	f	class:ndn::util::ethernet::Address
toString	src/util/face-uri.cpp	/^FaceUri::toString() const$/;"	f	class:ndn::util::FaceUri
toString	src/util/time.cpp	/^toString(const system_clock::TimePoint& timePoint,$/;"	f	namespace:ndn::time
toTimestamp	src/name-component.cpp	/^Component::toTimestamp() const$/;"	f	class:ndn::name::Component
toUnixTimestamp	src/util/time.cpp	/^toUnixTimestamp(const system_clock::TimePoint& point)$/;"	f	namespace:ndn::time
toUri	src/exclude.cpp	/^Exclude::toUri() const$/;"	f	class:ndn::Exclude
toUri	src/interest.hpp	/^Interest::toUri() const$/;"	f	class:ndn::Interest
toUri	src/name-component.cpp	/^Component::toUri() const$/;"	f	class:ndn::name::Component
toUri	src/name-component.cpp	/^Component::toUri(std::ostream& result) const$/;"	f	class:ndn::name::Component
toUri	src/name.cpp	/^Name::toUri() const$/;"	f	class:ndn::Name
toVersion	src/name-component.cpp	/^Component::toVersion() const$/;"	f	class:ndn::name::Component
to_posix_duration	src/util/monotonic_deadline_timer.hpp	/^  to_posix_duration(const duration_type& duration)$/;"	f	struct:boost::asio::time_traits
to_posix_duration	src/util/time.cpp	/^steady_clock::to_posix_duration(const duration& duration)$/;"	f	class:ndn::time::steady_clock
tools	build/c4che/build.config.py	/^tools = [{'tool': 'ar', 'tooldir': None, 'funs': None}, {'tool': 'cxx', 'tooldir': None, 'funs': None}, {'tool': 'g++', 'tooldir': None, 'funs': None}, {'tool': 'compiler_cxx', 'tooldir': None, 'funs': None}, {'tool': 'gnu_dirs', 'tooldir': None, 'funs': None}, {'tool': 'c_osx', 'tooldir': None, 'funs': None}, {'tool': 'default-compiler-flags', 'tooldir': None, 'funs': None}, {'tool': 'osx-security', 'tooldir': None, 'funs': None}, {'tool': 'pch', 'tooldir': None, 'funs': None}, {'tool': 'boost', 'tooldir': None, 'funs': None}, {'tool': 'cryptopp', 'tooldir': None, 'funs': None}, {'tool': 'sqlite3', 'tooldir': None, 'funs': None}, {'tool': 'doxygen', 'tooldir': None, 'funs': None}, {'tool': 'sphinx_build', 'tooldir': None, 'funs': None}, {'tool': 'type_traits', 'tooldir': None, 'funs': None}, {'tool': 'compiler-features', 'tooldir': None, 'funs': None}, {'tool': 'coverage', 'tooldir': None, 'funs': None}]$/;"	v
topPrefix	src/mgmt/dispatcher.hpp	/^    Name topPrefix;$/;"	m	struct:ndn::mgmt::Dispatcher::TopPrefixEntry
transformName	src/security/sec-tpm-file.cpp	/^  transformName(const string& keyName, const string& extension)$/;"	f	class:ndn::SecTpmFile::Impl
trim	src/util/string-helper.cpp	/^trim(std::string& str)$/;"	f	namespace:ndn
trimLeft	src/util/string-helper.cpp	/^trimLeft(std::string& str)$/;"	f	namespace:ndn
trimRight	src/util/string-helper.cpp	/^trimRight(std::string& str)$/;"	f	namespace:ndn
type	src/encoding/block.hpp	/^Block::type() const$/;"	f	class:ndn::Block
unescape	src/util/string-helper.cpp	/^unescape(const std::string& str)$/;"	f	namespace:ndn
unlockTpm	src/security/key-chain.hpp	/^  unlockTpm(const char* password, size_t passwordLength, bool usePassword)$/;"	f	class:ndn::security::KeyChain
unlockTpm	src/security/sec-tpm-file.hpp	/^  unlockTpm(const char* password, size_t passwordLength, bool usePassword)$/;"	f	class:ndn::SecTpmFile
unlockTpm	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::unlockTpm(const char* password, size_t passwordLength, bool usePassword)$/;"	f	class:ndn::SecTpmOsx
unlockTpm	tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::unlockTpm(const char* password, size_t passwordLength, bool usePassword)$/;"	f	class:ndn::security::DummyTpm
unpack_wafdir	waf	/^def unpack_wafdir(dir, src):$/;"	f
unregisterPrefix	src/face.cpp	/^Face::unregisterPrefix(const RegisteredPrefixId* registeredPrefixId,$/;"	f	class:ndn::Face
unsetCost	src/management/nfd-control-parameters.hpp	/^  unsetCost()$/;"	f	class:ndn::nfd::ControlParameters
unsetExpirationPeriod	src/management/nfd-control-parameters.hpp	/^  unsetExpirationPeriod()$/;"	f	class:ndn::nfd::ControlParameters
unsetFaceId	src/management/nfd-control-parameters.hpp	/^  unsetFaceId()$/;"	f	class:ndn::nfd::ControlParameters
unsetFaceId	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetFaceId()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetFacePersistency	src/management/nfd-control-parameters.hpp	/^  unsetFacePersistency()$/;"	f	class:ndn::nfd::ControlParameters
unsetFacePersistency	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetFacePersistency()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetFaceScope	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetFaceScope()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetFlags	src/management/nfd-control-parameters.hpp	/^  unsetFlags()$/;"	f	class:ndn::nfd::ControlParameters
unsetInterestFilter	src/face.cpp	/^Face::unsetInterestFilter(const InterestFilterId* interestFilterId)$/;"	f	class:ndn::Face
unsetInterestFilter	src/face.cpp	/^Face::unsetInterestFilter(const RegisteredPrefixId* registeredPrefixId)$/;"	f	class:ndn::Face
unsetKeyLocator	src/security/signature-sha256-with-ecdsa.cpp	/^SignatureSha256WithEcdsa::unsetKeyLocator()$/;"	f	class:ndn::SignatureSha256WithEcdsa
unsetKeyLocator	src/security/signature-sha256-with-rsa.cpp	/^SignatureSha256WithRsa::unsetKeyLocator()$/;"	f	class:ndn::SignatureSha256WithRsa
unsetKeyLocator	src/signature-info.cpp	/^SignatureInfo::unsetKeyLocator()$/;"	f	class:ndn::SignatureInfo
unsetKeyLocator	src/signature.hpp	/^  unsetKeyLocator()$/;"	f	class:ndn::Signature
unsetLink	src/interest.cpp	/^Interest::unsetLink()$/;"	f	class:ndn::Interest
unsetLinkType	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetLinkType()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetLocalControlFeature	src/management/nfd-control-parameters.hpp	/^  unsetLocalControlFeature()$/;"	f	class:ndn::nfd::ControlParameters
unsetLocalUri	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetLocalUri()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetName	src/management/nfd-control-parameters.hpp	/^  unsetName()$/;"	f	class:ndn::nfd::ControlParameters
unsetOrigin	src/management/nfd-control-parameters.hpp	/^  unsetOrigin()$/;"	f	class:ndn::nfd::ControlParameters
unsetRemoteUri	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetRemoteUri()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetSelectedDelegation	src/interest.cpp	/^Interest::unsetSelectedDelegation()$/;"	f	class:ndn::Interest
unsetStrategy	src/management/nfd-control-parameters.hpp	/^  unsetStrategy()$/;"	f	class:ndn::nfd::ControlParameters
unsetUri	src/management/nfd-control-parameters.hpp	/^  unsetUri()$/;"	f	class:ndn::nfd::ControlParameters
unsetUriScheme	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetUriScheme()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetValidityPeriod	src/signature-info.cpp	/^SignatureInfo::unsetValidityPeriod()$/;"	f	class:ndn::SignatureInfo
update	src/util/digest.cpp	/^Digest<Hash>::update(const uint8_t* buffer, size_t size)$/;"	f	class:ndn::util::Digest
usage	tools/ndncatchunks3.cpp	/^usage(const std::string &filename)$/;"	f	namespace:ndn
util	src/util/digest.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/digest.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/dummy-client-face.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/dummy-client-face.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/ethernet.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/ethernet.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/face-uri.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/face-uri.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/in-memory-storage-entry.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/in-memory-storage-entry.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/in-memory-storage-fifo.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/in-memory-storage-fifo.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/in-memory-storage-lfu.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/in-memory-storage-lfu.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/in-memory-storage-lru.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/in-memory-storage-lru.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/in-memory-storage-persistent.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/in-memory-storage-persistent.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/in-memory-storage.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/in-memory-storage.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/indented-stream.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/indented-stream.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/network-monitor.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/network-monitor.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/notification-stream.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/notification-subscriber.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/scheduler-scoped-event-id.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/scheduler-scoped-event-id.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/scheduler.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/scheduler.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/segment-fetcher.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/segment-fetcher.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/signal-connection.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/signal-connection.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/signal-emit.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/signal-scoped-connection.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/signal-scoped-connection.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/signal-signal.hpp	/^namespace util {$/;"	n	namespace:ndn
util	src/util/sqlite3-statement.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	src/util/sqlite3-statement.hpp	/^namespace util {$/;"	n	namespace:ndn
util	tests/integrated/network-monitor.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/make-interest-data.hpp	/^namespace util {$/;"	n	namespace:ndn
util	tests/unit-tests/util/digest.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/dns.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/ethernet.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/face-uri.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/in-memory-storage-fifo.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/in-memory-storage-lfu.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/in-memory-storage-lru.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/in-memory-storage-persistent.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/indented-stream.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/notification-stream.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/notification-subscriber.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/scheduler.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/segment-fetcher.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/signal.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/simple-notification.hpp	/^namespace util {$/;"	n	namespace:ndn
util	tests/unit-tests/util/sqlite3-statement.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/string-helper.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	tests/unit-tests/util/test-home-environment-fixture.hpp	/^namespace util {$/;"	n	namespace:ndn
util	tests/unit-tests/util/test-in-memory-storage-common.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
validate	src/management/nfd-control-command.cpp	/^ControlCommand::FieldValidator::validate(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::ControlCommand::FieldValidator
validate	src/security/validator.cpp	/^Validator::validate(const Data& data,$/;"	f	class:ndn::Validator
validate	src/security/validator.cpp	/^Validator::validate(const Interest& interest,$/;"	f	class:ndn::Validator
validate	src/security/validator.hpp	/^  validate(const Data& data,$/;"	f	class:ndn::Validator
validate	src/security/validator.hpp	/^  validate(const Interest& interest,$/;"	f	class:ndn::Validator
validateRequest	src/management/nfd-control-command.cpp	/^ControlCommand::validateRequest(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::ControlCommand
validateRequest	src/management/nfd-control-command.cpp	/^FaceDestroyCommand::validateRequest(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceDestroyCommand
validateRequest	src/management/nfd-control-command.cpp	/^FaceLocalControlCommand::validateRequest(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceLocalControlCommand
validateRequest	src/management/nfd-control-command.cpp	/^StrategyChoiceUnsetCommand::validateRequest(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::StrategyChoiceUnsetCommand
validateResponse	src/management/nfd-control-command.cpp	/^ControlCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::ControlCommand
validateResponse	src/management/nfd-control-command.cpp	/^FaceCreateCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceCreateCommand
validateResponse	src/management/nfd-control-command.cpp	/^FaceDestroyCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceDestroyCommand
validateResponse	src/management/nfd-control-command.cpp	/^FaceLocalControlCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceLocalControlCommand
validateResponse	src/management/nfd-control-command.cpp	/^FibAddNextHopCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FibAddNextHopCommand
validateResponse	src/management/nfd-control-command.cpp	/^FibRemoveNextHopCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FibRemoveNextHopCommand
validateResponse	src/management/nfd-control-command.cpp	/^RibRegisterCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::RibRegisterCommand
validateResponse	src/management/nfd-control-command.cpp	/^RibUnregisterCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::RibUnregisterCommand
validateResponse	src/management/nfd-control-command.cpp	/^StrategyChoiceUnsetCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::StrategyChoiceUnsetCommand
validator	tests/unit-tests/security/validator-config.t.cpp	/^  ValidatorConfig validator;$/;"	m	struct:ndn::tests::DirTestFixture	file:
validityCheck	src/security/identity.cpp	/^Identity::validityCheck() const$/;"	f	class:ndn::security::Identity
validityCheck	src/security/key.cpp	/^Key::validityCheck() const$/;"	f	class:ndn::security::Key
value	src/encoding/block.cpp	/^Block::value() const$/;"	f	class:ndn::Block
value_begin	src/encoding/block.hpp	/^Block::value_begin() const$/;"	f	class:ndn::Block
value_end	src/encoding/block.hpp	/^Block::value_end() const$/;"	f	class:ndn::Block
value_size	src/encoding/block.cpp	/^Block::value_size() const$/;"	f	class:ndn::Block
value_type	src/detail/container-with-on-empty-signal.hpp	/^  typedef typename Base::value_type value_type;$/;"	t	class:ndn::ContainerWithOnEmptySignal
value_type	src/encoding/encoder.hpp	/^  typedef Buffer::value_type value_type;$/;"	t	class:ndn::encoding::Encoder
value_type	src/name.hpp	/^  typedef Component               value_type;$/;"	t	class:ndn::Name
verifySignature	src/security/validator.cpp	/^Validator::verifySignature(const Data& data, const PublicKey& key)$/;"	f	class:ndn::Validator
verifySignature	src/security/validator.cpp	/^Validator::verifySignature(const Interest& interest, const PublicKey& key)$/;"	f	class:ndn::Validator
verifySignature	src/security/validator.cpp	/^Validator::verifySignature(const uint8_t* buf, const size_t size, const DigestSha256& sig)$/;"	f	class:ndn::Validator
verifySignature	src/security/validator.cpp	/^Validator::verifySignature(const uint8_t* buf,$/;"	f	class:ndn::Validator
verifySignature	src/security/validator.hpp	/^  verifySignature(const Buffer& blob, const DigestSha256& sig)$/;"	f	class:ndn::Validator
verifySignature	src/security/validator.hpp	/^  verifySignature(const Buffer& blob, const Signature& sig, const PublicKey& publicKey)$/;"	f	class:ndn::Validator
verifySignature	src/security/validator.hpp	/^  verifySignature(const Data& data, const DigestSha256& sig)$/;"	f	class:ndn::Validator
verifySignature	src/security/validator.hpp	/^  verifySignature(const Data& data,$/;"	f	class:ndn::Validator
verifySignature	src/security/validator.hpp	/^  verifySignature(const Interest& interest, const DigestSha256& sig)$/;"	f	class:ndn::Validator
verifySignature	src/security/validator.hpp	/^  verifySignature(const Interest& interest,$/;"	f	class:ndn::Validator
version	build/c4che/build.config.py	/^version = 0x1080900$/;"	v
wafdir	waf	/^wafdir = find_lib()$/;"	v
wantRegister	src/mgmt/dispatcher.hpp	/^    bool wantRegister;$/;"	m	struct:ndn::mgmt::Dispatcher::TopPrefixEntry
wire	src/encoding/block.cpp	/^Block::wire() const$/;"	f	class:ndn::Block
wireDecode	src/data.cpp	/^Data::wireDecode(const Block& wire)$/;"	f	class:ndn::Data
wireDecode	src/exclude.cpp	/^Exclude::wireDecode(const Block& wire)$/;"	f	class:ndn::Exclude
wireDecode	src/interest.cpp	/^Interest::wireDecode(const Block& wire)$/;"	f	class:ndn::Interest
wireDecode	src/key-locator.cpp	/^KeyLocator::wireDecode(const Block& wire)$/;"	f	class:ndn::KeyLocator
wireDecode	src/link.cpp	/^Link::wireDecode(const Block& wire)$/;"	f	class:ndn::Link
wireDecode	src/lp/cache-policy.cpp	/^CachePolicy::wireDecode(const Block& wire)$/;"	f	class:ndn::lp::CachePolicy
wireDecode	src/lp/nack-header.cpp	/^NackHeader::wireDecode(const Block& wire)$/;"	f	class:ndn::lp::NackHeader
wireDecode	src/lp/packet.cpp	/^Packet::wireDecode(const Block& wire)$/;"	f	class:ndn::lp::Packet
wireDecode	src/management/nfd-channel-status.cpp	/^ChannelStatus::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::ChannelStatus
wireDecode	src/management/nfd-control-parameters.cpp	/^ControlParameters::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::ControlParameters
wireDecode	src/management/nfd-face-event-notification.cpp	/^FaceEventNotification::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::FaceEventNotification
wireDecode	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::FaceQueryFilter
wireDecode	src/management/nfd-face-status.cpp	/^FaceStatus::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::FaceStatus
wireDecode	src/management/nfd-fib-entry.cpp	/^FibEntry::wireDecode(const Block& wire)$/;"	f	class:ndn::nfd::FibEntry
wireDecode	src/management/nfd-fib-entry.cpp	/^NextHopRecord::wireDecode(const Block& wire)$/;"	f	class:ndn::nfd::NextHopRecord
wireDecode	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::ForwarderStatus
wireDecode	src/management/nfd-local-control-header.hpp	/^LocalControlHeader::wireDecode(const Block& wire, uint8_t encodeMask)$/;"	f	class:ndn::nfd::LocalControlHeader
wireDecode	src/management/nfd-rib-entry.cpp	/^RibEntry::wireDecode(const Block& wire)$/;"	f	class:ndn::nfd::RibEntry
wireDecode	src/management/nfd-rib-entry.cpp	/^Route::wireDecode(const Block& wire)$/;"	f	class:ndn::nfd::Route
wireDecode	src/management/nfd-strategy-choice.cpp	/^StrategyChoice::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::StrategyChoice
wireDecode	src/meta-info.cpp	/^MetaInfo::wireDecode(const Block& wire)$/;"	f	class:ndn::MetaInfo
wireDecode	src/mgmt/control-response.cpp	/^ControlResponse::wireDecode(const Block& wire)$/;"	f	class:ndn::mgmt::ControlResponse
wireDecode	src/name-component.cpp	/^Component::wireDecode(const Block& wire)$/;"	f	class:ndn::name::Component
wireDecode	src/name.cpp	/^Name::wireDecode(const Block& wire)$/;"	f	class:ndn::Name
wireDecode	src/security/additional-description.cpp	/^AdditionalDescription::wireDecode(const Block& wire)$/;"	f	class:ndn::security::AdditionalDescription
wireDecode	src/security/certificate.cpp	/^Certificate::wireDecode(const Block& wire)$/;"	f	class:ndn::Certificate
wireDecode	src/security/identity-certificate.cpp	/^IdentityCertificate::wireDecode(const Block& wire)$/;"	f	class:ndn::IdentityCertificate
wireDecode	src/security/secured-bag.cpp	/^SecuredBag::wireDecode(const Block& wire)$/;"	f	class:ndn::SecuredBag
wireDecode	src/security/validity-period.cpp	/^ValidityPeriod::wireDecode(const Block& wire)$/;"	f	class:ndn::security::ValidityPeriod
wireDecode	src/selectors.cpp	/^Selectors::wireDecode(const Block& wire)$/;"	f	class:ndn::Selectors
wireDecode	src/signature-info.cpp	/^SignatureInfo::wireDecode(const Block& wire)$/;"	f	class:ndn::SignatureInfo
wireDecode	tests/unit-tests/util/simple-notification.hpp	/^  wireDecode(const Block& block)$/;"	f	class:ndn::util::tests::SimpleNotification
wireEncode	src/data.cpp	/^Data::wireEncode() const$/;"	f	class:ndn::Data
wireEncode	src/data.cpp	/^Data::wireEncode(EncodingBuffer& encoder, const Block& signatureValue) const$/;"	f	class:ndn::Data
wireEncode	src/data.cpp	/^Data::wireEncode(EncodingImpl<TAG>& encoder, bool unsignedPortion\/* = false*\/) const$/;"	f	class:ndn::Data
wireEncode	src/exclude.cpp	/^Exclude::wireEncode() const$/;"	f	class:ndn::Exclude
wireEncode	src/exclude.cpp	/^Exclude::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::Exclude
wireEncode	src/interest.cpp	/^Interest::wireEncode() const$/;"	f	class:ndn::Interest
wireEncode	src/interest.cpp	/^Interest::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::Interest
wireEncode	src/key-locator.cpp	/^KeyLocator::wireEncode() const$/;"	f	class:ndn::KeyLocator
wireEncode	src/key-locator.cpp	/^KeyLocator::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::KeyLocator
wireEncode	src/lp/cache-policy.cpp	/^CachePolicy::wireEncode() const$/;"	f	class:ndn::lp::CachePolicy
wireEncode	src/lp/cache-policy.cpp	/^CachePolicy::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::lp::CachePolicy
wireEncode	src/lp/nack-header.cpp	/^NackHeader::wireEncode() const$/;"	f	class:ndn::lp::NackHeader
wireEncode	src/lp/nack-header.cpp	/^NackHeader::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::lp::NackHeader
wireEncode	src/lp/packet.cpp	/^Packet::wireEncode() const$/;"	f	class:ndn::lp::Packet
wireEncode	src/lp/packet.cpp	/^Packet::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::lp::Packet
wireEncode	src/management/nfd-channel-status.cpp	/^ChannelStatus::wireEncode() const$/;"	f	class:ndn::nfd::ChannelStatus
wireEncode	src/management/nfd-channel-status.cpp	/^ChannelStatus::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::ChannelStatus
wireEncode	src/management/nfd-control-parameters.cpp	/^ControlParameters::wireEncode() const$/;"	f	class:ndn::nfd::ControlParameters
wireEncode	src/management/nfd-control-parameters.cpp	/^ControlParameters::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::ControlParameters
wireEncode	src/management/nfd-face-event-notification.cpp	/^FaceEventNotification::wireEncode() const$/;"	f	class:ndn::nfd::FaceEventNotification
wireEncode	src/management/nfd-face-event-notification.cpp	/^FaceEventNotification::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::FaceEventNotification
wireEncode	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::wireEncode() const$/;"	f	class:ndn::nfd::FaceQueryFilter
wireEncode	src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::FaceQueryFilter
wireEncode	src/management/nfd-face-status.cpp	/^FaceStatus::wireEncode() const$/;"	f	class:ndn::nfd::FaceStatus
wireEncode	src/management/nfd-face-status.cpp	/^FaceStatus::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::FaceStatus
wireEncode	src/management/nfd-fib-entry.cpp	/^FibEntry::wireEncode() const$/;"	f	class:ndn::nfd::FibEntry
wireEncode	src/management/nfd-fib-entry.cpp	/^FibEntry::wireEncode(EncodingImpl<TAG>& block) const$/;"	f	class:ndn::nfd::FibEntry
wireEncode	src/management/nfd-fib-entry.cpp	/^NextHopRecord::wireEncode() const$/;"	f	class:ndn::nfd::NextHopRecord
wireEncode	src/management/nfd-fib-entry.cpp	/^NextHopRecord::wireEncode(EncodingImpl<TAG>& block) const$/;"	f	class:ndn::nfd::NextHopRecord
wireEncode	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::wireEncode() const$/;"	f	class:ndn::nfd::ForwarderStatus
wireEncode	src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::ForwarderStatus
wireEncode	src/management/nfd-local-control-header.hpp	/^LocalControlHeader::wireEncode(EncodingImpl<TAG>& block, size_t payloadSize,$/;"	f	class:ndn::nfd::LocalControlHeader
wireEncode	src/management/nfd-local-control-header.hpp	/^LocalControlHeader::wireEncode(const U& payload, uint8_t encodeMask) const$/;"	f	class:ndn::nfd::LocalControlHeader
wireEncode	src/management/nfd-rib-entry.cpp	/^RibEntry::wireEncode() const$/;"	f	class:ndn::nfd::RibEntry
wireEncode	src/management/nfd-rib-entry.cpp	/^RibEntry::wireEncode(EncodingImpl<TAG>& block) const$/;"	f	class:ndn::nfd::RibEntry
wireEncode	src/management/nfd-rib-entry.cpp	/^Route::wireEncode() const$/;"	f	class:ndn::nfd::Route
wireEncode	src/management/nfd-rib-entry.cpp	/^Route::wireEncode(EncodingImpl<TAG>& block) const$/;"	f	class:ndn::nfd::Route
wireEncode	src/management/nfd-strategy-choice.cpp	/^StrategyChoice::wireEncode() const$/;"	f	class:ndn::nfd::StrategyChoice
wireEncode	src/management/nfd-strategy-choice.cpp	/^StrategyChoice::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::StrategyChoice
wireEncode	src/meta-info.cpp	/^MetaInfo::wireEncode() const$/;"	f	class:ndn::MetaInfo
wireEncode	src/meta-info.cpp	/^MetaInfo::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::MetaInfo
wireEncode	src/mgmt/control-response.cpp	/^ControlResponse::wireEncode() const$/;"	f	class:ndn::mgmt::ControlResponse
wireEncode	src/name-component.cpp	/^Component::wireEncode() const$/;"	f	class:ndn::name::Component
wireEncode	src/name-component.cpp	/^Component::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::name::Component
wireEncode	src/name.cpp	/^Name::wireEncode() const$/;"	f	class:ndn::Name
wireEncode	src/name.cpp	/^Name::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::Name
wireEncode	src/security/additional-description.cpp	/^AdditionalDescription::wireEncode() const$/;"	f	class:ndn::security::AdditionalDescription
wireEncode	src/security/additional-description.cpp	/^AdditionalDescription::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::security::AdditionalDescription
wireEncode	src/security/secured-bag.cpp	/^SecuredBag::wireEncode() const$/;"	f	class:ndn::SecuredBag
wireEncode	src/security/validity-period.cpp	/^ValidityPeriod::wireEncode() const$/;"	f	class:ndn::security::ValidityPeriod
wireEncode	src/security/validity-period.cpp	/^ValidityPeriod::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::security::ValidityPeriod
wireEncode	src/selectors.cpp	/^Selectors::wireEncode() const$/;"	f	class:ndn::Selectors
wireEncode	src/selectors.cpp	/^Selectors::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::Selectors
wireEncode	src/signature-info.cpp	/^SignatureInfo::wireEncode() const$/;"	f	class:ndn::SignatureInfo
wireEncode	src/signature-info.cpp	/^SignatureInfo::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::SignatureInfo
wireEncode	tests/unit-tests/util/simple-notification.hpp	/^  wireEncode() const$/;"	f	class:ndn::util::tests::SimpleNotification
wireReset	src/management/nfd-face-event-notification.cpp	/^FaceEventNotification::wireReset() const$/;"	f	class:ndn::nfd::FaceEventNotification
wireReset	src/management/nfd-face-status.cpp	/^FaceStatus::wireReset() const$/;"	f	class:ndn::nfd::FaceStatus
write	src/encoding/buffer-stream.hpp	/^  write(const char_type* s, std::streamsize n)$/;"	f	class:ndn::iostreams::buffer_append_device
writeNonNegativeInteger	src/encoding/tlv.hpp	/^writeNonNegativeInteger(std::ostream& os, uint64_t varNumber)$/;"	f	namespace:ndn::tlv
writeVarNumber	src/encoding/tlv.hpp	/^writeVarNumber(std::ostream& os, uint64_t varNumber)$/;"	f	namespace:ndn::tlv
~AccumulatorType	tools/ndnsec/util.hpp	/^  ~AccumulatorType()$/;"	f	class:AccumulatorType
~CFReleaser	src/security/sec-tpm-osx.cpp	/^  ~CFReleaser()$/;"	f	class:ndn::CFReleaser
~CanonizeProvider	src/util/face-uri.cpp	/^  ~CanonizeProvider()$/;"	f	class:ndn::util::CanonizeProvider
~Certificate	src/security/certificate.cpp	/^Certificate::~Certificate()$/;"	f	class:ndn::Certificate
~CertificateCache	src/security/certificate-cache.hpp	/^  ~CertificateCache()$/;"	f	class:ndn::CertificateCache
~CertificateCacheTtl	src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::~CertificateCacheTtl()$/;"	f	class:ndn::CertificateCacheTtl
~CertificateExtension	src/security/certificate-extension.hpp	/^  ~CertificateExtension()$/;"	f	class:ndn::CertificateExtension
~Checker	src/security/conf/checker.hpp	/^  ~Checker()$/;"	f	class:ndn::security::conf::Checker
~CommandInterestGenerator	src/util/command-interest-generator.hpp	/^  ~CommandInterestGenerator()$/;"	f	class:ndn::CommandInterestGenerator
~CommandInterestValidator	src/util/command-interest-validator.hpp	/^  ~CommandInterestValidator()$/;"	f	class:ndn::CommandInterestValidator
~ConfigFile	src/util/config-file.cpp	/^ConfigFile::~ConfigFile()$/;"	f	class:ndn::ConfigFile
~CustomClock	src/util/time-custom-clock.hpp	/^  virtual ~CustomClock()$/;"	f	class:ndn::time::CustomClock
~DataIdentityFixture	tests/unit-tests/data.t.cpp	/^  ~DataIdentityFixture()$/;"	f	class:ndn::tests::DataIdentityFixture
~DirTestFixture	tests/unit-tests/security/validator-config.t.cpp	/^  ~DirTestFixture()$/;"	f	struct:ndn::tests::DirTestFixture
~Dispatcher	src/mgmt/dispatcher.cpp	/^Dispatcher::~Dispatcher()$/;"	f	class:ndn::mgmt::Dispatcher
~FacesFixture	tests/unit-tests/security/validator-config.t.cpp	/^  ~FacesFixture()$/;"	f	struct:ndn::tests::FacesFixture
~Filter	src/security/conf/filter.hpp	/^  ~Filter()$/;"	f	class:ndn::security::conf::Filter
~IdentityFixture	tests/unit-tests/security/identity-fixture.cpp	/^  ~IdentityFixture()$/;"	f	class:ndn::security::IdentityFixture
~IdentityManagementFixture	tests/identity-management-fixture.cpp	/^IdentityManagementFixture::~IdentityManagementFixture()$/;"	f	class:ndn::security::IdentityManagementFixture
~IdentityManagementTimeFixture	tests/unit-tests/identity-management-time-fixture.cpp	/^IdentityManagementTimeFixture::~IdentityManagementTimeFixture()$/;"	f	class:ndn::security::IdentityManagementTimeFixture
~InMemoryStorage	src/util/in-memory-storage.cpp	/^InMemoryStorage::~InMemoryStorage()$/;"	f	class:ndn::util::InMemoryStorage
~InMemoryStorageFifo	src/util/in-memory-storage-fifo.cpp	/^InMemoryStorageFifo::~InMemoryStorageFifo()$/;"	f	class:ndn::util::InMemoryStorageFifo
~InMemoryStorageLfu	src/util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::~InMemoryStorageLfu()$/;"	f	class:ndn::util::InMemoryStorageLfu
~InMemoryStorageLru	src/util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::~InMemoryStorageLru()$/;"	f	class:ndn::util::InMemoryStorageLru
~InMemoryStoragePersistent	src/util/in-memory-storage-persistent.cpp	/^InMemoryStoragePersistent::~InMemoryStoragePersistent()$/;"	f	class:ndn::util::InMemoryStoragePersistent
~IndentedStream	src/util/indented-stream.cpp	/^IndentedStream::~IndentedStream()$/;"	f	class:ndn::util::IndentedStream
~KeyChain	src/security/key-chain.cpp	/^KeyChain::~KeyChain()$/;"	f	class:ndn::security::KeyChain
~KeyLocatorChecker	src/security/conf/key-locator-checker.hpp	/^  ~KeyLocatorChecker()$/;"	f	class:ndn::security::conf::KeyLocatorChecker
~KeyParams	src/security/key-params.hpp	/^  ~KeyParams()$/;"	f	class:ndn::KeyParams
~NetworkMonitor	src/util/network-monitor.cpp	/^NetworkMonitor::~NetworkMonitor()$/;"	f	class:ndn::util::NetworkMonitor
~NotificationStream	src/util/notification-stream.hpp	/^  ~NotificationStream()$/;"	f	class:ndn::util::NotificationStream
~NotificationSubscriber	src/util/notification-subscriber.hpp	/^  ~NotificationSubscriber()$/;"	f	class:ndn::util::NotificationSubscriber
~OsxKeyChainTestFixture	tests/unit-tests/security/sec-tpm-osx.t.cpp	/^  ~OsxKeyChainTestFixture()$/;"	f	class:ndn::tests::OsxKeyChainTestFixture
~Pib	src/security/pib.cpp	/^Pib::~Pib()$/;"	f	class:ndn::security::Pib
~PibImpl	src/security/pib-impl.hpp	/^  ~PibImpl()$/;"	f	class:ndn::security::PibImpl
~PibSqlite3	src/security/pib-sqlite3.cpp	/^PibSqlite3::~PibSqlite3()$/;"	f	class:ndn::security::PibSqlite3
~PibSqlite3TestFixture	tests/unit-tests/security/pib-sqlite3.t.cpp	/^  ~PibSqlite3TestFixture()$/;"	f	class:ndn::security::tests::PibSqlite3TestFixture
~PibSqlite3Wrapper	tests/unit-tests/security/pib-impl.t.cpp	/^  ~PibSqlite3Wrapper()$/;"	f	class:ndn::security::tests::PibSqlite3Wrapper
~PibTmpPathFixture	tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^  ~PibTmpPathFixture()$/;"	f	class:ndn::tests::PibTmpPathFixture
~RegexBackrefManager	src/util/regex/regex-backref-manager.hpp	/^RegexBackrefManager::~RegexBackrefManager()$/;"	f	class:ndn::RegexBackrefManager
~RegexBackrefMatcher	src/util/regex/regex-backref-matcher.hpp	/^  ~RegexBackrefMatcher()$/;"	f	class:ndn::RegexBackrefMatcher
~RegexComponentMatcher	src/util/regex/regex-component-matcher.hpp	/^  ~RegexComponentMatcher()$/;"	f	class:ndn::RegexComponentMatcher
~RegexComponentSetMatcher	src/util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::~RegexComponentSetMatcher()$/;"	f	class:ndn::RegexComponentSetMatcher
~RegexMatcher	src/util/regex/regex-matcher.hpp	/^RegexMatcher::~RegexMatcher()$/;"	f	class:ndn::RegexMatcher
~RegexNameFilter	src/security/conf/filter.hpp	/^  ~RegexNameFilter()$/;"	f	class:ndn::security::conf::RegexNameFilter
~RegexPatternListMatcher	src/util/regex/regex-pattern-list-matcher.hpp	/^  ~RegexPatternListMatcher()$/;"	f	class:ndn::RegexPatternListMatcher
~RegexPseudoMatcher	src/util/regex/regex-pseudo-matcher.hpp	/^  ~RegexPseudoMatcher()$/;"	f	class:ndn::RegexPseudoMatcher
~RegexRepeatMatcher	src/util/regex/regex-repeat-matcher.hpp	/^  ~RegexRepeatMatcher()$/;"	f	class:ndn::RegexRepeatMatcher
~RegexTopMatcher	src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::~RegexTopMatcher()$/;"	f	class:ndn::RegexTopMatcher
~RelationNameFilter	src/security/conf/filter.hpp	/^  ~RelationNameFilter()$/;"	f	class:ndn::security::conf::RelationNameFilter
~Rule	src/security/conf/rule.hpp	/^  ~Rule()$/;"	f	class:ndn::security::conf::Rule
~ScopedConnection	src/util/signal-scoped-connection.cpp	/^ScopedConnection::~ScopedConnection()$/;"	f	class:ndn::util::signal::ScopedConnection
~ScopedEventId	src/util/scheduler-scoped-event-id.cpp	/^ScopedEventId::~ScopedEventId()$/;"	f	class:ndn::util::scheduler::ScopedEventId
~SecPublicInfo	src/security/sec-public-info.cpp	/^SecPublicInfo::~SecPublicInfo()$/;"	f	class:ndn::SecPublicInfo
~SecPublicInfoSqlite3	src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::~SecPublicInfoSqlite3()$/;"	f	class:ndn::SecPublicInfoSqlite3
~SecRule	src/security/sec-rule.hpp	/^  ~SecRule()$/;"	f	class:ndn::SecRule
~SecRuleRelative	src/security/sec-rule-relative.cpp	/^SecRuleRelative::~SecRuleRelative()$/;"	f	class:ndn::SecRuleRelative
~SecRuleSpecific	src/security/sec-rule-specific.hpp	/^  ~SecRuleSpecific() {};$/;"	f	class:ndn::SecRuleSpecific
~SecTpm	src/security/sec-tpm.cpp	/^SecTpm::~SecTpm()$/;"	f	class:ndn::SecTpm
~SecTpmFile	src/security/sec-tpm-file.cpp	/^SecTpmFile::~SecTpmFile()$/;"	f	class:ndn::SecTpmFile
~SecTpmOsx	src/security/sec-tpm-osx.cpp	/^SecTpmOsx::~SecTpmOsx()$/;"	f	class:ndn::SecTpmOsx
~SecuredBag	src/security/secured-bag.cpp	/^SecuredBag::~SecuredBag()$/;"	f	class:ndn::SecuredBag
~Signal	src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::~Signal()$/;"	f	class:ndn::util::signal::Signal
~SimpleNotification	tests/unit-tests/util/simple-notification.hpp	/^  ~SimpleNotification()$/;"	f	class:ndn::util::tests::SimpleNotification
~Sqlite3Statement	src/util/sqlite3-statement.cpp	/^Sqlite3Statement::~Sqlite3Statement()$/;"	f	class:ndn::util::Sqlite3Statement
~Sqlite3StatementTestFixture	tests/unit-tests/util/sqlite3-statement.t.cpp	/^  ~Sqlite3StatementTestFixture()$/;"	f	class:ndn::util::tests::Sqlite3StatementTestFixture
~Tag	src/tag.hpp	/^Tag::~Tag()$/;"	f	class:ndn::Tag
~TcpTransport	src/transport/tcp-transport.cpp	/^TcpTransport::~TcpTransport()$/;"	f	class:ndn::TcpTransport
~TestHomeEnvironmentFixture	tests/unit-tests/util/test-home-environment-fixture.hpp	/^  ~TestHomeEnvironmentFixture()$/;"	f	class:ndn::util::TestHomeEnvironmentFixture
~Transport	src/transport/transport.hpp	/^Transport::~Transport()$/;"	f	class:ndn::Transport
~UnitTestTimeFixture	tests/unit-tests/unit-test-time-fixture.hpp	/^  ~UnitTestTimeFixture()$/;"	f	class:ndn::tests::UnitTestTimeFixture
~UnitTestTimeFixture	tests/unit-tests/util/time-unit-test-clock.t.cpp	/^  ~UnitTestTimeFixture()$/;"	f	class:ndn::tests::UnitTestTimeFixture
~UnixTransport	src/transport/unix-transport.cpp	/^UnixTransport::~UnixTransport()$/;"	f	class:ndn::UnixTransport
~ValidationRequest	src/security/validation-request.hpp	/^  ~ValidationRequest()$/;"	f	class:ndn::ValidationRequest
~ValidatorConfig	src/security/validator-config.hpp	/^  ~ValidatorConfig()$/;"	f	class:ndn::ValidatorConfig
~ValidatorNull	src/security/validator-null.hpp	/^  ~ValidatorNull()$/;"	f	class:ndn::ValidatorNull
~ValidatorRegex	src/security/validator-regex.hpp	/^  ~ValidatorRegex()$/;"	f	class:ndn::ValidatorRegex
