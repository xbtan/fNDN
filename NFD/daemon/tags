!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADJUST_PREDICT_DOWN_SHIFT	fw/ncc-strategy.hpp	/^    static const int ADJUST_PREDICT_DOWN_SHIFT = 7;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
ADJUST_PREDICT_UP_SHIFT	fw/ncc-strategy.hpp	/^    static const int ADJUST_PREDICT_UP_SHIFT = 3;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
AccessStrategy	fw/access-strategy.cpp	/^AccessStrategy::AccessStrategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::AccessStrategy
AccessStrategy	fw/access-strategy.hpp	/^class AccessStrategy : public Strategy$/;"	c	namespace:nfd::fw
AnyEntry	table/measurements.hpp	/^class AnyEntry$/;"	c	namespace:nfd::measurements
AnyEntry	table/name-tree.hpp	/^struct AnyEntry {$/;"	s	namespace:nfd::name_tree
AnyEntrySubTree	table/name-tree.hpp	/^struct AnyEntrySubTree {$/;"	s	namespace:nfd::name_tree
BestRouteStrategy	fw/best-route-strategy.cpp	/^BestRouteStrategy::BestRouteStrategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::BestRouteStrategy
BestRouteStrategy	fw/best-route-strategy.hpp	/^class BestRouteStrategy : public Strategy$/;"	c	namespace:nfd::fw
BestRouteStrategy2	fw/best-route-strategy2.cpp	/^BestRouteStrategy2::BestRouteStrategy2(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::BestRouteStrategy2
BestRouteStrategy2	fw/best-route-strategy2.hpp	/^class BestRouteStrategy2 : public Strategy$/;"	c	namespace:nfd::fw
BroadcastStrategy	fw/broadcast-strategy.cpp	/^BroadcastStrategy::BroadcastStrategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::BroadcastStrategy
BroadcastStrategy	fw/broadcast-strategy.hpp	/^class BroadcastStrategy : public MulticastStrategy$/;"	c	namespace:nfd::fw
ByteCounter	face/face-counters.hpp	/^  ByteCounter()$/;"	f	class:nfd::ByteCounter
ByteCounter	face/face-counters.hpp	/^class ByteCounter : noncopyable$/;"	c	namespace:nfd
CAPACITY_DOWN	table/dead-nonce-list.cpp	/^const double DeadNonceList::CAPACITY_DOWN = 0.9;$/;"	m	class:nfd::DeadNonceList	file:
CAPACITY_DOWN	table/dead-nonce-list.hpp	/^  static const double CAPACITY_DOWN;$/;"	m	class:nfd::DeadNonceList
CAPACITY_UP	table/dead-nonce-list.cpp	/^const double DeadNonceList::CAPACITY_UP = 1.2;$/;"	m	class:nfd::DeadNonceList	file:
CAPACITY_UP	table/dead-nonce-list.hpp	/^  static const double CAPACITY_UP;$/;"	m	class:nfd::DeadNonceList
CLOSING	face/transport.hpp	/^  CLOSING, \/\/\/< the transport is requested to be closed$/;"	m	class:nfd::face::TransportState
Channel	face/channel.hpp	/^class Channel : noncopyable$/;"	c	namespace:nfd
CityHash	table/name-tree.cpp	/^typedef boost::mpl::if_c<sizeof(size_t) >= 8, Hash64, Hash32>::type CityHash;$/;"	t	namespace:nfd::name_tree	file:
ClientControlStrategy	fw/client-control-strategy.cpp	/^ClientControlStrategy::ClientControlStrategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::ClientControlStrategy
ClientControlStrategy	fw/client-control-strategy.hpp	/^class ClientControlStrategy : public BestRouteStrategy$/;"	c	namespace:nfd::fw
CommandValidator	mgmt/command-validator.cpp	/^CommandValidator::CommandValidator()$/;"	f	class:nfd::CommandValidator
CommandValidator	mgmt/command-validator.hpp	/^class CommandValidator$/;"	c	namespace:nfd
ConnectFailedCallback	face/channel.hpp	/^  typedef function<void(const std::string& reason)> ConnectFailedCallback;$/;"	t	class:nfd::Channel
ControlCommandHandler	mgmt/manager-base.hpp	/^                        const ndn::mgmt::CommandContinuation done)> ControlCommandHandler;$/;"	t	class:nfd::ManagerBase
Cs	table/cs.cpp	/^Cs::Cs(size_t nMaxPackets, unique_ptr<Policy> policy)$/;"	f	class:nfd::cs::Cs
Cs	table/cs.hpp	/^class Cs : noncopyable$/;"	c	namespace:nfd::cs
DECL_CLASS_FINAL	face/lp-face.hpp	/^DECL_CLASS_FINAL$/;"	c	namespace:nfd::face
DECL_OVERRIDE	face/datagram-transport.hpp	/^  doClose() DECL_OVERRIDE;$/;"	m	class:nfd::face::DatagramTransport
DECL_OVERRIDE	face/datagram-transport.hpp	/^  doSend(Transport::Packet&& packet) DECL_OVERRIDE;$/;"	m	class:nfd::face::DatagramTransport
DECL_OVERRIDE	face/ethernet-face.hpp	/^  close() DECL_OVERRIDE;$/;"	m	class:nfd::EthernetFace
DECL_OVERRIDE	face/ethernet-face.hpp	/^  sendData(const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::EthernetFace
DECL_OVERRIDE	face/ethernet-face.hpp	/^  sendInterest(const Interest& interest) DECL_OVERRIDE;$/;"	m	class:nfd::EthernetFace
DECL_OVERRIDE	face/ethernet-factory.hpp	/^             const FaceCreationFailedCallback& onConnectFailed) DECL_OVERRIDE;$/;"	m	class:nfd::EthernetFactory
DECL_OVERRIDE	face/ethernet-factory.hpp	/^  getChannels() const DECL_OVERRIDE;$/;"	m	class:nfd::EthernetFactory
DECL_OVERRIDE	face/generic-link-service.hpp	/^  doReceivePacket(Transport::Packet&& packet) DECL_OVERRIDE;$/;"	m	class:nfd::face::GenericLinkService
DECL_OVERRIDE	face/generic-link-service.hpp	/^  doSendData(const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::face::GenericLinkService
DECL_OVERRIDE	face/generic-link-service.hpp	/^  doSendInterest(const Interest& interest) DECL_OVERRIDE;$/;"	m	class:nfd::face::GenericLinkService
DECL_OVERRIDE	face/generic-link-service.hpp	/^  doSendNack(const ndn::lp::Nack& nack) DECL_OVERRIDE;$/;"	m	class:nfd::face::GenericLinkService
DECL_OVERRIDE	face/internal-transport.hpp	/^  doClose() DECL_OVERRIDE;$/;"	m	class:nfd::face::InternalForwarderTransport
DECL_OVERRIDE	face/internal-transport.hpp	/^  doSend(Packet&& packet) DECL_OVERRIDE;$/;"	m	class:nfd::face::InternalForwarderTransport
DECL_OVERRIDE	face/internal-transport.hpp	/^  receiveFromLink(const Block& packet) DECL_OVERRIDE;$/;"	m	class:nfd::face::InternalClientTransport
DECL_OVERRIDE	face/internal-transport.hpp	/^  receiveFromLink(const Block& packet) DECL_OVERRIDE;$/;"	m	class:nfd::face::InternalForwarderTransport
DECL_OVERRIDE	face/internal-transport.hpp	/^  send(const Block& header, const Block& payload) DECL_OVERRIDE;$/;"	m	class:nfd::face::InternalClientTransport
DECL_OVERRIDE	face/internal-transport.hpp	/^  send(const Block& wire) DECL_OVERRIDE;$/;"	m	class:nfd::face::InternalClientTransport
DECL_OVERRIDE	face/lp-face-wrapper.hpp	/^  close() DECL_OVERRIDE;$/;"	m	class:nfd::face::LpFaceWrapper
DECL_OVERRIDE	face/lp-face-wrapper.hpp	/^  getCounters() const DECL_OVERRIDE;$/;"	m	class:nfd::face::LpFaceWrapper
DECL_OVERRIDE	face/lp-face-wrapper.hpp	/^  isUp() const DECL_OVERRIDE;$/;"	m	class:nfd::face::LpFaceWrapper
DECL_OVERRIDE	face/lp-face-wrapper.hpp	/^  sendData(const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::face::LpFaceWrapper
DECL_OVERRIDE	face/lp-face-wrapper.hpp	/^  sendInterest(const Interest& interest) DECL_OVERRIDE;$/;"	m	class:nfd::face::LpFaceWrapper
DECL_OVERRIDE	face/lp-face-wrapper.hpp	/^  sendNack(const lp::Nack& nack) DECL_OVERRIDE;$/;"	m	class:nfd::face::LpFaceWrapper
DECL_OVERRIDE	face/lp-face-wrapper.hpp	/^  setId(nfd::FaceId faceId) DECL_OVERRIDE;$/;"	m	class:nfd::face::LpFaceWrapper
DECL_OVERRIDE	face/lp-face-wrapper.hpp	/^  setPersistency(ndn::nfd::FacePersistency persistency) DECL_OVERRIDE;$/;"	m	class:nfd::face::LpFaceWrapper
DECL_OVERRIDE	face/multicast-udp-transport.hpp	/^  doClose() DECL_OVERRIDE;$/;"	m	class:nfd::face::MulticastUdpTransport
DECL_OVERRIDE	face/multicast-udp-transport.hpp	/^  doSend(Transport::Packet&& packet) DECL_OVERRIDE;$/;"	m	class:nfd::face::MulticastUdpTransport
DECL_OVERRIDE	face/null-face.hpp	/^  close() DECL_OVERRIDE;$/;"	m	class:nfd::NullFace
DECL_OVERRIDE	face/null-face.hpp	/^  sendData(const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::NullFace
DECL_OVERRIDE	face/null-face.hpp	/^  sendInterest(const Interest& interest) DECL_OVERRIDE;$/;"	m	class:nfd::NullFace
DECL_OVERRIDE	face/stream-face.hpp	/^  close() DECL_OVERRIDE;$/;"	m	class:nfd::StreamFace
DECL_OVERRIDE	face/stream-face.hpp	/^  sendData(const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::StreamFace
DECL_OVERRIDE	face/stream-face.hpp	/^  sendInterest(const Interest& interest) DECL_OVERRIDE;$/;"	m	class:nfd::StreamFace
DECL_OVERRIDE	face/stream-transport.hpp	/^  doClose() DECL_OVERRIDE;$/;"	m	class:nfd::face::StreamTransport
DECL_OVERRIDE	face/stream-transport.hpp	/^  doSend(Transport::Packet&& packet) DECL_OVERRIDE;$/;"	m	class:nfd::face::StreamTransport
DECL_OVERRIDE	face/tcp-factory.hpp	/^             const FaceCreationFailedCallback& onConnectFailed) DECL_OVERRIDE;$/;"	m	class:nfd::TcpFactory
DECL_OVERRIDE	face/tcp-factory.hpp	/^  getChannels() const DECL_OVERRIDE;$/;"	m	class:nfd::TcpFactory
DECL_OVERRIDE	face/udp-factory.hpp	/^             const FaceCreationFailedCallback& onConnectFailed) DECL_OVERRIDE;$/;"	m	class:nfd::UdpFactory
DECL_OVERRIDE	face/udp-factory.hpp	/^  getChannels() const DECL_OVERRIDE;$/;"	m	class:nfd::UdpFactory
DECL_OVERRIDE	face/unix-stream-channel.hpp	/^  ~UnixStreamChannel() DECL_OVERRIDE;$/;"	m	class:nfd::UnixStreamChannel
DECL_OVERRIDE	face/unix-stream-factory.hpp	/^             const FaceCreationFailedCallback& onConnectFailed) DECL_OVERRIDE;$/;"	m	class:nfd::UnixStreamFactory
DECL_OVERRIDE	face/unix-stream-factory.hpp	/^  getChannels() const DECL_OVERRIDE;$/;"	m	class:nfd::UnixStreamFactory
DECL_OVERRIDE	face/websocket-face.hpp	/^  close() DECL_OVERRIDE;$/;"	m	class:nfd::WebSocketFace
DECL_OVERRIDE	face/websocket-face.hpp	/^  sendData(const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::WebSocketFace
DECL_OVERRIDE	face/websocket-face.hpp	/^  sendInterest(const Interest& interest) DECL_OVERRIDE;$/;"	m	class:nfd::WebSocketFace
DECL_OVERRIDE	face/websocket-factory.hpp	/^             const FaceCreationFailedCallback& onConnectFailed) DECL_OVERRIDE;$/;"	m	class:nfd::WebSocketFactory
DECL_OVERRIDE	face/websocket-factory.hpp	/^  getChannels() const DECL_OVERRIDE;$/;"	m	class:nfd::WebSocketFactory
DECL_OVERRIDE	fw/access-strategy.hpp	/^                        const Face& inFace, const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::fw::AccessStrategy
DECL_OVERRIDE	fw/access-strategy.hpp	/^                       shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::AccessStrategy
DECL_OVERRIDE	fw/best-route-strategy.hpp	/^                       shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::BestRouteStrategy
DECL_OVERRIDE	fw/best-route-strategy2.hpp	/^                       shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::BestRouteStrategy2
DECL_OVERRIDE	fw/best-route-strategy2.hpp	/^                   shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::BestRouteStrategy2
DECL_OVERRIDE	fw/broadcast-strategy.hpp	/^                       shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::BroadcastStrategy
DECL_OVERRIDE	fw/client-control-strategy.hpp	/^                       shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::ClientControlStrategy
DECL_OVERRIDE	fw/multicast-strategy.hpp	/^                       shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::MulticastStrategy
DECL_OVERRIDE	fw/ncc-strategy.hpp	/^                        const Face& inFace, const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::fw::NccStrategy
DECL_OVERRIDE	fw/ncc-strategy.hpp	/^                       shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::NccStrategy
DECL_OVERRIDE	fw/retx-suppression-exponential.hpp	/^         pit::Entry& pitEntry) const DECL_OVERRIDE;$/;"	m	class:nfd::fw::RetxSuppressionExponential
DECL_OVERRIDE	fw/retx-suppression-fixed.hpp	/^         pit::Entry& pitEntry) const DECL_OVERRIDE;$/;"	m	class:nfd::fw::RetxSuppressionFixed
DECL_OVERRIDE	table/cs-policy-lru.hpp	/^  doAfterInsert(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::lru::LruPolicy
DECL_OVERRIDE	table/cs-policy-lru.hpp	/^  doAfterRefresh(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::lru::LruPolicy
DECL_OVERRIDE	table/cs-policy-lru.hpp	/^  doBeforeErase(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::lru::LruPolicy
DECL_OVERRIDE	table/cs-policy-lru.hpp	/^  doBeforeUse(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::lru::LruPolicy
DECL_OVERRIDE	table/cs-policy-lru.hpp	/^  evictEntries() DECL_OVERRIDE;$/;"	m	class:nfd::cs::lru::LruPolicy
DECL_OVERRIDE	table/cs-policy-priority-fifo.hpp	/^  doAfterInsert(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
DECL_OVERRIDE	table/cs-policy-priority-fifo.hpp	/^  doAfterRefresh(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
DECL_OVERRIDE	table/cs-policy-priority-fifo.hpp	/^  doBeforeErase(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
DECL_OVERRIDE	table/cs-policy-priority-fifo.hpp	/^  doBeforeUse(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
DECL_OVERRIDE	table/cs-policy-priority-fifo.hpp	/^  evictEntries() DECL_OVERRIDE;$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
DEFAULT_CS_MAX_PACKETS	mgmt/tables-config-section.cpp	/^const size_t TablesConfigSection::DEFAULT_CS_MAX_PACKETS = 65536;$/;"	m	class:nfd::TablesConfigSection	file:
DEFAULT_CS_MAX_PACKETS	mgmt/tables-config-section.hpp	/^  static const size_t DEFAULT_CS_MAX_PACKETS;$/;"	m	class:nfd::TablesConfigSection
DEFAULT_INITIAL_INTERVAL	fw/retx-suppression-exponential.cpp	/^const RetxSuppressionExponential::Duration RetxSuppressionExponential::DEFAULT_INITIAL_INTERVAL =$/;"	m	class:nfd::fw::RetxSuppressionExponential	file:
DEFAULT_INITIAL_INTERVAL	fw/retx-suppression-exponential.hpp	/^  static const Duration DEFAULT_INITIAL_INTERVAL;$/;"	m	class:nfd::fw::RetxSuppressionExponential
DEFAULT_LIFETIME	table/dead-nonce-list.cpp	/^const time::nanoseconds DeadNonceList::DEFAULT_LIFETIME = time::seconds(6);$/;"	m	class:nfd::DeadNonceList	file:
DEFAULT_LIFETIME	table/dead-nonce-list.hpp	/^  static const time::nanoseconds DEFAULT_LIFETIME;$/;"	m	class:nfd::DeadNonceList
DEFAULT_MAX_INTERVAL	fw/retx-suppression-exponential.cpp	/^const RetxSuppressionExponential::Duration RetxSuppressionExponential::DEFAULT_MAX_INTERVAL =$/;"	m	class:nfd::fw::RetxSuppressionExponential	file:
DEFAULT_MAX_INTERVAL	fw/retx-suppression-exponential.hpp	/^  static const Duration DEFAULT_MAX_INTERVAL;$/;"	m	class:nfd::fw::RetxSuppressionExponential
DEFAULT_MIN_RETX_INTERVAL	fw/retx-suppression-fixed.hpp	/^  static const time::milliseconds DEFAULT_MIN_RETX_INTERVAL;$/;"	m	class:nfd::fw::RetxSuppressionFixed
DEFAULT_MULTIPLIER	fw/retx-suppression-exponential.cpp	/^const float RetxSuppressionExponential::DEFAULT_MULTIPLIER = 2.0;$/;"	m	class:nfd::fw::RetxSuppressionExponential	file:
DEFAULT_MULTIPLIER	fw/retx-suppression-exponential.hpp	/^  static const float DEFAULT_MULTIPLIER;$/;"	m	class:nfd::fw::RetxSuppressionExponential
DEFER_FIRST_WITHOUT_BEST_FACE	fw/ncc-strategy.cpp	/^const time::microseconds NccStrategy::DEFER_FIRST_WITHOUT_BEST_FACE = time::microseconds(4000);$/;"	m	class:nfd::fw::NccStrategy	file:
DEFER_FIRST_WITHOUT_BEST_FACE	fw/ncc-strategy.hpp	/^  static const time::microseconds DEFER_FIRST_WITHOUT_BEST_FACE;$/;"	m	class:nfd::fw::NccStrategy
DEFER_RANGE_WITHOUT_BEST_FACE	fw/ncc-strategy.cpp	/^const time::microseconds NccStrategy::DEFER_RANGE_WITHOUT_BEST_FACE = time::microseconds(75000);$/;"	m	class:nfd::fw::NccStrategy	file:
DEFER_RANGE_WITHOUT_BEST_FACE	fw/ncc-strategy.hpp	/^  static const time::microseconds DEFER_RANGE_WITHOUT_BEST_FACE;$/;"	m	class:nfd::fw::NccStrategy
DOWN	face/transport.hpp	/^  DOWN, \/\/\/< the transport is down temporarily, and is being recovered$/;"	m	class:nfd::face::TransportState
DUPLICATE_NONCE_IN_OTHER	table/pit-entry.hpp	/^  DUPLICATE_NONCE_IN_OTHER  = (1 << 1),$/;"	e	enum:nfd::pit::DuplicateNonceWhere
DUPLICATE_NONCE_IN_SAME	table/pit-entry.hpp	/^  DUPLICATE_NONCE_IN_SAME   = (1 << 0),$/;"	e	enum:nfd::pit::DuplicateNonceWhere
DUPLICATE_NONCE_NONE	table/pit-entry.hpp	/^  DUPLICATE_NONCE_NONE      = 0,$/;"	e	enum:nfd::pit::DuplicateNonceWhere
DUPLICATE_NONCE_OUT_OTHER	table/pit-entry.hpp	/^  DUPLICATE_NONCE_OUT_OTHER = (1 << 3)$/;"	e	enum:nfd::pit::DuplicateNonceWhere
DUPLICATE_NONCE_OUT_SAME	table/pit-entry.hpp	/^  DUPLICATE_NONCE_OUT_SAME  = (1 << 2),$/;"	e	enum:nfd::pit::DuplicateNonceWhere
DataMatchResult	table/pit.hpp	/^typedef std::vector<shared_ptr<pit::Entry>> DataMatchResult;$/;"	t	namespace:nfd::pit
DatagramTransport	face/datagram-transport.hpp	/^DatagramTransport<T, U>::DatagramTransport(typename DatagramTransport::protocol::socket&& socket)$/;"	f	class:nfd::face::DatagramTransport
DatagramTransport	face/datagram-transport.hpp	/^class DatagramTransport : public Transport$/;"	c	namespace:nfd::face
DeadNonceList	table/dead-nonce-list.cpp	/^DeadNonceList::DeadNonceList(const time::nanoseconds& lifetime)$/;"	f	class:nfd::DeadNonceList
DeadNonceList	table/dead-nonce-list.hpp	/^class DeadNonceList : noncopyable$/;"	c	namespace:nfd
DuplicateNonceWhere	table/pit-entry.hpp	/^enum DuplicateNonceWhere {$/;"	g	namespace:nfd::pit
Duration	fw/retx-suppression-exponential.hpp	/^  typedef time::microseconds Duration;$/;"	t	class:nfd::fw::RetxSuppressionExponential
Duration	fw/rtt-estimator.hpp	/^  typedef time::microseconds Duration;$/;"	t	class:nfd::RttEstimator
EVICT_LIMIT	table/dead-nonce-list.cpp	/^const size_t DeadNonceList::EVICT_LIMIT = (1 << 6);$/;"	m	class:nfd::DeadNonceList	file:
EVICT_LIMIT	table/dead-nonce-list.hpp	/^  static const size_t EVICT_LIMIT;$/;"	m	class:nfd::DeadNonceList
EXPECTED_MARK_COUNT	table/dead-nonce-list.cpp	/^const size_t DeadNonceList::EXPECTED_MARK_COUNT = 5;$/;"	m	class:nfd::DeadNonceList	file:
EXPECTED_MARK_COUNT	table/dead-nonce-list.hpp	/^  static const size_t EXPECTED_MARK_COUNT;$/;"	m	class:nfd::DeadNonceList
Endpoint	face/tcp-channel.hpp	/^typedef boost::asio::ip::tcp::endpoint Endpoint;$/;"	t	namespace:nfd::tcp
Endpoint	face/udp-channel.hpp	/^typedef boost::asio::ip::udp::endpoint Endpoint;$/;"	t	namespace:nfd::udp
Endpoint	face/unix-stream-channel.hpp	/^typedef boost::asio::local::stream_protocol::endpoint Endpoint;$/;"	t	namespace:nfd::unix_stream
Endpoint	face/websocket-channel.hpp	/^typedef boost::asio::ip::tcp::endpoint Endpoint;$/;"	t	namespace:nfd::websocket
EndpointId	face/transport.hpp	/^  typedef uint64_t EndpointId;$/;"	t	class:nfd::face::Transport
Entry	table/cs-entry.hpp	/^class Entry$/;"	c	namespace:nfd::cs
Entry	table/dead-nonce-list.hpp	/^  typedef uint64_t Entry;$/;"	t	class:nfd::DeadNonceList
Entry	table/fib-entry.cpp	/^Entry::Entry(const Name& prefix)$/;"	f	class:nfd::fib::Entry
Entry	table/fib-entry.hpp	/^class Entry : noncopyable$/;"	c	namespace:nfd::fib
Entry	table/measurements-entry.cpp	/^Entry::Entry(const Name& name)$/;"	f	class:nfd::measurements::Entry
Entry	table/measurements-entry.hpp	/^class Entry : public StrategyInfoHost, noncopyable$/;"	c	namespace:nfd::measurements
Entry	table/name-tree-entry.cpp	/^Entry::Entry(const Name& name)$/;"	f	class:nfd::name_tree::Entry
Entry	table/name-tree-entry.hpp	/^class Entry : public enable_shared_from_this<Entry>, noncopyable$/;"	c	namespace:nfd::name_tree
Entry	table/pit-entry.cpp	/^Entry::Entry(const Interest& interest)$/;"	f	class:nfd::pit::Entry
Entry	table/pit-entry.hpp	/^class Entry : public StrategyInfoHost, noncopyable$/;"	c	namespace:nfd::pit
Entry	table/strategy-choice-entry.cpp	/^Entry::Entry(const Name& prefix)$/;"	f	class:nfd::strategy_choice::Entry
Entry	table/strategy-choice-entry.hpp	/^class Entry : noncopyable$/;"	c	namespace:nfd::strategy_choice
EntryFromEntryImpl	table/cs.hpp	/^  struct EntryFromEntryImpl$/;"	s	class:nfd::cs::Cs
EntryImpl	table/cs-entry-impl.cpp	/^EntryImpl::EntryImpl(const Name& name)$/;"	f	class:nfd::cs::EntryImpl
EntryImpl	table/cs-entry-impl.cpp	/^EntryImpl::EntryImpl(shared_ptr<const Data> data, bool isUnsolicited)$/;"	f	class:nfd::cs::EntryImpl
EntryImpl	table/cs-entry-impl.hpp	/^class EntryImpl : public Entry$/;"	c	namespace:nfd::cs
EntryInfo	table/cs-policy-priority-fifo.hpp	/^struct EntryInfo$/;"	s	namespace:nfd::cs::priority_fifo
EntryInfoMapFifo	table/cs-policy-priority-fifo.hpp	/^typedef std::map<iterator, EntryInfo*, EntryItComparator> EntryInfoMapFifo;$/;"	t	namespace:nfd::cs::priority_fifo
EntryItComparator	table/cs-policy-lru.hpp	/^struct EntryItComparator$/;"	s	namespace:nfd::cs::lru
EntryItComparator	table/cs-policy-priority-fifo.hpp	/^struct EntryItComparator$/;"	s	namespace:nfd::cs::priority_fifo
EntryPredicate	table/measurements.hpp	/^typedef std::function<bool(const Entry&)> EntryPredicate;$/;"	t	namespace:nfd::measurements
EntrySelector	table/name-tree.hpp	/^typedef function<bool (const Entry& entry)> EntrySelector;$/;"	t	namespace:nfd::name_tree
EntrySubTreeSelector	table/name-tree.hpp	/^typedef function<std::pair<bool,bool> (const Entry& entry)> EntrySubTreeSelector;$/;"	t	namespace:nfd::name_tree
EntryWithStrategyInfo	table/measurements.hpp	/^class EntryWithStrategyInfo$/;"	c	namespace:nfd::measurements
Error	face/ethernet-face.hpp	/^    Error(const std::string& what) : Face::Error(what) {}$/;"	f	struct:nfd::EthernetFace::Error
Error	face/ethernet-face.hpp	/^  struct Error : public Face::Error$/;"	s	class:nfd::EthernetFace
Error	face/ethernet-factory.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::EthernetFactory::Error
Error	face/ethernet-factory.hpp	/^  class Error : public ProtocolFactory::Error$/;"	c	class:nfd::EthernetFactory
Error	face/face.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::Face::Error
Error	face/face.hpp	/^  class Error : public std::runtime_error$/;"	c	class:nfd::Face
Error	face/protocol-factory.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::ProtocolFactory::Error
Error	face/protocol-factory.hpp	/^  class Error : public std::runtime_error$/;"	c	class:nfd::ProtocolFactory
Error	face/tcp-factory.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::TcpFactory::Error
Error	face/tcp-factory.hpp	/^  class Error : public ProtocolFactory::Error$/;"	c	class:nfd::TcpFactory
Error	face/udp-factory.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::UdpFactory::Error
Error	face/udp-factory.hpp	/^  class Error : public ProtocolFactory::Error$/;"	c	class:nfd::UdpFactory
Error	face/unix-stream-channel.hpp	/^    Error(const std::string& what) : std::runtime_error(what) {}$/;"	f	struct:nfd::UnixStreamChannel::Error
Error	face/unix-stream-channel.hpp	/^  struct Error : public std::runtime_error$/;"	s	class:nfd::UnixStreamChannel
Error	face/unix-stream-factory.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::UnixStreamFactory::Error
Error	face/unix-stream-factory.hpp	/^  class Error : public ProtocolFactory::Error$/;"	c	class:nfd::UnixStreamFactory
Error	face/websocket-factory.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::WebSocketFactory::Error
Error	face/websocket-factory.hpp	/^  class Error : public ProtocolFactory::Error$/;"	c	class:nfd::WebSocketFactory
Error	mgmt/command-validator.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::CommandValidator::Error
Error	mgmt/command-validator.hpp	/^  class Error : public std::runtime_error$/;"	c	class:nfd::CommandValidator
Error	mgmt/manager-base.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::ManagerBase::Error
Error	mgmt/manager-base.hpp	/^  class Error : public std::runtime_error$/;"	c	class:nfd::ManagerBase
EthernetFace	face/ethernet-face.cpp	/^EthernetFace::EthernetFace(boost::asio::posix::stream_descriptor socket,$/;"	f	class:nfd::EthernetFace
EthernetFace	face/ethernet-face.hpp	/^class EthernetFace : public Face$/;"	c	namespace:nfd
EthernetFactory	face/ethernet-factory.hpp	/^class EthernetFactory : public ProtocolFactory$/;"	c	namespace:nfd
ExtractLocalControlParametersResult	mgmt/face-manager.hpp	/^  struct ExtractLocalControlParametersResult$/;"	s	class:nfd::FaceManager
FACEID_CONTENT_STORE	face/face.hpp	/^const FaceId FACEID_CONTENT_STORE = 254;$/;"	m	namespace:nfd
FACEID_CONTENT_STORE	face/lp-face.hpp	/^const FaceId FACEID_CONTENT_STORE = 254;$/;"	m	namespace:nfd::face
FACEID_INTERNAL_FACE	face/face.hpp	/^const FaceId FACEID_INTERNAL_FACE = 1;$/;"	m	namespace:nfd
FACEID_INTERNAL_FACE	face/lp-face.hpp	/^const FaceId FACEID_INTERNAL_FACE = 1;$/;"	m	namespace:nfd::face
FACEID_NULL	face/face.hpp	/^const FaceId FACEID_NULL = 255;$/;"	m	namespace:nfd
FACEID_NULL	face/lp-face.hpp	/^const FaceId FACEID_NULL = 255;$/;"	m	namespace:nfd::face
FACEID_RESERVED_MAX	face/face.hpp	/^const FaceId FACEID_RESERVED_MAX = 255;$/;"	m	namespace:nfd
FACEID_RESERVED_MAX	face/lp-face.hpp	/^const FaceId FACEID_RESERVED_MAX = 255;$/;"	m	namespace:nfd::face
FAILED	face/transport.hpp	/^  FAILED, \/\/\/< the transport is being closed due to a failure$/;"	m	class:nfd::face::TransportState
FIND_ALL_MATCHES_TYPE	table/name-tree.hpp	/^    FIND_ALL_MATCHES_TYPE$/;"	e	enum:nfd::NameTree::IteratorType
FORWARD	fw/retx-suppression.hpp	/^    FORWARD,$/;"	e	enum:nfd::fw::RetxSuppression::Result
FULL_ENUMERATE_TYPE	table/name-tree.hpp	/^    FULL_ENUMERATE_TYPE,$/;"	e	enum:nfd::NameTree::IteratorType
Face	face/face.cpp	/^Face::Face(const FaceUri& remoteUri, const FaceUri& localUri, bool isLocal, bool isMultiAccess)$/;"	f	class:nfd::Face
Face	face/face.hpp	/^class Face : noncopyable, public enable_shared_from_this<Face>$/;"	c	namespace:nfd
FaceCounters	face/face-counters.hpp	/^class FaceCounters : public NetworkLayerCounters, public LinkLayerCounters$/;"	c	namespace:nfd
FaceCreatedCallback	face/channel.hpp	/^  typedef function<void(const shared_ptr<Face>& newFace)> FaceCreatedCallback;$/;"	t	class:nfd::Channel
FaceCreatedCallback	face/protocol-factory.hpp	/^typedef function<void(const shared_ptr<Face>& newFace)> FaceCreatedCallback;$/;"	t	namespace:nfd
FaceCreationFailedCallback	face/protocol-factory.hpp	/^typedef function<void(const std::string& reason)> FaceCreationFailedCallback;$/;"	t	namespace:nfd
FaceId	face/face.hpp	/^typedef int FaceId;$/;"	t	namespace:nfd
FaceId	face/lp-face.hpp	/^typedef uint64_t FaceId;$/;"	t	namespace:nfd::face
FaceInfo	fw/access-strategy.cpp	/^AccessStrategy::FaceInfo::FaceInfo()$/;"	f	class:nfd::fw::AccessStrategy::FaceInfo
FaceInfo	fw/access-strategy.hpp	/^  class FaceInfo$/;"	c	class:nfd::fw::AccessStrategy
FaceInfoTable	fw/access-strategy.hpp	/^  typedef std::unordered_map<FaceId, FaceInfo> FaceInfoTable;$/;"	t	class:nfd::fw::AccessStrategy
FaceLogHelper	face/face-log.hpp	/^  FaceLogHelper(const T& obj1)$/;"	f	class:nfd::face::FaceLogHelper
FaceLogHelper	face/face-log.hpp	/^class FaceLogHelper$/;"	c	namespace:nfd::face
FaceManager	mgmt/face-manager.cpp	/^FaceManager::FaceManager(FaceTable& faceTable,$/;"	f	class:nfd::FaceManager
FaceManager	mgmt/face-manager.hpp	/^class FaceManager : public ManagerBase$/;"	c	namespace:nfd
FaceMap	fw/face-table.hpp	/^  typedef std::map<FaceId, shared_ptr<Face>> FaceMap;$/;"	t	class:nfd::FaceTable
FaceRecord	table/pit-face-record.cpp	/^FaceRecord::FaceRecord(shared_ptr<Face> face)$/;"	f	class:nfd::pit::FaceRecord
FaceRecord	table/pit-face-record.hpp	/^class FaceRecord : public StrategyInfoHost$/;"	c	namespace:nfd::pit
FaceState	face/lp-face.hpp	/^typedef TransportState FaceState;$/;"	t	namespace:nfd::face
FaceTable	fw/face-table.cpp	/^FaceTable::FaceTable(Forwarder& forwarder)$/;"	f	class:nfd::FaceTable
FaceTable	fw/face-table.hpp	/^class FaceTable : noncopyable$/;"	c	namespace:nfd
Fib	table/fib.cpp	/^Fib::Fib(NameTree& nameTree)$/;"	f	class:nfd::Fib
Fib	table/fib.hpp	/^class Fib : noncopyable$/;"	c	namespace:nfd
FibManager	mgmt/fib-manager.cpp	/^FibManager::FibManager(Fib& fib,$/;"	f	class:nfd::FibManager
FibManager	mgmt/fib-manager.hpp	/^class FibManager : public ManagerBase$/;"	c	namespace:nfd
ForwardRange	fw/face-table.hpp	/^  typedef boost::select_second_const_range<FaceMap> ForwardRange;$/;"	t	class:nfd::FaceTable
Forwarder	fw/forwarder.cpp	/^Forwarder::Forwarder()$/;"	f	class:nfd::Forwarder
Forwarder	fw/forwarder.hpp	/^class Forwarder$/;"	c	namespace:nfd
ForwarderCounters	fw/forwarder-counters.hpp	/^class ForwarderCounters : public NetworkLayerCounters$/;"	c	namespace:nfd
ForwarderStatusManager	mgmt/forwarder-status-manager.cpp	/^ForwarderStatusManager::ForwarderStatusManager(Forwarder& forwarder, Dispatcher& dispatcher)$/;"	f	class:nfd::ForwarderStatusManager
ForwarderStatusManager	mgmt/forwarder-status-manager.hpp	/^class ForwarderStatusManager : noncopyable$/;"	c	namespace:nfd
GenericLinkService	face/generic-link-service.cpp	/^GenericLinkService::GenericLinkService(const GenericLinkService::Options& options)$/;"	f	class:nfd::face::GenericLinkService
GenericLinkService	face/generic-link-service.hpp	/^class GenericLinkService : public LinkService$/;"	c	namespace:nfd::face
Hash32	table/name-tree.cpp	/^class Hash32$/;"	c	namespace:nfd::name_tree	file:
Hash64	table/name-tree.cpp	/^class Hash64$/;"	c	namespace:nfd::name_tree	file:
Hash64	table/name-tree.cpp	/^typedef boost::mpl::if_c<sizeof(size_t) >= 8, Hash64, Hash32>::type CityHash;$/;"	t	namespace:nfd::name_tree	file:
Hashtable	table/dead-nonce-list.hpp	/^  typedef Index::nth_index<1>::type Hashtable;$/;"	t	class:nfd::DeadNonceList
HitCallback	table/cs.hpp	/^  typedef std::function<void(const Interest&, const Data& data)> HitCallback;$/;"	t	class:nfd::cs::Cs
INITIAL_CAPACITY	table/dead-nonce-list.cpp	/^const size_t DeadNonceList::INITIAL_CAPACITY = (1 << 7);$/;"	m	class:nfd::DeadNonceList	file:
INITIAL_CAPACITY	table/dead-nonce-list.hpp	/^  static const size_t INITIAL_CAPACITY;$/;"	m	class:nfd::DeadNonceList
INITIAL_PREDICTION	fw/ncc-strategy.cpp	/^const time::microseconds NccStrategy::MeasurementsEntryInfo::INITIAL_PREDICTION =$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo	file:
INITIAL_PREDICTION	fw/ncc-strategy.hpp	/^    static const time::microseconds INITIAL_PREDICTION;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
INTERNAL_CONFIG	nfd.cpp	/^static const std::string INTERNAL_CONFIG = "internal:\/\/nfd.conf";$/;"	m	namespace:nfd	file:
INVALID_FACEID	face/face.hpp	/^const FaceId INVALID_FACEID = -1;$/;"	m	namespace:nfd
INVALID_FACEID	face/lp-face.hpp	/^const FaceId INVALID_FACEID = 0;$/;"	m	namespace:nfd::face
InRecord	table/pit-in-record.cpp	/^InRecord::InRecord(shared_ptr<Face> face)$/;"	f	class:nfd::pit::InRecord
InRecord	table/pit-in-record.hpp	/^class InRecord : public FaceRecord$/;"	c	namespace:nfd::pit
InRecordCollection	table/pit-entry.hpp	/^typedef std::list< InRecord>  InRecordCollection;$/;"	t	namespace:nfd::pit
Index	table/dead-nonce-list.hpp	/^  > Index;$/;"	t	class:nfd::DeadNonceList
InternalClientTransport	face/internal-transport.hpp	/^class InternalClientTransport : public ndn::Transport, public InternalTransportBase$/;"	c	namespace:nfd::face
InternalForwarderTransport	face/internal-transport.cpp	/^InternalForwarderTransport::InternalForwarderTransport($/;"	f	class:nfd::face::InternalForwarderTransport
InternalForwarderTransport	face/internal-transport.hpp	/^class InternalForwarderTransport : public face::Transport, public InternalTransportBase$/;"	c	namespace:nfd::face
InternalTransportBase	face/internal-transport.hpp	/^class InternalTransportBase$/;"	c	namespace:nfd::face
IteratorType	table/name-tree.hpp	/^  enum IteratorType {$/;"	g	class:nfd::NameTree
LOCALHOP_NAME	table/pit-entry.hpp	/^  static const Name LOCALHOP_NAME;$/;"	m	class:nfd::pit::Entry
LOCALHOST_NAME	fw/forwarder.hpp	/^  static const Name LOCALHOST_NAME;$/;"	m	class:nfd::Forwarder
LOCALHOST_NAME	table/pit-entry.hpp	/^  static const Name LOCALHOST_NAME;$/;"	m	class:nfd::pit::Entry
LOCAL_CONTROL_FEATURE_ANY	face/local-face.hpp	/^  static const size_t LOCAL_CONTROL_FEATURE_ANY = 0; \/\/\/ any feature$/;"	m	class:nfd::LocalFace
LOCAL_CONTROL_FEATURE_MAX	face/local-face.hpp	/^  static const size_t LOCAL_CONTROL_FEATURE_MAX = 3; \/\/\/ upper bound of LocalControlFeature enum$/;"	m	class:nfd::LocalFace
LinkLayerCounters	face/face-counters.hpp	/^class LinkLayerCounters : noncopyable$/;"	c	namespace:nfd
LinkService	face/link-service.cpp	/^LinkService::LinkService()$/;"	f	class:nfd::face::LinkService
LinkService	face/link-service.hpp	/^class LinkService : noncopyable$/;"	c	namespace:nfd::face
LocalFace	face/local-face.hpp	/^LocalFace::LocalFace(const FaceUri& remoteUri, const FaceUri& localUri)$/;"	f	class:nfd::LocalFace
LocalFace	face/local-face.hpp	/^class LocalFace : public Face$/;"	c	namespace:nfd
LpFace	face/lp-face.cpp	/^LpFace::LpFace(unique_ptr<LinkService> service, unique_ptr<Transport> transport)$/;"	f	class:nfd::face::LpFace
LpFaceWrapper	face/lp-face-wrapper.cpp	/^LpFaceWrapper::LpFaceWrapper(unique_ptr<LpFace> face)$/;"	f	class:nfd::face::LpFaceWrapper
LpFaceWrapper	face/lp-face-wrapper.hpp	/^class LpFaceWrapper : public Face$/;"	c	namespace:nfd::face
LruPolicy	table/cs-policy-lru.cpp	/^LruPolicy::LruPolicy()$/;"	f	class:nfd::cs::lru::LruPolicy
LruPolicy	table/cs-policy-lru.hpp	/^class LruPolicy : public Policy$/;"	c	namespace:nfd::cs::lru
MARK	table/dead-nonce-list.cpp	/^const DeadNonceList::Entry DeadNonceList::MARK = 0;$/;"	m	class:nfd::DeadNonceList	file:
MARK	table/dead-nonce-list.hpp	/^  static const Entry MARK;$/;"	m	class:nfd::DeadNonceList
MAX_CAPACITY	table/dead-nonce-list.cpp	/^const size_t DeadNonceList::MAX_CAPACITY = (1 << 24);$/;"	m	class:nfd::DeadNonceList	file:
MAX_CAPACITY	table/dead-nonce-list.hpp	/^  static const size_t MAX_CAPACITY;$/;"	m	class:nfd::DeadNonceList
MAX_PREDICTION	fw/ncc-strategy.cpp	/^const time::microseconds NccStrategy::MeasurementsEntryInfo::MAX_PREDICTION =$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo	file:
MAX_PREDICTION	fw/ncc-strategy.hpp	/^    static const time::microseconds MAX_PREDICTION;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
MEASUREMENTS_LIFETIME	fw/ncc-strategy.cpp	/^const time::nanoseconds NccStrategy::MEASUREMENTS_LIFETIME = time::seconds(16);$/;"	m	class:nfd::fw::NccStrategy	file:
MEASUREMENTS_LIFETIME	fw/ncc-strategy.hpp	/^  static const time::nanoseconds MEASUREMENTS_LIFETIME;$/;"	m	class:nfd::fw::NccStrategy
MIN_CAPACITY	table/dead-nonce-list.cpp	/^const size_t DeadNonceList::MIN_CAPACITY = (1 << 3);$/;"	m	class:nfd::DeadNonceList	file:
MIN_CAPACITY	table/dead-nonce-list.hpp	/^  static const size_t MIN_CAPACITY;$/;"	m	class:nfd::DeadNonceList
MIN_LIFETIME	table/dead-nonce-list.cpp	/^const time::nanoseconds DeadNonceList::MIN_LIFETIME = time::milliseconds(1);$/;"	m	class:nfd::DeadNonceList	file:
MIN_LIFETIME	table/dead-nonce-list.hpp	/^  static const time::nanoseconds MIN_LIFETIME;$/;"	m	class:nfd::DeadNonceList
MIN_PREDICTION	fw/ncc-strategy.cpp	/^const time::microseconds NccStrategy::MeasurementsEntryInfo::MIN_PREDICTION =$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo	file:
MIN_PREDICTION	fw/ncc-strategy.hpp	/^    static const time::microseconds MIN_PREDICTION;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
MTU_UNLIMITED	face/transport.hpp	/^const ssize_t MTU_UNLIMITED = -1;$/;"	m	namespace:nfd::face
ManagerBase	mgmt/manager-base.cpp	/^ManagerBase::ManagerBase(Dispatcher& dispatcher,$/;"	f	class:nfd::ManagerBase
ManagerBase	mgmt/manager-base.hpp	/^class ManagerBase : public noncopyable$/;"	c	namespace:nfd
Measurements	table/measurements.cpp	/^Measurements::Measurements(NameTree& nameTree)$/;"	f	class:nfd::Measurements
Measurements	table/measurements.hpp	/^class Measurements : noncopyable$/;"	c	namespace:nfd
MeasurementsAccessor	table/measurements-accessor.cpp	/^MeasurementsAccessor::MeasurementsAccessor(Measurements& measurements,$/;"	f	class:nfd::MeasurementsAccessor
MeasurementsAccessor	table/measurements-accessor.hpp	/^class MeasurementsAccessor : noncopyable$/;"	c	namespace:nfd
MeasurementsEntryInfo	fw/ncc-strategy.cpp	/^NccStrategy::MeasurementsEntryInfo::MeasurementsEntryInfo()$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
MeasurementsEntryInfo	fw/ncc-strategy.hpp	/^  class MeasurementsEntryInfo : public StrategyInfo$/;"	c	class:nfd::fw::NccStrategy
MissCallback	table/cs.hpp	/^  typedef std::function<void(const Interest&)> MissCallback;$/;"	t	class:nfd::cs::Cs
MtInfo	fw/access-strategy.cpp	/^AccessStrategy::MtInfo::MtInfo()$/;"	f	class:nfd::fw::AccessStrategy::MtInfo
MtInfo	fw/access-strategy.hpp	/^  class MtInfo : public StrategyInfo$/;"	c	class:nfd::fw::AccessStrategy
Multicast	face/datagram-transport.hpp	/^struct Multicast {};$/;"	s	namespace:nfd::face
MulticastFaceMap	face/ethernet-factory.hpp	/^                   shared_ptr<EthernetFace>> MulticastFaceMap;$/;"	t	class:nfd::EthernetFactory
MulticastFaceMap	face/udp-factory.hpp	/^  typedef std::map<udp::Endpoint, shared_ptr<face::LpFaceWrapper>> MulticastFaceMap;$/;"	t	class:nfd::UdpFactory
MulticastStrategy	fw/multicast-strategy.cpp	/^MulticastStrategy::MulticastStrategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::MulticastStrategy
MulticastStrategy	fw/multicast-strategy.hpp	/^class MulticastStrategy : public Strategy$/;"	c	namespace:nfd::fw
MulticastUdpTransport	face/multicast-udp-transport.cpp	/^MulticastUdpTransport::MulticastUdpTransport(const protocol::endpoint& localEndpoint,$/;"	f	class:nfd::face::MulticastUdpTransport
MulticastUdpTransport	face/multicast-udp-transport.hpp	/^class MulticastUdpTransport : public DatagramTransport<boost::asio::ip::udp, Multicast>$/;"	c	namespace:nfd::face
NEW	fw/retx-suppression.hpp	/^    NEW,$/;"	e	enum:nfd::fw::RetxSuppression::Result
NFD_DAEMON_FACE_CHANNEL_HPP	face/channel.hpp	26;"	d
NFD_DAEMON_FACE_DATAGRAM_TRANSPORT_HPP	face/datagram-transport.hpp	27;"	d
NFD_DAEMON_FACE_ETHERNET_FACE_HPP	face/ethernet-face.hpp	27;"	d
NFD_DAEMON_FACE_ETHERNET_FACTORY_HPP	face/ethernet-factory.hpp	27;"	d
NFD_DAEMON_FACE_FACE_COUNTERS_HPP	face/face-counters.hpp	27;"	d
NFD_DAEMON_FACE_FACE_HPP	face/face.hpp	27;"	d
NFD_DAEMON_FACE_FACE_LOG_HPP	face/face-log.hpp	27;"	d
NFD_DAEMON_FACE_GENERIC_LINK_SERVICE_HPP	face/generic-link-service.hpp	27;"	d
NFD_DAEMON_FACE_INTERNAL_FACE_HPP	face/internal-face.hpp	27;"	d
NFD_DAEMON_FACE_INTERNAL_TRANSPORT_HPP	face/internal-transport.hpp	27;"	d
NFD_DAEMON_FACE_LINK_SERVICE_HPP	face/link-service.hpp	27;"	d
NFD_DAEMON_FACE_LOCAL_FACE_HPP	face/local-face.hpp	27;"	d
NFD_DAEMON_FACE_LP_FACE_WRAPPER_HPP	face/lp-face-wrapper.hpp	27;"	d
NFD_DAEMON_FACE_MULTICAST_UDP_TRANSPORT_HPP	face/multicast-udp-transport.hpp	27;"	d
NFD_DAEMON_FACE_NDNLP_PARSE_HPP	face/ndnlp-data.hpp	27;"	d
NFD_DAEMON_FACE_NDNLP_PARTIAL_MESSAGE_STORE_HPP	face/ndnlp-partial-message-store.hpp	27;"	d
NFD_DAEMON_FACE_NDNLP_SEQUENCE_GENERATOR_HPP	face/ndnlp-sequence-generator.hpp	26;"	d
NFD_DAEMON_FACE_NDNLP_SLICER_HPP	face/ndnlp-slicer.hpp	27;"	d
NFD_DAEMON_FACE_NDNLP_TLV_HPP	face/ndnlp-tlv.hpp	26;"	d
NFD_DAEMON_FACE_NULL_FACE_HPP	face/null-face.hpp	27;"	d
NFD_DAEMON_FACE_PROTOCOL_FACTORY_HPP	face/protocol-factory.hpp	27;"	d
NFD_DAEMON_FACE_STREAM_FACE_HPP	face/stream-face.hpp	27;"	d
NFD_DAEMON_FACE_STREAM_TRANSPORT_HPP	face/stream-transport.hpp	27;"	d
NFD_DAEMON_FACE_TCP_CHANNEL_HPP	face/tcp-channel.hpp	27;"	d
NFD_DAEMON_FACE_TCP_FACE_HPP	face/tcp-face.hpp	26;"	d
NFD_DAEMON_FACE_TCP_FACTORY_HPP	face/tcp-factory.hpp	27;"	d
NFD_DAEMON_FACE_TRANSPORT_HPP	face/transport.hpp	27;"	d
NFD_DAEMON_FACE_UDP_CHANNEL_HPP	face/udp-channel.hpp	27;"	d
NFD_DAEMON_FACE_UDP_FACTORY_HPP	face/udp-factory.hpp	27;"	d
NFD_DAEMON_FACE_UDP_PROTOCOL_HPP	face/udp-protocol.hpp	27;"	d
NFD_DAEMON_FACE_UNICAST_UDP_TRANSPORT_HPP	face/unicast-udp-transport.hpp	27;"	d
NFD_DAEMON_FACE_UNIX_STREAM_CHANNEL_HPP	face/unix-stream-channel.hpp	26;"	d
NFD_DAEMON_FACE_UNIX_STREAM_FACTORY_HPP	face/unix-stream-factory.hpp	27;"	d
NFD_DAEMON_FACE_UNIX_STREAM_TRANSPORT_HPP	face/unix-stream-transport.hpp	27;"	d
NFD_DAEMON_FACE_WEBSOCKETPP_HPP	face/websocketpp.hpp	27;"	d
NFD_DAEMON_FACE_WEBSOCKET_CHANNEL_HPP	face/websocket-channel.hpp	27;"	d
NFD_DAEMON_FACE_WEBSOCKET_FACE_HPP	face/websocket-face.hpp	27;"	d
NFD_DAEMON_FACE_WEBSOCKET_FACTORY_HPP	face/websocket-factory.hpp	27;"	d
NFD_DAEMON_FW_ACCESS_STRATEGY_HPP	fw/access-strategy.hpp	27;"	d
NFD_DAEMON_FW_BEST_ROUTE_STRATEGY2_HPP	fw/best-route-strategy2.hpp	27;"	d
NFD_DAEMON_FW_BEST_ROUTE_STRATEGY_HPP	fw/best-route-strategy.hpp	27;"	d
NFD_DAEMON_FW_BROADCAST_STRATEGY_HPP	fw/broadcast-strategy.hpp	27;"	d
NFD_DAEMON_FW_CLIENT_CONTROL_STRATEGY_HPP	fw/client-control-strategy.hpp	27;"	d
NFD_DAEMON_FW_FACE_TABLE_HPP	fw/face-table.hpp	27;"	d
NFD_DAEMON_FW_FORWARDER_COUNTERS_HPP	fw/forwarder-counters.hpp	27;"	d
NFD_DAEMON_FW_FORWARDER_HPP	fw/forwarder.hpp	27;"	d
NFD_DAEMON_FW_MULTICAST_STRATEGY_HPP	fw/multicast-strategy.hpp	27;"	d
NFD_DAEMON_FW_NCC_STRATEGY_HPP	fw/ncc-strategy.hpp	27;"	d
NFD_DAEMON_FW_RETX_SUPPRESSION_EXPONENTIAL_HPP	fw/retx-suppression-exponential.hpp	27;"	d
NFD_DAEMON_FW_RETX_SUPPRESSION_FIXED_HPP	fw/retx-suppression-fixed.hpp	27;"	d
NFD_DAEMON_FW_RETX_SUPPRESSION_HPP	fw/retx-suppression.hpp	27;"	d
NFD_DAEMON_FW_RTT_ESTIMATOR_HPP	fw/rtt-estimator.hpp	27;"	d
NFD_DAEMON_FW_STRATEGY_HPP	fw/strategy.hpp	27;"	d
NFD_DAEMON_FW_STRATEGY_INFO_HPP	fw/strategy-info.hpp	27;"	d
NFD_DAEMON_FW_STRATEGY_REGISTRY_HPP	fw/strategy-registry.hpp	27;"	d
NFD_DAEMON_LP_FACE_HPP	face/lp-face.hpp	27;"	d
NFD_DAEMON_MGMT_COMMAND_VALIDATOR_HPP	mgmt/command-validator.hpp	26;"	d
NFD_DAEMON_MGMT_FACE_MANAGER_HPP	mgmt/face-manager.hpp	27;"	d
NFD_DAEMON_MGMT_FIB_MANAGER_HPP	mgmt/fib-manager.hpp	27;"	d
NFD_DAEMON_MGMT_FORWARDER_STATUS_MANAGER_HPP	mgmt/forwarder-status-manager.hpp	27;"	d
NFD_DAEMON_MGMT_MANAGER_BASE_HPP	mgmt/manager-base.hpp	27;"	d
NFD_DAEMON_MGMT_STRATEGY_CHOICE_MANAGER_HPP	mgmt/strategy-choice-manager.hpp	27;"	d
NFD_DAEMON_NFD_HPP	nfd.hpp	27;"	d
NFD_DAEMON_TABLE_CS_ENTRY_HPP	table/cs-entry.hpp	27;"	d
NFD_DAEMON_TABLE_CS_ENTRY_IMPL_HPP	table/cs-entry-impl.hpp	27;"	d
NFD_DAEMON_TABLE_CS_HPP	table/cs.hpp	49;"	d
NFD_DAEMON_TABLE_CS_INTERNAL_HPP	table/cs-internal.hpp	31;"	d
NFD_DAEMON_TABLE_CS_POLICY_FIFO_HPP	table/cs-policy-priority-fifo.hpp	27;"	d
NFD_DAEMON_TABLE_CS_POLICY_HPP	table/cs-policy.hpp	27;"	d
NFD_DAEMON_TABLE_CS_POLICY_LRU_HPP	table/cs-policy-lru.hpp	27;"	d
NFD_DAEMON_TABLE_DEAD_NONCE_LIST_HPP	table/dead-nonce-list.hpp	27;"	d
NFD_DAEMON_TABLE_FIB_ENTRY_HPP	table/fib-entry.hpp	27;"	d
NFD_DAEMON_TABLE_FIB_HPP	table/fib.hpp	27;"	d
NFD_DAEMON_TABLE_FIB_NEXTHOP_HPP	table/fib-nexthop.hpp	27;"	d
NFD_DAEMON_TABLE_MEASUREMENTS_ACCESSOR_HPP	table/measurements-accessor.hpp	27;"	d
NFD_DAEMON_TABLE_MEASUREMENTS_ENTRY_HPP	table/measurements-entry.hpp	27;"	d
NFD_DAEMON_TABLE_MEASUREMENTS_HPP	table/measurements.hpp	27;"	d
NFD_DAEMON_TABLE_NAME_TREE_ENTRY_HPP	table/name-tree-entry.hpp	27;"	d
NFD_DAEMON_TABLE_NAME_TREE_HPP	table/name-tree.hpp	27;"	d
NFD_DAEMON_TABLE_NETWORK_REGION_TABLE_HPP	table/network-region-table.hpp	27;"	d
NFD_DAEMON_TABLE_PIT_ENTRY_HPP	table/pit-entry.hpp	27;"	d
NFD_DAEMON_TABLE_PIT_FACE_RECORD_HPP	table/pit-face-record.hpp	27;"	d
NFD_DAEMON_TABLE_PIT_HPP	table/pit.hpp	27;"	d
NFD_DAEMON_TABLE_PIT_IN_RECORD_HPP	table/pit-in-record.hpp	27;"	d
NFD_DAEMON_TABLE_PIT_OUT_RECORD_HPP	table/pit-out-record.hpp	27;"	d
NFD_DAEMON_TABLE_STRATEGY_CHOICE_ENTRY_HPP	table/strategy-choice-entry.hpp	27;"	d
NFD_DAEMON_TABLE_STRATEGY_CHOICE_HPP	table/strategy-choice.hpp	27;"	d
NFD_DAEMON_TABLE_STRATEGY_INFO_HOST_HPP	table/strategy-info-host.hpp	27;"	d
NFD_LOG_FACE	face/face-log.hpp	65;"	d
NFD_LOG_FACE_DEBUG	face/face-log.hpp	77;"	d
NFD_LOG_FACE_ERROR	face/face-log.hpp	86;"	d
NFD_LOG_FACE_INFO	face/face-log.hpp	80;"	d
NFD_LOG_FACE_TRACE	face/face-log.hpp	74;"	d
NFD_LOG_FACE_WARN	face/face-log.hpp	83;"	d
NFD_MGMT_GENERAL_CONFIG_SECTION_HPP	mgmt/general-config-section.hpp	26;"	d
NFD_MGMT_TABLES_CONFIG_SECTION_HPP	mgmt/tables-config-section.hpp	27;"	d
NFD_REGISTER_STRATEGY	fw/strategy-registry.hpp	65;"	d
NONE	face/transport.hpp	/^  NONE,$/;"	m	class:nfd::face::TransportState
NameTree	table/name-tree.cpp	/^NameTree::NameTree(size_t nBuckets)$/;"	f	class:nfd::NameTree
NameTree	table/name-tree.hpp	/^class NameTree : noncopyable$/;"	c	namespace:nfd
NccStrategy	fw/ncc-strategy.cpp	/^NccStrategy::NccStrategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::NccStrategy
NccStrategy	fw/ncc-strategy.hpp	/^class NccStrategy : public Strategy$/;"	c	namespace:nfd::fw
NdnlpData	face/ndnlp-data.hpp	/^class NdnlpData$/;"	c	namespace:nfd::ndnlp
NdnlpData	face/ndnlp-tlv.hpp	/^  NdnlpData      = 80,$/;"	e	enum:nfd::tlv::__anon1
NdnlpFragCount	face/ndnlp-tlv.hpp	/^  NdnlpFragCount = 83,$/;"	e	enum:nfd::tlv::__anon1
NdnlpFragIndex	face/ndnlp-tlv.hpp	/^  NdnlpFragIndex = 82,$/;"	e	enum:nfd::tlv::__anon1
NdnlpPayload	face/ndnlp-tlv.hpp	/^  NdnlpPayload   = 84$/;"	e	enum:nfd::tlv::__anon1
NdnlpSequence	face/ndnlp-tlv.hpp	/^  NdnlpSequence  = 81,$/;"	e	enum:nfd::tlv::__anon1
NetworkLayerCounters	face/face-counters.hpp	/^class NetworkLayerCounters : noncopyable$/;"	c	namespace:nfd
NetworkRegionTable	table/network-region-table.hpp	/^class NetworkRegionTable : public std::set<Name>$/;"	c	namespace:nfd
NextHop	table/fib-nexthop.cpp	/^NextHop::NextHop(shared_ptr<Face> face)$/;"	f	class:nfd::fib::NextHop
NextHop	table/fib-nexthop.hpp	/^class NextHop$/;"	c	namespace:nfd::fib
NextHopList	table/fib-entry.hpp	/^typedef std::vector<fib::NextHop> NextHopList;$/;"	t	namespace:nfd::fib
Nfd	nfd.cpp	/^Nfd::Nfd(const ConfigSection& config, ndn::KeyChain& keyChain)$/;"	f	class:nfd::Nfd
Nfd	nfd.cpp	/^Nfd::Nfd(const std::string& configFile, ndn::KeyChain& keyChain)$/;"	f	class:nfd::Nfd
Nfd	nfd.hpp	/^class Nfd : noncopyable$/;"	c	namespace:nfd
NfdRunner	main.cpp	/^  NfdRunner(const std::string& configFile)$/;"	f	class:nfd::NfdRunner
NfdRunner	main.cpp	/^class NfdRunner : noncopyable$/;"	c	namespace:nfd	file:
Node	table/name-tree-entry.cpp	/^Node::Node()$/;"	f	class:nfd::name_tree::Node
Node	table/name-tree-entry.hpp	/^class Node$/;"	c	namespace:nfd::name_tree
NullFace	face/null-face.cpp	/^NullFace::NullFace(const FaceUri& uri)$/;"	f	class:nfd::NullFace
NullFace	face/null-face.hpp	/^class NullFace : public Face$/;"	c	namespace:nfd
Options	face/generic-link-service.cpp	/^GenericLinkService::Options::Options()$/;"	f	class:nfd::face::GenericLinkService::Options
Options	face/generic-link-service.hpp	/^  class Options$/;"	c	class:nfd::face::GenericLinkService
OutRecord	table/pit-out-record.cpp	/^OutRecord::OutRecord(shared_ptr<Face> face)$/;"	f	class:nfd::pit::OutRecord
OutRecord	table/pit-out-record.hpp	/^class OutRecord : public FaceRecord$/;"	c	namespace:nfd::pit
OutRecordCollection	table/pit-entry.hpp	/^typedef std::list<OutRecord> OutRecordCollection;$/;"	t	namespace:nfd::pit
PARTIAL_ENUMERATE_TYPE	table/name-tree.hpp	/^    PARTIAL_ENUMERATE_TYPE,$/;"	e	enum:nfd::NameTree::IteratorType
PCAP_NETMASK_UNKNOWN	face/ethernet-face.cpp	56;"	d	file:
POLICY_NAME	table/cs-policy-lru.cpp	/^const std::string LruPolicy::POLICY_NAME = "lru";$/;"	m	class:nfd::cs::lru::LruPolicy	file:
POLICY_NAME	table/cs-policy-lru.hpp	/^  static const std::string POLICY_NAME;$/;"	m	class:nfd::cs::lru::LruPolicy
POLICY_NAME	table/cs-policy-priority-fifo.cpp	/^const std::string PriorityFifoPolicy::POLICY_NAME = "fifo";$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy	file:
POLICY_NAME	table/cs-policy-priority-fifo.hpp	/^  static const std::string POLICY_NAME;$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
Packet	face/transport.cpp	/^Transport::Packet::Packet(Block&& packet1)$/;"	f	class:nfd::face::Transport::Packet
Packet	face/transport.hpp	/^  class Packet$/;"	c	class:nfd::face::Transport
PacketArray	face/ndnlp-slicer.hpp	/^typedef shared_ptr<std::vector<Block>> PacketArray;$/;"	t	namespace:nfd::ndnlp
PacketCounter	face/face-counters.hpp	/^  PacketCounter()$/;"	f	class:nfd::PacketCounter
PacketCounter	face/face-counters.hpp	/^class PacketCounter : noncopyable$/;"	c	namespace:nfd
PartialMessage	face/ndnlp-partial-message-store.cpp	/^PartialMessage::PartialMessage()$/;"	f	class:nfd::ndnlp::PartialMessage
PartialMessage	face/ndnlp-partial-message-store.hpp	/^class PartialMessage$/;"	c	namespace:nfd::ndnlp
PartialMessageStore	face/ndnlp-partial-message-store.cpp	/^PartialMessageStore::PartialMessageStore(const time::nanoseconds& idleDuration)$/;"	f	class:nfd::ndnlp::PartialMessageStore
PartialMessageStore	face/ndnlp-partial-message-store.hpp	/^class PartialMessageStore : noncopyable$/;"	c	namespace:nfd::ndnlp
Pit	table/pit.cpp	/^Pit::Pit(NameTree& nameTree)$/;"	f	class:nfd::Pit
Pit	table/pit.hpp	/^class Pit : noncopyable$/;"	c	namespace:nfd
PitEntryInfo	fw/ncc-strategy.hpp	/^  class PitEntryInfo : public StrategyInfo$/;"	c	class:nfd::fw::NccStrategy
PitInfo	fw/access-strategy.hpp	/^  class PitInfo : public StrategyInfo$/;"	c	class:nfd::fw::AccessStrategy
PitInfo	fw/retx-suppression-exponential.cpp	/^  PitInfo(const Duration& initialInterval)$/;"	f	class:nfd::fw::RetxSuppressionExponential::PitInfo
PitInfo	fw/retx-suppression-exponential.cpp	/^class RetxSuppressionExponential::PitInfo : public StrategyInfo$/;"	c	class:nfd::fw::RetxSuppressionExponential	file:
Policy	table/cs-policy.cpp	/^Policy::Policy(const std::string& policyName)$/;"	f	class:nfd::cs::Policy
Policy	table/cs-policy.hpp	/^class Policy : noncopyable$/;"	c	namespace:nfd::cs
PriorityFifoPolicy	table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::PriorityFifoPolicy()$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
PriorityFifoPolicy	table/cs-policy-priority-fifo.hpp	/^class PriorityFifoPolicy : public Policy$/;"	c	namespace:nfd::cs::priority_fifo
ProtocolFactory	face/protocol-factory.hpp	/^class ProtocolFactory$/;"	c	namespace:nfd
QUEUE_FIFO	table/cs-policy-priority-fifo.hpp	/^  QUEUE_FIFO,$/;"	e	enum:nfd::cs::priority_fifo::QueueType
QUEUE_MAX	table/cs-policy-priority-fifo.hpp	/^  QUEUE_MAX$/;"	e	enum:nfd::cs::priority_fifo::QueueType
QUEUE_STALE	table/cs-policy-priority-fifo.hpp	/^  QUEUE_STALE,$/;"	e	enum:nfd::cs::priority_fifo::QueueType
QUEUE_UNSOLICITED	table/cs-policy-priority-fifo.hpp	/^  QUEUE_UNSOLICITED,$/;"	e	enum:nfd::cs::priority_fifo::QueueType
Queue	table/cs-policy-lru.hpp	/^  > Queue;$/;"	t	namespace:nfd::cs::lru
Queue	table/cs-policy-priority-fifo.hpp	/^typedef std::list<iterator> Queue;$/;"	t	namespace:nfd::cs::priority_fifo
Queue	table/dead-nonce-list.hpp	/^  typedef Index::nth_index<0>::type Queue;$/;"	t	class:nfd::DeadNonceList
QueueIt	table/cs-policy-priority-fifo.hpp	/^typedef Queue::iterator QueueIt;$/;"	t	namespace:nfd::cs::priority_fifo
QueueType	table/cs-policy-priority-fifo.hpp	/^enum QueueType {$/;"	g	namespace:nfd::cs::priority_fifo
REASSEMBLER_LIFETIME	face/ethernet-face.cpp	/^const time::nanoseconds EthernetFace::REASSEMBLER_LIFETIME = time::seconds(60);$/;"	m	class:nfd::EthernetFace	file:
REASSEMBLER_LIFETIME	face/ethernet-face.hpp	/^  static const time::nanoseconds REASSEMBLER_LIFETIME;$/;"	m	class:nfd::EthernetFace
Reassembler	face/ethernet-face.hpp	/^  struct Reassembler$/;"	s	class:nfd::EthernetFace
Result	fw/retx-suppression.hpp	/^  enum Result {$/;"	g	class:nfd::fw::RetxSuppression
RetxSuppression	fw/retx-suppression.hpp	/^class RetxSuppression : noncopyable$/;"	c	namespace:nfd::fw
RetxSuppressionExponential	fw/retx-suppression-exponential.cpp	/^RetxSuppressionExponential::RetxSuppressionExponential(const Duration& initialInterval,$/;"	f	class:nfd::fw::RetxSuppressionExponential
RetxSuppressionExponential	fw/retx-suppression-exponential.hpp	/^class RetxSuppressionExponential : public RetxSuppression$/;"	c	namespace:nfd::fw
RetxSuppressionFixed	fw/retx-suppression-fixed.cpp	/^RetxSuppressionFixed::RetxSuppressionFixed(const time::milliseconds& minRetxInterval)$/;"	f	class:nfd::fw::RetxSuppressionFixed
RetxSuppressionFixed	fw/retx-suppression-fixed.hpp	/^class RetxSuppressionFixed : public RetxSuppression$/;"	c	namespace:nfd::fw
RttEstimator	fw/rtt-estimator.cpp	/^RttEstimator::RttEstimator(uint16_t maxMultiplier, Duration minRto, double gain)$/;"	f	class:nfd::RttEstimator
RttEstimator	fw/rtt-estimator.hpp	/^class RttEstimator$/;"	c	namespace:nfd
STATUS_SERVER_DEFAULT_FRESHNESS	mgmt/forwarder-status-manager.cpp	/^const time::milliseconds STATUS_SERVER_DEFAULT_FRESHNESS = time::milliseconds(5000);$/;"	m	namespace:nfd	file:
STRATEGY_NAME	fw/access-strategy.hpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:nfd::fw::AccessStrategy
STRATEGY_NAME	fw/best-route-strategy.hpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:nfd::fw::BestRouteStrategy
STRATEGY_NAME	fw/best-route-strategy2.hpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:nfd::fw::BestRouteStrategy2
STRATEGY_NAME	fw/broadcast-strategy.hpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:nfd::fw::BroadcastStrategy
STRATEGY_NAME	fw/client-control-strategy.hpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:nfd::fw::ClientControlStrategy
STRATEGY_NAME	fw/multicast-strategy.hpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:nfd::fw::MulticastStrategy
STRATEGY_NAME	fw/ncc-strategy.hpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:nfd::fw::NccStrategy
SUPPRESS	fw/retx-suppression.hpp	/^    SUPPRESS$/;"	e	enum:nfd::fw::RetxSuppression::Result
SequenceBlock	face/ndnlp-sequence-generator.cpp	/^SequenceBlock::SequenceBlock(uint64_t start, size_t count)$/;"	f	class:nfd::ndnlp::SequenceBlock
SequenceBlock	face/ndnlp-sequence-generator.hpp	/^class SequenceBlock$/;"	c	namespace:nfd::ndnlp
SequenceGenerator	face/ndnlp-sequence-generator.cpp	/^SequenceGenerator::SequenceGenerator()$/;"	f	class:nfd::ndnlp::SequenceGenerator
SequenceGenerator	face/ndnlp-sequence-generator.hpp	/^class SequenceGenerator : noncopyable$/;"	c	namespace:nfd::ndnlp
Server	face/websocket-face.hpp	/^typedef websocketpp::server<websocketpp::config::asio> Server;$/;"	t	namespace:nfd::websocket
Slicer	face/ndnlp-slicer.cpp	/^Slicer::Slicer(size_t mtu)$/;"	f	class:nfd::ndnlp::Slicer
Slicer	face/ndnlp-slicer.hpp	/^class Slicer : noncopyable$/;"	c	namespace:nfd::ndnlp
Strategy	fw/strategy.cpp	/^Strategy::Strategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::Strategy
Strategy	fw/strategy.hpp	/^class Strategy : public enable_shared_from_this<Strategy>, noncopyable$/;"	c	namespace:nfd::fw
StrategyChoice	table/strategy-choice.cpp	/^StrategyChoice::StrategyChoice(NameTree& nameTree, shared_ptr<Strategy> defaultStrategy)$/;"	f	class:nfd::StrategyChoice
StrategyChoice	table/strategy-choice.hpp	/^class StrategyChoice : noncopyable$/;"	c	namespace:nfd
StrategyChoiceManager	mgmt/strategy-choice-manager.cpp	/^StrategyChoiceManager::StrategyChoiceManager(StrategyChoice& strategyChoice,$/;"	f	class:nfd::StrategyChoiceManager
StrategyChoiceManager	mgmt/strategy-choice-manager.hpp	/^class StrategyChoiceManager : public ManagerBase$/;"	c	namespace:nfd
StrategyCreateFunc	fw/strategy-registry.hpp	/^typedef std::function<shared_ptr<Strategy>(Forwarder&)> StrategyCreateFunc;$/;"	t	namespace:nfd::fw
StrategyInfo	fw/strategy-info.hpp	/^class StrategyInfo$/;"	c	namespace:nfd::fw
StrategyInfoHost	table/strategy-info-host.hpp	/^class StrategyInfoHost$/;"	c	namespace:nfd
StrategyInstanceTable	table/strategy-choice.hpp	/^  typedef std::map<Name, shared_ptr<fw::Strategy> > StrategyInstanceTable;$/;"	t	class:nfd::StrategyChoice
StreamFace	face/stream-face.hpp	/^StreamFace<T, FaceBase>::StreamFace(const FaceUri& remoteUri, const FaceUri& localUri,$/;"	f	class:nfd::StreamFace
StreamFace	face/stream-face.hpp	/^class StreamFace : public FaceBase$/;"	c	namespace:nfd
StreamFaceSenderImpl	face/stream-face.hpp	/^struct StreamFaceSenderImpl$/;"	s	namespace:nfd
StreamFaceSenderImpl	face/stream-face.hpp	/^struct StreamFaceSenderImpl<Protocol, LocalFace, Packet>$/;"	s	namespace:nfd
StreamFaceValidator	face/stream-face.hpp	/^struct StreamFaceValidator$/;"	s	namespace:nfd
StreamFaceValidator	face/tcp-face.hpp	/^struct StreamFaceValidator<TcpLocalFace::protocol, LocalFace>$/;"	s	namespace:nfd
StreamTransport	face/stream-transport.hpp	/^StreamTransport<T>::StreamTransport(typename StreamTransport::protocol::socket&& socket)$/;"	f	class:nfd::face::StreamTransport
StreamTransport	face/stream-transport.hpp	/^class StreamTransport : public Transport$/;"	c	namespace:nfd::face
Table	table/cs-internal.hpp	/^typedef std::set<EntryImpl> Table;$/;"	t	namespace:nfd::cs
TablesConfigSection	mgmt/tables-config-section.cpp	/^TablesConfigSection::TablesConfigSection(Cs& cs,$/;"	f	class:nfd::TablesConfigSection
TablesConfigSection	mgmt/tables-config-section.hpp	/^class TablesConfigSection$/;"	c	namespace:nfd
TcpChannel	face/tcp-channel.cpp	/^TcpChannel::TcpChannel(const tcp::Endpoint& localEndpoint)$/;"	f	class:nfd::TcpChannel
TcpChannel	face/tcp-channel.hpp	/^class TcpChannel : public Channel$/;"	c	namespace:nfd
TcpFace	face/tcp-face.cpp	/^TcpFace::TcpFace(const FaceUri& remoteUri, const FaceUri& localUri,$/;"	f	class:nfd::TcpFace
TcpFace	face/tcp-face.hpp	/^class TcpFace : public StreamFace<boost::asio::ip::tcp>$/;"	c	namespace:nfd
TcpFactory	face/tcp-factory.hpp	/^class TcpFactory : public ProtocolFactory$/;"	c	namespace:nfd
TcpLocalFace	face/tcp-face.cpp	/^TcpLocalFace::TcpLocalFace(const FaceUri& remoteUri, const FaceUri& localUri,$/;"	f	class:nfd::TcpLocalFace
TcpLocalFace	face/tcp-face.hpp	/^class TcpLocalFace : public StreamFace<boost::asio::ip::tcp, LocalFace>$/;"	c	namespace:nfd
Transport	face/transport.cpp	/^Transport::Transport()$/;"	f	class:nfd::face::Transport
Transport	face/transport.hpp	/^class Transport : noncopyable$/;"	c	namespace:nfd::face
TransportState	face/transport.hpp	/^enum class TransportState {$/;"	c	namespace:nfd::face
UP	face/transport.hpp	/^  UP, \/\/\/< the transport is up$/;"	m	class:nfd::face::TransportState
UPDATE_MEASUREMENTS_N_LEVELS	fw/ncc-strategy.hpp	/^  static const int UPDATE_MEASUREMENTS_N_LEVELS = 2;$/;"	m	class:nfd::fw::NccStrategy
UdpChannel	face/udp-channel.cpp	/^UdpChannel::UdpChannel(const udp::Endpoint& localEndpoint,$/;"	f	class:nfd::UdpChannel
UdpChannel	face/udp-channel.hpp	/^class UdpChannel : public Channel$/;"	c	namespace:nfd
UdpFactory	face/udp-factory.hpp	/^class UdpFactory : public ProtocolFactory$/;"	c	namespace:nfd
Unicast	face/datagram-transport.hpp	/^struct Unicast {};$/;"	s	namespace:nfd::face
UnicastUdpTransport	face/unicast-udp-transport.cpp	/^UnicastUdpTransport::UnicastUdpTransport(protocol::socket&& socket,$/;"	f	class:nfd::face::UnicastUdpTransport
UnicastUdpTransport	face/unicast-udp-transport.hpp	/^class UnicastUdpTransport : public DatagramTransport<boost::asio::ip::udp, Unicast>$/;"	c	namespace:nfd::face
UnixStreamChannel	face/unix-stream-channel.cpp	/^UnixStreamChannel::UnixStreamChannel(const unix_stream::Endpoint& endpoint)$/;"	f	class:nfd::UnixStreamChannel
UnixStreamChannel	face/unix-stream-channel.hpp	/^class UnixStreamChannel : public Channel$/;"	c	namespace:nfd
UnixStreamFactory	face/unix-stream-factory.hpp	/^class UnixStreamFactory : public ProtocolFactory$/;"	c	namespace:nfd
UnixStreamTransport	face/unix-stream-transport.cpp	/^UnixStreamTransport::UnixStreamTransport(protocol::socket&& socket)$/;"	f	class:nfd::face::UnixStreamTransport
UnixStreamTransport	face/unix-stream-transport.hpp	/^class UnixStreamTransport : public StreamTransport<boost::asio::local::stream_protocol>$/;"	c	namespace:nfd::face
WebSocketChannel	face/websocket-channel.cpp	/^WebSocketChannel::WebSocketChannel(const websocket::Endpoint& localEndpoint)$/;"	f	class:nfd::WebSocketChannel
WebSocketChannel	face/websocket-channel.hpp	/^class WebSocketChannel : public Channel$/;"	c	namespace:nfd
WebSocketFace	face/websocket-face.cpp	/^WebSocketFace::WebSocketFace(const FaceUri& remoteUri, const FaceUri& localUri,$/;"	f	class:nfd::WebSocketFace
WebSocketFace	face/websocket-face.hpp	/^class WebSocketFace : public Face$/;"	c	namespace:nfd
WebSocketFactory	face/websocket-factory.hpp	/^class WebSocketFactory : public ProtocolFactory$/;"	c	namespace:nfd
accept	face/tcp-channel.cpp	/^TcpChannel::accept(const FaceCreatedCallback& onFaceCreated,$/;"	f	class:nfd::TcpChannel
accept	face/unix-stream-channel.cpp	/^UnixStreamChannel::accept(const FaceCreatedCallback& onFaceCreated,$/;"	f	class:nfd::UnixStreamChannel
add	face/ndnlp-partial-message-store.cpp	/^PartialMessage::add(uint16_t fragIndex, uint16_t fragCount, const Block& payload)$/;"	f	class:nfd::ndnlp::PartialMessage
add	fw/face-table.cpp	/^FaceTable::add(shared_ptr<Face> face)$/;"	f	class:nfd::FaceTable
add	table/dead-nonce-list.cpp	/^DeadNonceList::add(const Name& name, uint32_t nonce)$/;"	f	class:nfd::DeadNonceList
addFace	fw/forwarder.hpp	/^Forwarder::addFace(shared_ptr<Face> face)$/;"	f	class:nfd::Forwarder
addImpl	fw/face-table.cpp	/^FaceTable::addImpl(shared_ptr<Face> face, FaceId faceId)$/;"	f	class:nfd::FaceTable
addInterestRule	mgmt/command-validator.hpp	/^CommandValidator::addInterestRule(const std::string& regex,$/;"	f	class:nfd::CommandValidator
addMeasurement	fw/rtt-estimator.cpp	/^RttEstimator::addMeasurement(Duration measure)$/;"	f	class:nfd::RttEstimator
addNextHop	mgmt/fib-manager.cpp	/^FibManager::addNextHop(const Name& topPrefix, const Interest& interest,$/;"	f	class:nfd::FibManager
addNextHop	table/fib-entry.cpp	/^Entry::addNextHop(shared_ptr<Face> face, uint64_t cost)$/;"	f	class:nfd::fib::Entry
addPrefixMeasurements	fw/access-strategy.cpp	/^AccessStrategy::addPrefixMeasurements(const Data& data)$/;"	f	class:nfd::fw::AccessStrategy
addReserved	fw/face-table.cpp	/^FaceTable::addReserved(shared_ptr<Face> face, FaceId faceId)$/;"	f	class:nfd::FaceTable
addSupportedPrivilege	mgmt/command-validator.cpp	/^CommandValidator::addSupportedPrivilege(const std::string& privilege)$/;"	f	class:nfd::CommandValidator
adjustCapacity	table/dead-nonce-list.cpp	/^DeadNonceList::adjustCapacity()$/;"	f	class:nfd::DeadNonceList
adjustPredictDown	fw/ncc-strategy.cpp	/^NccStrategy::MeasurementsEntryInfo::adjustPredictDown() {$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
adjustPredictUp	fw/ncc-strategy.cpp	/^NccStrategy::MeasurementsEntryInfo::adjustPredictUp() {$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
afterAddFace	fw/strategy.hpp	/^  signal::Signal<FaceTable, shared_ptr<Face>>& afterAddFace;$/;"	m	class:nfd::fw::Strategy
afterCreateFaceFailure	mgmt/face-manager.cpp	/^FaceManager::afterCreateFaceFailure(const std::string& reason,$/;"	f	class:nfd::FaceManager
afterCreateFaceSuccess	mgmt/face-manager.cpp	/^FaceManager::afterCreateFaceSuccess(ControlParameters& parameters,$/;"	f	class:nfd::FaceManager
afterFaceAdded	mgmt/face-manager.cpp	/^FaceManager::afterFaceAdded(shared_ptr<Face> face,$/;"	f	class:nfd::FaceManager
afterFaceRemoved	mgmt/face-manager.cpp	/^FaceManager::afterFaceRemoved(shared_ptr<Face> face,$/;"	f	class:nfd::FaceManager
afterInsert	table/cs-policy.cpp	/^Policy::afterInsert(iterator i)$/;"	f	class:nfd::cs::Policy
afterReceiveData	face/link-service.hpp	/^  signal::Signal<LinkService, Data> afterReceiveData;$/;"	m	class:nfd::face::LinkService
afterReceiveData	face/lp-face.hpp	/^  signal::Signal<LinkService, Data>& afterReceiveData;$/;"	m	class:nfd::face::DECL_CLASS_FINAL
afterReceiveInterest	face/link-service.hpp	/^  signal::Signal<LinkService, Interest> afterReceiveInterest;$/;"	m	class:nfd::face::LinkService
afterReceiveInterest	face/lp-face.hpp	/^  signal::Signal<LinkService, Interest>& afterReceiveInterest;$/;"	m	class:nfd::face::DECL_CLASS_FINAL
afterReceiveInterest	fw/access-strategy.cpp	/^AccessStrategy::afterReceiveInterest(const Face& inFace,$/;"	f	class:nfd::fw::AccessStrategy
afterReceiveInterest	fw/best-route-strategy.cpp	/^BestRouteStrategy::afterReceiveInterest(const Face& inFace,$/;"	f	class:nfd::fw::BestRouteStrategy
afterReceiveInterest	fw/best-route-strategy2.cpp	/^BestRouteStrategy2::afterReceiveInterest(const Face& inFace,$/;"	f	class:nfd::fw::BestRouteStrategy2
afterReceiveInterest	fw/broadcast-strategy.cpp	/^BroadcastStrategy::afterReceiveInterest(const Face& inFace,$/;"	f	class:nfd::fw::BroadcastStrategy
afterReceiveInterest	fw/client-control-strategy.cpp	/^ClientControlStrategy::afterReceiveInterest(const Face& inFace,$/;"	f	class:nfd::fw::ClientControlStrategy
afterReceiveInterest	fw/multicast-strategy.cpp	/^MulticastStrategy::afterReceiveInterest(const Face& inFace,$/;"	f	class:nfd::fw::MulticastStrategy
afterReceiveInterest	fw/ncc-strategy.cpp	/^NccStrategy::afterReceiveInterest(const Face& inFace,$/;"	f	class:nfd::fw::NccStrategy
afterReceiveNack	face/link-service.hpp	/^  signal::Signal<LinkService, lp::Nack> afterReceiveNack;$/;"	m	class:nfd::face::LinkService
afterReceiveNack	face/lp-face.hpp	/^  signal::Signal<LinkService, lp::Nack>& afterReceiveNack;$/;"	m	class:nfd::face::DECL_CLASS_FINAL
afterReceiveNack	fw/best-route-strategy2.cpp	/^BestRouteStrategy2::afterReceiveNack(const Face& inFace, const lp::Nack& nack,$/;"	f	class:nfd::fw::BestRouteStrategy2
afterReceiveNack	fw/strategy.cpp	/^Strategy::afterReceiveNack(const Face& inFace, const lp::Nack& nack,$/;"	f	class:nfd::fw::Strategy
afterReceiveNewInterest	fw/access-strategy.cpp	/^AccessStrategy::afterReceiveNewInterest(const Face& inFace,$/;"	f	class:nfd::fw::AccessStrategy
afterReceiveRetxInterest	fw/access-strategy.cpp	/^AccessStrategy::afterReceiveRetxInterest(const Face& inFace,$/;"	f	class:nfd::fw::AccessStrategy
afterRefresh	table/cs-policy.cpp	/^Policy::afterRefresh(iterator i)$/;"	f	class:nfd::cs::Policy
afterRtoTimeout	fw/access-strategy.cpp	/^AccessStrategy::afterRtoTimeout(weak_ptr<pit::Entry> pitWeak, weak_ptr<fib::Entry> fibWeak,$/;"	f	class:nfd::fw::AccessStrategy
afterSend	face/internal-transport.hpp	/^  signal::Signal<InternalTransportBase, Block> afterSend;$/;"	m	class:nfd::face::InternalTransportBase
afterStateChange	face/lp-face.hpp	/^  signal::Signal<Transport, FaceState\/*old*\/, FaceState\/*new*\/>& afterStateChange;$/;"	m	class:nfd::face::DECL_CLASS_FINAL
afterStateChange	face/transport.hpp	/^  signal::Signal<Transport, TransportState\/*old*\/, TransportState\/*new*\/> afterStateChange;$/;"	m	class:nfd::face::Transport
ageBestFace	fw/ncc-strategy.cpp	/^NccStrategy::MeasurementsEntryInfo::ageBestFace() {$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
aggregateErrors	mgmt/command-validator.cpp	/^aggregateErrors(std::stringstream& ss, const std::string& msg)$/;"	f	namespace:nfd
allowLocalFields	face/generic-link-service.hpp	/^    bool allowLocalFields;$/;"	m	class:nfd::face::GenericLinkService::Options
asyncReceive	face/internal-transport.cpp	/^asyncReceive(InternalTransportBase* recipient, const Block& packet)$/;"	f	namespace:nfd::face
attachQueue	table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::attachQueue(iterator i)$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
authorize	mgmt/manager-base.cpp	/^ManagerBase::authorize(const Name& prefix, const Interest& interest,$/;"	f	class:nfd::ManagerBase
beforeChangePersistency	face/transport.hpp	/^  beforeChangePersistency(ndn::nfd::FacePersistency newPersistency)$/;"	f	class:nfd::face::Transport
beforeErase	table/cs-policy.cpp	/^Policy::beforeErase(iterator i)$/;"	f	class:nfd::cs::Policy
beforeEvict	table/cs-policy.hpp	/^  signal::Signal<Policy, iterator> beforeEvict;$/;"	m	class:nfd::cs::Policy
beforeExpirePendingInterest	fw/strategy.cpp	/^Strategy::beforeExpirePendingInterest(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::fw::Strategy
beforeRemoveFace	fw/strategy.hpp	/^  signal::Signal<FaceTable, shared_ptr<Face>>& beforeRemoveFace;$/;"	m	class:nfd::fw::Strategy
beforeSatisfyInterest	fw/access-strategy.cpp	/^AccessStrategy::beforeSatisfyInterest(shared_ptr<pit::Entry> pitEntry,$/;"	f	class:nfd::fw::AccessStrategy
beforeSatisfyInterest	fw/ncc-strategy.cpp	/^NccStrategy::beforeSatisfyInterest(shared_ptr<pit::Entry> pitEntry,$/;"	f	class:nfd::fw::NccStrategy
beforeSatisfyInterest	fw/strategy.cpp	/^Strategy::beforeSatisfyInterest(shared_ptr<pit::Entry> pitEntry,$/;"	f	class:nfd::fw::Strategy
beforeUse	table/cs-policy.cpp	/^Policy::beforeUse(iterator i)$/;"	f	class:nfd::cs::Policy
begin	fw/face-table.cpp	/^FaceTable::begin() const$/;"	f	class:nfd::FaceTable
begin	table/cs.hpp	/^  begin() const$/;"	f	class:nfd::cs::Cs
begin	table/fib.cpp	/^Fib::begin() const$/;"	f	class:nfd::Fib
begin	table/name-tree.hpp	/^NameTree::begin() const$/;"	f	class:nfd::NameTree
begin	table/pit.cpp	/^Pit::begin() const$/;"	f	class:nfd::Pit
begin	table/strategy-choice.cpp	/^StrategyChoice::begin() const$/;"	f	class:nfd::StrategyChoice
bestFace	fw/ncc-strategy.hpp	/^    weak_ptr<Face> bestFace;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
bestFaceTimeout	fw/ncc-strategy.hpp	/^    scheduler::EventId bestFaceTimeout;$/;"	m	class:nfd::fw::NccStrategy::PitEntryInfo
canForwardTo	table/pit-entry.cpp	/^Entry::canForwardTo(const Face& face) const$/;"	f	class:nfd::pit::Entry
canSatisfy	table/cs-entry.cpp	/^Entry::canSatisfy(const Interest& interest) const$/;"	f	class:nfd::cs::Entry
canStale	table/cs-entry-impl.cpp	/^EntryImpl::canStale() const$/;"	f	class:nfd::cs::EntryImpl
cancelUnsatisfyAndStragglerTimer	fw/forwarder.cpp	/^Forwarder::cancelUnsatisfyAndStragglerTimer(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::Forwarder
changeStrategy	table/strategy-choice.cpp	/^StrategyChoice::changeStrategy(strategy_choice::Entry& entry,$/;"	f	class:nfd::StrategyChoice
cleanup	face/ndnlp-partial-message-store.cpp	/^PartialMessageStore::cleanup(uint64_t messageIdentifier)$/;"	f	class:nfd::ndnlp::PartialMessageStore
cleanup	table/measurements.cpp	/^Measurements::cleanup(Entry& entry)$/;"	f	class:nfd::Measurements
clearIncomingNack	table/pit-out-record.hpp	/^  clearIncomingNack()$/;"	f	class:nfd::pit::OutRecord
clearStrategyInfo	table/strategy-choice.cpp	/^clearStrategyInfo(const name_tree::Entry& nte)$/;"	f	namespace:nfd
clearStrategyInfo	table/strategy-info-host.cpp	/^StrategyInfoHost::clearStrategyInfo()$/;"	f	class:nfd::StrategyInfoHost
close	face/ethernet-face.cpp	/^EthernetFace::close()$/;"	f	class:nfd::EthernetFace
close	face/lp-face-wrapper.hpp	/^LpFaceWrapper::close()$/;"	f	class:nfd::face::LpFaceWrapper
close	face/lp-face.hpp	/^LpFace::close()$/;"	f	class:nfd::face::LpFace
close	face/null-face.cpp	/^NullFace::close()$/;"	f	class:nfd::NullFace
close	face/stream-face.hpp	/^StreamFace<T, U>::close()$/;"	f	class:nfd::StreamFace
close	face/transport.cpp	/^Transport::close()$/;"	f	class:nfd::face::Transport
close	face/websocket-face.cpp	/^WebSocketFace::close()$/;"	f	class:nfd::WebSocketFace
closeIfIdle	face/unicast-udp-transport.cpp	/^UnicastUdpTransport::closeIfIdle()$/;"	f	class:nfd::face::UnicastUdpTransport
compareDataWithData	table/cs-entry-impl.cpp	/^compareDataWithData(const Data& lhs, const Data& rhs)$/;"	f	namespace:nfd::cs
compareLessSevere	fw/best-route-strategy2.cpp	/^compareLessSevere(lp::NackReason x, lp::NackReason y)$/;"	f	namespace:nfd::fw
compareQueryWithData	table/cs-entry-impl.cpp	/^compareQueryWithData(const Name& queryName, const Data& data)$/;"	f	namespace:nfd::cs
compare_InRecord_expiry	fw/forwarder.cpp	/^compare_InRecord_expiry(const pit::InRecord& a, const pit::InRecord& b)$/;"	f	namespace:nfd
compare_pickInterest	fw/forwarder.cpp	/^compare_pickInterest(const pit::InRecord& a, const pit::InRecord& b, const Face* outFace)$/;"	f	namespace:nfd
compute	table/name-tree.cpp	/^  compute(const char* buffer, size_t length)$/;"	f	class:nfd::name_tree::Hash32
compute	table/name-tree.cpp	/^  compute(const char* buffer, size_t length)$/;"	f	class:nfd::name_tree::Hash64
computeHash	table/name-tree.cpp	/^computeHash(const Name& prefix)$/;"	f	namespace:nfd::name_tree
computeHashSet	table/name-tree.cpp	/^computeHashSet(const Name& prefix)$/;"	f	namespace:nfd::name_tree
computeMtu	face/udp-protocol.cpp	/^computeMtu(const boost::asio::ip::udp::endpoint& localEndpoint)$/;"	f	namespace:nfd::udp
computeRto	fw/rtt-estimator.cpp	/^RttEstimator::computeRto() const$/;"	f	class:nfd::RttEstimator
connect	face/tcp-channel.cpp	/^TcpChannel::connect(const tcp::Endpoint& remoteEndpoint,$/;"	f	class:nfd::TcpChannel
connect	face/udp-channel.cpp	/^UdpChannel::connect(const udp::Endpoint& remoteEndpoint,$/;"	f	class:nfd::UdpChannel
connectToForwarder	face/internal-transport.cpp	/^InternalClientTransport::connectToForwarder(InternalForwarderTransport* forwarderTransport)$/;"	f	class:nfd::face::InternalClientTransport
const_iterator	fw/face-table.hpp	/^  typedef boost::range_iterator<ForwardRange>::type const_iterator;$/;"	t	class:nfd::FaceTable
const_iterator	table/cs.hpp	/^  typedef boost::transform_iterator<EntryFromEntryImpl, iterator, const Entry&> const_iterator;$/;"	t	class:nfd::cs::Cs
const_iterator	table/fib.hpp	/^  class const_iterator : public std::iterator<std::forward_iterator_tag, const fib::Entry>$/;"	c	class:nfd::Fib
const_iterator	table/fib.hpp	/^Fib::const_iterator::const_iterator(const NameTree::const_iterator& it)$/;"	f	class:nfd::Fib::const_iterator
const_iterator	table/name-tree.cpp	/^NameTree::const_iterator::const_iterator()$/;"	f	class:nfd::NameTree::const_iterator
const_iterator	table/name-tree.cpp	/^NameTree::const_iterator::const_iterator(NameTree::IteratorType type,$/;"	f	class:nfd::NameTree::const_iterator
const_iterator	table/name-tree.hpp	/^  class const_iterator : public std::iterator<std::forward_iterator_tag, const name_tree::Entry>$/;"	c	class:nfd::NameTree
const_iterator	table/pit.hpp	/^  class const_iterator : public std::iterator<std::forward_iterator_tag, const pit::Entry>$/;"	c	class:nfd::Pit
const_iterator	table/pit.hpp	/^Pit::const_iterator::const_iterator()$/;"	f	class:nfd::Pit::const_iterator
const_iterator	table/pit.hpp	/^Pit::const_iterator::const_iterator(const NameTree::const_iterator& it)$/;"	f	class:nfd::Pit::const_iterator
const_iterator	table/strategy-choice.hpp	/^  class const_iterator$/;"	c	class:nfd::StrategyChoice
const_iterator	table/strategy-choice.hpp	/^StrategyChoice::const_iterator::const_iterator(const NameTree::const_iterator& it)$/;"	f	class:nfd::StrategyChoice::const_iterator
copyStatusTo	face/face.cpp	/^Face::copyStatusTo(FaceTraits& traits) const$/;"	f	class:nfd::Face
copyTo	face/face-counters.hpp	/^  copyTo(R& recipient) const$/;"	f	class:nfd::FaceCounters
copyTo	face/face-counters.hpp	/^  copyTo(R& recipient) const$/;"	f	class:nfd::LinkLayerCounters
copyTo	face/face-counters.hpp	/^  copyTo(R& recipient) const$/;"	f	class:nfd::NetworkLayerCounters
copyTo	fw/forwarder-counters.hpp	/^  copyTo(R& recipient) const$/;"	f	class:nfd::ForwarderCounters
count	face/ndnlp-sequence-generator.hpp	/^SequenceBlock::count() const$/;"	f	class:nfd::ndnlp::SequenceBlock
countMarks	table/dead-nonce-list.cpp	/^DeadNonceList::countMarks() const$/;"	f	class:nfd::DeadNonceList
createChannel	face/tcp-factory.cpp	/^TcpFactory::createChannel(const std::string& localIp, const std::string& localPort)$/;"	f	class:nfd::TcpFactory
createChannel	face/tcp-factory.cpp	/^TcpFactory::createChannel(const tcp::Endpoint& endpoint)$/;"	f	class:nfd::TcpFactory
createChannel	face/udp-factory.cpp	/^UdpFactory::createChannel(const std::string& localIp, const std::string& localPort,$/;"	f	class:nfd::UdpFactory
createChannel	face/udp-factory.cpp	/^UdpFactory::createChannel(const udp::Endpoint& endpoint,$/;"	f	class:nfd::UdpFactory
createChannel	face/unix-stream-factory.cpp	/^UnixStreamFactory::createChannel(const std::string& unixSocketPath)$/;"	f	class:nfd::UnixStreamFactory
createChannel	face/websocket-factory.cpp	/^WebSocketFactory::createChannel(const std::string& localIp, const std::string& localPort)$/;"	f	class:nfd::WebSocketFactory
createChannel	face/websocket-factory.cpp	/^WebSocketFactory::createChannel(const websocket::Endpoint& endpoint)$/;"	f	class:nfd::WebSocketFactory
createFace	face/ethernet-factory.cpp	/^EthernetFactory::createFace(const FaceUri& uri,$/;"	f	class:nfd::EthernetFactory
createFace	face/tcp-channel.cpp	/^TcpChannel::createFace(ip::tcp::socket socket,$/;"	f	class:nfd::TcpChannel
createFace	face/tcp-factory.cpp	/^TcpFactory::createFace(const FaceUri& uri,$/;"	f	class:nfd::TcpFactory
createFace	face/udp-channel.cpp	/^UdpChannel::createFace(const udp::Endpoint& remoteEndpoint, ndn::nfd::FacePersistency persistency)$/;"	f	class:nfd::UdpChannel
createFace	face/udp-factory.cpp	/^UdpFactory::createFace(const FaceUri& uri,$/;"	f	class:nfd::UdpFactory
createFace	face/unix-stream-factory.cpp	/^UnixStreamFactory::createFace(const FaceUri& uri,$/;"	f	class:nfd::UnixStreamFactory
createFace	face/websocket-factory.cpp	/^WebSocketFactory::createFace(const FaceUri& uri,$/;"	f	class:nfd::WebSocketFactory
createFace	mgmt/face-manager.cpp	/^FaceManager::createFace(const Name& topPrefix, const Interest& interest,$/;"	f	class:nfd::FaceManager
createMulticastFace	face/ethernet-factory.cpp	/^EthernetFactory::createMulticastFace(const NetworkInterfaceInfo& interface,$/;"	f	class:nfd::EthernetFactory
createMulticastFace	face/udp-factory.cpp	/^UdpFactory::createMulticastFace(const std::string& localIp,$/;"	f	class:nfd::UdpFactory
createMulticastFace	face/udp-factory.cpp	/^UdpFactory::createMulticastFace(const udp::Endpoint& localEndpoint,$/;"	f	class:nfd::UdpFactory
cs	table/cs-entry-impl.cpp	/^namespace cs {$/;"	n	namespace:nfd	file:
cs	table/cs-entry-impl.hpp	/^namespace cs {$/;"	n	namespace:nfd
cs	table/cs-entry.cpp	/^namespace cs {$/;"	n	namespace:nfd	file:
cs	table/cs-entry.hpp	/^namespace cs {$/;"	n	namespace:nfd
cs	table/cs-internal.hpp	/^namespace cs {$/;"	n	namespace:nfd
cs	table/cs-policy-lru.cpp	/^namespace cs {$/;"	n	namespace:nfd	file:
cs	table/cs-policy-lru.hpp	/^namespace cs {$/;"	n	namespace:nfd
cs	table/cs-policy-priority-fifo.cpp	/^namespace cs {$/;"	n	namespace:nfd	file:
cs	table/cs-policy-priority-fifo.hpp	/^namespace cs {$/;"	n	namespace:nfd
cs	table/cs-policy.cpp	/^namespace cs {$/;"	n	namespace:nfd	file:
cs	table/cs-policy.hpp	/^namespace cs {$/;"	n	namespace:nfd
cs	table/cs.cpp	/^namespace cs {$/;"	n	namespace:nfd	file:
cs	table/cs.hpp	/^namespace cs {$/;"	n	namespace:nfd
decide	fw/retx-suppression-exponential.cpp	/^RetxSuppressionExponential::decide(const Face& inFace, const Interest& interest,$/;"	f	class:nfd::fw::RetxSuppressionExponential
decide	fw/retx-suppression-fixed.cpp	/^RetxSuppressionFixed::decide(const Face& inFace, const Interest& interest,$/;"	f	class:nfd::fw::RetxSuppressionFixed
decodeAndDispatchInput	face/face.cpp	/^Face::decodeAndDispatchInput(const Block& element)$/;"	f	class:nfd::Face
decodeAndDispatchInput	face/local-face.hpp	/^LocalFace::decodeAndDispatchInput(const Block& element)$/;"	f	class:nfd::LocalFace
decodeData	face/generic-link-service.cpp	/^GenericLinkService::decodeData(const Block& netPkt, const lp::Packet& firstPkt)$/;"	f	class:nfd::face::GenericLinkService
decodeInterest	face/generic-link-service.cpp	/^GenericLinkService::decodeInterest(const Block& netPkt, const lp::Packet& firstPkt)$/;"	f	class:nfd::face::GenericLinkService
decodeNack	face/generic-link-service.cpp	/^GenericLinkService::decodeNack(const Block& netPkt, const lp::Packet& firstPkt)$/;"	f	class:nfd::face::GenericLinkService
deferredClose	face/stream-face.hpp	/^StreamFace<T, U>::deferredClose(const shared_ptr<Face>& face)$/;"	f	class:nfd::StreamFace
deferredClose	face/stream-transport.hpp	/^StreamTransport<T>::deferredClose()$/;"	f	class:nfd::face::StreamTransport
deleteInRecord	table/pit-entry.cpp	/^Entry::deleteInRecord(const Face& face)$/;"	f	class:nfd::pit::Entry
deleteInRecords	table/pit-entry.cpp	/^Entry::deleteInRecords()$/;"	f	class:nfd::pit::Entry
deleteOutRecord	table/pit-entry.cpp	/^Entry::deleteOutRecord(const Face& face)$/;"	f	class:nfd::pit::Entry
destroyFace	mgmt/face-manager.cpp	/^FaceManager::destroyFace(const Name& topPrefix, const Interest& interest,$/;"	f	class:nfd::FaceManager
detachQueue	table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::detachQueue(iterator i)$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
disableLocalControl	mgmt/face-manager.cpp	/^FaceManager::disableLocalControl(const Name& topPrefix, const Interest& interest,$/;"	f	class:nfd::FaceManager
dispatchData	face/lp-face-wrapper.cpp	/^LpFaceWrapper::dispatchData(const Data& data)$/;"	f	class:nfd::face::LpFaceWrapper
dispatchInterest	face/lp-face-wrapper.cpp	/^LpFaceWrapper::dispatchInterest(const Interest& interest)$/;"	f	class:nfd::face::LpFaceWrapper
dispatchNack	face/lp-face-wrapper.cpp	/^LpFaceWrapper::dispatchNack(const ndn::lp::Nack& nack)$/;"	f	class:nfd::face::LpFaceWrapper
dispatchToStrategy	fw/forwarder.hpp	/^Forwarder::dispatchToStrategy(shared_ptr<pit::Entry> pitEntry, function<void(fw::Strategy*)> trigger)$/;"	f	class:nfd::Forwarder
doAfterInsert	table/cs-policy-lru.cpp	/^LruPolicy::doAfterInsert(iterator i)$/;"	f	class:nfd::cs::lru::LruPolicy
doAfterInsert	table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::doAfterInsert(iterator i)$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
doAfterRefresh	table/cs-policy-lru.cpp	/^LruPolicy::doAfterRefresh(iterator i)$/;"	f	class:nfd::cs::lru::LruPolicy
doAfterRefresh	table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::doAfterRefresh(iterator i)$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
doBeforeErase	table/cs-policy-lru.cpp	/^LruPolicy::doBeforeErase(iterator i)$/;"	f	class:nfd::cs::lru::LruPolicy
doBeforeErase	table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::doBeforeErase(iterator i)$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
doBeforeUse	table/cs-policy-lru.cpp	/^LruPolicy::doBeforeUse(iterator i)$/;"	f	class:nfd::cs::lru::LruPolicy
doBeforeUse	table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::doBeforeUse(iterator i)$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
doClose	face/datagram-transport.hpp	/^DatagramTransport<T, U>::doClose()$/;"	f	class:nfd::face::DatagramTransport
doClose	face/internal-transport.cpp	/^InternalForwarderTransport::doClose()$/;"	f	class:nfd::face::InternalForwarderTransport
doClose	face/multicast-udp-transport.cpp	/^MulticastUdpTransport::doClose()$/;"	f	class:nfd::face::MulticastUdpTransport
doClose	face/stream-transport.hpp	/^StreamTransport<T>::doClose()$/;"	f	class:nfd::face::StreamTransport
doPropagate	fw/ncc-strategy.cpp	/^NccStrategy::doPropagate(weak_ptr<pit::Entry> pitEntryWeak, weak_ptr<fib::Entry> fibEntryWeak)$/;"	f	class:nfd::fw::NccStrategy
doReceivePacket	face/generic-link-service.cpp	/^GenericLinkService::doReceivePacket(Transport::Packet&& packet)$/;"	f	class:nfd::face::GenericLinkService
doSend	face/datagram-transport.hpp	/^DatagramTransport<T, U>::doSend(Transport::Packet&& packet)$/;"	f	class:nfd::face::DatagramTransport
doSend	face/internal-transport.cpp	/^InternalForwarderTransport::doSend(Packet&& packet)$/;"	f	class:nfd::face::InternalForwarderTransport
doSend	face/multicast-udp-transport.cpp	/^MulticastUdpTransport::doSend(Transport::Packet&& packet)$/;"	f	class:nfd::face::MulticastUdpTransport
doSend	face/stream-transport.hpp	/^StreamTransport<T>::doSend(Transport::Packet&& packet)$/;"	f	class:nfd::face::StreamTransport
doSendData	face/generic-link-service.cpp	/^GenericLinkService::doSendData(const Data& data)$/;"	f	class:nfd::face::GenericLinkService
doSendInterest	face/generic-link-service.cpp	/^GenericLinkService::doSendInterest(const Interest& interest)$/;"	f	class:nfd::face::GenericLinkService
doSendNack	face/generic-link-service.cpp	/^GenericLinkService::doSendNack(const lp::Nack& nack)$/;"	f	class:nfd::face::GenericLinkService
doesMatchFilter	mgmt/face-manager.cpp	/^FaceManager::doesMatchFilter(const ndn::nfd::FaceQueryFilter& filter, shared_ptr<Face> face)$/;"	f	class:nfd::FaceManager
doubleMultiplier	fw/rtt-estimator.cpp	/^RttEstimator::doubleMultiplier()$/;"	f	class:nfd::RttEstimator
dump	table/cs.cpp	/^Cs::dump()$/;"	f	class:nfd::cs::Cs
dump	table/name-tree.cpp	/^NameTree::dump(std::ostream& output) const$/;"	f	class:nfd::NameTree
enableLocalControl	mgmt/face-manager.cpp	/^FaceManager::enableLocalControl(const Name& topPrefix, const Interest& interest,$/;"	f	class:nfd::FaceManager
encodeFragment	face/ndnlp-slicer.cpp	/^Slicer::encodeFragment(ndn::EncodingImpl<T>& blk,$/;"	f	class:nfd::ndnlp::Slicer
encodeLocalFields	face/generic-link-service.cpp	/^GenericLinkService::encodeLocalFields(const Data& data, lp::Packet& lpPacket)$/;"	f	class:nfd::face::GenericLinkService
encodeLocalFields	face/generic-link-service.cpp	/^GenericLinkService::encodeLocalFields(const Interest& interest, lp::Packet& lpPacket)$/;"	f	class:nfd::face::GenericLinkService
end	fw/face-table.cpp	/^FaceTable::end() const$/;"	f	class:nfd::FaceTable
end	table/cs.hpp	/^  end() const$/;"	f	class:nfd::cs::Cs
end	table/fib.hpp	/^Fib::end() const$/;"	f	class:nfd::Fib
end	table/name-tree.hpp	/^NameTree::end() const$/;"	f	class:nfd::NameTree
end	table/pit.hpp	/^Pit::end() const$/;"	f	class:nfd::Pit
end	table/strategy-choice.hpp	/^StrategyChoice::end() const$/;"	f	class:nfd::StrategyChoice
ensureTablesAreConfigured	mgmt/tables-config-section.cpp	/^TablesConfigSection::ensureTablesAreConfigured()$/;"	f	class:nfd::TablesConfigSection
erase	table/cs.hpp	/^  erase(const Name& exactName)$/;"	f	class:nfd::cs::Cs
erase	table/fib.cpp	/^Fib::erase(const Name& prefix)$/;"	f	class:nfd::Fib
erase	table/fib.cpp	/^Fib::erase(const fib::Entry& entry)$/;"	f	class:nfd::Fib
erase	table/fib.cpp	/^Fib::erase(shared_ptr<name_tree::Entry> nameTreeEntry)$/;"	f	class:nfd::Fib
erase	table/pit.cpp	/^Pit::erase(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::Pit
erase	table/strategy-choice.cpp	/^StrategyChoice::erase(const Name& prefix)$/;"	f	class:nfd::StrategyChoice
eraseEntryIfEmpty	table/name-tree.cpp	/^NameTree::eraseEntryIfEmpty(shared_ptr<name_tree::Entry> entry)$/;"	f	class:nfd::NameTree
erasePitEntry	table/name-tree-entry.cpp	/^Entry::erasePitEntry(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::name_tree::Entry
estimateOverhead	face/ndnlp-slicer.cpp	/^Slicer::estimateOverhead()$/;"	f	class:nfd::ndnlp::Slicer
evictEntries	table/cs-policy-lru.cpp	/^LruPolicy::evictEntries()$/;"	f	class:nfd::cs::lru::LruPolicy
evictEntries	table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::evictEntries()$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
evictEntries	table/dead-nonce-list.cpp	/^DeadNonceList::evictEntries()$/;"	f	class:nfd::DeadNonceList
evictOne	table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::evictOne()$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
expireEvent	face/ethernet-face.hpp	/^    scheduler::EventId expireEvent;$/;"	m	struct:nfd::EthernetFace::Reassembler
expiry	face/ndnlp-partial-message-store.hpp	/^  scheduler::ScopedEventId expiry;$/;"	m	class:nfd::ndnlp::PartialMessage
extendLifetime	table/measurements-accessor.hpp	/^MeasurementsAccessor::extendLifetime(measurements::Entry& entry,$/;"	f	class:nfd::MeasurementsAccessor
extendLifetime	table/measurements.cpp	/^Measurements::extendLifetime(Entry& entry,$/;"	f	class:nfd::Measurements
extractLocalControlParameters	mgmt/face-manager.cpp	/^FaceManager::extractLocalControlParameters(const Interest& request,$/;"	f	class:nfd::FaceManager
extractRequester	mgmt/manager-base.cpp	/^ManagerBase::extractRequester(const Interest& interest,$/;"	f	class:nfd::ManagerBase
face	face/datagram-transport.hpp	/^namespace face {$/;"	n	namespace:nfd
face	face/face-log.hpp	/^namespace face {$/;"	n	namespace:nfd
face	face/generic-link-service.cpp	/^namespace face {$/;"	n	namespace:nfd	file:
face	face/generic-link-service.hpp	/^namespace face {$/;"	n	namespace:nfd
face	face/internal-face.cpp	/^namespace face {$/;"	n	namespace:nfd	file:
face	face/internal-face.hpp	/^namespace face {$/;"	n	namespace:nfd
face	face/internal-transport.cpp	/^namespace face {$/;"	n	namespace:nfd	file:
face	face/internal-transport.hpp	/^namespace face {$/;"	n	namespace:nfd
face	face/link-service.cpp	/^namespace face {$/;"	n	namespace:nfd	file:
face	face/link-service.hpp	/^namespace face {$/;"	n	namespace:nfd
face	face/lp-face-wrapper.cpp	/^namespace face {$/;"	n	namespace:nfd	file:
face	face/lp-face-wrapper.hpp	/^namespace face {$/;"	n	namespace:nfd
face	face/lp-face.cpp	/^namespace face {$/;"	n	namespace:nfd	file:
face	face/lp-face.hpp	/^namespace face {$/;"	n	namespace:nfd
face	face/multicast-udp-transport.cpp	/^namespace face {$/;"	n	namespace:nfd	file:
face	face/multicast-udp-transport.hpp	/^namespace face {$/;"	n	namespace:nfd
face	face/stream-transport.hpp	/^namespace face {$/;"	n	namespace:nfd
face	face/transport.cpp	/^namespace face {$/;"	n	namespace:nfd	file:
face	face/transport.hpp	/^namespace face {$/;"	n	namespace:nfd
face	face/unicast-udp-transport.cpp	/^namespace face {$/;"	n	namespace:nfd	file:
face	face/unicast-udp-transport.hpp	/^namespace face {$/;"	n	namespace:nfd
face	face/unix-stream-transport.cpp	/^namespace face {$/;"	n	namespace:nfd	file:
face	face/unix-stream-transport.hpp	/^namespace face {$/;"	n	namespace:nfd
face	mgmt/face-manager.hpp	/^    shared_ptr<LocalFace> face;$/;"	m	struct:nfd::FaceManager::ExtractLocalControlParametersResult
face	mgmt/face-manager.hpp	/^namespace face {$/;"	n	namespace:nfd
fail	face/face.cpp	/^Face::fail(const std::string& reason)$/;"	f	class:nfd::Face
feature	mgmt/face-manager.hpp	/^    LocalControlFeature feature;$/;"	m	struct:nfd::FaceManager::ExtractLocalControlParametersResult
fib	table/fib-entry.cpp	/^namespace fib {$/;"	n	namespace:nfd	file:
fib	table/fib-entry.hpp	/^namespace fib {$/;"	n	namespace:nfd
fib	table/fib-nexthop.cpp	/^namespace fib {$/;"	n	namespace:nfd	file:
fib	table/fib-nexthop.hpp	/^namespace fib {$/;"	n	namespace:nfd
fib	table/measurements.hpp	/^namespace fib {$/;"	n	namespace:nfd
filter	table/measurements-accessor.cpp	/^MeasurementsAccessor::filter(const shared_ptr<measurements::Entry>& entry) const$/;"	f	class:nfd::MeasurementsAccessor
filterAndEncodeLocalControlHeader	face/local-face.hpp	/^LocalFace::filterAndEncodeLocalControlHeader(const Packet& packet)$/;"	f	class:nfd::LocalFace
find	table/cs.cpp	/^Cs::find(const Interest& interest,$/;"	f	class:nfd::cs::Cs
find	table/pit.hpp	/^Pit::find(const Interest& interest) const$/;"	f	class:nfd::Pit
findAllDataMatches	table/pit.cpp	/^Pit::findAllDataMatches(const Data& data) const$/;"	f	class:nfd::Pit
findAllMatches	table/name-tree.cpp	/^NameTree::findAllMatches(const Name& prefix,$/;"	f	class:nfd::NameTree
findChannel	face/tcp-factory.cpp	/^TcpFactory::findChannel(const tcp::Endpoint& localEndpoint) const$/;"	f	class:nfd::TcpFactory
findChannel	face/udp-factory.cpp	/^UdpFactory::findChannel(const udp::Endpoint& localEndpoint) const$/;"	f	class:nfd::UdpFactory
findChannel	face/unix-stream-factory.cpp	/^UnixStreamFactory::findChannel(const unix_stream::Endpoint& endpoint) const$/;"	f	class:nfd::UnixStreamFactory
findChannel	face/websocket-factory.cpp	/^WebSocketFactory::findChannel(const websocket::Endpoint& endpoint) const$/;"	f	class:nfd::WebSocketFactory
findEffectiveStrategy	table/strategy-choice.cpp	/^StrategyChoice::findEffectiveStrategy(const Name& prefix) const$/;"	f	class:nfd::StrategyChoice
findEffectiveStrategy	table/strategy-choice.cpp	/^StrategyChoice::findEffectiveStrategy(const measurements::Entry& measurementsEntry) const$/;"	f	class:nfd::StrategyChoice
findEffectiveStrategy	table/strategy-choice.cpp	/^StrategyChoice::findEffectiveStrategy(const pit::Entry& pitEntry) const$/;"	f	class:nfd::StrategyChoice
findEffectiveStrategy	table/strategy-choice.cpp	/^StrategyChoice::findEffectiveStrategy(shared_ptr<name_tree::Entry> nte) const$/;"	f	class:nfd::StrategyChoice
findEligibleNextHopWithEarliestOutRecord	fw/best-route-strategy2.cpp	/^findEligibleNextHopWithEarliestOutRecord(const shared_ptr<pit::Entry>& pitEntry,$/;"	f	namespace:nfd::fw
findExactMatch	table/fib.cpp	/^Fib::findExactMatch(const Name& prefix) const$/;"	f	class:nfd::Fib
findExactMatch	table/measurements-accessor.hpp	/^MeasurementsAccessor::findExactMatch(const Name& name) const$/;"	f	class:nfd::MeasurementsAccessor
findExactMatch	table/measurements.cpp	/^Measurements::findExactMatch(const Name& name) const$/;"	f	class:nfd::Measurements
findExactMatch	table/name-tree.cpp	/^NameTree::findExactMatch(const Name& prefix) const$/;"	f	class:nfd::NameTree
findLeftmost	table/cs.cpp	/^Cs::findLeftmost(const Interest& interest, iterator first, iterator last) const$/;"	f	class:nfd::cs::Cs
findLongestPrefixMatch	table/fib.cpp	/^Fib::findLongestPrefixMatch(const Name& prefix) const$/;"	f	class:nfd::Fib
findLongestPrefixMatch	table/fib.cpp	/^Fib::findLongestPrefixMatch(const measurements::Entry& measurementsEntry) const$/;"	f	class:nfd::Fib
findLongestPrefixMatch	table/fib.cpp	/^Fib::findLongestPrefixMatch(const pit::Entry& pitEntry) const$/;"	f	class:nfd::Fib
findLongestPrefixMatch	table/fib.cpp	/^Fib::findLongestPrefixMatch(shared_ptr<name_tree::Entry> nameTreeEntry) const$/;"	f	class:nfd::Fib
findLongestPrefixMatch	table/measurements-accessor.hpp	/^MeasurementsAccessor::findLongestPrefixMatch(const Name& name,$/;"	f	class:nfd::MeasurementsAccessor
findLongestPrefixMatch	table/measurements-accessor.hpp	/^MeasurementsAccessor::findLongestPrefixMatch(const pit::Entry& pitEntry,$/;"	f	class:nfd::MeasurementsAccessor
findLongestPrefixMatch	table/measurements.cpp	/^Measurements::findLongestPrefixMatch(const Name& name,$/;"	f	class:nfd::Measurements
findLongestPrefixMatch	table/measurements.cpp	/^Measurements::findLongestPrefixMatch(const pit::Entry& pitEntry,$/;"	f	class:nfd::Measurements
findLongestPrefixMatch	table/name-tree.cpp	/^NameTree::findLongestPrefixMatch(const Name& prefix, const name_tree::EntrySelector& entrySelector) const$/;"	f	class:nfd::NameTree
findLongestPrefixMatch	table/name-tree.cpp	/^NameTree::findLongestPrefixMatch(shared_ptr<name_tree::Entry> entry,$/;"	f	class:nfd::NameTree
findLongestPrefixMatchImpl	table/measurements.cpp	/^Measurements::findLongestPrefixMatchImpl(const K& key,$/;"	f	class:nfd::Measurements
findMulticastFace	face/ethernet-factory.cpp	/^EthernetFactory::findMulticastFace(const std::string& interfaceName,$/;"	f	class:nfd::EthernetFactory
findMulticastFace	face/udp-factory.cpp	/^UdpFactory::findMulticastFace(const udp::Endpoint& localEndpoint) const$/;"	f	class:nfd::UdpFactory
findNextHop	table/fib-entry.cpp	/^Entry::findNextHop(Face& face)$/;"	f	class:nfd::fib::Entry
findNonce	table/pit-entry.cpp	/^Entry::findNonce(uint32_t nonce, const Face& face) const$/;"	f	class:nfd::pit::Entry
findOrInsert	table/pit.cpp	/^Pit::findOrInsert(const Interest& interest, bool allowInsert)$/;"	f	class:nfd::Pit
findPrefixMeasurements	fw/access-strategy.cpp	/^AccessStrategy::findPrefixMeasurements(const pit::Entry& pitEntry)$/;"	f	class:nfd::fw::AccessStrategy
findRightmost	table/cs.cpp	/^Cs::findRightmost(const Interest& interest, iterator first, iterator last) const$/;"	f	class:nfd::cs::Cs
findRightmostAmongExact	table/cs.cpp	/^Cs::findRightmostAmongExact(const Interest& interest, iterator first, iterator last) const$/;"	f	class:nfd::cs::Cs
fragCount	face/ndnlp-data.hpp	/^  uint16_t fragCount;$/;"	m	class:nfd::ndnlp::NdnlpData
fragIndex	face/ndnlp-data.hpp	/^  uint16_t fragIndex;$/;"	m	class:nfd::ndnlp::NdnlpData
fromBlock	face/ndnlp-data.cpp	/^NdnlpData::fromBlock(const Block& wire)$/;"	f	class:nfd::ndnlp::NdnlpData
fullEnumerate	table/name-tree.cpp	/^NameTree::fullEnumerate(const name_tree::EntrySelector& entrySelector) const$/;"	f	class:nfd::NameTree
fw	fw/access-strategy.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	fw/access-strategy.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	fw/best-route-strategy.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	fw/best-route-strategy.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	fw/best-route-strategy2.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	fw/best-route-strategy2.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	fw/broadcast-strategy.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	fw/broadcast-strategy.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	fw/client-control-strategy.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	fw/client-control-strategy.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	fw/forwarder.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	fw/multicast-strategy.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	fw/multicast-strategy.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	fw/ncc-strategy.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	fw/ncc-strategy.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	fw/retx-suppression-exponential.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	fw/retx-suppression-exponential.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	fw/retx-suppression-fixed.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	fw/retx-suppression-fixed.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	fw/retx-suppression.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	fw/retx-suppression.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	fw/strategy-info.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	fw/strategy-registry.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	fw/strategy-registry.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	fw/strategy.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	fw/strategy.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	table/measurements-accessor.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	table/strategy-choice-entry.hpp	/^namespace fw {$/;"	n	namespace:nfd
general	mgmt/general-config-section.cpp	/^namespace general {$/;"	n	namespace:nfd	file:
general	mgmt/general-config-section.hpp	/^namespace general {$/;"	n	namespace:nfd
get	fw/face-table.cpp	/^FaceTable::get(FaceId id) const$/;"	f	class:nfd::FaceTable
get	table/measurements-accessor.hpp	/^MeasurementsAccessor::get(const Name& name)$/;"	f	class:nfd::MeasurementsAccessor
get	table/measurements-accessor.hpp	/^MeasurementsAccessor::get(const fib::Entry& fibEntry)$/;"	f	class:nfd::MeasurementsAccessor
get	table/measurements-accessor.hpp	/^MeasurementsAccessor::get(const pit::Entry& pitEntry)$/;"	f	class:nfd::MeasurementsAccessor
get	table/measurements.cpp	/^Measurements::get(const Name& name)$/;"	f	class:nfd::Measurements
get	table/measurements.cpp	/^Measurements::get(const fib::Entry& fibEntry)$/;"	f	class:nfd::Measurements
get	table/measurements.cpp	/^Measurements::get(const pit::Entry& pitEntry)$/;"	f	class:nfd::Measurements
get	table/measurements.cpp	/^Measurements::get(name_tree::Entry& nte)$/;"	f	class:nfd::Measurements
get	table/name-tree.hpp	/^NameTree::get(const fib::Entry& fibEntry) const$/;"	f	class:nfd::NameTree
get	table/name-tree.hpp	/^NameTree::get(const measurements::Entry& measurementsEntry) const$/;"	f	class:nfd::NameTree
get	table/name-tree.hpp	/^NameTree::get(const pit::Entry& pitEntry) const$/;"	f	class:nfd::NameTree
get	table/name-tree.hpp	/^NameTree::get(const strategy_choice::Entry& strategyChoiceEntry) const$/;"	f	class:nfd::NameTree
get	table/strategy-choice.cpp	/^StrategyChoice::get(const Name& prefix) const$/;"	f	class:nfd::StrategyChoice
getBestFace	fw/ncc-strategy.cpp	/^NccStrategy::MeasurementsEntryInfo::getBestFace(void) {$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
getChannels	face/ethernet-factory.cpp	/^EthernetFactory::getChannels() const$/;"	f	class:nfd::EthernetFactory
getChannels	face/tcp-factory.cpp	/^TcpFactory::getChannels() const$/;"	f	class:nfd::TcpFactory
getChannels	face/udp-factory.cpp	/^UdpFactory::getChannels() const$/;"	f	class:nfd::UdpFactory
getChannels	face/unix-stream-factory.cpp	/^UnixStreamFactory::getChannels() const$/;"	f	class:nfd::UnixStreamFactory
getChannels	face/websocket-factory.cpp	/^WebSocketFactory::getChannels() const$/;"	f	class:nfd::WebSocketFactory
getChildren	table/name-tree-entry.hpp	/^Entry::getChildren()$/;"	f	class:nfd::name_tree::Entry
getCost	table/fib-nexthop.cpp	/^NextHop::getCost() const$/;"	f	class:nfd::fib::NextHop
getCounters	face/face.hpp	/^Face::getCounters() const$/;"	f	class:nfd::Face
getCounters	face/lp-face-wrapper.hpp	/^LpFaceWrapper::getCounters() const$/;"	f	class:nfd::face::LpFaceWrapper
getCounters	face/lp-face.hpp	/^LpFace::getCounters() const$/;"	f	class:nfd::face::LpFace
getCounters	fw/forwarder.hpp	/^Forwarder::getCounters() const$/;"	f	class:nfd::Forwarder
getCs	fw/forwarder.hpp	/^Forwarder::getCs()$/;"	f	class:nfd::Forwarder
getCs	table/cs-policy.hpp	/^Policy::getCs() const$/;"	f	class:nfd::cs::Policy
getData	table/cs-entry.hpp	/^  getData() const$/;"	f	class:nfd::cs::Entry
getDeadNonceList	fw/forwarder.hpp	/^Forwarder::getDeadNonceList()$/;"	f	class:nfd::Forwarder
getDescription	face/face.hpp	/^Face::getDescription() const$/;"	f	class:nfd::Face
getExpiry	table/pit-face-record.hpp	/^FaceRecord::getExpiry() const$/;"	f	class:nfd::pit::FaceRecord
getFace	face/link-service.hpp	/^LinkService::getFace() const$/;"	f	class:nfd::face::LinkService
getFace	face/transport.hpp	/^Transport::getFace() const$/;"	f	class:nfd::face::Transport
getFace	fw/forwarder.hpp	/^Forwarder::getFace(FaceId id) const$/;"	f	class:nfd::Forwarder
getFace	fw/strategy.hpp	/^Strategy::getFace(FaceId id)$/;"	f	class:nfd::fw::Strategy
getFace	table/fib-nexthop.cpp	/^NextHop::getFace() const$/;"	f	class:nfd::fib::NextHop
getFace	table/pit-face-record.hpp	/^FaceRecord::getFace() const$/;"	f	class:nfd::pit::FaceRecord
getFaceStatus	face/face.cpp	/^Face::getFaceStatus() const$/;"	f	class:nfd::Face
getFaceTable	fw/forwarder.hpp	/^Forwarder::getFaceTable()$/;"	f	class:nfd::Forwarder
getFaceTable	fw/strategy.hpp	/^Strategy::getFaceTable()$/;"	f	class:nfd::fw::Strategy
getFib	fw/forwarder.hpp	/^Forwarder::getFib()$/;"	f	class:nfd::Forwarder
getFibEntry	table/name-tree-entry.hpp	/^Entry::getFibEntry() const$/;"	f	class:nfd::name_tree::Entry
getForwardRange	fw/face-table.cpp	/^FaceTable::getForwardRange() const$/;"	f	class:nfd::FaceTable
getFullName	table/cs-entry.hpp	/^  getFullName() const$/;"	f	class:nfd::cs::Entry
getHash	table/name-tree-entry.hpp	/^Entry::getHash() const$/;"	f	class:nfd::name_tree::Entry
getId	face/face.hpp	/^Face::getId() const$/;"	f	class:nfd::Face
getId	face/lp-face.hpp	/^LpFace::getId() const$/;"	f	class:nfd::face::LpFace
getInRecord	table/pit-entry.cpp	/^Entry::getInRecord(const Face& face) const$/;"	f	class:nfd::pit::Entry
getInRecords	table/pit-entry.hpp	/^Entry::getInRecords() const$/;"	f	class:nfd::pit::Entry
getIncomingNack	table/pit-out-record.hpp	/^  getIncomingNack() const$/;"	f	class:nfd::pit::OutRecord
getInitialLifetime	table/measurements.hpp	/^Measurements::getInitialLifetime()$/;"	f	class:nfd::Measurements
getInitialRtt	fw/rtt-estimator.hpp	/^  getInitialRtt(void)$/;"	f	class:nfd::RttEstimator
getInterest	table/pit-entry.hpp	/^Entry::getInterest() const$/;"	f	class:nfd::pit::Entry
getInterest	table/pit-in-record.hpp	/^InRecord::getInterest() const$/;"	f	class:nfd::pit::InRecord
getInterfaceMtu	face/ethernet-face.cpp	/^EthernetFace::getInterfaceMtu()$/;"	f	class:nfd::EthernetFace
getLastNonce	table/pit-face-record.hpp	/^FaceRecord::getLastNonce() const$/;"	f	class:nfd::pit::FaceRecord
getLastOutgoing	fw/retx-suppression.cpp	/^RetxSuppression::getLastOutgoing(const pit::Entry& pitEntry) const$/;"	f	class:nfd::fw::RetxSuppression
getLastRenewed	table/pit-face-record.hpp	/^FaceRecord::getLastRenewed() const$/;"	f	class:nfd::pit::FaceRecord
getLifetime	table/dead-nonce-list.hpp	/^DeadNonceList::getLifetime() const$/;"	f	class:nfd::DeadNonceList
getLimit	table/cs-policy.hpp	/^Policy::getLimit() const$/;"	f	class:nfd::cs::Policy
getLimit	table/cs.cpp	/^Cs::getLimit() const$/;"	f	class:nfd::cs::Cs
getLinkService	face/lp-face.hpp	/^LpFace::getLinkService()$/;"	f	class:nfd::face::LpFace
getLinkService	face/transport.hpp	/^Transport::getLinkService() const$/;"	f	class:nfd::face::Transport
getLinkService	face/transport.hpp	/^Transport::getLinkService()$/;"	f	class:nfd::face::Transport
getLinkType	face/lp-face.hpp	/^LpFace::getLinkType() const$/;"	f	class:nfd::face::LpFace
getLinkType	face/transport.hpp	/^Transport::getLinkType() const$/;"	f	class:nfd::face::Transport
getLocalUri	face/face.hpp	/^Face::getLocalUri() const$/;"	f	class:nfd::Face
getLocalUri	face/lp-face.hpp	/^LpFace::getLocalUri() const$/;"	f	class:nfd::face::LpFace
getLocalUri	face/transport.hpp	/^Transport::getLocalUri() const$/;"	f	class:nfd::face::Transport
getLpFace	face/lp-face-wrapper.hpp	/^LpFaceWrapper::getLpFace()$/;"	f	class:nfd::face::LpFaceWrapper
getMeasurements	fw/forwarder.hpp	/^Forwarder::getMeasurements()$/;"	f	class:nfd::Forwarder
getMeasurements	fw/strategy.hpp	/^Strategy::getMeasurements()$/;"	f	class:nfd::fw::Strategy
getMeasurementsEntry	table/name-tree-entry.hpp	/^Entry::getMeasurementsEntry() const$/;"	f	class:nfd::name_tree::Entry
getMeasurementsEntryInfo	fw/ncc-strategy.cpp	/^NccStrategy::getMeasurementsEntryInfo(shared_ptr<measurements::Entry> entry)$/;"	f	class:nfd::fw::NccStrategy
getMeasurementsEntryInfo	fw/ncc-strategy.cpp	/^NccStrategy::getMeasurementsEntryInfo(shared_ptr<pit::Entry> entry)$/;"	f	class:nfd::fw::NccStrategy
getMtu	face/transport.hpp	/^Transport::getMtu() const$/;"	f	class:nfd::face::Transport
getMulticastFaces	face/ethernet-factory.hpp	/^EthernetFactory::getMulticastFaces() const$/;"	f	class:nfd::EthernetFactory
getMulticastFaces	face/udp-factory.hpp	/^UdpFactory::getMulticastFaces() const$/;"	f	class:nfd::UdpFactory
getMutableCounters	face/face.hpp	/^Face::getMutableCounters()$/;"	f	class:nfd::Face
getMutableCounters	face/lp-face.hpp	/^LpFace::getMutableCounters()$/;"	f	class:nfd::face::LpFace
getNBuckets	table/name-tree.hpp	/^NameTree::getNBuckets() const$/;"	f	class:nfd::NameTree
getNInBytes	face/face-counters.hpp	/^  getNInBytes() const$/;"	f	class:nfd::LinkLayerCounters
getNInBytes	face/face-counters.hpp	/^  getNInBytes()$/;"	f	class:nfd::LinkLayerCounters
getNInDatas	face/face-counters.hpp	/^  getNInDatas() const$/;"	f	class:nfd::NetworkLayerCounters
getNInDatas	face/face-counters.hpp	/^  getNInDatas()$/;"	f	class:nfd::NetworkLayerCounters
getNInInterests	face/face-counters.hpp	/^  getNInInterests() const$/;"	f	class:nfd::NetworkLayerCounters
getNInInterests	face/face-counters.hpp	/^  getNInInterests()$/;"	f	class:nfd::NetworkLayerCounters
getNOutBytes	face/face-counters.hpp	/^  getNOutBytes() const$/;"	f	class:nfd::LinkLayerCounters
getNOutBytes	face/face-counters.hpp	/^  getNOutBytes()$/;"	f	class:nfd::LinkLayerCounters
getNOutDatas	face/face-counters.hpp	/^  getNOutDatas() const$/;"	f	class:nfd::NetworkLayerCounters
getNOutDatas	face/face-counters.hpp	/^  getNOutDatas()$/;"	f	class:nfd::NetworkLayerCounters
getNOutInterests	face/face-counters.hpp	/^  getNOutInterests() const$/;"	f	class:nfd::NetworkLayerCounters
getNOutInterests	face/face-counters.hpp	/^  getNOutInterests()$/;"	f	class:nfd::NetworkLayerCounters
getName	fw/strategy.hpp	/^Strategy::getName() const$/;"	f	class:nfd::fw::Strategy
getName	table/cs-entry.hpp	/^  getName() const$/;"	f	class:nfd::cs::Entry
getName	table/cs-policy.hpp	/^Policy::getName() const$/;"	f	class:nfd::cs::Policy
getName	table/measurements-entry.hpp	/^Entry::getName() const$/;"	f	class:nfd::measurements::Entry
getName	table/pit-entry.cpp	/^Entry::getName() const$/;"	f	class:nfd::pit::Entry
getNameTree	fw/forwarder.hpp	/^Forwarder::getNameTree()$/;"	f	class:nfd::Forwarder
getNetworkRegionTable	fw/forwarder.hpp	/^Forwarder::getNetworkRegionTable()$/;"	f	class:nfd::Forwarder
getNextHops	table/fib-entry.hpp	/^Entry::getNextHops() const$/;"	f	class:nfd::fib::Entry
getOptions	face/generic-link-service.hpp	/^GenericLinkService::getOptions() const$/;"	f	class:nfd::face::GenericLinkService
getOrCreateStrategyInfo	table/strategy-info-host.hpp	/^StrategyInfoHost::getOrCreateStrategyInfo(A&&... args)$/;"	f	class:nfd::StrategyInfoHost
getOutRecord	table/pit-entry.cpp	/^Entry::getOutRecord(const Face& face)$/;"	f	class:nfd::pit::Entry
getOutRecords	table/pit-entry.hpp	/^Entry::getOutRecords() const$/;"	f	class:nfd::pit::Entry
getParent	table/measurements-accessor.hpp	/^MeasurementsAccessor::getParent(const measurements::Entry& child)$/;"	f	class:nfd::MeasurementsAccessor
getParent	table/measurements.cpp	/^Measurements::getParent(const Entry& child)$/;"	f	class:nfd::Measurements
getParent	table/name-tree-entry.hpp	/^Entry::getParent() const$/;"	f	class:nfd::name_tree::Entry
getPersistency	face/face.hpp	/^Face::getPersistency() const$/;"	f	class:nfd::Face
getPersistency	face/lp-face.hpp	/^LpFace::getPersistency() const$/;"	f	class:nfd::face::LpFace
getPersistency	face/transport.hpp	/^Transport::getPersistency() const$/;"	f	class:nfd::face::Transport
getPit	fw/forwarder.hpp	/^Forwarder::getPit()$/;"	f	class:nfd::Forwarder
getPitEntries	table/name-tree-entry.hpp	/^Entry::getPitEntries() const$/;"	f	class:nfd::name_tree::Entry
getPolicy	table/cs.hpp	/^  getPolicy() const$/;"	f	class:nfd::cs::Cs
getPrefix	table/fib-entry.hpp	/^Entry::getPrefix() const$/;"	f	class:nfd::fib::Entry
getPrefix	table/name-tree-entry.hpp	/^Entry::getPrefix() const$/;"	f	class:nfd::name_tree::Entry
getPrefix	table/strategy-choice-entry.hpp	/^Entry::getPrefix() const$/;"	f	class:nfd::strategy_choice::Entry
getRemoteUri	face/face.hpp	/^Face::getRemoteUri() const$/;"	f	class:nfd::Face
getRemoteUri	face/lp-face.hpp	/^LpFace::getRemoteUri() const$/;"	f	class:nfd::face::LpFace
getRemoteUri	face/transport.hpp	/^Transport::getRemoteUri() const$/;"	f	class:nfd::face::Transport
getScope	face/lp-face.hpp	/^LpFace::getScope() const$/;"	f	class:nfd::face::LpFace
getScope	face/transport.hpp	/^Transport::getScope() const$/;"	f	class:nfd::face::Transport
getStaleTime	table/cs-entry.hpp	/^  getStaleTime() const$/;"	f	class:nfd::cs::Entry
getState	face/lp-face.hpp	/^LpFace::getState() const$/;"	f	class:nfd::face::LpFace
getState	face/transport.hpp	/^Transport::getState() const$/;"	f	class:nfd::face::Transport
getStrategy	table/strategy-choice-entry.hpp	/^Entry::getStrategy() const$/;"	f	class:nfd::strategy_choice::Entry
getStrategy	table/strategy-choice.cpp	/^StrategyChoice::getStrategy(const Name& strategyName) const$/;"	f	class:nfd::StrategyChoice
getStrategyChoice	fw/forwarder.hpp	/^Forwarder::getStrategyChoice()$/;"	f	class:nfd::Forwarder
getStrategyChoiceEntry	table/name-tree-entry.hpp	/^Entry::getStrategyChoiceEntry() const$/;"	f	class:nfd::name_tree::Entry
getStrategyFactories	fw/strategy-registry.cpp	/^getStrategyFactories()$/;"	f	namespace:nfd::fw
getStrategyInfo	table/strategy-info-host.hpp	/^StrategyInfoHost::getStrategyInfo() const$/;"	f	class:nfd::StrategyInfoHost
getStrategyName	table/strategy-choice-entry.cpp	/^Entry::getStrategyName() const$/;"	f	class:nfd::strategy_choice::Entry
getTransport	face/link-service.hpp	/^LinkService::getTransport() const$/;"	f	class:nfd::face::LinkService
getTransport	face/link-service.hpp	/^LinkService::getTransport()$/;"	f	class:nfd::face::LinkService
getTransport	face/lp-face.hpp	/^LpFace::getTransport()$/;"	f	class:nfd::face::LpFace
getTypeId	fw/access-strategy.hpp	/^    getTypeId()$/;"	f	class:nfd::fw::AccessStrategy::MtInfo
getTypeId	fw/access-strategy.hpp	/^    getTypeId()$/;"	f	class:nfd::fw::AccessStrategy::PitInfo
getTypeId	fw/ncc-strategy.hpp	/^    getTypeId()$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
getTypeId	fw/ncc-strategy.hpp	/^    getTypeId()$/;"	f	class:nfd::fw::NccStrategy::PitEntryInfo
getTypeId	fw/retx-suppression-exponential.cpp	/^  getTypeId()$/;"	f	class:nfd::fw::RetxSuppressionExponential::PitInfo
getTypeId	fw/strategy-info.hpp	/^  getTypeId()$/;"	f	class:nfd::fw::StrategyInfo
getUri	face/channel.hpp	/^Channel::getUri() const$/;"	f	class:nfd::Channel
handleAccept	face/tcp-channel.cpp	/^TcpChannel::handleAccept(const boost::system::error_code& error,$/;"	f	class:nfd::TcpChannel
handleAccept	face/unix-stream-channel.cpp	/^UnixStreamChannel::handleAccept(const boost::system::error_code& error,$/;"	f	class:nfd::UnixStreamChannel
handleClose	face/websocket-channel.cpp	/^WebSocketChannel::handleClose(websocketpp::connection_hdl hdl)$/;"	f	class:nfd::WebSocketChannel
handleCommand	mgmt/manager-base.cpp	/^ManagerBase::handleCommand(shared_ptr<nfd::ControlCommand> command,$/;"	f	class:nfd::ManagerBase
handleConnect	face/tcp-channel.cpp	/^TcpChannel::handleConnect(const boost::system::error_code& error,$/;"	f	class:nfd::TcpChannel
handleConnectTimeout	face/tcp-channel.cpp	/^TcpChannel::handleConnectTimeout(const shared_ptr<ip::tcp::socket>& socket,$/;"	f	class:nfd::TcpChannel
handleMessage	face/websocket-channel.cpp	/^WebSocketChannel::handleMessage(websocketpp::connection_hdl hdl,$/;"	f	class:nfd::WebSocketChannel
handleNewPeer	face/udp-channel.cpp	/^UdpChannel::handleNewPeer(const boost::system::error_code& error,$/;"	f	class:nfd::UdpChannel
handleOpen	face/websocket-channel.cpp	/^WebSocketChannel::handleOpen(websocketpp::connection_hdl hdl)$/;"	f	class:nfd::WebSocketChannel
handlePong	face/websocket-channel.cpp	/^WebSocketChannel::handlePong(websocketpp::connection_hdl hdl, std::string msg)$/;"	f	class:nfd::WebSocketChannel
handlePongTimeout	face/websocket-channel.cpp	/^WebSocketChannel::handlePongTimeout(websocketpp::connection_hdl hdl, std::string msg)$/;"	f	class:nfd::WebSocketChannel
handleRead	face/ethernet-face.cpp	/^EthernetFace::handleRead(const boost::system::error_code& error, size_t)$/;"	f	class:nfd::EthernetFace
handleReceive	face/datagram-transport.hpp	/^DatagramTransport<T, U>::handleReceive(const boost::system::error_code& error,$/;"	f	class:nfd::face::DatagramTransport
handleReceive	face/stream-face.hpp	/^StreamFace<T, U>::handleReceive(const boost::system::error_code& error,$/;"	f	class:nfd::StreamFace
handleReceive	face/stream-transport.hpp	/^StreamTransport<T>::handleReceive(const boost::system::error_code& error,$/;"	f	class:nfd::face::StreamTransport
handleReceive	face/websocket-face.cpp	/^WebSocketFace::handleReceive(const std::string& msg)$/;"	f	class:nfd::WebSocketFace
handleSend	face/datagram-transport.hpp	/^DatagramTransport<T, U>::handleSend(const boost::system::error_code& error,$/;"	f	class:nfd::face::DatagramTransport
handleSend	face/stream-face.hpp	/^StreamFace<T, U>::handleSend(const boost::system::error_code& error,$/;"	f	class:nfd::StreamFace
handleSend	face/stream-transport.hpp	/^StreamTransport<T>::handleSend(const boost::system::error_code& error,$/;"	f	class:nfd::face::StreamTransport
handleStateChange	face/lp-face-wrapper.cpp	/^LpFaceWrapper::handleStateChange(FaceState oldState, FaceState newState)$/;"	f	class:nfd::face::LpFaceWrapper
has	table/dead-nonce-list.cpp	/^DeadNonceList::has(const Name& name, uint32_t nonce) const$/;"	f	class:nfd::DeadNonceList
hasBeenUsedRecently	face/datagram-transport.hpp	/^DatagramTransport<T, U>::hasBeenUsedRecently() const$/;"	f	class:nfd::face::DatagramTransport
hasChildren	table/name-tree-entry.hpp	/^Entry::hasChildren() const$/;"	f	class:nfd::name_tree::Entry
hasData	table/cs-entry.hpp	/^  hasData() const$/;"	f	class:nfd::cs::Entry
hasLocalInRecord	table/pit-entry.cpp	/^Entry::hasLocalInRecord() const$/;"	f	class:nfd::pit::Entry
hasNextHop	table/fib-entry.cpp	/^Entry::hasNextHop(shared_ptr<Face> face) const$/;"	f	class:nfd::fib::Entry
hasNextHops	table/fib-entry.hpp	/^Entry::hasNextHops() const$/;"	f	class:nfd::fib::Entry
hasPitEntries	table/name-tree-entry.hpp	/^Entry::hasPitEntries() const$/;"	f	class:nfd::name_tree::Entry
hasStrategy	table/strategy-choice.cpp	/^StrategyChoice::hasStrategy(const Name& strategyName, bool isExact) const$/;"	f	class:nfd::StrategyChoice
hasUnexpiredOutRecords	table/pit-entry.cpp	/^Entry::hasUnexpiredOutRecords() const$/;"	f	class:nfd::pit::Entry
if_c	table/name-tree.cpp	/^typedef boost::mpl::if_c<sizeof(size_t) >= 8, Hash64, Hash32>::type CityHash;$/;"	t	class:nfd::name_tree::boost::mpl	file:
ignoreRibAndLogSections	nfd.cpp	/^ignoreRibAndLogSections(const std::string& filename, const std::string& sectionName,$/;"	f	namespace:nfd
incrementMultiplier	fw/rtt-estimator.cpp	/^RttEstimator::incrementMultiplier()$/;"	f	class:nfd::RttEstimator
inheritFrom	fw/ncc-strategy.cpp	/^NccStrategy::MeasurementsEntryInfo::inheritFrom(const MeasurementsEntryInfo& other)$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
initialize	main.cpp	/^  initialize()$/;"	f	class:nfd::NfdRunner
initialize	nfd.cpp	/^Nfd::initialize()$/;"	f	class:nfd::Nfd
initializeLogging	nfd.cpp	/^Nfd::initializeLogging()$/;"	f	class:nfd::Nfd
initializeManagement	nfd.cpp	/^Nfd::initializeManagement()$/;"	f	class:nfd::Nfd
insert	table/cs.cpp	/^Cs::insert(const Data& data, bool isUnsolicited)$/;"	f	class:nfd::cs::Cs
insert	table/fib.cpp	/^Fib::insert(const Name& prefix)$/;"	f	class:nfd::Fib
insert	table/name-tree.cpp	/^NameTree::insert(const Name& prefix)$/;"	f	class:nfd::NameTree
insert	table/pit.hpp	/^Pit::insert(const Interest& interest)$/;"	f	class:nfd::Pit
insert	table/strategy-choice.cpp	/^StrategyChoice::insert(const Name& prefix, const Name& strategyName)$/;"	f	class:nfd::StrategyChoice
insertDeadNonceList	fw/forwarder.cpp	/^Forwarder::insertDeadNonceList(pit::Entry& pitEntry, bool isSatisfied,$/;"	f	class:nfd::Forwarder
insertNonceToDnl	fw/forwarder.cpp	/^insertNonceToDnl(DeadNonceList& dnl, const pit::Entry& pitEntry,$/;"	f	namespace:nfd
insertOrUpdateInRecord	table/pit-entry.cpp	/^Entry::insertOrUpdateInRecord(shared_ptr<Face> face, const Interest& interest)$/;"	f	class:nfd::pit::Entry
insertOrUpdateOutRecord	table/pit-entry.cpp	/^Entry::insertOrUpdateOutRecord(shared_ptr<Face> face, const Interest& interest)$/;"	f	class:nfd::pit::Entry
insertPitEntry	table/name-tree-entry.cpp	/^Entry::insertPitEntry(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::name_tree::Entry
insertToQueue	table/cs-policy-lru.cpp	/^LruPolicy::insertToQueue(iterator i, bool isNewEntry)$/;"	f	class:nfd::cs::lru::LruPolicy
install	table/strategy-choice.cpp	/^StrategyChoice::install(shared_ptr<Strategy> strategy)$/;"	f	class:nfd::StrategyChoice
installStrategies	fw/strategy-registry.cpp	/^installStrategies(Forwarder& forwarder)$/;"	f	namespace:nfd::fw
isComplete	face/ndnlp-partial-message-store.cpp	/^PartialMessage::isComplete() const$/;"	f	class:nfd::ndnlp::PartialMessage
isEmpty	table/name-tree-entry.cpp	/^Entry::isEmpty() const$/;"	f	class:nfd::name_tree::Entry
isEmptyFilteredLocalControlHeader	face/local-face.hpp	/^LocalFace::isEmptyFilteredLocalControlHeader(const ndn::nfd::LocalControlHeader& header) const$/;"	f	class:nfd::LocalFace
isInProducerRegion	table/network-region-table.cpp	/^NetworkRegionTable::isInProducerRegion(const Link& link) const$/;"	f	class:nfd::NetworkRegionTable
isListening	face/tcp-channel.hpp	/^TcpChannel::isListening() const$/;"	f	class:nfd::TcpChannel
isListening	face/udp-channel.hpp	/^UdpChannel::isListening() const$/;"	f	class:nfd::UdpChannel
isListening	face/unix-stream-channel.hpp	/^UnixStreamChannel::isListening() const$/;"	f	class:nfd::UnixStreamChannel
isListening	face/websocket-channel.hpp	/^WebSocketChannel::isListening() const$/;"	f	class:nfd::WebSocketChannel
isLocal	face/face.hpp	/^Face::isLocal() const$/;"	f	class:nfd::Face
isLocalControlHeaderEnabled	face/local-face.hpp	/^LocalFace::isLocalControlHeaderEnabled() const$/;"	f	class:nfd::LocalFace
isLocalControlHeaderEnabled	face/local-face.hpp	/^LocalFace::isLocalControlHeaderEnabled(LocalControlFeature feature) const$/;"	f	class:nfd::LocalFace
isMultiAccess	face/face.hpp	/^Face::isMultiAccess() const$/;"	f	class:nfd::Face
isQuery	table/cs-entry-impl.cpp	/^EntryImpl::isQuery() const$/;"	f	class:nfd::cs::EntryImpl
isStale	table/cs-entry.cpp	/^Entry::isStale() const$/;"	f	class:nfd::cs::Entry
isUnsolicited	table/cs-entry.hpp	/^  isUnsolicited() const$/;"	f	class:nfd::cs::Entry
isUp	face/face.cpp	/^Face::isUp() const$/;"	f	class:nfd::Face
isUp	face/lp-face-wrapper.hpp	/^LpFaceWrapper::isUp() const$/;"	f	class:nfd::face::LpFaceWrapper
isValid	mgmt/face-manager.hpp	/^    bool isValid;$/;"	m	struct:nfd::FaceManager::ExtractLocalControlParametersResult
iterator	table/cs-internal.hpp	/^typedef Table::const_iterator iterator;$/;"	t	namespace:nfd::cs
joinMulticastGroup	face/ethernet-face.cpp	/^EthernetFace::joinMulticastGroup()$/;"	f	class:nfd::EthernetFace
lastNexthop	fw/access-strategy.hpp	/^    FaceId lastNexthop;$/;"	m	class:nfd::fw::AccessStrategy::MtInfo
listChannels	mgmt/face-manager.cpp	/^FaceManager::listChannels(const Name& topPrefix, const Interest& interest,$/;"	f	class:nfd::FaceManager
listChoices	mgmt/strategy-choice-manager.cpp	/^StrategyChoiceManager::listChoices(const Name& topPrefix, const Interest& interest,$/;"	f	class:nfd::StrategyChoiceManager
listEntries	mgmt/fib-manager.cpp	/^FibManager::listEntries(const Name& topPrefix, const Interest& interest,$/;"	f	class:nfd::FibManager
listFaces	mgmt/face-manager.cpp	/^FaceManager::listFaces(const Name& topPrefix, const Interest& interest,$/;"	f	class:nfd::FaceManager
listStatus	mgmt/forwarder-status-manager.cpp	/^ForwarderStatusManager::listStatus(const Name& topPrefix, const Interest& interest,$/;"	f	class:nfd::ForwarderStatusManager
listen	face/tcp-channel.cpp	/^TcpChannel::listen(const FaceCreatedCallback& onFaceCreated,$/;"	f	class:nfd::TcpChannel
listen	face/udp-channel.cpp	/^UdpChannel::listen(const FaceCreatedCallback& onFaceCreated,$/;"	f	class:nfd::UdpChannel
listen	face/unix-stream-channel.cpp	/^UnixStreamChannel::listen(const FaceCreatedCallback& onFaceCreated,$/;"	f	class:nfd::UnixStreamChannel
listen	face/websocket-channel.cpp	/^WebSocketChannel::listen(const FaceCreatedCallback& onFaceCreated)$/;"	f	class:nfd::WebSocketChannel
lookup	table/name-tree.cpp	/^NameTree::lookup(const Name& prefix)$/;"	f	class:nfd::NameTree
lpFace	mgmt/face-manager.hpp	/^    face::LpFace* lpFace;$/;"	m	struct:nfd::FaceManager::ExtractLocalControlParametersResult
lru	table/cs-policy-lru.cpp	/^namespace lru {$/;"	n	namespace:nfd::cs	file:
lru	table/cs-policy-lru.hpp	/^namespace lru {$/;"	n	namespace:nfd::cs
m_acceptSocket	face/tcp-channel.hpp	/^  boost::asio::ip::tcp::socket m_acceptSocket;$/;"	m	class:nfd::TcpChannel
m_acceptor	face/tcp-channel.hpp	/^  boost::asio::ip::tcp::acceptor m_acceptor;$/;"	m	class:nfd::TcpChannel
m_acceptor	face/unix-stream-channel.hpp	/^  boost::asio::local::stream_protocol::acceptor m_acceptor;$/;"	m	class:nfd::UnixStreamChannel
m_actualMarkCounts	table/dead-nonce-list.hpp	/^  std::multiset<size_t> m_actualMarkCounts;$/;"	m	class:nfd::DeadNonceList
m_adjustCapacityEvent	table/dead-nonce-list.hpp	/^  scheduler::EventId m_adjustCapacityEvent;$/;"	m	class:nfd::DeadNonceList
m_adjustCapacityInterval	table/dead-nonce-list.hpp	/^  time::nanoseconds m_adjustCapacityInterval;$/;"	m	class:nfd::DeadNonceList
m_areTablesConfigured	mgmt/tables-config-section.hpp	/^  bool m_areTablesConfigured;$/;"	m	class:nfd::TablesConfigSection
m_beforeEvictConnection	table/cs.hpp	/^  ndn::util::signal::ScopedConnection m_beforeEvictConnection;$/;"	m	class:nfd::cs::Cs
m_buckets	table/name-tree.hpp	/^  name_tree::Node**             m_buckets; \/\/ Name Tree Buckets in the NPHT$/;"	m	class:nfd::NameTree
m_capacity	table/dead-nonce-list.hpp	/^  size_t m_capacity;$/;"	m	class:nfd::DeadNonceList
m_channelFaces	face/tcp-channel.hpp	/^  std::map<tcp::Endpoint, shared_ptr<Face>> m_channelFaces;$/;"	m	class:nfd::TcpChannel
m_channelFaces	face/udp-channel.hpp	/^  std::map<udp::Endpoint, shared_ptr<face::LpFaceWrapper>> m_channelFaces;$/;"	m	class:nfd::UdpChannel
m_channelFaces	face/websocket-channel.hpp	/^           std::owner_less<websocketpp::connection_hdl>> m_channelFaces;$/;"	m	class:nfd::WebSocketChannel
m_channels	face/tcp-factory.hpp	/^  std::map<tcp::Endpoint, shared_ptr<TcpChannel>> m_channels;$/;"	m	class:nfd::TcpFactory
m_channels	face/udp-factory.hpp	/^  std::map<udp::Endpoint, shared_ptr<UdpChannel>> m_channels;$/;"	m	class:nfd::UdpFactory
m_channels	face/unix-stream-factory.hpp	/^  std::map<unix_stream::Endpoint, shared_ptr<UnixStreamChannel>> m_channels;$/;"	m	class:nfd::UnixStreamFactory
m_channels	face/websocket-factory.hpp	/^  std::map<websocket::Endpoint, shared_ptr<WebSocketChannel>> m_channels;$/;"	m	class:nfd::WebSocketFactory
m_children	table/name-tree-entry.hpp	/^  std::vector<shared_ptr<Entry> > m_children; \/\/ Children pointers.$/;"	m	class:nfd::name_tree::Entry
m_cleanup	table/measurements-entry.hpp	/^  scheduler::EventId m_cleanup;$/;"	m	class:nfd::measurements::Entry
m_clientToFwTransmitConn	face/internal-transport.hpp	/^  signal::ScopedConnection m_clientToFwTransmitConn;$/;"	m	class:nfd::face::InternalClientTransport
m_closeIfIdleEvent	face/unicast-udp-transport.hpp	/^  scheduler::ScopedEventId m_closeIfIdleEvent;$/;"	m	class:nfd::face::UnicastUdpTransport
m_closed	face/websocket-face.hpp	/^  bool m_closed;$/;"	m	class:nfd::WebSocketFace
m_configFile	main.cpp	/^  std::string             m_configFile;$/;"	m	class:nfd::NfdRunner	file:
m_configFile	nfd.hpp	/^  std::string m_configFile;$/;"	m	class:nfd::Nfd
m_configSection	nfd.hpp	/^  ConfigSection m_configSection;$/;"	m	class:nfd::Nfd
m_cost	table/fib-nexthop.hpp	/^  uint64_t m_cost;$/;"	m	class:nfd::fib::NextHop
m_count	face/ndnlp-sequence-generator.hpp	/^  size_t m_count;$/;"	m	class:nfd::ndnlp::SequenceBlock
m_counters	face/face.hpp	/^  FaceCounters m_counters;$/;"	m	class:nfd::Face
m_counters	face/link-service.hpp	/^  NetworkLayerCounters* m_counters; \/\/ TODO#3177 change into NetCounters$/;"	m	class:nfd::face::LinkService
m_counters	face/lp-face.hpp	/^  FaceCounters m_counters;$/;"	m	class:nfd::face::DECL_CLASS_FINAL
m_counters	face/transport.hpp	/^  LinkLayerCounters* m_counters; \/\/ TODO#3177 change into LinkCounters$/;"	m	class:nfd::face::Transport
m_counters	fw/forwarder.hpp	/^  ForwarderCounters m_counters;$/;"	m	class:nfd::Forwarder
m_cs	fw/forwarder.hpp	/^  Cs                 m_cs;$/;"	m	class:nfd::Forwarder
m_cs	mgmt/tables-config-section.hpp	/^  Cs& m_cs;$/;"	m	class:nfd::TablesConfigSection
m_cs	table/cs-policy.hpp	/^  Cs* m_cs;$/;"	m	class:nfd::cs::Policy
m_data	table/cs-entry.hpp	/^  shared_ptr<const Data> m_data;$/;"	m	class:nfd::cs::Entry
m_deadNonceList	fw/forwarder.hpp	/^  DeadNonceList      m_deadNonceList;$/;"	m	class:nfd::Forwarder
m_description	face/face.hpp	/^  std::string m_description;$/;"	m	class:nfd::Face
m_destAddress	face/ethernet-face.hpp	/^  ethernet::Address m_destAddress;$/;"	m	class:nfd::EthernetFace
m_dispatcher	mgmt/forwarder-status-manager.hpp	/^  Dispatcher& m_dispatcher;$/;"	m	class:nfd::ForwarderStatusManager
m_dispatcher	mgmt/manager-base.hpp	/^  Dispatcher&       m_dispatcher;$/;"	m	class:nfd::ManagerBase
m_dispatcher	nfd.hpp	/^  unique_ptr<ndn::mgmt::Dispatcher>  m_dispatcher;$/;"	m	class:nfd::Nfd
m_end	table/name-tree.hpp	/^  shared_ptr<name_tree::Entry>  m_end;$/;"	m	class:nfd::NameTree
m_endIterator	table/name-tree.hpp	/^  const_iterator                m_endIterator;$/;"	m	class:nfd::NameTree
m_endpoint	face/unix-stream-channel.hpp	/^  unix_stream::Endpoint m_endpoint;$/;"	m	class:nfd::UnixStreamChannel
m_enlargeFactor	table/name-tree.hpp	/^  int                           m_enlargeFactor;$/;"	m	class:nfd::NameTree
m_enlargeLoadFactor	table/name-tree.hpp	/^  double                        m_enlargeLoadFactor;$/;"	m	class:nfd::NameTree
m_enlargeThreshold	table/name-tree.hpp	/^  size_t                        m_enlargeThreshold;$/;"	m	class:nfd::NameTree
m_entry	table/name-tree-entry.hpp	/^  shared_ptr<Entry> m_entry; \/\/ Name Tree Entry (i.e., Name Prefix Entry)$/;"	m	class:nfd::name_tree::Node
m_entry	table/name-tree.hpp	/^    shared_ptr<name_tree::Entry>                m_entry;$/;"	m	class:nfd::NameTree::const_iterator
m_entryInfoMap	table/cs-policy-priority-fifo.hpp	/^  EntryInfoMapFifo m_entryInfoMap;$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
m_entrySelector	table/name-tree.hpp	/^    shared_ptr<name_tree::EntrySelector>        m_entrySelector;$/;"	m	class:nfd::NameTree::const_iterator
m_entrySubTreeSelector	table/name-tree.hpp	/^    shared_ptr<name_tree::EntrySubTreeSelector> m_entrySubTreeSelector;$/;"	m	class:nfd::NameTree::const_iterator
m_expiry	table/measurements-entry.hpp	/^  time::steady_clock::TimePoint m_expiry;$/;"	m	class:nfd::measurements::Entry
m_expiry	table/pit-face-record.hpp	/^  time::steady_clock::TimePoint m_expiry;$/;"	m	class:nfd::pit::FaceRecord
m_face	face/link-service.hpp	/^  LpFace* m_face;$/;"	m	class:nfd::face::LinkService
m_face	face/lp-face-wrapper.hpp	/^  unique_ptr<LpFace> m_face;$/;"	m	class:nfd::face::LpFaceWrapper
m_face	face/transport.hpp	/^  LpFace* m_face;$/;"	m	class:nfd::face::Transport
m_face	table/fib-nexthop.hpp	/^  shared_ptr<Face> m_face;$/;"	m	class:nfd::fib::NextHop
m_face	table/pit-face-record.hpp	/^  shared_ptr<Face> m_face;$/;"	m	class:nfd::pit::FaceRecord
m_faceAddConn	mgmt/face-manager.hpp	/^  signal::ScopedConnection m_faceAddConn;$/;"	m	class:nfd::FaceManager
m_faceManager	nfd.hpp	/^  unique_ptr<FaceManager>            m_faceManager;$/;"	m	class:nfd::Nfd
m_faceRemoveConn	mgmt/face-manager.hpp	/^  signal::ScopedConnection m_faceRemoveConn;$/;"	m	class:nfd::FaceManager
m_faceTable	fw/forwarder.hpp	/^  FaceTable m_faceTable;$/;"	m	class:nfd::Forwarder
m_faceTable	mgmt/face-manager.hpp	/^  FaceTable& m_faceTable;$/;"	m	class:nfd::FaceManager
m_faces	fw/face-table.hpp	/^  FaceMap m_faces;$/;"	m	class:nfd::FaceTable
m_factories	mgmt/face-manager.hpp	/^  std::map<std::string \/*protocol*\/, shared_ptr<ProtocolFactory>> m_factories;$/;"	m	class:nfd::FaceManager
m_fib	fw/forwarder.hpp	/^  Fib                m_fib;$/;"	m	class:nfd::Forwarder
m_fib	mgmt/fib-manager.hpp	/^  Fib& m_fib;$/;"	m	class:nfd::FibManager
m_fibEntry	table/name-tree-entry.hpp	/^  shared_ptr<fib::Entry> m_fibEntry;$/;"	m	class:nfd::name_tree::Entry
m_fibManager	nfd.hpp	/^  unique_ptr<FibManager>             m_fibManager;$/;"	m	class:nfd::Nfd
m_fit	fw/access-strategy.hpp	/^  FaceInfoTable m_fit;$/;"	m	class:nfd::fw::AccessStrategy
m_forwarder	fw/face-table.hpp	/^  Forwarder& m_forwarder;$/;"	m	class:nfd::FaceTable
m_forwarder	fw/strategy.hpp	/^  Forwarder& m_forwarder;$/;"	m	class:nfd::fw::Strategy
m_forwarder	mgmt/forwarder-status-manager.hpp	/^  Forwarder&  m_forwarder;$/;"	m	class:nfd::ForwarderStatusManager
m_forwarder	nfd.hpp	/^  unique_ptr<Forwarder> m_forwarder;$/;"	m	class:nfd::Nfd
m_forwarderStatusManager	nfd.hpp	/^  unique_ptr<ForwarderStatusManager> m_forwarderStatusManager;$/;"	m	class:nfd::Nfd
m_fragCount	face/ndnlp-partial-message-store.hpp	/^  size_t m_fragCount;$/;"	m	class:nfd::ndnlp::PartialMessage
m_fwToClientTransmitConn	face/internal-transport.hpp	/^  signal::ScopedConnection m_fwToClientTransmitConn;$/;"	m	class:nfd::face::InternalClientTransport
m_fwTransportStateConn	face/internal-transport.hpp	/^  signal::ScopedConnection m_fwTransportStateConn;$/;"	m	class:nfd::face::InternalClientTransport
m_gain	fw/rtt-estimator.hpp	/^  double m_gain;$/;"	m	class:nfd::RttEstimator
m_getFace	mgmt/fib-manager.hpp	/^  function<shared_ptr<Face>(FaceId)> m_getFace;$/;"	m	class:nfd::FibManager
m_handle	face/websocket-face.hpp	/^  websocketpp::connection_hdl m_handle;$/;"	m	class:nfd::WebSocketFace
m_hasBeenUsedRecently	face/datagram-transport.hpp	/^  bool m_hasBeenUsedRecently;$/;"	m	class:nfd::face::DatagramTransport
m_hash	table/name-tree-entry.hpp	/^  size_t m_hash;$/;"	m	class:nfd::name_tree::Entry
m_ht	table/dead-nonce-list.hpp	/^  Hashtable& m_ht;$/;"	m	class:nfd::DeadNonceList
m_iPitEntry	table/pit.hpp	/^    size_t m_iPitEntry;$/;"	m	class:nfd::Pit::const_iterator
m_id	face/face.hpp	/^  FaceId m_id;$/;"	m	class:nfd::Face
m_id	face/lp-face.hpp	/^  FaceId m_id;$/;"	m	class:nfd::face::DECL_CLASS_FINAL
m_idleDuration	face/ndnlp-partial-message-store.hpp	/^  time::nanoseconds m_idleDuration;$/;"	m	class:nfd::ndnlp::PartialMessageStore
m_idleFaceTimeout	face/udp-channel.hpp	/^  time::seconds m_idleFaceTimeout;$/;"	m	class:nfd::UdpChannel
m_idleTimeout	face/unicast-udp-transport.hpp	/^  const time::seconds m_idleTimeout;$/;"	m	class:nfd::face::UnicastUdpTransport
m_inRecords	table/pit-entry.hpp	/^  InRecordCollection m_inRecords;$/;"	m	class:nfd::pit::Entry
m_incomingNack	table/pit-out-record.hpp	/^  unique_ptr<lp::NackHeader> m_incomingNack;$/;"	m	class:nfd::pit::OutRecord
m_index	table/dead-nonce-list.hpp	/^  Index m_index;$/;"	m	class:nfd::DeadNonceList
m_initialInterval	fw/retx-suppression-exponential.hpp	/^  const Duration m_initialInterval;$/;"	m	class:nfd::fw::RetxSuppressionExponential
m_inputBuffer	face/stream-face.hpp	/^  uint8_t m_inputBuffer[ndn::MAX_NDN_PACKET_SIZE];$/;"	m	class:nfd::StreamFace
m_inputBuffer	face/stream-transport.hpp	/^  uint8_t m_inputBuffer[ndn::MAX_NDN_PACKET_SIZE];$/;"	m	class:nfd::face::StreamTransport
m_inputBuffer	face/udp-channel.hpp	/^  uint8_t m_inputBuffer[ndn::MAX_NDN_PACKET_SIZE];$/;"	m	class:nfd::UdpChannel
m_inputBufferSize	face/stream-face.hpp	/^  size_t m_inputBufferSize;$/;"	m	class:nfd::StreamFace
m_inputBufferSize	face/stream-transport.hpp	/^  size_t m_inputBufferSize;$/;"	m	class:nfd::face::StreamTransport
m_interest	table/pit-entry.hpp	/^  shared_ptr<const Interest> m_interest;$/;"	m	class:nfd::pit::Entry
m_interest	table/pit-in-record.hpp	/^  shared_ptr<const Interest> m_interest;$/;"	m	class:nfd::pit::InRecord
m_interfaceIndex	face/ethernet-face.hpp	/^  int m_interfaceIndex;$/;"	m	class:nfd::EthernetFace
m_interfaceMtu	face/ethernet-face.hpp	/^  size_t m_interfaceMtu;$/;"	m	class:nfd::EthernetFace
m_interfaceName	face/ethernet-face.hpp	/^  std::string m_interfaceName;$/;"	m	class:nfd::EthernetFace
m_internalClientFace	nfd.hpp	/^  shared_ptr<ndn::Face>        m_internalClientFace;$/;"	m	class:nfd::Nfd
m_internalFace	nfd.hpp	/^  shared_ptr<Face>             m_internalFace;$/;"	m	class:nfd::Nfd
m_isFailed	face/face.hpp	/^  bool m_isFailed;$/;"	m	class:nfd::Face
m_isFirstUse	fw/broadcast-strategy.hpp	/^  bool m_isFirstUse;$/;"	m	class:nfd::fw::BroadcastStrategy
m_isListening	face/websocket-channel.hpp	/^  bool m_isListening;$/;"	m	class:nfd::WebSocketChannel
m_isLocal	face/face.hpp	/^  const bool m_isLocal;$/;"	m	class:nfd::Face
m_isMultiAccess	face/face.hpp	/^  const bool m_isMultiAccess;$/;"	m	class:nfd::Face
m_isUnsolicited	table/cs-entry.hpp	/^  bool m_isUnsolicited;$/;"	m	class:nfd::cs::Entry
m_items	table/strategy-info-host.hpp	/^  std::map<int, shared_ptr<fw::StrategyInfo>> m_items;$/;"	m	class:nfd::StrategyInfoHost
m_keyChain	nfd.hpp	/^  ndn::KeyChain&               m_keyChain;$/;"	m	class:nfd::Nfd
m_lastFaceId	fw/face-table.hpp	/^  FaceId m_lastFaceId;$/;"	m	class:nfd::FaceTable
m_lastIdleCheck	face/unicast-udp-transport.hpp	/^  time::steady_clock::TimePoint m_lastIdleCheck;$/;"	m	class:nfd::face::UnicastUdpTransport
m_lastNonce	table/pit-face-record.hpp	/^  uint32_t m_lastNonce;$/;"	m	class:nfd::pit::FaceRecord
m_lastRenewed	table/pit-face-record.hpp	/^  time::steady_clock::TimePoint m_lastRenewed;$/;"	m	class:nfd::pit::FaceRecord
m_lifetime	table/dead-nonce-list.hpp	/^  time::nanoseconds m_lifetime;$/;"	m	class:nfd::DeadNonceList
m_limit	table/cs-policy.hpp	/^  size_t m_limit;$/;"	m	class:nfd::cs::Policy
m_linkType	face/transport.hpp	/^  ndn::nfd::LinkType m_linkType;$/;"	m	class:nfd::face::Transport
m_localControlHeaderFeatures	face/local-face.hpp	/^  std::vector<bool> m_localControlHeaderFeatures;$/;"	m	class:nfd::LocalFace
m_localEndpoint	face/tcp-channel.hpp	/^  tcp::Endpoint m_localEndpoint;$/;"	m	class:nfd::TcpChannel
m_localEndpoint	face/udp-channel.hpp	/^  udp::Endpoint m_localEndpoint;$/;"	m	class:nfd::UdpChannel
m_localEndpoint	face/websocket-channel.hpp	/^  websocket::Endpoint m_localEndpoint;$/;"	m	class:nfd::WebSocketChannel
m_localUri	face/face.hpp	/^  const FaceUri m_localUri;$/;"	m	class:nfd::Face
m_localUri	face/transport.hpp	/^  FaceUri m_localUri;$/;"	m	class:nfd::face::Transport
m_markEvent	table/dead-nonce-list.hpp	/^  scheduler::EventId m_markEvent;$/;"	m	class:nfd::DeadNonceList
m_markInterval	table/dead-nonce-list.hpp	/^  time::nanoseconds m_markInterval;$/;"	m	class:nfd::DeadNonceList
m_maxInterval	fw/retx-suppression-exponential.hpp	/^  const Duration m_maxInterval;$/;"	m	class:nfd::fw::RetxSuppressionExponential
m_maxMultiplier	fw/rtt-estimator.hpp	/^  uint16_t m_maxMultiplier;$/;"	m	class:nfd::RttEstimator
m_maxPayload	face/ndnlp-slicer.hpp	/^  size_t m_maxPayload;$/;"	m	class:nfd::ndnlp::Slicer
m_measurements	fw/forwarder.hpp	/^  Measurements       m_measurements;$/;"	m	class:nfd::Forwarder
m_measurements	fw/strategy.hpp	/^  MeasurementsAccessor m_measurements;$/;"	m	class:nfd::fw::Strategy
m_measurements	table/measurements-accessor.hpp	/^  Measurements& m_measurements;$/;"	m	class:nfd::MeasurementsAccessor
m_measurementsEntry	table/name-tree-entry.hpp	/^  shared_ptr<measurements::Entry> m_measurementsEntry;$/;"	m	class:nfd::name_tree::Entry
m_mgmtModuleName	mgmt/manager-base.hpp	/^  std::string       m_mgmtModuleName;$/;"	m	class:nfd::ManagerBase
m_minNBuckets	table/name-tree.hpp	/^  size_t                        m_minNBuckets; \/\/ Minimum number of hash buckets$/;"	m	class:nfd::NameTree
m_minRetxInterval	fw/retx-suppression-fixed.hpp	/^  const time::milliseconds m_minRetxInterval;$/;"	m	class:nfd::fw::RetxSuppressionFixed
m_minRto	fw/rtt-estimator.hpp	/^  double m_minRto;$/;"	m	class:nfd::RttEstimator
m_mtu	face/ndnlp-slicer.hpp	/^  size_t m_mtu;$/;"	m	class:nfd::ndnlp::Slicer
m_mtu	face/transport.hpp	/^  ssize_t m_mtu;$/;"	m	class:nfd::face::Transport
m_multicastFaces	face/ethernet-factory.hpp	/^  MulticastFaceMap m_multicastFaces;$/;"	m	class:nfd::EthernetFactory
m_multicastFaces	face/udp-factory.hpp	/^  MulticastFaceMap m_multicastFaces;$/;"	m	class:nfd::UdpFactory
m_multicastGroup	face/multicast-udp-transport.hpp	/^  protocol::endpoint m_multicastGroup;$/;"	m	class:nfd::face::MulticastUdpTransport
m_multiplier	fw/retx-suppression-exponential.hpp	/^  const float m_multiplier;$/;"	m	class:nfd::fw::RetxSuppressionExponential
m_multiplier	fw/rtt-estimator.hpp	/^  uint16_t m_multiplier;$/;"	m	class:nfd::RttEstimator
m_nBuckets	table/name-tree.hpp	/^  size_t                        m_nBuckets; \/\/ Number of hash buckets$/;"	m	class:nfd::NameTree
m_nDropped	face/ethernet-face.hpp	/^  unsigned int m_nDropped;$/;"	m	class:nfd::EthernetFace
m_nInBytes	face/face-counters.hpp	/^  ByteCounter m_nInBytes;$/;"	m	class:nfd::LinkLayerCounters
m_nInDatas	face/face-counters.hpp	/^  PacketCounter m_nInDatas;$/;"	m	class:nfd::NetworkLayerCounters
m_nInInterests	face/face-counters.hpp	/^  PacketCounter m_nInInterests;$/;"	m	class:nfd::NetworkLayerCounters
m_nItems	table/fib.hpp	/^  size_t m_nItems;$/;"	m	class:nfd::Fib
m_nItems	table/measurements.hpp	/^  size_t m_nItems;$/;"	m	class:nfd::Measurements
m_nItems	table/name-tree.hpp	/^  size_t                        m_nItems;  \/\/ Number of items being stored$/;"	m	class:nfd::NameTree
m_nItems	table/pit.hpp	/^  size_t m_nItems;$/;"	m	class:nfd::Pit
m_nItems	table/strategy-choice.hpp	/^  size_t m_nItems;$/;"	m	class:nfd::StrategyChoice
m_nOutBytes	face/face-counters.hpp	/^  ByteCounter m_nOutBytes;$/;"	m	class:nfd::LinkLayerCounters
m_nOutDatas	face/face-counters.hpp	/^  PacketCounter m_nOutDatas;$/;"	m	class:nfd::NetworkLayerCounters
m_nOutInterests	face/face-counters.hpp	/^  PacketCounter m_nOutInterests;$/;"	m	class:nfd::NetworkLayerCounters
m_nSamples	fw/rtt-estimator.hpp	/^  uint32_t m_nSamples;$/;"	m	class:nfd::RttEstimator
m_name	fw/strategy.hpp	/^  Name m_name;$/;"	m	class:nfd::fw::Strategy
m_name	table/measurements-entry.hpp	/^  Name m_name;$/;"	m	class:nfd::measurements::Entry
m_nameTree	fw/forwarder.hpp	/^  NameTree           m_nameTree;$/;"	m	class:nfd::Forwarder
m_nameTree	table/fib.hpp	/^  NameTree& m_nameTree;$/;"	m	class:nfd::Fib
m_nameTree	table/measurements.hpp	/^  NameTree& m_nameTree;$/;"	m	class:nfd::Measurements
m_nameTree	table/name-tree.hpp	/^    const NameTree*                             m_nameTree;$/;"	m	class:nfd::NameTree::const_iterator
m_nameTree	table/pit.hpp	/^  NameTree& m_nameTree;$/;"	m	class:nfd::Pit
m_nameTree	table/strategy-choice.hpp	/^  NameTree& m_nameTree;$/;"	m	class:nfd::StrategyChoice
m_nameTreeEntry	table/fib-entry.hpp	/^  shared_ptr<name_tree::Entry> m_nameTreeEntry;$/;"	m	class:nfd::fib::Entry
m_nameTreeEntry	table/measurements-entry.hpp	/^  shared_ptr<name_tree::Entry> m_nameTreeEntry;$/;"	m	class:nfd::measurements::Entry
m_nameTreeEntry	table/pit-entry.hpp	/^  shared_ptr<name_tree::Entry> m_nameTreeEntry;$/;"	m	class:nfd::pit::Entry
m_nameTreeEntry	table/strategy-choice-entry.hpp	/^  shared_ptr<name_tree::Entry> m_nameTreeEntry;$/;"	m	class:nfd::strategy_choice::Entry
m_nameTreeIterator	table/fib.hpp	/^    NameTree::const_iterator m_nameTreeIterator;$/;"	m	class:nfd::Fib::const_iterator
m_nameTreeIterator	table/pit.hpp	/^    NameTree::const_iterator m_nameTreeIterator;$/;"	m	class:nfd::Pit::const_iterator
m_nameTreeIterator	table/strategy-choice.hpp	/^    NameTree::const_iterator m_nameTreeIterator;$/;"	m	class:nfd::StrategyChoice::const_iterator
m_networkMonitor	nfd.hpp	/^  unique_ptr<ndn::util::NetworkMonitor> m_networkMonitor;$/;"	m	class:nfd::Nfd
m_networkRegionTable	fw/forwarder.hpp	/^  NetworkRegionTable m_networkRegionTable;$/;"	m	class:nfd::Forwarder
m_networkRegionTable	mgmt/tables-config-section.hpp	/^  NetworkRegionTable& m_networkRegionTable;$/;"	m	class:nfd::TablesConfigSection
m_next	face/ndnlp-sequence-generator.hpp	/^  uint64_t m_next;$/;"	m	class:nfd::ndnlp::SequenceGenerator
m_next	table/name-tree-entry.hpp	/^  Node* m_next; \/\/ Next Name Tree Node (to resolve hash collision)$/;"	m	class:nfd::name_tree::Node
m_nextHops	table/fib-entry.hpp	/^  NextHopList m_nextHops;$/;"	m	class:nfd::fib::Entry
m_nfd	main.cpp	/^  Nfd                     m_nfd;$/;"	m	class:nfd::NfdRunner	file:
m_nfdKeyChain	main.cpp	/^  ndn::KeyChain           m_nfdKeyChain;$/;"	m	class:nfd::NfdRunner	file:
m_node	table/name-tree-entry.hpp	/^  Node* m_node;$/;"	m	class:nfd::name_tree::Entry
m_onFaceCreatedCallback	face/websocket-channel.hpp	/^  FaceCreatedCallback m_onFaceCreatedCallback;$/;"	m	class:nfd::WebSocketChannel
m_options	face/generic-link-service.hpp	/^  Options m_options;$/;"	m	class:nfd::face::GenericLinkService
m_outRecords	table/pit-entry.hpp	/^  OutRecordCollection m_outRecords;$/;"	m	class:nfd::pit::Entry
m_parent	table/name-tree-entry.hpp	/^  shared_ptr<Entry> m_parent;     \/\/ Pointing to the parent entry.$/;"	m	class:nfd::name_tree::Entry
m_partialMessages	face/ndnlp-partial-message-store.hpp	/^  std::unordered_map<uint64_t, PartialMessage> m_partialMessages;$/;"	m	class:nfd::ndnlp::PartialMessageStore
m_payloads	face/ndnlp-partial-message-store.hpp	/^  std::vector<Block> m_payloads;$/;"	m	class:nfd::ndnlp::PartialMessage
m_pcap	face/ethernet-face.hpp	/^  unique_ptr<pcap_t, void(*)(pcap_t*)> m_pcap;$/;"	m	class:nfd::EthernetFace
m_persistency	face/face.hpp	/^  ndn::nfd::FacePersistency m_persistency;$/;"	m	class:nfd::Face
m_persistency	face/transport.hpp	/^  ndn::nfd::FacePersistency m_persistency;$/;"	m	class:nfd::face::Transport
m_pingEventId	face/websocket-face.hpp	/^  scheduler::EventId m_pingEventId;$/;"	m	class:nfd::WebSocketFace
m_pingInterval	face/websocket-channel.hpp	/^  time::milliseconds m_pingInterval;$/;"	m	class:nfd::WebSocketChannel
m_pit	fw/forwarder.hpp	/^  Pit                m_pit;$/;"	m	class:nfd::Forwarder
m_pitEntries	table/name-tree-entry.hpp	/^  std::vector<shared_ptr<pit::Entry> > m_pitEntries;$/;"	m	class:nfd::name_tree::Entry
m_policy	table/cs.hpp	/^  unique_ptr<Policy> m_policy;$/;"	m	class:nfd::cs::Cs
m_policyName	table/cs-policy.hpp	/^  std::string m_policyName;$/;"	m	class:nfd::cs::Policy
m_prefix	table/fib-entry.hpp	/^  Name m_prefix;$/;"	m	class:nfd::fib::Entry
m_prefix	table/name-tree-entry.hpp	/^  Name m_prefix;$/;"	m	class:nfd::name_tree::Entry
m_prefix	table/strategy-choice-entry.hpp	/^  Name m_prefix;$/;"	m	class:nfd::strategy_choice::Entry
m_prev	table/name-tree-entry.hpp	/^  Node* m_prev; \/\/ Previous Name Tree Node (to resolve hash collision)$/;"	m	class:nfd::name_tree::Node
m_prohibitedEndpoints	face/tcp-factory.hpp	/^  std::set<tcp::Endpoint> m_prohibitedEndpoints;$/;"	m	class:nfd::TcpFactory
m_prohibitedEndpoints	face/udp-factory.hpp	/^  std::set<udp::Endpoint> m_prohibitedEndpoints;$/;"	m	class:nfd::UdpFactory
m_queryName	table/cs-entry-impl.hpp	/^  Name m_queryName;$/;"	m	class:nfd::cs::EntryImpl
m_queue	table/cs-policy-lru.hpp	/^  Queue m_queue;$/;"	m	class:nfd::cs::lru::LruPolicy
m_queue	table/dead-nonce-list.hpp	/^  Queue& m_queue;$/;"	m	class:nfd::DeadNonceList
m_queues	table/cs-policy-priority-fifo.hpp	/^  Queue m_queues[QUEUE_MAX];$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
m_reassemblers	face/ethernet-face.hpp	/^  std::unordered_map<ethernet::Address, Reassembler> m_reassemblers;$/;"	m	class:nfd::EthernetFace
m_receiveBuffer	face/datagram-transport.hpp	/^  std::array<uint8_t, ndn::MAX_NDN_PACKET_SIZE> m_receiveBuffer;$/;"	m	class:nfd::face::DatagramTransport
m_received	face/ndnlp-partial-message-store.hpp	/^  size_t m_received;$/;"	m	class:nfd::ndnlp::PartialMessage
m_reloadConfigEvent	nfd.hpp	/^  scheduler::ScopedEventId              m_reloadConfigEvent;$/;"	m	class:nfd::Nfd
m_reloadSignalSet	main.cpp	/^  boost::asio::signal_set m_reloadSignalSet;$/;"	m	class:nfd::NfdRunner	file:
m_remoteEndpoint	face/udp-channel.hpp	/^  udp::Endpoint m_remoteEndpoint;$/;"	m	class:nfd::UdpChannel
m_remoteUri	face/face.hpp	/^  const FaceUri m_remoteUri;$/;"	m	class:nfd::Face
m_remoteUri	face/transport.hpp	/^  FaceUri m_remoteUri;$/;"	m	class:nfd::face::Transport
m_removeFaceInfoConn	fw/access-strategy.hpp	/^  signal::ScopedConnection m_removeFaceInfoConn;$/;"	m	class:nfd::fw::AccessStrategy
m_retxSuppression	fw/access-strategy.hpp	/^  RetxSuppressionFixed m_retxSuppression;$/;"	m	class:nfd::fw::AccessStrategy
m_retxSuppression	fw/best-route-strategy2.hpp	/^  RetxSuppressionExponential m_retxSuppression;$/;"	m	class:nfd::fw::BestRouteStrategy2
m_rtt	fw/rtt-estimator.hpp	/^  double m_rtt;$/;"	m	class:nfd::RttEstimator
m_scope	face/transport.hpp	/^  ndn::nfd::FaceScope m_scope;$/;"	m	class:nfd::face::Transport
m_sendQueue	face/stream-face.hpp	/^  std::queue<Block> m_sendQueue;$/;"	m	class:nfd::StreamFace
m_sendQueue	face/stream-transport.hpp	/^  std::queue<Block> m_sendQueue;$/;"	m	class:nfd::face::StreamTransport
m_sendSocket	face/multicast-udp-transport.hpp	/^  protocol::socket m_sendSocket;$/;"	m	class:nfd::face::MulticastUdpTransport
m_seqgen	face/ndnlp-slicer.hpp	/^  SequenceGenerator m_seqgen;$/;"	m	class:nfd::ndnlp::Slicer
m_server	face/websocket-channel.hpp	/^  websocket::Server m_server;$/;"	m	class:nfd::WebSocketChannel
m_server	face/websocket-face.hpp	/^  websocket::Server& m_server;$/;"	m	class:nfd::WebSocketFace
m_service	face/lp-face.hpp	/^  unique_ptr<LinkService> m_service;$/;"	m	class:nfd::face::DECL_CLASS_FINAL
m_service	face/transport.hpp	/^  LinkService* m_service;$/;"	m	class:nfd::face::Transport
m_shouldVisitChildren	table/name-tree.hpp	/^    bool                                        m_shouldVisitChildren;$/;"	m	class:nfd::NameTree::const_iterator
m_shrinkFactor	table/name-tree.hpp	/^  double                        m_shrinkFactor;$/;"	m	class:nfd::NameTree
m_shrinkLoadFactor	table/name-tree.hpp	/^  double                        m_shrinkLoadFactor;$/;"	m	class:nfd::NameTree
m_shrinkThreshold	table/name-tree.hpp	/^  size_t                        m_shrinkThreshold;$/;"	m	class:nfd::NameTree
m_slicer	face/ethernet-face.hpp	/^  unique_ptr<ndnlp::Slicer> m_slicer;$/;"	m	class:nfd::EthernetFace
m_socket	face/datagram-transport.hpp	/^  typename protocol::socket m_socket;$/;"	m	class:nfd::face::DatagramTransport
m_socket	face/ethernet-face.hpp	/^  boost::asio::posix::stream_descriptor m_socket;$/;"	m	class:nfd::EthernetFace
m_socket	face/stream-face.hpp	/^  typename protocol::socket m_socket;$/;"	m	class:nfd::StreamFace
m_socket	face/stream-transport.hpp	/^  typename protocol::socket m_socket;$/;"	m	class:nfd::face::StreamTransport
m_socket	face/udp-channel.hpp	/^  boost::asio::ip::udp::socket m_socket;$/;"	m	class:nfd::UdpChannel
m_socket	face/unix-stream-channel.hpp	/^  boost::asio::local::stream_protocol::socket m_socket;$/;"	m	class:nfd::UnixStreamChannel
m_srcAddress	face/ethernet-face.hpp	/^  ethernet::Address m_srcAddress;$/;"	m	class:nfd::EthernetFace
m_staleTime	table/cs-entry.hpp	/^  time::steady_clock::TimePoint m_staleTime;$/;"	m	class:nfd::cs::Entry
m_start	face/ndnlp-sequence-generator.hpp	/^  uint64_t m_start;$/;"	m	class:nfd::ndnlp::SequenceBlock
m_startTimestamp	mgmt/forwarder-status-manager.hpp	/^  time::system_clock::TimePoint m_startTimestamp;$/;"	m	class:nfd::ForwarderStatusManager
m_state	face/transport.hpp	/^  TransportState m_state;$/;"	m	class:nfd::face::Transport
m_stragglerTimer	table/pit-entry.hpp	/^  scheduler::EventId m_stragglerTimer;$/;"	m	class:nfd::pit::Entry
m_strategy	table/measurements-accessor.hpp	/^  const fw::Strategy* m_strategy;$/;"	m	class:nfd::MeasurementsAccessor
m_strategy	table/strategy-choice-entry.hpp	/^  fw::Strategy* m_strategy;$/;"	m	class:nfd::strategy_choice::Entry
m_strategyChoice	fw/forwarder.hpp	/^  StrategyChoice     m_strategyChoice;$/;"	m	class:nfd::Forwarder
m_strategyChoice	mgmt/strategy-choice-manager.hpp	/^  StrategyChoice& m_strategyChoice;$/;"	m	class:nfd::StrategyChoiceManager
m_strategyChoice	mgmt/tables-config-section.hpp	/^  StrategyChoice& m_strategyChoice;$/;"	m	class:nfd::TablesConfigSection
m_strategyChoice	table/measurements-accessor.hpp	/^  const StrategyChoice& m_strategyChoice;$/;"	m	class:nfd::MeasurementsAccessor
m_strategyChoiceEntry	table/name-tree-entry.hpp	/^  shared_ptr<strategy_choice::Entry> m_strategyChoiceEntry;$/;"	m	class:nfd::name_tree::Entry
m_strategyChoiceManager	nfd.hpp	/^  unique_ptr<StrategyChoiceManager>  m_strategyChoiceManager;$/;"	m	class:nfd::Nfd
m_strategyInstances	table/strategy-choice.hpp	/^  StrategyInstanceTable m_strategyInstances;$/;"	m	class:nfd::StrategyChoice
m_subTreeRoot	table/name-tree.hpp	/^    shared_ptr<name_tree::Entry>                m_subTreeRoot;$/;"	m	class:nfd::NameTree::const_iterator
m_supportedPrivileges	mgmt/command-validator.hpp	/^  std::set<std::string> m_supportedPrivileges;$/;"	m	class:nfd::CommandValidator
m_table	table/cs.hpp	/^  Table m_table;$/;"	m	class:nfd::cs::Cs
m_terminationSignalSet	main.cpp	/^  boost::asio::signal_set m_terminationSignalSet;$/;"	m	class:nfd::NfdRunner	file:
m_totalLength	face/ndnlp-partial-message-store.hpp	/^  size_t m_totalLength;$/;"	m	class:nfd::ndnlp::PartialMessage
m_transport	face/link-service.hpp	/^  Transport* m_transport;$/;"	m	class:nfd::face::LinkService
m_transport	face/lp-face.hpp	/^  unique_ptr<Transport> m_transport;$/;"	m	class:nfd::face::DECL_CLASS_FINAL
m_type	table/name-tree.hpp	/^    NameTree::IteratorType                      m_type;$/;"	m	class:nfd::NameTree::const_iterator
m_unsatisfyTimer	table/pit-entry.hpp	/^  scheduler::EventId m_unsatisfyTimer;$/;"	m	class:nfd::pit::Entry
m_uri	face/channel.hpp	/^  FaceUri m_uri;$/;"	m	class:nfd::Channel
m_validator	mgmt/command-validator.hpp	/^  ndn::CommandInterestValidator m_validator;$/;"	m	class:nfd::CommandValidator
m_validator	mgmt/manager-base.hpp	/^  CommandValidator& m_validator;$/;"	m	class:nfd::ManagerBase
m_validator	nfd.hpp	/^  unique_ptr<CommandValidator> m_validator;$/;"	m	class:nfd::Nfd
m_value	face/face-counters.hpp	/^  rep m_value;$/;"	m	class:nfd::ByteCounter
m_value	face/face-counters.hpp	/^  rep m_value;$/;"	m	class:nfd::PacketCounter
m_variance	fw/rtt-estimator.hpp	/^  double m_variance;$/;"	m	class:nfd::RttEstimator
main	main.cpp	/^main(int argc, char** argv)$/;"	f
makeDefaultPolicy	table/cs.cpp	/^makeDefaultPolicy()$/;"	f	namespace:nfd::cs
makeDefaultStrategy	fw/strategy-registry.cpp	/^makeDefaultStrategy(Forwarder& forwarder)$/;"	f	namespace:nfd::fw
makeEntry	table/dead-nonce-list.cpp	/^DeadNonceList::makeEntry(const Name& name, uint32_t nonce)$/;"	f	class:nfd::DeadNonceList
makeInternalFace	face/internal-face.cpp	/^makeInternalFace(ndn::KeyChain& clientKeyChain)$/;"	f	namespace:nfd::face
makeNetworkMonitor	nfd.cpp	/^makeNetworkMonitor()$/;"	f	namespace:nfd
makeRelPrefix	mgmt/manager-base.hpp	/^ManagerBase::makeRelPrefix(const std::string& verb)$/;"	f	class:nfd::ManagerBase
mark	table/dead-nonce-list.cpp	/^DeadNonceList::mark()$/;"	f	class:nfd::DeadNonceList
maxInterval	fw/ncc-strategy.hpp	/^    time::microseconds maxInterval;$/;"	m	class:nfd::fw::NccStrategy::PitEntryInfo
measurements	table/fib.hpp	/^namespace measurements {$/;"	n	namespace:nfd
measurements	table/measurements-entry.cpp	/^namespace measurements {$/;"	n	namespace:nfd	file:
measurements	table/measurements-entry.hpp	/^namespace measurements {$/;"	n	namespace:nfd
measurements	table/measurements.hpp	/^namespace measurements {$/;"	n	namespace:nfd
mgmt	nfd.hpp	/^namespace mgmt {$/;"	n	namespace:ndn
moveStaleEventId	table/cs-policy-priority-fifo.hpp	/^  scheduler::EventId moveStaleEventId;$/;"	m	struct:nfd::cs::priority_fifo::EntryInfo
moveToStaleQueue	table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::moveToStaleQueue(iterator i)$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
multicast	fw/access-strategy.cpp	/^AccessStrategy::multicast(shared_ptr<pit::Entry> pitEntry, shared_ptr<fib::Entry> fibEntry,$/;"	f	class:nfd::fw::AccessStrategy
name_tree	table/fib-entry.hpp	/^namespace name_tree {$/;"	n	namespace:nfd
name_tree	table/measurements-entry.hpp	/^namespace name_tree {$/;"	n	namespace:nfd
name_tree	table/name-tree-entry.cpp	/^namespace name_tree {$/;"	n	namespace:nfd	file:
name_tree	table/name-tree-entry.hpp	/^namespace name_tree {$/;"	n	namespace:nfd
name_tree	table/name-tree.cpp	/^namespace name_tree {$/;"	n	namespace:nfd	file:
name_tree	table/name-tree.hpp	/^namespace name_tree {$/;"	n	namespace:nfd
name_tree	table/pit-entry.hpp	/^namespace name_tree {$/;"	n	namespace:nfd
name_tree	table/strategy-choice-entry.hpp	/^namespace name_tree {$/;"	n	namespace:nfd
ndn	nfd.hpp	/^namespace ndn {$/;"	n
ndnlp	face/ndnlp-data.cpp	/^namespace ndnlp {$/;"	n	namespace:nfd	file:
ndnlp	face/ndnlp-data.hpp	/^namespace ndnlp {$/;"	n	namespace:nfd
ndnlp	face/ndnlp-partial-message-store.cpp	/^namespace ndnlp {$/;"	n	namespace:nfd	file:
ndnlp	face/ndnlp-partial-message-store.hpp	/^namespace ndnlp {$/;"	n	namespace:nfd
ndnlp	face/ndnlp-sequence-generator.cpp	/^namespace ndnlp {$/;"	n	namespace:nfd	file:
ndnlp	face/ndnlp-sequence-generator.hpp	/^namespace ndnlp {$/;"	n	namespace:nfd
ndnlp	face/ndnlp-slicer.cpp	/^namespace ndnlp {$/;"	n	namespace:nfd	file:
ndnlp	face/ndnlp-slicer.hpp	/^namespace ndnlp {$/;"	n	namespace:nfd
nextBlock	face/ndnlp-sequence-generator.cpp	/^SequenceGenerator::nextBlock(size_t count)$/;"	f	class:nfd::ndnlp::SequenceGenerator
nfd	face/channel.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/channel.hpp	/^namespace nfd {$/;"	n
nfd	face/datagram-transport.hpp	/^namespace nfd {$/;"	n
nfd	face/ethernet-face.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/ethernet-face.hpp	/^namespace nfd {$/;"	n
nfd	face/ethernet-factory.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/ethernet-factory.hpp	/^namespace nfd {$/;"	n
nfd	face/face-counters.hpp	/^namespace nfd {$/;"	n
nfd	face/face-log.hpp	/^namespace nfd {$/;"	n
nfd	face/face.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/face.hpp	/^namespace nfd {$/;"	n
nfd	face/generic-link-service.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/generic-link-service.hpp	/^namespace nfd {$/;"	n
nfd	face/internal-face.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/internal-face.hpp	/^namespace nfd {$/;"	n
nfd	face/internal-transport.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/internal-transport.hpp	/^namespace nfd {$/;"	n
nfd	face/link-service.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/link-service.hpp	/^namespace nfd {$/;"	n
nfd	face/local-face.hpp	/^namespace nfd {$/;"	n
nfd	face/lp-face-wrapper.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/lp-face-wrapper.hpp	/^namespace nfd {$/;"	n
nfd	face/lp-face.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/lp-face.hpp	/^namespace nfd {$/;"	n
nfd	face/multicast-udp-transport.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/multicast-udp-transport.hpp	/^namespace nfd {$/;"	n
nfd	face/ndnlp-data.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/ndnlp-data.hpp	/^namespace nfd {$/;"	n
nfd	face/ndnlp-partial-message-store.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/ndnlp-partial-message-store.hpp	/^namespace nfd {$/;"	n
nfd	face/ndnlp-sequence-generator.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/ndnlp-sequence-generator.hpp	/^namespace nfd {$/;"	n
nfd	face/ndnlp-slicer.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/ndnlp-slicer.hpp	/^namespace nfd {$/;"	n
nfd	face/ndnlp-tlv.hpp	/^namespace nfd {$/;"	n
nfd	face/null-face.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/null-face.hpp	/^namespace nfd {$/;"	n
nfd	face/protocol-factory.hpp	/^namespace nfd {$/;"	n
nfd	face/stream-face.hpp	/^namespace nfd {$/;"	n
nfd	face/stream-transport.hpp	/^namespace nfd {$/;"	n
nfd	face/tcp-channel.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/tcp-channel.hpp	/^namespace nfd {$/;"	n
nfd	face/tcp-face.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/tcp-face.hpp	/^namespace nfd {$/;"	n
nfd	face/tcp-factory.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/tcp-factory.hpp	/^namespace nfd {$/;"	n
nfd	face/transport.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/transport.hpp	/^namespace nfd {$/;"	n
nfd	face/udp-channel.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/udp-channel.hpp	/^namespace nfd {$/;"	n
nfd	face/udp-factory.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/udp-factory.hpp	/^namespace nfd {$/;"	n
nfd	face/udp-protocol.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/udp-protocol.hpp	/^namespace nfd {$/;"	n
nfd	face/unicast-udp-transport.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/unicast-udp-transport.hpp	/^namespace nfd {$/;"	n
nfd	face/unix-stream-channel.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/unix-stream-channel.hpp	/^namespace nfd {$/;"	n
nfd	face/unix-stream-factory.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/unix-stream-factory.hpp	/^namespace nfd {$/;"	n
nfd	face/unix-stream-transport.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/unix-stream-transport.hpp	/^namespace nfd {$/;"	n
nfd	face/websocket-channel.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/websocket-channel.hpp	/^namespace nfd {$/;"	n
nfd	face/websocket-face.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/websocket-face.hpp	/^namespace nfd {$/;"	n
nfd	face/websocket-factory.cpp	/^namespace nfd {$/;"	n	file:
nfd	face/websocket-factory.hpp	/^namespace nfd {$/;"	n
nfd	fw/access-strategy.cpp	/^namespace nfd {$/;"	n	file:
nfd	fw/access-strategy.hpp	/^namespace nfd {$/;"	n
nfd	fw/best-route-strategy.cpp	/^namespace nfd {$/;"	n	file:
nfd	fw/best-route-strategy.hpp	/^namespace nfd {$/;"	n
nfd	fw/best-route-strategy2.cpp	/^namespace nfd {$/;"	n	file:
nfd	fw/best-route-strategy2.hpp	/^namespace nfd {$/;"	n
nfd	fw/broadcast-strategy.cpp	/^namespace nfd {$/;"	n	file:
nfd	fw/broadcast-strategy.hpp	/^namespace nfd {$/;"	n
nfd	fw/client-control-strategy.cpp	/^namespace nfd {$/;"	n	file:
nfd	fw/client-control-strategy.hpp	/^namespace nfd {$/;"	n
nfd	fw/face-table.cpp	/^namespace nfd {$/;"	n	file:
nfd	fw/face-table.hpp	/^namespace nfd {$/;"	n
nfd	fw/forwarder-counters.hpp	/^namespace nfd {$/;"	n
nfd	fw/forwarder.cpp	/^namespace nfd {$/;"	n	file:
nfd	fw/forwarder.hpp	/^namespace nfd {$/;"	n
nfd	fw/multicast-strategy.cpp	/^namespace nfd {$/;"	n	file:
nfd	fw/multicast-strategy.hpp	/^namespace nfd {$/;"	n
nfd	fw/ncc-strategy.cpp	/^namespace nfd {$/;"	n	file:
nfd	fw/ncc-strategy.hpp	/^namespace nfd {$/;"	n
nfd	fw/retx-suppression-exponential.cpp	/^namespace nfd {$/;"	n	file:
nfd	fw/retx-suppression-exponential.hpp	/^namespace nfd {$/;"	n
nfd	fw/retx-suppression-fixed.cpp	/^namespace nfd {$/;"	n	file:
nfd	fw/retx-suppression-fixed.hpp	/^namespace nfd {$/;"	n
nfd	fw/retx-suppression.cpp	/^namespace nfd {$/;"	n	file:
nfd	fw/retx-suppression.hpp	/^namespace nfd {$/;"	n
nfd	fw/rtt-estimator.cpp	/^namespace nfd {$/;"	n	file:
nfd	fw/rtt-estimator.hpp	/^namespace nfd {$/;"	n
nfd	fw/strategy-info.hpp	/^namespace nfd {$/;"	n
nfd	fw/strategy-registry.cpp	/^namespace nfd {$/;"	n	file:
nfd	fw/strategy-registry.hpp	/^namespace nfd {$/;"	n
nfd	fw/strategy.cpp	/^namespace nfd {$/;"	n	file:
nfd	fw/strategy.hpp	/^namespace nfd {$/;"	n
nfd	main.cpp	/^namespace nfd {$/;"	n	file:
nfd	mgmt/command-validator.cpp	/^namespace nfd {$/;"	n	file:
nfd	mgmt/command-validator.hpp	/^namespace nfd {$/;"	n
nfd	mgmt/face-manager.cpp	/^namespace nfd {$/;"	n	file:
nfd	mgmt/face-manager.hpp	/^namespace nfd {$/;"	n
nfd	mgmt/fib-manager.cpp	/^namespace nfd {$/;"	n	file:
nfd	mgmt/fib-manager.hpp	/^namespace nfd {$/;"	n
nfd	mgmt/forwarder-status-manager.cpp	/^namespace nfd {$/;"	n	file:
nfd	mgmt/forwarder-status-manager.hpp	/^namespace nfd {$/;"	n
nfd	mgmt/general-config-section.cpp	/^namespace nfd {$/;"	n	file:
nfd	mgmt/general-config-section.hpp	/^namespace nfd {$/;"	n
nfd	mgmt/manager-base.cpp	/^namespace nfd {$/;"	n	file:
nfd	mgmt/manager-base.hpp	/^namespace nfd {$/;"	n
nfd	mgmt/strategy-choice-manager.cpp	/^namespace nfd {$/;"	n	file:
nfd	mgmt/strategy-choice-manager.hpp	/^namespace nfd {$/;"	n
nfd	mgmt/tables-config-section.cpp	/^namespace nfd {$/;"	n	file:
nfd	mgmt/tables-config-section.hpp	/^namespace nfd {$/;"	n
nfd	nfd.cpp	/^namespace nfd {$/;"	n	file:
nfd	nfd.hpp	/^namespace nfd {$/;"	n
nfd	table/cs-entry-impl.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/cs-entry-impl.hpp	/^namespace nfd {$/;"	n
nfd	table/cs-entry.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/cs-entry.hpp	/^namespace nfd {$/;"	n
nfd	table/cs-internal.hpp	/^namespace nfd {$/;"	n
nfd	table/cs-policy-lru.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/cs-policy-lru.hpp	/^namespace nfd {$/;"	n
nfd	table/cs-policy-priority-fifo.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/cs-policy-priority-fifo.hpp	/^namespace nfd {$/;"	n
nfd	table/cs-policy.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/cs-policy.hpp	/^namespace nfd {$/;"	n
nfd	table/cs.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/cs.hpp	/^namespace nfd {$/;"	n
nfd	table/dead-nonce-list.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/dead-nonce-list.hpp	/^namespace nfd {$/;"	n
nfd	table/fib-entry.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/fib-entry.hpp	/^namespace nfd {$/;"	n
nfd	table/fib-nexthop.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/fib-nexthop.hpp	/^namespace nfd {$/;"	n
nfd	table/fib.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/fib.hpp	/^namespace nfd {$/;"	n
nfd	table/measurements-accessor.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/measurements-accessor.hpp	/^namespace nfd {$/;"	n
nfd	table/measurements-entry.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/measurements-entry.hpp	/^namespace nfd {$/;"	n
nfd	table/measurements.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/measurements.hpp	/^namespace nfd {$/;"	n
nfd	table/name-tree-entry.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/name-tree-entry.hpp	/^namespace nfd {$/;"	n
nfd	table/name-tree.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/name-tree.hpp	/^namespace nfd {$/;"	n
nfd	table/network-region-table.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/network-region-table.hpp	/^namespace nfd {$/;"	n
nfd	table/pit-entry.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/pit-entry.hpp	/^namespace nfd {$/;"	n
nfd	table/pit-face-record.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/pit-face-record.hpp	/^namespace nfd {$/;"	n
nfd	table/pit-in-record.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/pit-in-record.hpp	/^namespace nfd {$/;"	n
nfd	table/pit-out-record.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/pit-out-record.hpp	/^namespace nfd {$/;"	n
nfd	table/pit.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/pit.hpp	/^namespace nfd {$/;"	n
nfd	table/strategy-choice-entry.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/strategy-choice-entry.hpp	/^namespace nfd {$/;"	n
nfd	table/strategy-choice.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/strategy-choice.hpp	/^namespace nfd {$/;"	n
nfd	table/strategy-info-host.cpp	/^namespace nfd {$/;"	n	file:
nfd	table/strategy-info-host.hpp	/^namespace nfd {$/;"	n
obj	face/face-log.hpp	/^  const T& obj;$/;"	m	class:nfd::face::FaceLogHelper
onAdd	fw/face-table.hpp	/^  signal::Signal<FaceTable, shared_ptr<Face>> onAdd;$/;"	m	class:nfd::FaceTable
onConfig	mgmt/command-validator.cpp	/^CommandValidator::onConfig(const ConfigSection& section,$/;"	f	class:nfd::CommandValidator
onConfig	mgmt/general-config-section.cpp	/^onConfig(const ConfigSection& configSection,$/;"	f	namespace:nfd::general
onContentStoreHit	fw/forwarder.cpp	/^Forwarder::onContentStoreHit(const Face& inFace,$/;"	f	class:nfd::Forwarder
onContentStoreMiss	fw/forwarder.cpp	/^Forwarder::onContentStoreMiss(const Face& inFace,$/;"	f	class:nfd::Forwarder
onDataUnsolicited	fw/forwarder.cpp	/^Forwarder::onDataUnsolicited(Face& inFace, const Data& data)$/;"	f	class:nfd::Forwarder
onFail	face/face.hpp	/^  signal::Signal<Face, std::string\/*reason*\/> onFail;$/;"	m	class:nfd::Face
onIncomingData	fw/forwarder.cpp	/^Forwarder::onIncomingData(Face& inFace, const Data& data)$/;"	f	class:nfd::Forwarder
onIncomingInterest	fw/forwarder.cpp	/^Forwarder::onIncomingInterest(Face& inFace, const Interest& interest)$/;"	f	class:nfd::Forwarder
onIncomingNack	fw/forwarder.cpp	/^Forwarder::onIncomingNack(Face& inFace, const lp::Nack& nack)$/;"	f	class:nfd::Forwarder
onInterestFinalize	fw/forwarder.cpp	/^Forwarder::onInterestFinalize(shared_ptr<pit::Entry> pitEntry, bool isSatisfied,$/;"	f	class:nfd::Forwarder
onInterestLoop	fw/forwarder.cpp	/^Forwarder::onInterestLoop(Face& inFace, const Interest& interest,$/;"	f	class:nfd::Forwarder
onInterestReject	fw/forwarder.cpp	/^Forwarder::onInterestReject(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::Forwarder
onInterestUnsatisfied	fw/forwarder.cpp	/^Forwarder::onInterestUnsatisfied(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::Forwarder
onOutgoingData	fw/forwarder.cpp	/^Forwarder::onOutgoingData(const Data& data, Face& outFace)$/;"	f	class:nfd::Forwarder
onOutgoingInterest	fw/forwarder.cpp	/^Forwarder::onOutgoingInterest(shared_ptr<pit::Entry> pitEntry, Face& outFace,$/;"	f	class:nfd::Forwarder
onOutgoingNack	fw/forwarder.cpp	/^Forwarder::onOutgoingNack(shared_ptr<pit::Entry> pitEntry, const Face& outFace,$/;"	f	class:nfd::Forwarder
onReceive	face/ndnlp-partial-message-store.hpp	/^  signal::Signal<PartialMessageStore, Block> onReceive;$/;"	m	class:nfd::ndnlp::PartialMessageStore
onReceiveData	face/face.hpp	/^  signal::Signal<Face, Data> onReceiveData;$/;"	m	class:nfd::Face
onReceiveInterest	face/face.hpp	/^  signal::Signal<Face, Interest> onReceiveInterest;$/;"	m	class:nfd::Face
onReceiveNack	face/face.hpp	/^  signal::Signal<Face, lp::Nack> onReceiveNack;$/;"	m	class:nfd::Face
onRemove	fw/face-table.hpp	/^  signal::Signal<FaceTable, shared_ptr<Face>> onRemove;$/;"	m	class:nfd::FaceTable
onSendData	face/face.hpp	/^  signal::Signal<Face, Data> onSendData;$/;"	m	class:nfd::Face
onSendInterest	face/face.hpp	/^  signal::Signal<Face, Interest> onSendInterest;$/;"	m	class:nfd::Face
onSendNack	face/face.hpp	/^  signal::Signal<Face, lp::Nack> onSendNack;$/;"	m	class:nfd::Face
operator !=	table/fib.hpp	/^Fib::const_iterator::operator!=(const Fib::const_iterator& other) const$/;"	f	class:nfd::Fib::const_iterator
operator !=	table/name-tree.hpp	/^NameTree::const_iterator::operator!=(const NameTree::const_iterator& other) const$/;"	f	class:nfd::NameTree::const_iterator
operator !=	table/pit.hpp	/^Pit::const_iterator::operator!=(const Pit::const_iterator& other) const$/;"	f	class:nfd::Pit::const_iterator
operator !=	table/strategy-choice.hpp	/^StrategyChoice::const_iterator::operator!=(const StrategyChoice::const_iterator& other) const$/;"	f	class:nfd::StrategyChoice::const_iterator
operator ()	table/cs-policy-lru.hpp	/^  operator()(const iterator& a, const iterator& b) const$/;"	f	struct:nfd::cs::lru::EntryItComparator
operator ()	table/cs-policy-priority-fifo.hpp	/^  operator()(const iterator& a, const iterator& b) const$/;"	f	struct:nfd::cs::priority_fifo::EntryItComparator
operator ()	table/cs.hpp	/^    operator()(const EntryImpl& entry) const$/;"	f	struct:nfd::cs::Cs::EntryFromEntryImpl
operator ()	table/measurements.hpp	/^  operator()(const Entry& entry)$/;"	f	class:nfd::measurements::AnyEntry
operator ()	table/measurements.hpp	/^  operator()(const Entry& entry)$/;"	f	class:nfd::measurements::EntryWithStrategyInfo
operator ()	table/name-tree.hpp	/^  operator()(const Entry& entry)$/;"	f	struct:nfd::name_tree::AnyEntry
operator ()	table/name-tree.hpp	/^  operator()(const Entry& entry)$/;"	f	struct:nfd::name_tree::AnyEntrySubTree
operator *	table/fib.hpp	/^Fib::const_iterator::operator*() const$/;"	f	class:nfd::Fib::const_iterator
operator *	table/name-tree.hpp	/^NameTree::const_iterator::operator*() const$/;"	f	class:nfd::NameTree::const_iterator
operator *	table/pit.hpp	/^Pit::const_iterator::operator*() const$/;"	f	class:nfd::Pit::const_iterator
operator *	table/strategy-choice.hpp	/^StrategyChoice::const_iterator::operator*() const$/;"	f	class:nfd::StrategyChoice::const_iterator
operator ++	face/face-counters.hpp	/^  operator++()$/;"	f	class:nfd::PacketCounter
operator ++	table/fib.hpp	/^Fib::const_iterator::operator++()$/;"	f	class:nfd::Fib::const_iterator
operator ++	table/fib.hpp	/^Fib::const_iterator::operator++(int)$/;"	f	class:nfd::Fib::const_iterator
operator ++	table/name-tree.cpp	/^NameTree::const_iterator::operator++()$/;"	f	class:nfd::NameTree::const_iterator
operator ++	table/name-tree.hpp	/^NameTree::const_iterator::operator++(int)$/;"	f	class:nfd::NameTree::const_iterator
operator ++	table/pit.hpp	/^Pit::const_iterator::operator++()$/;"	f	class:nfd::Pit::const_iterator
operator ++	table/pit.hpp	/^Pit::const_iterator::operator++(int)$/;"	f	class:nfd::Pit::const_iterator
operator ++	table/strategy-choice.hpp	/^StrategyChoice::const_iterator::operator++()$/;"	f	class:nfd::StrategyChoice::const_iterator
operator ++	table/strategy-choice.hpp	/^StrategyChoice::const_iterator::operator++(int)$/;"	f	class:nfd::StrategyChoice::const_iterator
operator +=	face/face-counters.hpp	/^  operator+=(rep n)$/;"	f	class:nfd::ByteCounter
operator ->	table/fib.hpp	/^Fib::const_iterator::operator->() const$/;"	f	class:nfd::Fib::const_iterator
operator ->	table/name-tree.hpp	/^NameTree::const_iterator::operator->() const$/;"	f	class:nfd::NameTree::const_iterator
operator ->	table/pit.hpp	/^Pit::const_iterator::operator->() const$/;"	f	class:nfd::Pit::const_iterator
operator ->	table/strategy-choice.hpp	/^StrategyChoice::const_iterator::operator->() const$/;"	f	class:nfd::StrategyChoice::const_iterator
operator <	table/cs-entry-impl.cpp	/^EntryImpl::operator<(const EntryImpl& other) const$/;"	f	class:nfd::cs::EntryImpl
operator <<	face/face.hpp	/^operator<<(std::ostream& os, const face::FaceLogHelper<T>& flh)$/;"	f	namespace:nfd
operator <<	face/link-service.cpp	/^operator<<(std::ostream& os, const FaceLogHelper<LinkService>& flh)$/;"	f	namespace:nfd::face
operator <<	face/link-service.hpp	/^operator<<(std::ostream& os, const FaceLogHelper<T>& flh)$/;"	f	namespace:nfd::face
operator <<	face/lp-face.hpp	/^operator<<(std::ostream& os, const FaceLogHelper<T>& flh)$/;"	f	namespace:nfd::face
operator <<	face/transport.cpp	/^operator<<(std::ostream& os, TransportState state)$/;"	f	namespace:nfd::face
operator <<	face/transport.cpp	/^operator<<(std::ostream& os, const FaceLogHelper<Transport>& flh)$/;"	f	namespace:nfd::face
operator <<	face/transport.hpp	/^operator<<(std::ostream& os, const FaceLogHelper<T>& flh)$/;"	f	namespace:nfd::face
operator ==	table/fib.hpp	/^Fib::const_iterator::operator==(const Fib::const_iterator& other) const$/;"	f	class:nfd::Fib::const_iterator
operator ==	table/name-tree.hpp	/^NameTree::const_iterator::operator==(const NameTree::const_iterator& other) const$/;"	f	class:nfd::NameTree::const_iterator
operator ==	table/pit.hpp	/^Pit::const_iterator::operator==(const Pit::const_iterator& other) const$/;"	f	class:nfd::Pit::const_iterator
operator ==	table/strategy-choice.hpp	/^StrategyChoice::const_iterator::operator==(const StrategyChoice::const_iterator& other) const$/;"	f	class:nfd::StrategyChoice::const_iterator
operator []	face/ndnlp-sequence-generator.hpp	/^SequenceBlock::operator[](size_t pos) const$/;"	f	class:nfd::ndnlp::SequenceBlock
operator rep	face/face-counters.hpp	/^  operator rep() const$/;"	f	class:nfd::ByteCounter
operator rep	face/face-counters.hpp	/^  operator rep() const$/;"	f	class:nfd::PacketCounter
packet	face/transport.hpp	/^    Block packet;$/;"	m	class:nfd::face::Transport::Packet
partialEnumerate	table/name-tree.cpp	/^NameTree::partialEnumerate(const Name& prefix,$/;"	f	class:nfd::NameTree
payload	face/ndnlp-data.hpp	/^  Block payload;$/;"	m	class:nfd::ndnlp::NdnlpData
pcapInit	face/ethernet-face.cpp	/^EthernetFace::pcapInit()$/;"	f	class:nfd::EthernetFace
pcap_t	face/ethernet-face.hpp	/^typedef pcap pcap_t;$/;"	t
pit	table/fib.hpp	/^namespace pit {$/;"	n	namespace:nfd
pit	table/measurements.hpp	/^namespace pit {$/;"	n	namespace:nfd
pit	table/pit-entry.cpp	/^namespace pit {$/;"	n	namespace:nfd	file:
pit	table/pit-entry.hpp	/^namespace pit {$/;"	n	namespace:nfd
pit	table/pit-face-record.cpp	/^namespace pit {$/;"	n	namespace:nfd	file:
pit	table/pit-face-record.hpp	/^namespace pit {$/;"	n	namespace:nfd
pit	table/pit-in-record.cpp	/^namespace pit {$/;"	n	namespace:nfd	file:
pit	table/pit-in-record.hpp	/^namespace pit {$/;"	n	namespace:nfd
pit	table/pit-out-record.cpp	/^namespace pit {$/;"	n	namespace:nfd	file:
pit	table/pit-out-record.hpp	/^namespace pit {$/;"	n	namespace:nfd
pit	table/pit.cpp	/^namespace pit {$/;"	n	namespace:nfd	file:
pit	table/pit.hpp	/^namespace pit {$/;"	n	namespace:nfd
pms	face/ethernet-face.hpp	/^    unique_ptr<ndnlp::PartialMessageStore> pms;$/;"	m	struct:nfd::EthernetFace::Reassembler
predicate_NameTreeEntry_hasFibEntry	table/fib.cpp	/^predicate_NameTreeEntry_hasFibEntry(const name_tree::Entry& entry)$/;"	f	namespace:nfd
predicate_NextHop_eligible	fw/best-route-strategy2.cpp	/^predicate_NextHop_eligible(const shared_ptr<pit::Entry>& pitEntry,$/;"	f	namespace:nfd::fw
predicate_PitEntry_canForwardTo_NextHop	fw/best-route-strategy.cpp	/^predicate_PitEntry_canForwardTo_NextHop(shared_ptr<pit::Entry> pitEntry,$/;"	f	namespace:nfd::fw
prediction	fw/ncc-strategy.hpp	/^    time::microseconds prediction;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
previousFace	fw/ncc-strategy.hpp	/^    weak_ptr<Face> previousFace;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
printModules	main.cpp	/^  printModules(std::ostream& os)$/;"	f	class:nfd::NfdRunner
printUsage	main.cpp	/^  printUsage(std::ostream& os, const std::string& programName)$/;"	f	class:nfd::NfdRunner
priority_fifo	table/cs-policy-priority-fifo.cpp	/^namespace priority_fifo {$/;"	n	namespace:nfd::cs	file:
priority_fifo	table/cs-policy-priority-fifo.hpp	/^namespace priority_fifo {$/;"	n	namespace:nfd::cs
processConfig	mgmt/face-manager.cpp	/^FaceManager::processConfig(const ConfigSection& configSection,$/;"	f	class:nfd::FaceManager
processConfig	mgmt/tables-config-section.cpp	/^TablesConfigSection::processConfig(const ConfigSection& configSection,$/;"	f	class:nfd::TablesConfigSection
processErrorCode	face/datagram-transport.hpp	/^DatagramTransport<T, U>::processErrorCode(const boost::system::error_code& error)$/;"	f	class:nfd::face::DatagramTransport
processErrorCode	face/ethernet-face.cpp	/^EthernetFace::processErrorCode(const boost::system::error_code& error)$/;"	f	class:nfd::EthernetFace
processErrorCode	face/stream-face.hpp	/^StreamFace<T, U>::processErrorCode(const boost::system::error_code& error)$/;"	f	class:nfd::StreamFace
processErrorCode	face/stream-transport.hpp	/^StreamTransport<T>::processErrorCode(const boost::system::error_code& error)$/;"	f	class:nfd::face::StreamTransport
processIncomingPacket	face/ethernet-face.cpp	/^EthernetFace::processIncomingPacket(const pcap_pkthdr* header, const uint8_t* packet)$/;"	f	class:nfd::EthernetFace
processNetworkRegionSection	mgmt/tables-config-section.cpp	/^TablesConfigSection::processNetworkRegionSection(const ConfigSection& configSection,$/;"	f	class:nfd::TablesConfigSection
processSectionEther	mgmt/face-manager.cpp	/^FaceManager::processSectionEther(const ConfigSection& configSection, bool isDryRun,$/;"	f	class:nfd::FaceManager
processSectionTcp	mgmt/face-manager.cpp	/^FaceManager::processSectionTcp(const ConfigSection& configSection, bool isDryRun)$/;"	f	class:nfd::FaceManager
processSectionUdp	mgmt/face-manager.cpp	/^FaceManager::processSectionUdp(const ConfigSection& configSection, bool isDryRun,$/;"	f	class:nfd::FaceManager
processSectionUnix	mgmt/face-manager.cpp	/^FaceManager::processSectionUnix(const ConfigSection& configSection, bool isDryRun)$/;"	f	class:nfd::FaceManager
processSectionWebSocket	mgmt/face-manager.cpp	/^FaceManager::processSectionWebSocket(const ConfigSection& configSection, bool isDryRun)$/;"	f	class:nfd::FaceManager
processStrategyChoiceSection	mgmt/tables-config-section.cpp	/^TablesConfigSection::processStrategyChoiceSection(const ConfigSection& configSection,$/;"	f	class:nfd::TablesConfigSection
prohibitAllIpv4Endpoints	face/tcp-factory.cpp	/^TcpFactory::prohibitAllIpv4Endpoints(uint16_t port)$/;"	f	class:nfd::TcpFactory
prohibitAllIpv4Endpoints	face/udp-factory.cpp	/^UdpFactory::prohibitAllIpv4Endpoints(uint16_t port)$/;"	f	class:nfd::UdpFactory
prohibitAllIpv6Endpoints	face/tcp-factory.cpp	/^TcpFactory::prohibitAllIpv6Endpoints(uint16_t port)$/;"	f	class:nfd::TcpFactory
prohibitAllIpv6Endpoints	face/udp-factory.cpp	/^UdpFactory::prohibitAllIpv6Endpoints(uint16_t port)$/;"	f	class:nfd::UdpFactory
prohibitEndpoint	face/tcp-factory.cpp	/^TcpFactory::prohibitEndpoint(const tcp::Endpoint& endpoint)$/;"	f	class:nfd::TcpFactory
prohibitEndpoint	face/udp-factory.cpp	/^UdpFactory::prohibitEndpoint(const udp::Endpoint& endpoint)$/;"	f	class:nfd::UdpFactory
propagateTimer	fw/ncc-strategy.hpp	/^    scheduler::EventId propagateTimer;$/;"	m	class:nfd::fw::NccStrategy::PitEntryInfo
protocol	face/datagram-transport.hpp	/^  typedef Protocol protocol;$/;"	t	class:nfd::face::DatagramTransport
protocol	face/stream-face.hpp	/^  typedef Protocol protocol;$/;"	t	class:nfd::StreamFace
protocol	face/stream-transport.hpp	/^  typedef Protocol protocol;$/;"	t	class:nfd::face::StreamTransport
queryFaces	mgmt/face-manager.cpp	/^FaceManager::queryFaces(const Name& topPrefix, const Interest& interest,$/;"	f	class:nfd::FaceManager
queueIt	table/cs-policy-priority-fifo.hpp	/^  QueueIt queueIt;$/;"	m	struct:nfd::cs::priority_fifo::EntryInfo
queueType	table/cs-policy-priority-fifo.hpp	/^  QueueType queueType;$/;"	m	struct:nfd::cs::priority_fifo::EntryInfo
reassemble	face/ndnlp-partial-message-store.cpp	/^PartialMessage::reassemble()$/;"	f	class:nfd::ndnlp::PartialMessage
reassembleSingle	face/ndnlp-partial-message-store.cpp	/^PartialMessage::reassembleSingle(const NdnlpData& fragment)$/;"	f	class:nfd::ndnlp::PartialMessage
receive	face/ndnlp-partial-message-store.cpp	/^PartialMessageStore::receive(const NdnlpData& pkt)$/;"	f	class:nfd::ndnlp::PartialMessageStore
receive	face/transport.cpp	/^Transport::receive(Packet&& packet)$/;"	f	class:nfd::face::Transport
receiveData	face/link-service.cpp	/^LinkService::receiveData(const Data& data)$/;"	f	class:nfd::face::LinkService
receiveDatagram	face/datagram-transport.hpp	/^DatagramTransport<T, U>::receiveDatagram(const uint8_t* buffer, size_t nBytesReceived,$/;"	f	class:nfd::face::DatagramTransport
receiveFromLink	face/internal-transport.cpp	/^InternalClientTransport::receiveFromLink(const Block& packet)$/;"	f	class:nfd::face::InternalClientTransport
receiveFromLink	face/internal-transport.cpp	/^InternalForwarderTransport::receiveFromLink(const Block& packet)$/;"	f	class:nfd::face::InternalForwarderTransport
receiveInterest	face/link-service.cpp	/^LinkService::receiveInterest(const Interest& interest)$/;"	f	class:nfd::face::LinkService
receiveNack	face/link-service.cpp	/^LinkService::receiveNack(const ndn::lp::Nack& nack)$/;"	f	class:nfd::face::LinkService
receivePacket	face/link-service.hpp	/^LinkService::receivePacket(Transport::Packet&& packet)$/;"	f	class:nfd::face::LinkService
registerCommandHandler	mgmt/manager-base.hpp	/^ManagerBase::registerCommandHandler(const std::string& verb,$/;"	f	class:nfd::ManagerBase
registerNotificationStream	mgmt/manager-base.cpp	/^ManagerBase::registerNotificationStream(const std::string& verb)$/;"	f	class:nfd::ManagerBase
registerStatusDatasetHandler	mgmt/manager-base.cpp	/^ManagerBase::registerStatusDatasetHandler(const std::string& verb,$/;"	f	class:nfd::ManagerBase
registerStrategy	fw/strategy-registry.hpp	/^registerStrategy()$/;"	f	namespace:nfd::fw
registerStrategyImpl	fw/strategy-registry.cpp	/^registerStrategyImpl(const Name& strategyName, const StrategyCreateFunc& createFunc)$/;"	f	namespace:nfd::fw
rejectPendingInterest	fw/strategy.hpp	/^Strategy::rejectPendingInterest(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::fw::Strategy
reload	main.cpp	/^  reload(const boost::system::error_code& error, int signalNo)$/;"	f	class:nfd::NfdRunner
reloadConfigFile	nfd.cpp	/^Nfd::reloadConfigFile()$/;"	f	class:nfd::Nfd
reloadConfigFileFaceSection	nfd.cpp	/^Nfd::reloadConfigFileFaceSection()$/;"	f	class:nfd::Nfd
remoteEndpoint	face/transport.hpp	/^    EndpointId remoteEndpoint;$/;"	m	class:nfd::face::Transport::Packet
remove	fw/face-table.cpp	/^FaceTable::remove(shared_ptr<Face> face, const std::string& reason)$/;"	f	class:nfd::FaceTable
removeFaceInfo	fw/access-strategy.cpp	/^AccessStrategy::removeFaceInfo(shared_ptr<Face> face)$/;"	f	class:nfd::fw::AccessStrategy
removeNextHop	mgmt/fib-manager.cpp	/^FibManager::removeNextHop(const Name& topPrefix, const Interest& interest,$/;"	f	class:nfd::FibManager
removeNextHop	table/fib-entry.cpp	/^Entry::removeNextHop(shared_ptr<Face> face)$/;"	f	class:nfd::fib::Entry
removeNextHopFromAllEntries	table/fib.cpp	/^Fib::removeNextHopFromAllEntries(shared_ptr<Face> face)$/;"	f	class:nfd::Fib
rep	face/face-counters.hpp	/^  typedef uint64_t rep;$/;"	t	class:nfd::ByteCounter
rep	face/face-counters.hpp	/^  typedef uint64_t rep;$/;"	t	class:nfd::PacketCounter
reset	table/cs-entry.cpp	/^Entry::reset()$/;"	f	class:nfd::cs::Entry
resetRecentUsage	face/datagram-transport.hpp	/^DatagramTransport<T, U>::resetRecentUsage()$/;"	f	class:nfd::face::DatagramTransport
resize	table/name-tree.cpp	/^NameTree::resize(size_t newNBuckets)$/;"	f	class:nfd::NameTree
result_type	table/cs.hpp	/^    typedef const Entry& result_type;$/;"	t	struct:nfd::cs::Cs::EntryFromEntryImpl
rtoTimer	fw/access-strategy.hpp	/^    scheduler::ScopedEventId rtoTimer;$/;"	m	class:nfd::fw::AccessStrategy::PitInfo
rtt	fw/access-strategy.hpp	/^    RttEstimator rtt;$/;"	m	class:nfd::fw::AccessStrategy::FaceInfo
rtt	fw/access-strategy.hpp	/^    RttEstimator rtt;$/;"	m	class:nfd::fw::AccessStrategy::MtInfo
run	main.cpp	/^  run()$/;"	f	class:nfd::NfdRunner
s_emptyEntry	table/fib.cpp	/^const shared_ptr<fib::Entry> Fib::s_emptyEntry = make_shared<fib::Entry>(Name());$/;"	m	class:nfd::Fib	file:
s_emptyEntry	table/fib.hpp	/^  static const shared_ptr<fib::Entry> s_emptyEntry;$/;"	m	class:nfd::Fib
scheduleCleanup	face/ndnlp-partial-message-store.cpp	/^PartialMessageStore::scheduleCleanup(uint64_t messageIdentifier,$/;"	f	class:nfd::ndnlp::PartialMessageStore
send	face/internal-transport.cpp	/^InternalClientTransport::send(const Block& header, const Block& payload)$/;"	f	class:nfd::face::InternalClientTransport
send	face/internal-transport.cpp	/^InternalClientTransport::send(const Block& wire)$/;"	f	class:nfd::face::InternalClientTransport
send	face/stream-face.hpp	/^  send(StreamFace<Protocol, FaceBase>& face, const Packet& packet)$/;"	f	struct:nfd::StreamFaceSenderImpl
send	face/stream-face.hpp	/^  send(StreamFace<Protocol, LocalFace>& face, const Packet& packet)$/;"	f	struct:nfd::StreamFaceSenderImpl
send	face/transport.cpp	/^Transport::send(Packet&& packet)$/;"	f	class:nfd::face::Transport
sendData	face/ethernet-face.cpp	/^EthernetFace::sendData(const Data& data)$/;"	f	class:nfd::EthernetFace
sendData	face/link-service.cpp	/^LinkService::sendData(const Data& data)$/;"	f	class:nfd::face::LinkService
sendData	face/lp-face-wrapper.hpp	/^LpFaceWrapper::sendData(const Data& data)$/;"	f	class:nfd::face::LpFaceWrapper
sendData	face/lp-face.hpp	/^LpFace::sendData(const Data& data)$/;"	f	class:nfd::face::LpFace
sendData	face/null-face.cpp	/^NullFace::sendData(const Data& data)$/;"	f	class:nfd::NullFace
sendData	face/stream-face.hpp	/^StreamFace<T, U>::sendData(const Data& data)$/;"	f	class:nfd::StreamFace
sendData	face/websocket-face.cpp	/^WebSocketFace::sendData(const Data& data)$/;"	f	class:nfd::WebSocketFace
sendFromQueue	face/stream-face.hpp	/^StreamFace<T, U>::sendFromQueue()$/;"	f	class:nfd::StreamFace
sendFromQueue	face/stream-transport.hpp	/^StreamTransport<T>::sendFromQueue()$/;"	f	class:nfd::face::StreamTransport
sendInterest	face/ethernet-face.cpp	/^EthernetFace::sendInterest(const Interest& interest)$/;"	f	class:nfd::EthernetFace
sendInterest	face/link-service.cpp	/^LinkService::sendInterest(const Interest& interest)$/;"	f	class:nfd::face::LinkService
sendInterest	face/lp-face-wrapper.hpp	/^LpFaceWrapper::sendInterest(const Interest& interest)$/;"	f	class:nfd::face::LpFaceWrapper
sendInterest	face/lp-face.hpp	/^LpFace::sendInterest(const Interest& interest)$/;"	f	class:nfd::face::LpFace
sendInterest	face/null-face.cpp	/^NullFace::sendInterest(const Interest& interest)$/;"	f	class:nfd::NullFace
sendInterest	face/stream-face.hpp	/^StreamFace<T, U>::sendInterest(const Interest& interest)$/;"	f	class:nfd::StreamFace
sendInterest	face/websocket-face.cpp	/^WebSocketFace::sendInterest(const Interest& interest)$/;"	f	class:nfd::WebSocketFace
sendInterest	fw/strategy.hpp	/^Strategy::sendInterest(shared_ptr<pit::Entry> pitEntry,$/;"	f	class:nfd::fw::Strategy
sendNack	face/face.hpp	/^  sendNack(const ndn::lp::Nack& nack)$/;"	f	class:nfd::Face
sendNack	face/link-service.cpp	/^LinkService::sendNack(const ndn::lp::Nack& nack)$/;"	f	class:nfd::face::LinkService
sendNack	face/lp-face-wrapper.hpp	/^LpFaceWrapper::sendNack(const lp::Nack& nack)$/;"	f	class:nfd::face::LpFaceWrapper
sendNack	face/lp-face.hpp	/^LpFace::sendNack(const lp::Nack& nack)$/;"	f	class:nfd::face::LpFace
sendNack	fw/strategy.hpp	/^Strategy::sendNack(shared_ptr<pit::Entry> pitEntry, const Face& outFace,$/;"	f	class:nfd::fw::Strategy
sendNacks	fw/strategy.cpp	/^Strategy::sendNacks(shared_ptr<pit::Entry> pitEntry, const lp::NackHeader& header,$/;"	f	class:nfd::fw::Strategy
sendPacket	face/ethernet-face.cpp	/^EthernetFace::sendPacket(const ndn::Block& block)$/;"	f	class:nfd::EthernetFace
sendPacket	face/link-service.hpp	/^LinkService::sendPacket(Transport::Packet&& packet)$/;"	f	class:nfd::face::LinkService
sendPing	face/websocket-channel.cpp	/^WebSocketChannel::sendPing(websocketpp::connection_hdl hdl)$/;"	f	class:nfd::WebSocketChannel
sendToLastNexthop	fw/access-strategy.cpp	/^AccessStrategy::sendToLastNexthop(const Face& inFace, shared_ptr<pit::Entry> pitEntry, MtInfo& mi,$/;"	f	class:nfd::fw::AccessStrategy
seq	face/ndnlp-data.hpp	/^  uint64_t seq;$/;"	m	class:nfd::ndnlp::NdnlpData
set	face/face-counters.hpp	/^  set(rep value)$/;"	f	class:nfd::ByteCounter
set	face/face-counters.hpp	/^  set(rep value)$/;"	f	class:nfd::PacketCounter
setConfigFile	mgmt/command-validator.cpp	/^CommandValidator::setConfigFile(ConfigFile& configFile)$/;"	f	class:nfd::CommandValidator
setConfigFile	mgmt/face-manager.cpp	/^FaceManager::setConfigFile(ConfigFile& configFile)$/;"	f	class:nfd::FaceManager
setConfigFile	mgmt/general-config-section.cpp	/^setConfigFile(ConfigFile& configFile)$/;"	f	namespace:nfd::general
setConfigFile	mgmt/tables-config-section.cpp	/^TablesConfigSection::setConfigFile(ConfigFile& configFile)$/;"	f	class:nfd::TablesConfigSection
setCost	table/fib-nexthop.cpp	/^NextHop::setCost(uint64_t cost)$/;"	f	class:nfd::fib::NextHop
setCs	table/cs-policy.hpp	/^Policy::setCs(Cs *cs)$/;"	f	class:nfd::cs::Policy
setData	table/cs-entry.cpp	/^Entry::setData(shared_ptr<const Data> data, bool isUnsolicited)$/;"	f	class:nfd::cs::Entry
setData	table/cs-entry.hpp	/^  setData(const Data& data, bool isUnsolicited)$/;"	f	class:nfd::cs::Entry
setDefaultStrategy	table/strategy-choice.cpp	/^StrategyChoice::setDefaultStrategy(shared_ptr<Strategy> strategy)$/;"	f	class:nfd::StrategyChoice
setDescription	face/face.hpp	/^Face::setDescription(const std::string& description)$/;"	f	class:nfd::Face
setFaceAndLinkService	face/transport.cpp	/^Transport::setFaceAndLinkService(LpFace& face, LinkService& service)$/;"	f	class:nfd::face::Transport
setFaceAndTransport	face/link-service.cpp	/^LinkService::setFaceAndTransport(LpFace& face, Transport& transport)$/;"	f	class:nfd::face::LinkService
setFaceForSelfRegistration	mgmt/fib-manager.cpp	/^FibManager::setFaceForSelfRegistration(const Interest& request, ControlParameters& parameters)$/;"	f	class:nfd::FibManager
setFibEntry	table/name-tree-entry.cpp	/^Entry::setFibEntry(shared_ptr<fib::Entry> fibEntry)$/;"	f	class:nfd::name_tree::Entry
setHash	table/name-tree-entry.hpp	/^Entry::setHash(size_t hash)$/;"	f	class:nfd::name_tree::Entry
setId	face/face.hpp	/^Face::setId(FaceId faceId)$/;"	f	class:nfd::Face
setId	face/lp-face-wrapper.cpp	/^LpFaceWrapper::setId(nfd::FaceId faceId)$/;"	f	class:nfd::face::LpFaceWrapper
setId	face/lp-face.hpp	/^LpFace::setId(FaceId id)$/;"	f	class:nfd::face::LpFace
setIncomingNack	table/pit-out-record.cpp	/^OutRecord::setIncomingNack(const lp::Nack& nack)$/;"	f	class:nfd::pit::OutRecord
setLimit	table/cs-policy.cpp	/^Policy::setLimit(size_t nMaxEntries)$/;"	f	class:nfd::cs::Policy
setLimit	table/cs.cpp	/^Cs::setLimit(size_t nMaxPackets)$/;"	f	class:nfd::cs::Cs
setLinkType	face/transport.hpp	/^Transport::setLinkType(ndn::nfd::LinkType linkType)$/;"	f	class:nfd::face::Transport
setLocalControlHeaderFeature	face/local-face.hpp	/^LocalFace::setLocalControlHeaderFeature(LocalControlFeature feature, bool enabled\/* = true*\/)$/;"	f	class:nfd::LocalFace
setLocalUri	face/transport.hpp	/^Transport::setLocalUri(const FaceUri& uri)$/;"	f	class:nfd::face::Transport
setMeasurementsEntry	table/name-tree-entry.cpp	/^Entry::setMeasurementsEntry(shared_ptr<measurements::Entry> measurementsEntry)$/;"	f	class:nfd::name_tree::Entry
setMtu	face/transport.hpp	/^Transport::setMtu(ssize_t mtu)$/;"	f	class:nfd::face::Transport
setOptions	face/generic-link-service.hpp	/^GenericLinkService::setOptions(const GenericLinkService::Options& options)$/;"	f	class:nfd::face::GenericLinkService
setPacketFilter	face/ethernet-face.cpp	/^EthernetFace::setPacketFilter(const char* filterString)$/;"	f	class:nfd::EthernetFace
setParent	table/name-tree-entry.hpp	/^Entry::setParent(shared_ptr<Entry> parent)$/;"	f	class:nfd::name_tree::Entry
setPersistency	face/face.hpp	/^Face::setPersistency(ndn::nfd::FacePersistency persistency)$/;"	f	class:nfd::Face
setPersistency	face/lp-face-wrapper.cpp	/^LpFaceWrapper::setPersistency(ndn::nfd::FacePersistency persistency)$/;"	f	class:nfd::face::LpFaceWrapper
setPersistency	face/lp-face.hpp	/^LpFace::setPersistency(ndn::nfd::FacePersistency persistency)$/;"	f	class:nfd::face::LpFace
setPersistency	face/transport.hpp	/^Transport::setPersistency(ndn::nfd::FacePersistency persistency)$/;"	f	class:nfd::face::Transport
setPingEventId	face/websocket-face.hpp	/^  setPingEventId(scheduler::EventId& id)$/;"	f	class:nfd::WebSocketFace
setPingInterval	face/websocket-channel.cpp	/^WebSocketChannel::setPingInterval(time::milliseconds interval)$/;"	f	class:nfd::WebSocketChannel
setPolicy	table/cs.cpp	/^Cs::setPolicy(unique_ptr<Policy> policy)$/;"	f	class:nfd::cs::Cs
setPolicyImpl	table/cs.cpp	/^Cs::setPolicyImpl(unique_ptr<Policy>& policy)$/;"	f	class:nfd::cs::Cs
setPongTimeout	face/websocket-channel.cpp	/^WebSocketChannel::setPongTimeout(time::milliseconds timeout)$/;"	f	class:nfd::WebSocketChannel
setRemoteUri	face/transport.hpp	/^Transport::setRemoteUri(const FaceUri& uri)$/;"	f	class:nfd::face::Transport
setScope	face/transport.hpp	/^Transport::setScope(ndn::nfd::FaceScope scope)$/;"	f	class:nfd::face::Transport
setState	face/transport.cpp	/^Transport::setState(TransportState newState)$/;"	f	class:nfd::face::Transport
setStragglerTimer	fw/forwarder.cpp	/^Forwarder::setStragglerTimer(shared_ptr<pit::Entry> pitEntry, bool isSatisfied,$/;"	f	class:nfd::Forwarder
setStrategy	mgmt/strategy-choice-manager.cpp	/^StrategyChoiceManager::setStrategy(const Name& topPrefix, const Interest& interest,$/;"	f	class:nfd::StrategyChoiceManager
setStrategy	table/strategy-choice-entry.hpp	/^Entry::setStrategy(fw::Strategy& strategy)$/;"	f	class:nfd::strategy_choice::Entry
setStrategyChoiceEntry	table/name-tree-entry.cpp	/^Entry::setStrategyChoiceEntry(shared_ptr<strategy_choice::Entry> strategyChoiceEntry)$/;"	f	class:nfd::name_tree::Entry
setStrategyInfo	table/strategy-info-host.hpp	/^StrategyInfoHost::setStrategyInfo(shared_ptr<T> item)$/;"	f	class:nfd::StrategyInfoHost
setUnsatisfyTimer	fw/forwarder.cpp	/^Forwarder::setUnsatisfyTimer(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::Forwarder
setUri	face/channel.cpp	/^Channel::setUri(const FaceUri& uri)$/;"	f	class:nfd::Channel
shutdownSocket	face/stream-face.hpp	/^StreamFace<T, U>::shutdownSocket()$/;"	f	class:nfd::StreamFace
size	face/tcp-channel.cpp	/^TcpChannel::size() const$/;"	f	class:nfd::TcpChannel
size	face/udp-channel.cpp	/^UdpChannel::size() const$/;"	f	class:nfd::UdpChannel
size	face/websocket-channel.cpp	/^WebSocketChannel::size() const$/;"	f	class:nfd::WebSocketChannel
size	fw/face-table.cpp	/^FaceTable::size() const$/;"	f	class:nfd::FaceTable
size	table/cs.hpp	/^  size() const$/;"	f	class:nfd::cs::Cs
size	table/dead-nonce-list.cpp	/^DeadNonceList::size() const$/;"	f	class:nfd::DeadNonceList
size	table/fib.hpp	/^Fib::size() const$/;"	f	class:nfd::Fib
size	table/measurements.hpp	/^Measurements::size() const$/;"	f	class:nfd::Measurements
size	table/name-tree.hpp	/^NameTree::size() const$/;"	f	class:nfd::NameTree
size	table/pit.hpp	/^Pit::size() const$/;"	f	class:nfd::Pit
size	table/strategy-choice.hpp	/^StrategyChoice::size() const$/;"	f	class:nfd::StrategyChoice
slice	face/ndnlp-slicer.cpp	/^Slicer::slice(const Block& block)$/;"	f	class:nfd::ndnlp::Slicer
sortNextHops	table/fib-entry.cpp	/^Entry::sortNextHops()$/;"	f	class:nfd::fib::Entry
startProcessData	fw/forwarder.cpp	/^Forwarder::startProcessData(Face& face, const Data& data)$/;"	f	class:nfd::Forwarder
startProcessInterest	fw/forwarder.cpp	/^Forwarder::startProcessInterest(Face& face, const Interest& interest)$/;"	f	class:nfd::Forwarder
startProcessNack	fw/forwarder.cpp	/^Forwarder::startProcessNack(Face& face, const lp::Nack& nack)$/;"	f	class:nfd::Forwarder
strategy_choice	table/strategy-choice-entry.cpp	/^namespace strategy_choice {$/;"	n	namespace:nfd	file:
strategy_choice	table/strategy-choice-entry.hpp	/^namespace strategy_choice {$/;"	n	namespace:nfd
suppressionInterval	fw/retx-suppression-exponential.cpp	/^  Duration suppressionInterval;$/;"	m	class:nfd::fw::RetxSuppressionExponential::PitInfo	file:
tcp	face/tcp-channel.hpp	/^namespace tcp {$/;"	n	namespace:nfd
terminate	main.cpp	/^  terminate(const boost::system::error_code& error, int signalNo)$/;"	f	class:nfd::NfdRunner
timeoutOnBestFace	fw/ncc-strategy.cpp	/^NccStrategy::timeoutOnBestFace(weak_ptr<pit::Entry> pitEntryWeak)$/;"	f	class:nfd::fw::NccStrategy
tlv	face/ndnlp-tlv.hpp	/^namespace tlv {$/;"	n	namespace:nfd
udp	face/udp-channel.hpp	/^namespace udp {$/;"	n	namespace:nfd
udp	face/udp-protocol.cpp	/^namespace udp {$/;"	n	namespace:nfd	file:
udp	face/udp-protocol.hpp	/^namespace udp {$/;"	n	namespace:nfd
unix_stream	face/unix-stream-channel.hpp	/^namespace unix_stream {$/;"	n	namespace:nfd
unsetStrategy	mgmt/strategy-choice-manager.cpp	/^StrategyChoiceManager::unsetStrategy(const Name& topPrefix, const Interest& interest,$/;"	f	class:nfd::StrategyChoiceManager
unsetUnsolicited	table/cs-entry-impl.cpp	/^EntryImpl::unsetUnsolicited()$/;"	f	class:nfd::cs::EntryImpl
update	table/pit-face-record.cpp	/^FaceRecord::update(const Interest& interest)$/;"	f	class:nfd::pit::FaceRecord
update	table/pit-in-record.cpp	/^InRecord::update(const Interest& interest)$/;"	f	class:nfd::pit::InRecord
updateBestFace	fw/ncc-strategy.cpp	/^NccStrategy::MeasurementsEntryInfo::updateBestFace(const Face& face) {$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
updateMeasurements	fw/access-strategy.cpp	/^AccessStrategy::updateMeasurements(const Face& inFace, const Data& data,$/;"	f	class:nfd::fw::AccessStrategy
updateStaleTime	table/cs-entry.cpp	/^Entry::updateStaleTime()$/;"	f	class:nfd::cs::Entry
validate	mgmt/command-validator.hpp	/^CommandValidator::validate(const Interest& interest,$/;"	f	class:nfd::CommandValidator
validateParameters	mgmt/manager-base.cpp	/^ManagerBase::validateParameters(const nfd::ControlCommand& command, const ndn::mgmt::ControlParameters& parameters)$/;"	f	class:nfd::ManagerBase
validateSocket	face/stream-face.hpp	/^  validateSocket(const typename Protocol::socket& socket)$/;"	f	struct:nfd::StreamFaceValidator
validateSocket	face/tcp-face.hpp	/^  validateSocket(const TcpLocalFace::protocol::socket& socket)$/;"	f	struct:nfd::StreamFaceValidator
violatesScope	table/pit-entry.cpp	/^Entry::violatesScope(const Face& face) const$/;"	f	class:nfd::pit::Entry
websocket	face/websocket-channel.hpp	/^namespace websocket {$/;"	n	namespace:nfd
websocket	face/websocket-face.hpp	/^namespace websocket {$/;"	n	namespace:nfd
~AccessStrategy	fw/access-strategy.cpp	/^AccessStrategy::~AccessStrategy()$/;"	f	class:nfd::fw::AccessStrategy
~BestRouteStrategy	fw/best-route-strategy.cpp	/^BestRouteStrategy::~BestRouteStrategy()$/;"	f	class:nfd::fw::BestRouteStrategy
~Channel	face/channel.cpp	/^Channel::~Channel()$/;"	f	class:nfd::Channel
~ClientControlStrategy	fw/client-control-strategy.cpp	/^ClientControlStrategy::~ClientControlStrategy()$/;"	f	class:nfd::fw::ClientControlStrategy
~CommandValidator	mgmt/command-validator.cpp	/^CommandValidator::~CommandValidator()$/;"	f	class:nfd::CommandValidator
~DeadNonceList	table/dead-nonce-list.cpp	/^DeadNonceList::~DeadNonceList()$/;"	f	class:nfd::DeadNonceList
~Entry	table/name-tree-entry.cpp	/^Entry::~Entry()$/;"	f	class:nfd::name_tree::Entry
~Face	face/face.cpp	/^Face::~Face()$/;"	f	class:nfd::Face
~FaceTable	fw/face-table.cpp	/^FaceTable::~FaceTable()$/;"	f	class:nfd::FaceTable
~Fib	table/fib.cpp	/^Fib::~Fib()$/;"	f	class:nfd::Fib
~Forwarder	fw/forwarder.cpp	/^Forwarder::~Forwarder()$/;"	f	class:nfd::Forwarder
~LinkService	face/link-service.cpp	/^LinkService::~LinkService()$/;"	f	class:nfd::face::LinkService
~MeasurementsAccessor	table/measurements-accessor.cpp	/^MeasurementsAccessor::~MeasurementsAccessor()$/;"	f	class:nfd::MeasurementsAccessor
~NameTree	table/name-tree.cpp	/^NameTree::~NameTree()$/;"	f	class:nfd::NameTree
~NccStrategy	fw/ncc-strategy.cpp	/^NccStrategy::~NccStrategy()$/;"	f	class:nfd::fw::NccStrategy
~Nfd	nfd.cpp	/^Nfd::~Nfd()$/;"	f	class:nfd::Nfd
~Node	table/name-tree-entry.cpp	/^Node::~Node()$/;"	f	class:nfd::name_tree::Node
~Pit	table/pit.cpp	/^Pit::~Pit()$/;"	f	class:nfd::Pit
~PitEntryInfo	fw/ncc-strategy.cpp	/^NccStrategy::PitEntryInfo::~PitEntryInfo()$/;"	f	class:nfd::fw::NccStrategy::PitEntryInfo
~Policy	table/cs-policy.cpp	/^Policy::~Policy()$/;"	f	class:nfd::cs::Policy
~PriorityFifoPolicy	table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::~PriorityFifoPolicy()$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
~Slicer	face/ndnlp-slicer.cpp	/^Slicer::~Slicer()$/;"	f	class:nfd::ndnlp::Slicer
~Strategy	fw/strategy.cpp	/^Strategy::~Strategy()$/;"	f	class:nfd::fw::Strategy
~StrategyInfo	fw/strategy-info.hpp	/^StrategyInfo::~StrategyInfo()$/;"	f	class:nfd::fw::StrategyInfo
~Transport	face/transport.cpp	/^Transport::~Transport()$/;"	f	class:nfd::face::Transport
~UnixStreamChannel	face/unix-stream-channel.cpp	/^UnixStreamChannel::~UnixStreamChannel()$/;"	f	class:nfd::UnixStreamChannel
~const_iterator	table/fib.hpp	/^Fib::const_iterator::~const_iterator()$/;"	f	class:nfd::Fib::const_iterator
~const_iterator	table/name-tree.hpp	/^inline NameTree::const_iterator::~const_iterator()$/;"	f	class:nfd::NameTree::const_iterator
~const_iterator	table/pit.hpp	/^Pit::const_iterator::~const_iterator()$/;"	f	class:nfd::Pit::const_iterator
~const_iterator	table/strategy-choice.hpp	/^StrategyChoice::const_iterator::~const_iterator()$/;"	f	class:nfd::StrategyChoice::const_iterator
